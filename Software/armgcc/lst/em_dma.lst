ARM GAS  /tmp/cclZCIt2.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"em_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              		.file 1 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/cclZCIt2.s 			page 2


  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
ARM GAS  /tmp/cclZCIt2.s 			page 3


  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
ARM GAS  /tmp/cclZCIt2.s 			page 4


 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
ARM GAS  /tmp/cclZCIt2.s 			page 5


 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
ARM GAS  /tmp/cclZCIt2.s 			page 6


 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 7


 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 8


 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
ARM GAS  /tmp/cclZCIt2.s 			page 9


 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
ARM GAS  /tmp/cclZCIt2.s 			page 10


 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
ARM GAS  /tmp/cclZCIt2.s 			page 11


 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /tmp/cclZCIt2.s 			page 12


 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
ARM GAS  /tmp/cclZCIt2.s 			page 13


 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
ARM GAS  /tmp/cclZCIt2.s 			page 14


 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 15


 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
ARM GAS  /tmp/cclZCIt2.s 			page 16


 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
ARM GAS  /tmp/cclZCIt2.s 			page 17


 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 18


 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
ARM GAS  /tmp/cclZCIt2.s 			page 19


1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
ARM GAS  /tmp/cclZCIt2.s 			page 20


1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 21


1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cclZCIt2.s 			page 22


1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/cclZCIt2.s 			page 23


1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
ARM GAS  /tmp/cclZCIt2.s 			page 24


1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
  26              		.loc 1 1324 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              		.cfi_def_cfa_offset 8
  33 0002 0346     		mov	r3, r0
  34 0004 8DF80730 		strb	r3, [sp, #7]
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  35              		.loc 1 1325 0
  36 0008 074B     		ldr	r3, .L2
  37 000a 9DF90720 		ldrsb	r2, [sp, #7]
  38 000e 5209     		lsrs	r2, r2, #5
  39 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  40 0014 01F01F01 		and	r1, r1, #31
  41 0018 0120     		movs	r0, #1
  42 001a 00FA01F1 		lsl	r1, r0, r1
  43 001e 43F82210 		str	r1, [r3, r2, lsl #2]
1326:../CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/cclZCIt2.s 			page 25


  44              		.loc 1 1326 0
  45 0022 02B0     		add	sp, sp, #8
  46              		@ sp needed
  47 0024 7047     		bx	lr
  48              	.L3:
  49 0026 00BF     		.align	2
  50              	.L2:
  51 0028 00E100E0 		.word	-536813312
  52              		.cfi_endproc
  53              	.LFE41:
  55              		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  56              		.align	2
  57              		.thumb
  58              		.thumb_func
  60              	NVIC_DisableIRQ:
  61              	.LFB42:
1327:../CMSIS/Include/core_cm3.h **** 
1328:../CMSIS/Include/core_cm3.h **** 
1329:../CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1330:../CMSIS/Include/core_cm3.h **** 
1331:../CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:../CMSIS/Include/core_cm3.h **** 
1333:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:../CMSIS/Include/core_cm3.h ****  */
1335:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:../CMSIS/Include/core_cm3.h **** {
  62              		.loc 1 1336 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 82B0     		sub	sp, sp, #8
  68              		.cfi_def_cfa_offset 8
  69 0002 0346     		mov	r3, r0
  70 0004 8DF80730 		strb	r3, [sp, #7]
1337:../CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  71              		.loc 1 1337 0
  72 0008 074B     		ldr	r3, .L5
  73 000a 9DF90720 		ldrsb	r2, [sp, #7]
  74 000e 5209     		lsrs	r2, r2, #5
  75 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  76 0014 01F01F01 		and	r1, r1, #31
  77 0018 0120     		movs	r0, #1
  78 001a 00FA01F1 		lsl	r1, r0, r1
  79 001e 2032     		adds	r2, r2, #32
  80 0020 43F82210 		str	r1, [r3, r2, lsl #2]
1338:../CMSIS/Include/core_cm3.h **** }
  81              		.loc 1 1338 0
  82 0024 02B0     		add	sp, sp, #8
  83              		@ sp needed
  84 0026 7047     		bx	lr
  85              	.L6:
  86              		.align	2
  87              	.L5:
  88 0028 00E100E0 		.word	-536813312
  89              		.cfi_endproc
  90              	.LFE42:
ARM GAS  /tmp/cclZCIt2.s 			page 26


  92              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  97              	NVIC_ClearPendingIRQ:
  98              	.LFB45:
1339:../CMSIS/Include/core_cm3.h **** 
1340:../CMSIS/Include/core_cm3.h **** 
1341:../CMSIS/Include/core_cm3.h **** /** \brief  Get Pending Interrupt
1342:../CMSIS/Include/core_cm3.h **** 
1343:../CMSIS/Include/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1344:../CMSIS/Include/core_cm3.h ****     for the specified interrupt.
1345:../CMSIS/Include/core_cm3.h **** 
1346:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1347:../CMSIS/Include/core_cm3.h **** 
1348:../CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not pending.
1349:../CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is pending.
1350:../CMSIS/Include/core_cm3.h ****  */
1351:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1352:../CMSIS/Include/core_cm3.h **** {
1353:../CMSIS/Include/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1354:../CMSIS/Include/core_cm3.h **** }
1355:../CMSIS/Include/core_cm3.h **** 
1356:../CMSIS/Include/core_cm3.h **** 
1357:../CMSIS/Include/core_cm3.h **** /** \brief  Set Pending Interrupt
1358:../CMSIS/Include/core_cm3.h **** 
1359:../CMSIS/Include/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1360:../CMSIS/Include/core_cm3.h **** 
1361:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1362:../CMSIS/Include/core_cm3.h ****  */
1363:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1364:../CMSIS/Include/core_cm3.h **** {
1365:../CMSIS/Include/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1366:../CMSIS/Include/core_cm3.h **** }
1367:../CMSIS/Include/core_cm3.h **** 
1368:../CMSIS/Include/core_cm3.h **** 
1369:../CMSIS/Include/core_cm3.h **** /** \brief  Clear Pending Interrupt
1370:../CMSIS/Include/core_cm3.h **** 
1371:../CMSIS/Include/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1372:../CMSIS/Include/core_cm3.h **** 
1373:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1374:../CMSIS/Include/core_cm3.h ****  */
1375:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1376:../CMSIS/Include/core_cm3.h **** {
  99              		.loc 1 1376 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 8
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104 0000 82B0     		sub	sp, sp, #8
 105              		.cfi_def_cfa_offset 8
 106 0002 0346     		mov	r3, r0
 107 0004 8DF80730 		strb	r3, [sp, #7]
1377:../CMSIS/Include/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 108              		.loc 1 1377 0
 109 0008 074B     		ldr	r3, .L8
 110 000a 9DF90720 		ldrsb	r2, [sp, #7]
ARM GAS  /tmp/cclZCIt2.s 			page 27


 111 000e 5209     		lsrs	r2, r2, #5
 112 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 113 0014 01F01F01 		and	r1, r1, #31
 114 0018 0120     		movs	r0, #1
 115 001a 00FA01F1 		lsl	r1, r0, r1
 116 001e 6032     		adds	r2, r2, #96
 117 0020 43F82210 		str	r1, [r3, r2, lsl #2]
1378:../CMSIS/Include/core_cm3.h **** }
 118              		.loc 1 1378 0
 119 0024 02B0     		add	sp, sp, #8
 120              		@ sp needed
 121 0026 7047     		bx	lr
 122              	.L9:
 123              		.align	2
 124              	.L8:
 125 0028 00E100E0 		.word	-536813312
 126              		.cfi_endproc
 127              	.LFE45:
 129              		.section	.text.BITBAND_Peripheral,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
 134              	BITBAND_Peripheral:
 135              	.LFB57:
 136              		.file 2 "../emlib/inc/em_bitband.h"
   1:../emlib/inc/em_bitband.h **** /***************************************************************************//**
   2:../emlib/inc/em_bitband.h ****  * @file
   3:../emlib/inc/em_bitband.h ****  * @brief Bitband Peripheral API
   4:../emlib/inc/em_bitband.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_bitband.h ****  * @version 3.20.2
   6:../emlib/inc/em_bitband.h ****  *******************************************************************************
   7:../emlib/inc/em_bitband.h ****  * @section License
   8:../emlib/inc/em_bitband.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_bitband.h ****  *******************************************************************************
  10:../emlib/inc/em_bitband.h ****  *
  11:../emlib/inc/em_bitband.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_bitband.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_bitband.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_bitband.h ****  *
  15:../emlib/inc/em_bitband.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_bitband.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_bitband.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_bitband.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_bitband.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_bitband.h ****  *
  21:../emlib/inc/em_bitband.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_bitband.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_bitband.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_bitband.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_bitband.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_bitband.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_bitband.h ****  *
  28:../emlib/inc/em_bitband.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_bitband.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_bitband.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_bitband.h ****  *
  32:../emlib/inc/em_bitband.h ****  ******************************************************************************/
ARM GAS  /tmp/cclZCIt2.s 			page 28


  33:../emlib/inc/em_bitband.h **** #ifndef __EM_BITBAND_H
  34:../emlib/inc/em_bitband.h **** #define __EM_BITBAND_H
  35:../emlib/inc/em_bitband.h **** 
  36:../emlib/inc/em_bitband.h **** #include "em_device.h"
  37:../emlib/inc/em_bitband.h **** #ifdef __cplusplus
  38:../emlib/inc/em_bitband.h **** extern "C" {
  39:../emlib/inc/em_bitband.h **** #endif
  40:../emlib/inc/em_bitband.h **** 
  41:../emlib/inc/em_bitband.h **** /***************************************************************************//**
  42:../emlib/inc/em_bitband.h ****  * @addtogroup EM_Library
  43:../emlib/inc/em_bitband.h ****  * @{
  44:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  45:../emlib/inc/em_bitband.h **** 
  46:../emlib/inc/em_bitband.h **** /***************************************************************************//**
  47:../emlib/inc/em_bitband.h ****  * @addtogroup BITBAND
  48:../emlib/inc/em_bitband.h ****  * @brief BITBAND Peripheral API
  49:../emlib/inc/em_bitband.h ****  * @{
  50:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  51:../emlib/inc/em_bitband.h **** 
  52:../emlib/inc/em_bitband.h **** /***************************************************************************//**
  53:../emlib/inc/em_bitband.h ****  * @brief
  54:../emlib/inc/em_bitband.h ****  *   Perform bit-band operation on peripheral memory location.
  55:../emlib/inc/em_bitband.h ****  *
  56:../emlib/inc/em_bitband.h ****  * @details
  57:../emlib/inc/em_bitband.h ****  *   Bit-banding provides atomic read-modify-write cycle for single bit
  58:../emlib/inc/em_bitband.h ****  *   modification. Please refer to the reference manual for further details
  59:../emlib/inc/em_bitband.h ****  *   about bit-banding.
  60:../emlib/inc/em_bitband.h ****  *
  61:../emlib/inc/em_bitband.h ****  * @note
  62:../emlib/inc/em_bitband.h ****  *   This function is only atomic on cores which fully support bitbanding.
  63:../emlib/inc/em_bitband.h ****  *
  64:../emlib/inc/em_bitband.h ****  * @param[in] addr Peripheral address location to modify bit in.
  65:../emlib/inc/em_bitband.h ****  *
  66:../emlib/inc/em_bitband.h ****  * @param[in] bit Bit position to modify, 0-31.
  67:../emlib/inc/em_bitband.h ****  *
  68:../emlib/inc/em_bitband.h ****  * @param[in] val Value to set bit to, 0 or 1.
  69:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  70:../emlib/inc/em_bitband.h **** __STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
  71:../emlib/inc/em_bitband.h ****                                         uint32_t bit,
  72:../emlib/inc/em_bitband.h ****                                         uint32_t val)
  73:../emlib/inc/em_bitband.h **** {
 137              		.loc 2 73 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 24
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 86B0     		sub	sp, sp, #24
 143              		.cfi_def_cfa_offset 24
 144 0002 0390     		str	r0, [sp, #12]
 145 0004 0291     		str	r1, [sp, #8]
 146 0006 0192     		str	r2, [sp, #4]
  74:../emlib/inc/em_bitband.h **** #if defined(BITBAND_PER_BASE)
  75:../emlib/inc/em_bitband.h ****   uint32_t tmp =
  76:../emlib/inc/em_bitband.h ****     BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
 147              		.loc 2 76 0
 148 0008 039B     		ldr	r3, [sp, #12]
 149 000a 03F10473 		add	r3, r3, #34603008
ARM GAS  /tmp/cclZCIt2.s 			page 29


 150 000e DA00     		lsls	r2, r3, #3
 151 0010 029B     		ldr	r3, [sp, #8]
 152 0012 1344     		add	r3, r3, r2
  75:../emlib/inc/em_bitband.h ****   uint32_t tmp =
 153              		.loc 2 75 0
 154 0014 9B00     		lsls	r3, r3, #2
 155 0016 0593     		str	r3, [sp, #20]
  77:../emlib/inc/em_bitband.h **** 
  78:../emlib/inc/em_bitband.h ****   *((volatile uint32_t *)tmp) = (uint32_t)val;
 156              		.loc 2 78 0
 157 0018 059B     		ldr	r3, [sp, #20]
 158 001a 019A     		ldr	r2, [sp, #4]
 159 001c 1A60     		str	r2, [r3]
  79:../emlib/inc/em_bitband.h **** #else
  80:../emlib/inc/em_bitband.h ****   uint32_t tmp = *addr;
  81:../emlib/inc/em_bitband.h ****   /* Make sure val is not more than 1, because we only want to set one bit. */
  82:../emlib/inc/em_bitband.h ****   val &= 0x1;
  83:../emlib/inc/em_bitband.h ****   *addr = (tmp & ~(1 << bit)) | (val << bit);
  84:../emlib/inc/em_bitband.h **** #endif /* defined(BITBAND_PER_BASE) */
  85:../emlib/inc/em_bitband.h **** }
 160              		.loc 2 85 0
 161 001e 06B0     		add	sp, sp, #24
 162              		@ sp needed
 163 0020 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE57:
 167 0022 00BF     		.section	.text.DMA_Prepare,"ax",%progbits
 168              		.align	2
 169              		.thumb
 170              		.thumb_func
 172              	DMA_Prepare:
 173              	.LFB71:
 174              		.file 3 "../emlib/src/em_dma.c"
   1:../emlib/src/em_dma.c **** /***************************************************************************//**
   2:../emlib/src/em_dma.c ****  * @file
   3:../emlib/src/em_dma.c ****  * @brief Direct memory access (DMA) module peripheral API
   4:../emlib/src/em_dma.c ****  * @author Energy Micro AS
   5:../emlib/src/em_dma.c ****  * @version 3.20.2
   6:../emlib/src/em_dma.c ****  *******************************************************************************
   7:../emlib/src/em_dma.c ****  * @section License
   8:../emlib/src/em_dma.c ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/src/em_dma.c ****  *******************************************************************************
  10:../emlib/src/em_dma.c ****  *
  11:../emlib/src/em_dma.c ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/src/em_dma.c ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/src/em_dma.c ****  * freely, subject to the following restrictions:
  14:../emlib/src/em_dma.c ****  *
  15:../emlib/src/em_dma.c ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/src/em_dma.c ****  *    claim that you wrote the original software.
  17:../emlib/src/em_dma.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/src/em_dma.c ****  *    misrepresented as being the original software.
  19:../emlib/src/em_dma.c ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/src/em_dma.c ****  *
  21:../emlib/src/em_dma.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/src/em_dma.c ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/src/em_dma.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/src/em_dma.c ****  * including, but not limited to, any implied warranties of merchantability
ARM GAS  /tmp/cclZCIt2.s 			page 30


  25:../emlib/src/em_dma.c ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/src/em_dma.c ****  * of any proprietary rights of a third party.
  27:../emlib/src/em_dma.c ****  *
  28:../emlib/src/em_dma.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/src/em_dma.c ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/src/em_dma.c ****  * arising from your use of this Software.
  31:../emlib/src/em_dma.c ****  *
  32:../emlib/src/em_dma.c ****  ******************************************************************************/
  33:../emlib/src/em_dma.c **** #include "em_dma.h"
  34:../emlib/src/em_dma.c **** #if defined( DMA_PRESENT )
  35:../emlib/src/em_dma.c **** 
  36:../emlib/src/em_dma.c **** #include "em_cmu.h"
  37:../emlib/src/em_dma.c **** #include "em_assert.h"
  38:../emlib/src/em_dma.c **** #include "em_bitband.h"
  39:../emlib/src/em_dma.c **** 
  40:../emlib/src/em_dma.c **** /***************************************************************************//**
  41:../emlib/src/em_dma.c ****  * @addtogroup EM_Library
  42:../emlib/src/em_dma.c ****  * @{
  43:../emlib/src/em_dma.c ****  ******************************************************************************/
  44:../emlib/src/em_dma.c **** 
  45:../emlib/src/em_dma.c **** /***************************************************************************//**
  46:../emlib/src/em_dma.c ****  * @addtogroup DMA
  47:../emlib/src/em_dma.c ****  * @brief Direct Memory Access (DMA) Peripheral API
  48:../emlib/src/em_dma.c ****  * @details
  49:../emlib/src/em_dma.c ****  *  These DMA access functions provide basic support for the following
  50:../emlib/src/em_dma.c ****  *  types of DMA cycles:
  51:../emlib/src/em_dma.c ****  *
  52:../emlib/src/em_dma.c ****  *  @li @b Basic, used for transferring data between memory and peripherals.
  53:../emlib/src/em_dma.c ****  *  @li @b Auto-request, used for transferring data between memory locations.
  54:../emlib/src/em_dma.c ****  *  @li @b Ping-pong, used for for continuous transfer of data between memory
  55:../emlib/src/em_dma.c ****  *    and peripherals, automatically toggling between primary and alternate
  56:../emlib/src/em_dma.c ****  *    descriptors.
  57:../emlib/src/em_dma.c ****  *  @li @b Memory @b scatter-gather, used for transferring a number of buffers
  58:../emlib/src/em_dma.c ****  *    between memory locations.
  59:../emlib/src/em_dma.c ****  *  @li @b Peripheral @b scatter-gather, used for transferring a number of
  60:../emlib/src/em_dma.c ****  *    buffers between memory and peripherals.
  61:../emlib/src/em_dma.c ****  *
  62:../emlib/src/em_dma.c ****  *  A basic understanding of the DMA controller is assumed. Please refer to
  63:../emlib/src/em_dma.c ****  *  the EFM32 reference manual for further details.
  64:../emlib/src/em_dma.c ****  *
  65:../emlib/src/em_dma.c ****  *  The term 'descriptor' is used as a synonym to the 'channel control data
  66:../emlib/src/em_dma.c ****  *  structure' term.
  67:../emlib/src/em_dma.c ****  *
  68:../emlib/src/em_dma.c ****  *  In order to use the DMA controller, the initialization function must have
  69:../emlib/src/em_dma.c ****  *  been executed once (normally during system init):
  70:../emlib/src/em_dma.c ****  * @verbatim
  71:../emlib/src/em_dma.c ****  * DMA_Init();
  72:../emlib/src/em_dma.c ****  * @endverbatim
  73:../emlib/src/em_dma.c ****  *
  74:../emlib/src/em_dma.c ****  *  Then, normally a user of a DMA channel configures the channel:
  75:../emlib/src/em_dma.c ****  * @verbatim
  76:../emlib/src/em_dma.c ****  * DMA_CfgChannel();
  77:../emlib/src/em_dma.c ****  * @endverbatim
  78:../emlib/src/em_dma.c ****  *
  79:../emlib/src/em_dma.c ****  *  The channel configuration only has to be done once, if reusing the channel
  80:../emlib/src/em_dma.c ****  *  for the same purpose later.
  81:../emlib/src/em_dma.c ****  *
ARM GAS  /tmp/cclZCIt2.s 			page 31


  82:../emlib/src/em_dma.c ****  *  In order to set up a DMA cycle, the primary and/or alternate descriptor
  83:../emlib/src/em_dma.c ****  *  has to be set up as indicated below.
  84:../emlib/src/em_dma.c ****  *
  85:../emlib/src/em_dma.c ****  *  For basic or auto-request cycles, use once on either primary or alternate
  86:../emlib/src/em_dma.c ****  *  descriptor:
  87:../emlib/src/em_dma.c ****  * @verbatim
  88:../emlib/src/em_dma.c ****  * DMA_CfgDescr();
  89:../emlib/src/em_dma.c ****  * @endverbatim
  90:../emlib/src/em_dma.c ****  *
  91:../emlib/src/em_dma.c ****  * For ping-pong cycles, configure both primary or alternate descriptors:
  92:../emlib/src/em_dma.c ****  * @verbatim
  93:../emlib/src/em_dma.c ****  * DMA_CfgDescr(); // Primary descriptor config
  94:../emlib/src/em_dma.c ****  * DMA_CfgDescr(); // Alternate descriptor config
  95:../emlib/src/em_dma.c ****  * @endverbatim
  96:../emlib/src/em_dma.c ****  *
  97:../emlib/src/em_dma.c ****  * For scatter-gather cycles, the alternate descriptor array must be programmed:
  98:../emlib/src/em_dma.c ****  * @verbatim
  99:../emlib/src/em_dma.c ****  * // 'n' is the number of scattered buffers
 100:../emlib/src/em_dma.c ****  * // 'descr' points to the start of the alternate descriptor array
 101:../emlib/src/em_dma.c ****  *
 102:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 103:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, 0, cfg);
 104:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 105:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, 1, cfg);
 106:../emlib/src/em_dma.c ****  * :
 107:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 108:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, n - 1, cfg);
 109:../emlib/src/em_dma.c ****  * @endverbatim
 110:../emlib/src/em_dma.c ****  *
 111:../emlib/src/em_dma.c ****  * In many cases, the descriptor configuration only has to be done once, if
 112:../emlib/src/em_dma.c ****  * re-using the channel for the same type of DMA cycles later.
 113:../emlib/src/em_dma.c ****  *
 114:../emlib/src/em_dma.c ****  * In order to activate the DMA cycle, use the respective DMA_Activate...()
 115:../emlib/src/em_dma.c ****  * function.
 116:../emlib/src/em_dma.c ****  *
 117:../emlib/src/em_dma.c ****  * For ping-pong DMA cycles, use DMA_RefreshPingPong() from the callback to
 118:../emlib/src/em_dma.c ****  * prepare the completed descriptor for reuse. Notice that the refresh must
 119:../emlib/src/em_dma.c ****  * be done prior to the other active descriptor completes, otherwise the
 120:../emlib/src/em_dma.c ****  * ping-pong DMA cycle will halt.
 121:../emlib/src/em_dma.c ****  * @{
 122:../emlib/src/em_dma.c ****  ******************************************************************************/
 123:../emlib/src/em_dma.c **** 
 124:../emlib/src/em_dma.c **** /*******************************************************************************
 125:../emlib/src/em_dma.c ****  **************************   LOCAL FUNCTIONS   ********************************
 126:../emlib/src/em_dma.c ****  ******************************************************************************/
 127:../emlib/src/em_dma.c **** 
 128:../emlib/src/em_dma.c **** /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
 129:../emlib/src/em_dma.c **** 
 130:../emlib/src/em_dma.c **** /***************************************************************************//**
 131:../emlib/src/em_dma.c ****  * @brief
 132:../emlib/src/em_dma.c ****  *   Prepare descriptor for DMA cycle.
 133:../emlib/src/em_dma.c ****  *
 134:../emlib/src/em_dma.c ****  * @details
 135:../emlib/src/em_dma.c ****  *   This function prepares the last pieces of configuration required to start a
 136:../emlib/src/em_dma.c ****  *   DMA cycle. Since the DMA controller itself modifies some parts of the
 137:../emlib/src/em_dma.c ****  *   descriptor during use, those parts need to be refreshed if reusing a
 138:../emlib/src/em_dma.c ****  *   descriptor configuration.
ARM GAS  /tmp/cclZCIt2.s 			page 32


 139:../emlib/src/em_dma.c ****  *
 140:../emlib/src/em_dma.c ****  * @note
 141:../emlib/src/em_dma.c ****  *   If using this function on a descriptor already activated and in use by the
 142:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 143:../emlib/src/em_dma.c ****  *
 144:../emlib/src/em_dma.c ****  * @param[in] channel
 145:../emlib/src/em_dma.c ****  *   DMA channel to prepare for DMA cycle.
 146:../emlib/src/em_dma.c ****  *
 147:../emlib/src/em_dma.c ****  * @param[in] cycleCtrl
 148:../emlib/src/em_dma.c ****  *   DMA cycle type to prepare for.
 149:../emlib/src/em_dma.c ****  *
 150:../emlib/src/em_dma.c ****  * @param[in] primary
 151:../emlib/src/em_dma.c ****  *   @li true - prepare primary descriptor
 152:../emlib/src/em_dma.c ****  *   @li false - prepare alternate descriptor
 153:../emlib/src/em_dma.c ****  *
 154:../emlib/src/em_dma.c ****  * @param[in] useBurst
 155:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 156:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 157:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 158:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 159:../emlib/src/em_dma.c ****  *
 160:../emlib/src/em_dma.c ****  * @param[in] dst
 161:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 162:../emlib/src/em_dma.c ****  *   descriptor as is.
 163:../emlib/src/em_dma.c ****  *
 164:../emlib/src/em_dma.c ****  * @param[in] src
 165:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 166:../emlib/src/em_dma.c ****  *   descriptor as is.
 167:../emlib/src/em_dma.c ****  *
 168:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 169:../emlib/src/em_dma.c ****  *   Number of elements (minus 1) to transfer (<= 1023).
 170:../emlib/src/em_dma.c ****  ******************************************************************************/
 171:../emlib/src/em_dma.c **** static void DMA_Prepare(unsigned int channel,
 172:../emlib/src/em_dma.c ****                         DMA_CycleCtrl_TypeDef cycleCtrl,
 173:../emlib/src/em_dma.c ****                         bool primary,
 174:../emlib/src/em_dma.c ****                         bool useBurst,
 175:../emlib/src/em_dma.c ****                         void *dst,
 176:../emlib/src/em_dma.c ****                         void *src,
 177:../emlib/src/em_dma.c ****                         unsigned int nMinus1)
 178:../emlib/src/em_dma.c **** {
 175              		.loc 3 178 0
 176              		.cfi_startproc
 177              		@ args = 12, pretend = 0, frame = 32
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180 0000 88B0     		sub	sp, sp, #32
 181              		.cfi_def_cfa_offset 32
 182 0002 0190     		str	r0, [sp, #4]
 183 0004 8DF80310 		strb	r1, [sp, #3]
 184 0008 8DF80220 		strb	r2, [sp, #2]
 185 000c 8DF80130 		strb	r3, [sp, #1]
 179:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 180:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *primDescr;
 181:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 182:../emlib/src/em_dma.c ****   uint32_t               inc;
 183:../emlib/src/em_dma.c ****   uint32_t               chBit;
 184:../emlib/src/em_dma.c ****   uint32_t               tmp;
ARM GAS  /tmp/cclZCIt2.s 			page 33


 185:../emlib/src/em_dma.c **** 
 186:../emlib/src/em_dma.c ****   primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
 186              		.loc 3 186 0
 187 0010 019B     		ldr	r3, [sp, #4]
 188 0012 1A01     		lsls	r2, r3, #4
 189 0014 3C4B     		ldr	r3, .L23
 190 0016 9B68     		ldr	r3, [r3, #8]
 191 0018 1344     		add	r3, r3, r2
 192 001a 0693     		str	r3, [sp, #24]
 187:../emlib/src/em_dma.c **** 
 188:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
 189:../emlib/src/em_dma.c ****   if (primary)
 193              		.loc 3 189 0
 194 001c 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 195 0020 002B     		cmp	r3, #0
 196 0022 02D0     		beq	.L12
 190:../emlib/src/em_dma.c ****   {
 191:../emlib/src/em_dma.c ****     descr = primDescr;
 197              		.loc 3 191 0
 198 0024 069B     		ldr	r3, [sp, #24]
 199 0026 0793     		str	r3, [sp, #28]
 200 0028 05E0     		b	.L13
 201              	.L12:
 192:../emlib/src/em_dma.c ****   }
 193:../emlib/src/em_dma.c ****   else
 194:../emlib/src/em_dma.c ****   {
 195:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
 202              		.loc 3 195 0
 203 002a 019B     		ldr	r3, [sp, #4]
 204 002c 1A01     		lsls	r2, r3, #4
 205 002e 364B     		ldr	r3, .L23
 206 0030 DB68     		ldr	r3, [r3, #12]
 207 0032 1344     		add	r3, r3, r2
 208 0034 0793     		str	r3, [sp, #28]
 209              	.L13:
 196:../emlib/src/em_dma.c ****   }
 197:../emlib/src/em_dma.c **** 
 198:../emlib/src/em_dma.c ****   /* If callback defined, update info on whether callback is issued */
 199:../emlib/src/em_dma.c ****   /* for primary or alternate descriptor. Mainly needed for ping-pong */
 200:../emlib/src/em_dma.c ****   /* cycles. */
 201:../emlib/src/em_dma.c ****   cb = (DMA_CB_TypeDef *)(primDescr->USER);
 210              		.loc 3 201 0
 211 0036 069B     		ldr	r3, [sp, #24]
 212 0038 DB68     		ldr	r3, [r3, #12]
 213 003a 0593     		str	r3, [sp, #20]
 202:../emlib/src/em_dma.c ****   if (cb)
 214              		.loc 3 202 0
 215 003c 059B     		ldr	r3, [sp, #20]
 216 003e 002B     		cmp	r3, #0
 217 0040 03D0     		beq	.L14
 203:../emlib/src/em_dma.c ****   {
 204:../emlib/src/em_dma.c ****     cb->primary = (uint8_t)primary;
 218              		.loc 3 204 0
 219 0042 9DF80220 		ldrb	r2, [sp, #2]	@ zero_extendqisi2
 220 0046 059B     		ldr	r3, [sp, #20]
 221 0048 1A72     		strb	r2, [r3, #8]
 222              	.L14:
ARM GAS  /tmp/cclZCIt2.s 			page 34


 205:../emlib/src/em_dma.c ****   }
 206:../emlib/src/em_dma.c **** 
 207:../emlib/src/em_dma.c ****   if (src)
 223              		.loc 3 207 0
 224 004a 099B     		ldr	r3, [sp, #36]
 225 004c 002B     		cmp	r3, #0
 226 004e 14D0     		beq	.L15
 208:../emlib/src/em_dma.c ****   {
 209:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
 227              		.loc 3 209 0
 228 0050 079B     		ldr	r3, [sp, #28]
 229 0052 9B68     		ldr	r3, [r3, #8]
 230 0054 03F04063 		and	r3, r3, #201326592
 231 0058 9B0E     		lsrs	r3, r3, #26
 232 005a 0493     		str	r3, [sp, #16]
 210:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_SRC_INC_NONE)
 233              		.loc 3 210 0
 234 005c 049B     		ldr	r3, [sp, #16]
 235 005e 032B     		cmp	r3, #3
 236 0060 03D1     		bne	.L16
 211:../emlib/src/em_dma.c ****     {
 212:../emlib/src/em_dma.c ****       descr->SRCEND = src;
 237              		.loc 3 212 0
 238 0062 079B     		ldr	r3, [sp, #28]
 239 0064 099A     		ldr	r2, [sp, #36]
 240 0066 1A60     		str	r2, [r3]
 241 0068 07E0     		b	.L15
 242              	.L16:
 213:../emlib/src/em_dma.c ****     }
 214:../emlib/src/em_dma.c ****     else
 215:../emlib/src/em_dma.c ****     {
 216:../emlib/src/em_dma.c ****       descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
 243              		.loc 3 216 0
 244 006a 049B     		ldr	r3, [sp, #16]
 245 006c 0A9A     		ldr	r2, [sp, #40]
 246 006e 9A40     		lsls	r2, r2, r3
 247 0070 099B     		ldr	r3, [sp, #36]
 248 0072 1344     		add	r3, r3, r2
 249 0074 1A46     		mov	r2, r3
 250 0076 079B     		ldr	r3, [sp, #28]
 251 0078 1A60     		str	r2, [r3]
 252              	.L15:
 217:../emlib/src/em_dma.c ****     }
 218:../emlib/src/em_dma.c ****   }
 219:../emlib/src/em_dma.c **** 
 220:../emlib/src/em_dma.c ****   if (dst)
 253              		.loc 3 220 0
 254 007a 089B     		ldr	r3, [sp, #32]
 255 007c 002B     		cmp	r3, #0
 256 007e 12D0     		beq	.L17
 221:../emlib/src/em_dma.c ****   {
 222:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
 257              		.loc 3 222 0
 258 0080 079B     		ldr	r3, [sp, #28]
 259 0082 9B68     		ldr	r3, [r3, #8]
 260 0084 9B0F     		lsrs	r3, r3, #30
 261 0086 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/cclZCIt2.s 			page 35


 223:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_DST_INC_NONE)
 262              		.loc 3 223 0
 263 0088 049B     		ldr	r3, [sp, #16]
 264 008a 032B     		cmp	r3, #3
 265 008c 03D1     		bne	.L18
 224:../emlib/src/em_dma.c ****     {
 225:../emlib/src/em_dma.c ****       descr->DSTEND = dst;
 266              		.loc 3 225 0
 267 008e 079B     		ldr	r3, [sp, #28]
 268 0090 089A     		ldr	r2, [sp, #32]
 269 0092 5A60     		str	r2, [r3, #4]
 270 0094 07E0     		b	.L17
 271              	.L18:
 226:../emlib/src/em_dma.c ****     }
 227:../emlib/src/em_dma.c ****     else
 228:../emlib/src/em_dma.c ****     {
 229:../emlib/src/em_dma.c ****       descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
 272              		.loc 3 229 0
 273 0096 049B     		ldr	r3, [sp, #16]
 274 0098 0A9A     		ldr	r2, [sp, #40]
 275 009a 9A40     		lsls	r2, r2, r3
 276 009c 089B     		ldr	r3, [sp, #32]
 277 009e 1344     		add	r3, r3, r2
 278 00a0 1A46     		mov	r2, r3
 279 00a2 079B     		ldr	r3, [sp, #28]
 280 00a4 5A60     		str	r2, [r3, #4]
 281              	.L17:
 230:../emlib/src/em_dma.c ****     }
 231:../emlib/src/em_dma.c ****   }
 232:../emlib/src/em_dma.c **** 
 233:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 282              		.loc 3 233 0
 283 00a6 019B     		ldr	r3, [sp, #4]
 284 00a8 0122     		movs	r2, #1
 285 00aa 02FA03F3 		lsl	r3, r2, r3
 286 00ae 0393     		str	r3, [sp, #12]
 234:../emlib/src/em_dma.c ****   if (useBurst)
 287              		.loc 3 234 0
 288 00b0 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 289 00b4 002B     		cmp	r3, #0
 290 00b6 03D0     		beq	.L19
 235:../emlib/src/em_dma.c ****   {
 236:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTS = chBit;
 291              		.loc 3 236 0
 292 00b8 134B     		ldr	r3, .L23
 293 00ba 039A     		ldr	r2, [sp, #12]
 294 00bc 9A61     		str	r2, [r3, #24]
 295 00be 02E0     		b	.L20
 296              	.L19:
 237:../emlib/src/em_dma.c ****   }
 238:../emlib/src/em_dma.c ****   else
 239:../emlib/src/em_dma.c ****   {
 240:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTC = chBit;
 297              		.loc 3 240 0
 298 00c0 114B     		ldr	r3, .L23
 299 00c2 039A     		ldr	r2, [sp, #12]
 300 00c4 DA61     		str	r2, [r3, #28]
ARM GAS  /tmp/cclZCIt2.s 			page 36


 301              	.L20:
 241:../emlib/src/em_dma.c ****   }
 242:../emlib/src/em_dma.c **** 
 243:../emlib/src/em_dma.c ****   if (primary)
 302              		.loc 3 243 0
 303 00c6 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 304 00ca 002B     		cmp	r3, #0
 305 00cc 03D0     		beq	.L21
 244:../emlib/src/em_dma.c ****   {
 245:../emlib/src/em_dma.c ****     DMA->CHALTC = chBit;
 306              		.loc 3 245 0
 307 00ce 0E4B     		ldr	r3, .L23
 308 00d0 039A     		ldr	r2, [sp, #12]
 309 00d2 5A63     		str	r2, [r3, #52]
 310 00d4 02E0     		b	.L22
 311              	.L21:
 246:../emlib/src/em_dma.c ****   }
 247:../emlib/src/em_dma.c ****   else
 248:../emlib/src/em_dma.c ****   {
 249:../emlib/src/em_dma.c ****     DMA->CHALTS = chBit;
 312              		.loc 3 249 0
 313 00d6 0C4B     		ldr	r3, .L23
 314 00d8 039A     		ldr	r2, [sp, #12]
 315 00da 1A63     		str	r2, [r3, #48]
 316              	.L22:
 250:../emlib/src/em_dma.c ****   }
 251:../emlib/src/em_dma.c **** 
 252:../emlib/src/em_dma.c ****   /* Set cycle control */
 253:../emlib/src/em_dma.c ****   tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
 317              		.loc 3 253 0
 318 00dc 079B     		ldr	r3, [sp, #28]
 319 00de 9B68     		ldr	r3, [r3, #8]
 320 00e0 23F47F53 		bic	r3, r3, #16320
 321 00e4 23F03703 		bic	r3, r3, #55
 322 00e8 0293     		str	r3, [sp, #8]
 254:../emlib/src/em_dma.c ****   tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
 323              		.loc 3 254 0
 324 00ea 0A9B     		ldr	r3, [sp, #40]
 325 00ec 1B01     		lsls	r3, r3, #4
 326 00ee 029A     		ldr	r2, [sp, #8]
 327 00f0 1343     		orrs	r3, r3, r2
 328 00f2 0293     		str	r3, [sp, #8]
 255:../emlib/src/em_dma.c ****   tmp        |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 329              		.loc 3 255 0
 330 00f4 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 331 00f8 029A     		ldr	r2, [sp, #8]
 332 00fa 1343     		orrs	r3, r3, r2
 333 00fc 0293     		str	r3, [sp, #8]
 256:../emlib/src/em_dma.c ****   descr->CTRL = tmp;
 334              		.loc 3 256 0
 335 00fe 079B     		ldr	r3, [sp, #28]
 336 0100 029A     		ldr	r2, [sp, #8]
 337 0102 9A60     		str	r2, [r3, #8]
 257:../emlib/src/em_dma.c **** }
 338              		.loc 3 257 0
 339 0104 08B0     		add	sp, sp, #32
 340              		@ sp needed
ARM GAS  /tmp/cclZCIt2.s 			page 37


 341 0106 7047     		bx	lr
 342              	.L24:
 343              		.align	2
 344              	.L23:
 345 0108 00200C40 		.word	1074536448
 346              		.cfi_endproc
 347              	.LFE71:
 349              		.section	.text.DMA_IRQHandler,"ax",%progbits
 350              		.align	2
 351              		.global	DMA_IRQHandler
 352              		.thumb
 353              		.thumb_func
 355              	DMA_IRQHandler:
 356              	.LFB72:
 258:../emlib/src/em_dma.c **** 
 259:../emlib/src/em_dma.c **** /** @endcond */
 260:../emlib/src/em_dma.c **** 
 261:../emlib/src/em_dma.c **** /*******************************************************************************
 262:../emlib/src/em_dma.c ****  ************************   INTERRUPT FUNCTIONS   ******************************
 263:../emlib/src/em_dma.c ****  ******************************************************************************/
 264:../emlib/src/em_dma.c **** 
 265:../emlib/src/em_dma.c **** #ifndef EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 266:../emlib/src/em_dma.c **** 
 267:../emlib/src/em_dma.c **** /***************************************************************************//**
 268:../emlib/src/em_dma.c ****  * @brief
 269:../emlib/src/em_dma.c ****  *   Interrupt handler for DMA cycle completion handling.
 270:../emlib/src/em_dma.c ****  *
 271:../emlib/src/em_dma.c ****  * @details
 272:../emlib/src/em_dma.c ****  *   Clears any pending flags and calls registered callback (if any).
 273:../emlib/src/em_dma.c ****  *
 274:../emlib/src/em_dma.c ****  *   If using the default interrupt vector table setup provided, this function
 275:../emlib/src/em_dma.c ****  *   is automatically placed in the IRQ table due to weak linking. If taking
 276:../emlib/src/em_dma.c ****  *   control over the interrupt vector table in some other way, this interrupt
 277:../emlib/src/em_dma.c ****  *   handler must be installed in order to be able to support callback actions.
 278:../emlib/src/em_dma.c ****  *
 279:../emlib/src/em_dma.c ****  *   In order for the user to implement a custom IRQ handler or run without
 280:../emlib/src/em_dma.c ****  *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 281:../emlib/src/em_dma.c ****  *   with a \#define statement or with the compiler option -D.
 282:../emlib/src/em_dma.c ****  *
 283:../emlib/src/em_dma.c ****  ******************************************************************************/
 284:../emlib/src/em_dma.c **** void DMA_IRQHandler(void)
 285:../emlib/src/em_dma.c **** {
 357              		.loc 3 285 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 40
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361 0000 00B5     		push	{lr}
 362              		.cfi_def_cfa_offset 4
 363              		.cfi_offset 14, -4
 364 0002 8BB0     		sub	sp, sp, #44
 365              		.cfi_def_cfa_offset 48
 286:../emlib/src/em_dma.c ****   int                    channel;
 287:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 288:../emlib/src/em_dma.c ****   uint32_t               pending;
 289:../emlib/src/em_dma.c ****   uint32_t               pendingPrio;
 290:../emlib/src/em_dma.c ****   uint32_t               prio;
 291:../emlib/src/em_dma.c ****   uint32_t               primaryCpy;
ARM GAS  /tmp/cclZCIt2.s 			page 38


 292:../emlib/src/em_dma.c ****   int                    i;
 293:../emlib/src/em_dma.c **** 
 294:../emlib/src/em_dma.c ****   /* Get all pending and enabled interrupts */
 295:../emlib/src/em_dma.c ****   pending  = DMA->IF;
 366              		.loc 3 295 0
 367 0004 354B     		ldr	r3, .L33
 368 0006 03F58053 		add	r3, r3, #4096
 369 000a 1B68     		ldr	r3, [r3]
 370 000c 0693     		str	r3, [sp, #24]
 296:../emlib/src/em_dma.c ****   pending &= DMA->IEN;
 371              		.loc 3 296 0
 372 000e 334B     		ldr	r3, .L33
 373 0010 03F58053 		add	r3, r3, #4096
 374 0014 0C33     		adds	r3, r3, #12
 375 0016 1B68     		ldr	r3, [r3]
 376 0018 069A     		ldr	r2, [sp, #24]
 377 001a 1340     		ands	r3, r3, r2
 378 001c 0693     		str	r3, [sp, #24]
 297:../emlib/src/em_dma.c **** 
 298:../emlib/src/em_dma.c ****   /* Check for bus error */
 299:../emlib/src/em_dma.c ****   if (pending & DMA_IF_ERR)
 379              		.loc 3 299 0
 380 001e 069B     		ldr	r3, [sp, #24]
 381 0020 002B     		cmp	r3, #0
 382 0022 00DA     		bge	.L26
 383              	.L27:
 300:../emlib/src/em_dma.c ****   {
 301:../emlib/src/em_dma.c ****     /* Loop here to enable the debugger to see what has happened */
 302:../emlib/src/em_dma.c ****     while (1)
 303:../emlib/src/em_dma.c ****       ;
 384              		.loc 3 303 0 discriminator 1
 385 0024 FEE7     		b	.L27
 386              	.L26:
 304:../emlib/src/em_dma.c ****   }
 305:../emlib/src/em_dma.c **** 
 306:../emlib/src/em_dma.c ****   /* Process all pending channel interrupts. First process channels */
 307:../emlib/src/em_dma.c ****   /* defined with high priority, then those with default priority. */
 308:../emlib/src/em_dma.c ****   prio        = DMA->CHPRIS;
 387              		.loc 3 308 0
 388 0026 2D4B     		ldr	r3, .L33
 389 0028 9B6B     		ldr	r3, [r3, #56]
 390 002a 0593     		str	r3, [sp, #20]
 309:../emlib/src/em_dma.c ****   pendingPrio = pending & prio;
 391              		.loc 3 309 0
 392 002c 069A     		ldr	r2, [sp, #24]
 393 002e 059B     		ldr	r3, [sp, #20]
 394 0030 1340     		ands	r3, r3, r2
 395 0032 0893     		str	r3, [sp, #32]
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 396              		.loc 3 310 0
 397 0034 0023     		movs	r3, #0
 398 0036 0793     		str	r3, [sp, #28]
 399 0038 49E0     		b	.L28
 400              	.L32:
 311:../emlib/src/em_dma.c ****   {
 312:../emlib/src/em_dma.c ****     channel = 0;
 401              		.loc 3 312 0
ARM GAS  /tmp/cclZCIt2.s 			page 39


 402 003a 0023     		movs	r3, #0
 403 003c 0993     		str	r3, [sp, #36]
 313:../emlib/src/em_dma.c ****     /* Process pending interrupts within high/default priority group */
 314:../emlib/src/em_dma.c ****     /* honouring priority within group. */
 315:../emlib/src/em_dma.c ****     while (pendingPrio)
 404              		.loc 3 315 0
 405 003e 3BE0     		b	.L29
 406              	.L31:
 316:../emlib/src/em_dma.c ****     {
 317:../emlib/src/em_dma.c ****       if (pendingPrio & 1)
 407              		.loc 3 317 0
 408 0040 089B     		ldr	r3, [sp, #32]
 409 0042 03F00103 		and	r3, r3, #1
 410 0046 002B     		cmp	r3, #0
 411 0048 30D0     		beq	.L30
 412              	.LBB2:
 318:../emlib/src/em_dma.c ****       {
 319:../emlib/src/em_dma.c ****         DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 413              		.loc 3 319 0
 414 004a 244B     		ldr	r3, .L33
 415 004c 9B68     		ldr	r3, [r3, #8]
 416 004e 0493     		str	r3, [sp, #16]
 320:../emlib/src/em_dma.c ****         uint32_t chmask = 1 << channel;
 417              		.loc 3 320 0
 418 0050 0122     		movs	r2, #1
 419 0052 099B     		ldr	r3, [sp, #36]
 420 0054 02FA03F3 		lsl	r3, r2, r3
 421 0058 0393     		str	r3, [sp, #12]
 321:../emlib/src/em_dma.c **** 
 322:../emlib/src/em_dma.c ****         /* Clear pending interrupt prior to invoking callback, in case it */
 323:../emlib/src/em_dma.c ****         /* sets up another DMA cycle. */
 324:../emlib/src/em_dma.c ****         DMA->IFC = chmask;
 422              		.loc 3 324 0
 423 005a 204B     		ldr	r3, .L33
 424 005c 03F58053 		add	r3, r3, #4096
 425 0060 0833     		adds	r3, r3, #8
 426 0062 039A     		ldr	r2, [sp, #12]
 427 0064 1A60     		str	r2, [r3]
 325:../emlib/src/em_dma.c **** 
 326:../emlib/src/em_dma.c ****         /* Normally, no point in enabling interrupt without callback, but */
 327:../emlib/src/em_dma.c ****         /* check if callback is defined anyway. Callback info is always */
 328:../emlib/src/em_dma.c ****         /* located in primary descriptor. */
 329:../emlib/src/em_dma.c ****         cb = (DMA_CB_TypeDef *)(descr[channel].USER);
 428              		.loc 3 329 0
 429 0066 099B     		ldr	r3, [sp, #36]
 430 0068 1B01     		lsls	r3, r3, #4
 431 006a 049A     		ldr	r2, [sp, #16]
 432 006c 1344     		add	r3, r3, r2
 433 006e DB68     		ldr	r3, [r3, #12]
 434 0070 0293     		str	r3, [sp, #8]
 330:../emlib/src/em_dma.c ****         if (cb)
 435              		.loc 3 330 0
 436 0072 029B     		ldr	r3, [sp, #8]
 437 0074 002B     		cmp	r3, #0
 438 0076 19D0     		beq	.L30
 331:../emlib/src/em_dma.c ****         {
 332:../emlib/src/em_dma.c ****           /* Toggle next-descriptor indicator always prior to invoking */
ARM GAS  /tmp/cclZCIt2.s 			page 40


 333:../emlib/src/em_dma.c ****           /* callback (in case callback reconfigurs something) */
 334:../emlib/src/em_dma.c ****           primaryCpy   = cb->primary;
 439              		.loc 3 334 0
 440 0078 029B     		ldr	r3, [sp, #8]
 441 007a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 442 007c 0193     		str	r3, [sp, #4]
 335:../emlib/src/em_dma.c ****           cb->primary ^= 1;
 443              		.loc 3 335 0
 444 007e 029B     		ldr	r3, [sp, #8]
 445 0080 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 446 0082 83F00103 		eor	r3, r3, #1
 447 0086 DAB2     		uxtb	r2, r3
 448 0088 029B     		ldr	r3, [sp, #8]
 449 008a 1A72     		strb	r2, [r3, #8]
 336:../emlib/src/em_dma.c ****           if (cb->cbFunc)
 450              		.loc 3 336 0
 451 008c 029B     		ldr	r3, [sp, #8]
 452 008e 1B68     		ldr	r3, [r3]
 453 0090 002B     		cmp	r3, #0
 454 0092 0BD0     		beq	.L30
 337:../emlib/src/em_dma.c ****           {
 338:../emlib/src/em_dma.c ****             cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
 455              		.loc 3 338 0
 456 0094 029B     		ldr	r3, [sp, #8]
 457 0096 1B68     		ldr	r3, [r3]
 458 0098 0998     		ldr	r0, [sp, #36]
 459 009a 019A     		ldr	r2, [sp, #4]
 460 009c 002A     		cmp	r2, #0
 461 009e 0CBF     		ite	eq
 462 00a0 0022     		moveq	r2, #0
 463 00a2 0122     		movne	r2, #1
 464 00a4 D1B2     		uxtb	r1, r2
 465 00a6 029A     		ldr	r2, [sp, #8]
 466 00a8 5268     		ldr	r2, [r2, #4]
 467 00aa 9847     		blx	r3
 468              	.L30:
 469              	.LBE2:
 339:../emlib/src/em_dma.c ****           }
 340:../emlib/src/em_dma.c ****         }
 341:../emlib/src/em_dma.c ****       }
 342:../emlib/src/em_dma.c **** 
 343:../emlib/src/em_dma.c ****       pendingPrio >>= 1;
 470              		.loc 3 343 0
 471 00ac 089B     		ldr	r3, [sp, #32]
 472 00ae 5B08     		lsrs	r3, r3, #1
 473 00b0 0893     		str	r3, [sp, #32]
 344:../emlib/src/em_dma.c ****       channel++;
 474              		.loc 3 344 0
 475 00b2 099B     		ldr	r3, [sp, #36]
 476 00b4 0133     		adds	r3, r3, #1
 477 00b6 0993     		str	r3, [sp, #36]
 478              	.L29:
 315:../emlib/src/em_dma.c ****     while (pendingPrio)
 479              		.loc 3 315 0 discriminator 1
 480 00b8 089B     		ldr	r3, [sp, #32]
 481 00ba 002B     		cmp	r3, #0
 482 00bc C0D1     		bne	.L31
ARM GAS  /tmp/cclZCIt2.s 			page 41


 345:../emlib/src/em_dma.c ****     }
 346:../emlib/src/em_dma.c **** 
 347:../emlib/src/em_dma.c ****     /* On second iteration, process default priority channels */
 348:../emlib/src/em_dma.c ****     pendingPrio = pending & ~prio;
 483              		.loc 3 348 0
 484 00be 059B     		ldr	r3, [sp, #20]
 485 00c0 DA43     		mvns	r2, r3
 486 00c2 069B     		ldr	r3, [sp, #24]
 487 00c4 1340     		ands	r3, r3, r2
 488 00c6 0893     		str	r3, [sp, #32]
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 489              		.loc 3 310 0
 490 00c8 079B     		ldr	r3, [sp, #28]
 491 00ca 0133     		adds	r3, r3, #1
 492 00cc 0793     		str	r3, [sp, #28]
 493              	.L28:
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 494              		.loc 3 310 0 is_stmt 0 discriminator 1
 495 00ce 079B     		ldr	r3, [sp, #28]
 496 00d0 012B     		cmp	r3, #1
 497 00d2 B2DD     		ble	.L32
 349:../emlib/src/em_dma.c ****   }
 350:../emlib/src/em_dma.c **** }
 498              		.loc 3 350 0 is_stmt 1
 499 00d4 0BB0     		add	sp, sp, #44
 500              		@ sp needed
 501 00d6 5DF804FB 		ldr	pc, [sp], #4
 502              	.L34:
 503 00da 00BF     		.align	2
 504              	.L33:
 505 00dc 00200C40 		.word	1074536448
 506              		.cfi_endproc
 507              	.LFE72:
 509              		.section	.rodata
 510              		.align	2
 511              	.LC0:
 512 0000 2E2E2F65 		.ascii	"../emlib/src/em_dma.c\000"
 512      6D6C6962 
 512      2F737263 
 512      2F656D5F 
 512      646D612E 
 513 0016 0000     		.section	.text.DMA_ActivateAuto,"ax",%progbits
 514              		.align	2
 515              		.global	DMA_ActivateAuto
 516              		.thumb
 517              		.thumb_func
 519              	DMA_ActivateAuto:
 520              	.LFB73:
 351:../emlib/src/em_dma.c **** 
 352:../emlib/src/em_dma.c **** #endif /* EXCLUDE_DEFAULT_DMA_IRQ_HANDLER */
 353:../emlib/src/em_dma.c **** 
 354:../emlib/src/em_dma.c **** 
 355:../emlib/src/em_dma.c **** /*******************************************************************************
 356:../emlib/src/em_dma.c ****  **************************   GLOBAL FUNCTIONS   *******************************
 357:../emlib/src/em_dma.c ****  ******************************************************************************/
 358:../emlib/src/em_dma.c **** 
 359:../emlib/src/em_dma.c **** /***************************************************************************//**
ARM GAS  /tmp/cclZCIt2.s 			page 42


 360:../emlib/src/em_dma.c ****  * @brief
 361:../emlib/src/em_dma.c ****  *   Activate DMA auto-request cycle (used for memory-memory transfers).
 362:../emlib/src/em_dma.c ****  *
 363:../emlib/src/em_dma.c ****  * @details
 364:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and descriptor to be used
 365:../emlib/src/em_dma.c ****  *   must have been properly configured.
 366:../emlib/src/em_dma.c ****  *
 367:../emlib/src/em_dma.c ****  * @note
 368:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 369:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 370:../emlib/src/em_dma.c ****  *
 371:../emlib/src/em_dma.c ****  * @param[in] channel
 372:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 373:../emlib/src/em_dma.c ****  *
 374:../emlib/src/em_dma.c ****  * @param[in] primary
 375:../emlib/src/em_dma.c ****  *   @li true - activate using primary descriptor
 376:../emlib/src/em_dma.c ****  *   @li false - activate using alternate descriptor
 377:../emlib/src/em_dma.c ****  *
 378:../emlib/src/em_dma.c ****  * @param[in] dst
 379:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 380:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 381:../emlib/src/em_dma.c ****  *
 382:../emlib/src/em_dma.c ****  * @param[in] src
 383:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 384:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 385:../emlib/src/em_dma.c ****  *
 386:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 387:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
 388:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
 389:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
 390:../emlib/src/em_dma.c ****  ******************************************************************************/
 391:../emlib/src/em_dma.c **** void DMA_ActivateAuto(unsigned int channel,
 392:../emlib/src/em_dma.c ****                       bool primary,
 393:../emlib/src/em_dma.c ****                       void *dst,
 394:../emlib/src/em_dma.c ****                       void *src,
 395:../emlib/src/em_dma.c ****                       unsigned int nMinus1)
 396:../emlib/src/em_dma.c **** {
 521              		.loc 3 396 0
 522              		.cfi_startproc
 523              		@ args = 4, pretend = 0, frame = 24
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525 0000 00B5     		push	{lr}
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 14, -4
 528 0002 8BB0     		sub	sp, sp, #44
 529              		.cfi_def_cfa_offset 48
 530 0004 0790     		str	r0, [sp, #28]
 531 0006 0592     		str	r2, [sp, #20]
 532 0008 0493     		str	r3, [sp, #16]
 533 000a 0B46     		mov	r3, r1
 534 000c 8DF81B30 		strb	r3, [sp, #27]
 397:../emlib/src/em_dma.c ****   uint32_t chBit;
 398:../emlib/src/em_dma.c **** 
 399:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 535              		.loc 3 399 0
 536 0010 079B     		ldr	r3, [sp, #28]
 537 0012 072B     		cmp	r3, #7
ARM GAS  /tmp/cclZCIt2.s 			page 43


 538 0014 04D9     		bls	.L36
 539              		.loc 3 399 0 is_stmt 0 discriminator 1
 540 0016 1548     		ldr	r0, .L38
 541 0018 40F28F11 		movw	r1, #399
 542 001c FFF7FEFF 		bl	assertEFM
 543              	.L36:
 400:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 544              		.loc 3 400 0 is_stmt 1
 545 0020 0C9B     		ldr	r3, [sp, #48]
 546 0022 B3F5806F 		cmp	r3, #1024
 547 0026 04D3     		bcc	.L37
 548              		.loc 3 400 0 is_stmt 0 discriminator 1
 549 0028 1048     		ldr	r0, .L38
 550 002a 4FF4C871 		mov	r1, #400
 551 002e FFF7FEFF 		bl	assertEFM
 552              	.L37:
 401:../emlib/src/em_dma.c **** 
 402:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 553              		.loc 3 402 0 is_stmt 1
 554 0032 9DF81B30 		ldrb	r3, [sp, #27]	@ zero_extendqisi2
 555 0036 059A     		ldr	r2, [sp, #20]
 556 0038 0092     		str	r2, [sp]
 557 003a 049A     		ldr	r2, [sp, #16]
 558 003c 0192     		str	r2, [sp, #4]
 559 003e 0C9A     		ldr	r2, [sp, #48]
 560 0040 0292     		str	r2, [sp, #8]
 561 0042 0798     		ldr	r0, [sp, #28]
 562 0044 0221     		movs	r1, #2
 563 0046 1A46     		mov	r2, r3
 564 0048 0023     		movs	r3, #0
 565 004a FFF7FEFF 		bl	DMA_Prepare
 403:../emlib/src/em_dma.c ****               dmaCycleCtrlAuto,
 404:../emlib/src/em_dma.c ****               primary,
 405:../emlib/src/em_dma.c ****               false,
 406:../emlib/src/em_dma.c ****               dst,
 407:../emlib/src/em_dma.c ****               src,
 408:../emlib/src/em_dma.c ****               nMinus1);
 409:../emlib/src/em_dma.c **** 
 410:../emlib/src/em_dma.c ****   chBit        = 1 << channel;
 566              		.loc 3 410 0
 567 004e 079B     		ldr	r3, [sp, #28]
 568 0050 0122     		movs	r2, #1
 569 0052 02FA03F3 		lsl	r3, r2, r3
 570 0056 0993     		str	r3, [sp, #36]
 411:../emlib/src/em_dma.c ****   DMA->CHENS   = chBit; /* Enable channel */
 571              		.loc 3 411 0
 572 0058 054B     		ldr	r3, .L38+4
 573 005a 099A     		ldr	r2, [sp, #36]
 574 005c 9A62     		str	r2, [r3, #40]
 412:../emlib/src/em_dma.c ****   DMA->CHSWREQ = chBit; /* Activate with SW request */
 575              		.loc 3 412 0
 576 005e 044B     		ldr	r3, .L38+4
 577 0060 099A     		ldr	r2, [sp, #36]
 578 0062 5A61     		str	r2, [r3, #20]
 413:../emlib/src/em_dma.c **** }
 579              		.loc 3 413 0
 580 0064 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/cclZCIt2.s 			page 44


 581              		@ sp needed
 582 0066 5DF804FB 		ldr	pc, [sp], #4
 583              	.L39:
 584 006a 00BF     		.align	2
 585              	.L38:
 586 006c 00000000 		.word	.LC0
 587 0070 00200C40 		.word	1074536448
 588              		.cfi_endproc
 589              	.LFE73:
 591              		.section	.text.DMA_ActivateBasic,"ax",%progbits
 592              		.align	2
 593              		.global	DMA_ActivateBasic
 594              		.thumb
 595              		.thumb_func
 597              	DMA_ActivateBasic:
 598              	.LFB74:
 414:../emlib/src/em_dma.c **** 
 415:../emlib/src/em_dma.c **** 
 416:../emlib/src/em_dma.c **** /***************************************************************************//**
 417:../emlib/src/em_dma.c ****  * @brief
 418:../emlib/src/em_dma.c ****  *   Activate DMA basic cycle (used for memory-peripheral transfers).
 419:../emlib/src/em_dma.c ****  *
 420:../emlib/src/em_dma.c ****  * @details
 421:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and descriptor to be used
 422:../emlib/src/em_dma.c ****  *   must have been properly configured.
 423:../emlib/src/em_dma.c ****  *
 424:../emlib/src/em_dma.c ****  * @note
 425:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 426:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 427:../emlib/src/em_dma.c ****  *
 428:../emlib/src/em_dma.c ****  * @param[in] channel
 429:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 430:../emlib/src/em_dma.c ****  *
 431:../emlib/src/em_dma.c ****  * @param[in] primary
 432:../emlib/src/em_dma.c ****  *   @li true - activate using primary descriptor
 433:../emlib/src/em_dma.c ****  *   @li false - activate using alternate descriptor
 434:../emlib/src/em_dma.c ****  *
 435:../emlib/src/em_dma.c ****  * @param[in] useBurst
 436:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 437:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 438:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 439:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 440:../emlib/src/em_dma.c ****  *
 441:../emlib/src/em_dma.c ****  * @param[in] dst
 442:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 443:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 444:../emlib/src/em_dma.c ****  *
 445:../emlib/src/em_dma.c ****  * @param[in] src
 446:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 447:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 448:../emlib/src/em_dma.c ****  *
 449:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 450:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
 451:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
 452:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
 453:../emlib/src/em_dma.c ****  ******************************************************************************/
 454:../emlib/src/em_dma.c **** void DMA_ActivateBasic(unsigned int channel,
ARM GAS  /tmp/cclZCIt2.s 			page 45


 455:../emlib/src/em_dma.c ****                        bool primary,
 456:../emlib/src/em_dma.c ****                        bool useBurst,
 457:../emlib/src/em_dma.c ****                        void *dst,
 458:../emlib/src/em_dma.c ****                        void *src,
 459:../emlib/src/em_dma.c ****                        unsigned int nMinus1)
 460:../emlib/src/em_dma.c **** {
 599              		.loc 3 460 0
 600              		.cfi_startproc
 601              		@ args = 8, pretend = 0, frame = 16
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603 0000 00B5     		push	{lr}
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 14, -4
 606 0002 89B0     		sub	sp, sp, #36
 607              		.cfi_def_cfa_offset 40
 608 0004 0790     		str	r0, [sp, #28]
 609 0006 0593     		str	r3, [sp, #20]
 610 0008 0B46     		mov	r3, r1
 611 000a 8DF81B30 		strb	r3, [sp, #27]
 612 000e 1346     		mov	r3, r2
 613 0010 8DF81A30 		strb	r3, [sp, #26]
 461:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 614              		.loc 3 461 0
 615 0014 079B     		ldr	r3, [sp, #28]
 616 0016 072B     		cmp	r3, #7
 617 0018 04D9     		bls	.L41
 618              		.loc 3 461 0 is_stmt 0 discriminator 1
 619 001a 1248     		ldr	r0, .L43
 620 001c 40F2CD11 		movw	r1, #461
 621 0020 FFF7FEFF 		bl	assertEFM
 622              	.L41:
 462:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 623              		.loc 3 462 0 is_stmt 1
 624 0024 0B9B     		ldr	r3, [sp, #44]
 625 0026 B3F5806F 		cmp	r3, #1024
 626 002a 04D3     		bcc	.L42
 627              		.loc 3 462 0 is_stmt 0 discriminator 1
 628 002c 0D48     		ldr	r0, .L43
 629 002e 4FF4E771 		mov	r1, #462
 630 0032 FFF7FEFF 		bl	assertEFM
 631              	.L42:
 463:../emlib/src/em_dma.c **** 
 464:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 632              		.loc 3 464 0 is_stmt 1
 633 0036 9DF81B20 		ldrb	r2, [sp, #27]	@ zero_extendqisi2
 634 003a 9DF81A30 		ldrb	r3, [sp, #26]	@ zero_extendqisi2
 635 003e 0599     		ldr	r1, [sp, #20]
 636 0040 0091     		str	r1, [sp]
 637 0042 0A99     		ldr	r1, [sp, #40]
 638 0044 0191     		str	r1, [sp, #4]
 639 0046 0B99     		ldr	r1, [sp, #44]
 640 0048 0291     		str	r1, [sp, #8]
 641 004a 0798     		ldr	r0, [sp, #28]
 642 004c 0121     		movs	r1, #1
 643 004e FFF7FEFF 		bl	DMA_Prepare
 465:../emlib/src/em_dma.c ****               dmaCycleCtrlBasic,
 466:../emlib/src/em_dma.c ****               primary,
ARM GAS  /tmp/cclZCIt2.s 			page 46


 467:../emlib/src/em_dma.c ****               useBurst,
 468:../emlib/src/em_dma.c ****               dst,
 469:../emlib/src/em_dma.c ****               src,
 470:../emlib/src/em_dma.c ****               nMinus1);
 471:../emlib/src/em_dma.c **** 
 472:../emlib/src/em_dma.c ****   /* Enable channel, request signal is provided by peripheral device */
 473:../emlib/src/em_dma.c ****   DMA->CHENS = 1 << channel;
 644              		.loc 3 473 0
 645 0052 054B     		ldr	r3, .L43+4
 646 0054 079A     		ldr	r2, [sp, #28]
 647 0056 0121     		movs	r1, #1
 648 0058 01FA02F2 		lsl	r2, r1, r2
 649 005c 9A62     		str	r2, [r3, #40]
 474:../emlib/src/em_dma.c **** }
 650              		.loc 3 474 0
 651 005e 09B0     		add	sp, sp, #36
 652              		@ sp needed
 653 0060 5DF804FB 		ldr	pc, [sp], #4
 654              	.L44:
 655              		.align	2
 656              	.L43:
 657 0064 00000000 		.word	.LC0
 658 0068 00200C40 		.word	1074536448
 659              		.cfi_endproc
 660              	.LFE74:
 662              		.section	.text.DMA_ActivatePingPong,"ax",%progbits
 663              		.align	2
 664              		.global	DMA_ActivatePingPong
 665              		.thumb
 666              		.thumb_func
 668              	DMA_ActivatePingPong:
 669              	.LFB75:
 475:../emlib/src/em_dma.c **** 
 476:../emlib/src/em_dma.c **** 
 477:../emlib/src/em_dma.c **** /***************************************************************************//**
 478:../emlib/src/em_dma.c ****  * @brief
 479:../emlib/src/em_dma.c ****  *   Activate DMA ping-pong cycle (used for memory-peripheral transfers).
 480:../emlib/src/em_dma.c ****  *
 481:../emlib/src/em_dma.c ****  * @details
 482:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and both descriptors must
 483:../emlib/src/em_dma.c ****  *   have been properly configured. The primary descriptor is always the first
 484:../emlib/src/em_dma.c ****  *   descriptor to be used by the DMA controller.
 485:../emlib/src/em_dma.c ****  *
 486:../emlib/src/em_dma.c ****  * @note
 487:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 488:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 489:../emlib/src/em_dma.c ****  *
 490:../emlib/src/em_dma.c ****  * @param[in] channel
 491:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 492:../emlib/src/em_dma.c ****  *
 493:../emlib/src/em_dma.c ****  * @param[in] useBurst
 494:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 495:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 496:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptors. Please
 497:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage. Notice
 498:../emlib/src/em_dma.c ****  *   that this setting is used for both the primary and alternate descriptors.
 499:../emlib/src/em_dma.c ****  *
ARM GAS  /tmp/cclZCIt2.s 			page 47


 500:../emlib/src/em_dma.c ****  * @param[in] primDst
 501:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to, for primary descriptor.
 502:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 503:../emlib/src/em_dma.c ****  *
 504:../emlib/src/em_dma.c ****  * @param[in] primSrc
 505:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from, for primary descriptor.
 506:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 507:../emlib/src/em_dma.c ****  *
 508:../emlib/src/em_dma.c ****  * @param[in] primNMinus1
 509:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023), for
 510:../emlib/src/em_dma.c ****  *   primary descriptor. The size of the DMA transfer element (1, 2 or 4 bytes)
 511:../emlib/src/em_dma.c ****  *   is configured with DMA_CfgDescr().
 512:../emlib/src/em_dma.c ****  *
 513:../emlib/src/em_dma.c ****  * @param[in] altDst
 514:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to, for alternate descriptor.
 515:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 516:../emlib/src/em_dma.c ****  *
 517:../emlib/src/em_dma.c ****  * @param[in] altSrc
 518:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from, for alternate descriptor.
 519:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 520:../emlib/src/em_dma.c ****  *
 521:../emlib/src/em_dma.c ****  * @param[in] altNMinus1
 522:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023), for
 523:../emlib/src/em_dma.c ****  *   alternate descriptor. The size of the DMA transfer element (1, 2 or 4 bytes)
 524:../emlib/src/em_dma.c ****  *   is configured with DMA_CfgDescr().
 525:../emlib/src/em_dma.c ****  ******************************************************************************/
 526:../emlib/src/em_dma.c **** void DMA_ActivatePingPong(unsigned int channel,
 527:../emlib/src/em_dma.c ****                           bool useBurst,
 528:../emlib/src/em_dma.c ****                           void *primDst,
 529:../emlib/src/em_dma.c ****                           void *primSrc,
 530:../emlib/src/em_dma.c ****                           unsigned int primNMinus1,
 531:../emlib/src/em_dma.c ****                           void *altDst,
 532:../emlib/src/em_dma.c ****                           void *altSrc,
 533:../emlib/src/em_dma.c ****                           unsigned int altNMinus1)
 534:../emlib/src/em_dma.c **** {
 670              		.loc 3 534 0
 671              		.cfi_startproc
 672              		@ args = 16, pretend = 0, frame = 16
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674 0000 00B5     		push	{lr}
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 14, -4
 677 0002 89B0     		sub	sp, sp, #36
 678              		.cfi_def_cfa_offset 40
 679 0004 0790     		str	r0, [sp, #28]
 680 0006 0592     		str	r2, [sp, #20]
 681 0008 0493     		str	r3, [sp, #16]
 682 000a 0B46     		mov	r3, r1
 683 000c 8DF81B30 		strb	r3, [sp, #27]
 535:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 684              		.loc 3 535 0
 685 0010 079B     		ldr	r3, [sp, #28]
 686 0012 072B     		cmp	r3, #7
 687 0014 04D9     		bls	.L46
 688              		.loc 3 535 0 is_stmt 0 discriminator 1
 689 0016 1D48     		ldr	r0, .L49
 690 0018 40F21721 		movw	r1, #535
ARM GAS  /tmp/cclZCIt2.s 			page 48


 691 001c FFF7FEFF 		bl	assertEFM
 692              	.L46:
 536:../emlib/src/em_dma.c ****   EFM_ASSERT(primNMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 693              		.loc 3 536 0 is_stmt 1
 694 0020 0A9B     		ldr	r3, [sp, #40]
 695 0022 B3F5806F 		cmp	r3, #1024
 696 0026 04D3     		bcc	.L47
 697              		.loc 3 536 0 is_stmt 0 discriminator 1
 698 0028 1848     		ldr	r0, .L49
 699 002a 4FF40671 		mov	r1, #536
 700 002e FFF7FEFF 		bl	assertEFM
 701              	.L47:
 537:../emlib/src/em_dma.c ****   EFM_ASSERT(altNMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 702              		.loc 3 537 0 is_stmt 1
 703 0032 0D9B     		ldr	r3, [sp, #52]
 704 0034 B3F5806F 		cmp	r3, #1024
 705 0038 04D3     		bcc	.L48
 706              		.loc 3 537 0 is_stmt 0 discriminator 1
 707 003a 1448     		ldr	r0, .L49
 708 003c 40F21921 		movw	r1, #537
 709 0040 FFF7FEFF 		bl	assertEFM
 710              	.L48:
 538:../emlib/src/em_dma.c **** 
 539:../emlib/src/em_dma.c ****   /* Prepare alternate descriptor first */
 540:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 711              		.loc 3 540 0 is_stmt 1
 712 0044 9DF81B30 		ldrb	r3, [sp, #27]	@ zero_extendqisi2
 713 0048 0B9A     		ldr	r2, [sp, #44]
 714 004a 0092     		str	r2, [sp]
 715 004c 0C9A     		ldr	r2, [sp, #48]
 716 004e 0192     		str	r2, [sp, #4]
 717 0050 0D9A     		ldr	r2, [sp, #52]
 718 0052 0292     		str	r2, [sp, #8]
 719 0054 0798     		ldr	r0, [sp, #28]
 720 0056 0321     		movs	r1, #3
 721 0058 0022     		movs	r2, #0
 722 005a FFF7FEFF 		bl	DMA_Prepare
 541:../emlib/src/em_dma.c ****               dmaCycleCtrlPingPong,
 542:../emlib/src/em_dma.c ****               false,
 543:../emlib/src/em_dma.c ****               useBurst,
 544:../emlib/src/em_dma.c ****               altDst,
 545:../emlib/src/em_dma.c ****               altSrc,
 546:../emlib/src/em_dma.c ****               altNMinus1);
 547:../emlib/src/em_dma.c **** 
 548:../emlib/src/em_dma.c ****   /* Prepare primary descriptor last in order to start cycle using it */
 549:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 723              		.loc 3 549 0
 724 005e 9DF81B30 		ldrb	r3, [sp, #27]	@ zero_extendqisi2
 725 0062 059A     		ldr	r2, [sp, #20]
 726 0064 0092     		str	r2, [sp]
 727 0066 049A     		ldr	r2, [sp, #16]
 728 0068 0192     		str	r2, [sp, #4]
 729 006a 0A9A     		ldr	r2, [sp, #40]
 730 006c 0292     		str	r2, [sp, #8]
 731 006e 0798     		ldr	r0, [sp, #28]
 732 0070 0321     		movs	r1, #3
 733 0072 0122     		movs	r2, #1
ARM GAS  /tmp/cclZCIt2.s 			page 49


 734 0074 FFF7FEFF 		bl	DMA_Prepare
 550:../emlib/src/em_dma.c ****               dmaCycleCtrlPingPong,
 551:../emlib/src/em_dma.c ****               true,
 552:../emlib/src/em_dma.c ****               useBurst,
 553:../emlib/src/em_dma.c ****               primDst,
 554:../emlib/src/em_dma.c ****               primSrc,
 555:../emlib/src/em_dma.c ****               primNMinus1);
 556:../emlib/src/em_dma.c **** 
 557:../emlib/src/em_dma.c ****   /* Enable channel, request signal is provided by peripheral device */
 558:../emlib/src/em_dma.c ****   DMA->CHENS = 1 << channel;
 735              		.loc 3 558 0
 736 0078 054B     		ldr	r3, .L49+4
 737 007a 079A     		ldr	r2, [sp, #28]
 738 007c 0121     		movs	r1, #1
 739 007e 01FA02F2 		lsl	r2, r1, r2
 740 0082 9A62     		str	r2, [r3, #40]
 559:../emlib/src/em_dma.c **** }
 741              		.loc 3 559 0
 742 0084 09B0     		add	sp, sp, #36
 743              		@ sp needed
 744 0086 5DF804FB 		ldr	pc, [sp], #4
 745              	.L50:
 746 008a 00BF     		.align	2
 747              	.L49:
 748 008c 00000000 		.word	.LC0
 749 0090 00200C40 		.word	1074536448
 750              		.cfi_endproc
 751              	.LFE75:
 753              		.section	.text.DMA_ActivateScatterGather,"ax",%progbits
 754              		.align	2
 755              		.global	DMA_ActivateScatterGather
 756              		.thumb
 757              		.thumb_func
 759              	DMA_ActivateScatterGather:
 760              	.LFB76:
 560:../emlib/src/em_dma.c **** 
 561:../emlib/src/em_dma.c **** 
 562:../emlib/src/em_dma.c **** /***************************************************************************//**
 563:../emlib/src/em_dma.c ****  * @brief
 564:../emlib/src/em_dma.c ****  *   Activate DMA scatter-gather cycle (used for either memory-peripheral
 565:../emlib/src/em_dma.c ****  *   or memory-memory transfers).
 566:../emlib/src/em_dma.c ****  *
 567:../emlib/src/em_dma.c ****  * @details
 568:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the array with alternate descriptors
 569:../emlib/src/em_dma.c ****  *   must have been properly configured. This function can be reused without
 570:../emlib/src/em_dma.c ****  *   reconfiguring the alternate descriptors, as long as @p count is the same.
 571:../emlib/src/em_dma.c ****  *
 572:../emlib/src/em_dma.c ****  * @note
 573:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 574:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 575:../emlib/src/em_dma.c ****  *
 576:../emlib/src/em_dma.c ****  * @param[in] channel
 577:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 578:../emlib/src/em_dma.c ****  *
 579:../emlib/src/em_dma.c ****  * @param[in] useBurst
 580:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts
 581:../emlib/src/em_dma.c ****  *   (and thus this parameter is ignored for memory scatter-gather cycles).
ARM GAS  /tmp/cclZCIt2.s 			page 50


 582:../emlib/src/em_dma.c ****  *   This parameter determines if bursts should be enabled during DMA transfers
 583:../emlib/src/em_dma.c ****  *   using the alternate descriptors. Bursts must not be used if the total
 584:../emlib/src/em_dma.c ****  *   length (as given by nMinus1 for the alternate descriptor) is
 585:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 586:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 587:../emlib/src/em_dma.c ****  *
 588:../emlib/src/em_dma.c ****  * @param[in,out] altDescr
 589:../emlib/src/em_dma.c ****  *   Pointer to start of array with prepared alternate descriptors. The last
 590:../emlib/src/em_dma.c ****  *   descriptor will have its cycle control type reprogrammed to basic type.
 591:../emlib/src/em_dma.c ****  *
 592:../emlib/src/em_dma.c ****  * @param[in] count
 593:../emlib/src/em_dma.c ****  *   Number of alternate descriptors in @p altDescr array. Maximum number of
 594:../emlib/src/em_dma.c ****  *   alternate descriptors is 256.
 595:../emlib/src/em_dma.c ****  ******************************************************************************/
 596:../emlib/src/em_dma.c **** void DMA_ActivateScatterGather(unsigned int channel,
 597:../emlib/src/em_dma.c ****                                bool useBurst,
 598:../emlib/src/em_dma.c ****                                DMA_DESCRIPTOR_TypeDef *altDescr,
 599:../emlib/src/em_dma.c ****                                unsigned int count)
 600:../emlib/src/em_dma.c **** {
 761              		.loc 3 600 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 32
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765 0000 00B5     		push	{lr}
 766              		.cfi_def_cfa_offset 4
 767              		.cfi_offset 14, -4
 768 0002 89B0     		sub	sp, sp, #36
 769              		.cfi_def_cfa_offset 40
 770 0004 0390     		str	r0, [sp, #12]
 771 0006 0192     		str	r2, [sp, #4]
 772 0008 0093     		str	r3, [sp]
 773 000a 0B46     		mov	r3, r1
 774 000c 8DF80B30 		strb	r3, [sp, #11]
 601:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 602:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 603:../emlib/src/em_dma.c ****   uint32_t               cycleCtrl;
 604:../emlib/src/em_dma.c ****   uint32_t               chBit;
 605:../emlib/src/em_dma.c **** 
 606:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 775              		.loc 3 606 0
 776 0010 039B     		ldr	r3, [sp, #12]
 777 0012 072B     		cmp	r3, #7
 778 0014 04D9     		bls	.L52
 779              		.loc 3 606 0 is_stmt 0 discriminator 1
 780 0016 5748     		ldr	r0, .L61
 781 0018 40F25E21 		movw	r1, #606
 782 001c FFF7FEFF 		bl	assertEFM
 783              	.L52:
 607:../emlib/src/em_dma.c ****   EFM_ASSERT(altDescr);
 784              		.loc 3 607 0 is_stmt 1
 785 0020 019B     		ldr	r3, [sp, #4]
 786 0022 002B     		cmp	r3, #0
 787 0024 04D1     		bne	.L53
 788              		.loc 3 607 0 is_stmt 0 discriminator 1
 789 0026 5348     		ldr	r0, .L61
 790 0028 40F25F21 		movw	r1, #607
 791 002c FFF7FEFF 		bl	assertEFM
ARM GAS  /tmp/cclZCIt2.s 			page 51


 792              	.L53:
 608:../emlib/src/em_dma.c ****   EFM_ASSERT(count && (count <= 256));
 793              		.loc 3 608 0 is_stmt 1
 794 0030 009B     		ldr	r3, [sp]
 795 0032 002B     		cmp	r3, #0
 796 0034 03D0     		beq	.L54
 797              		.loc 3 608 0 is_stmt 0 discriminator 2
 798 0036 009B     		ldr	r3, [sp]
 799 0038 B3F5807F 		cmp	r3, #256
 800 003c 04D9     		bls	.L55
 801              	.L54:
 802              		.loc 3 608 0 discriminator 1
 803 003e 4D48     		ldr	r0, .L61
 804 0040 4FF41871 		mov	r1, #608
 805 0044 FFF7FEFF 		bl	assertEFM
 806              	.L55:
 609:../emlib/src/em_dma.c **** 
 610:../emlib/src/em_dma.c ****   /* We have to configure the primary descriptor properly in order to */
 611:../emlib/src/em_dma.c ****   /* transfer one complete alternate descriptor from the alternate */
 612:../emlib/src/em_dma.c ****   /* descriptor table into the actual alternate descriptor. */
 613:../emlib/src/em_dma.c ****   descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE) + channel;
 807              		.loc 3 613 0 is_stmt 1
 808 0048 039B     		ldr	r3, [sp, #12]
 809 004a 1A01     		lsls	r2, r3, #4
 810 004c 4A4B     		ldr	r3, .L61+4
 811 004e 9B68     		ldr	r3, [r3, #8]
 812 0050 1344     		add	r3, r3, r2
 813 0052 0793     		str	r3, [sp, #28]
 614:../emlib/src/em_dma.c **** 
 615:../emlib/src/em_dma.c ****   /* Set source end address to point to alternate descriptor array */
 616:../emlib/src/em_dma.c ****   descr->SRCEND = (uint32_t *)altDescr + (count * 4) - 1;
 814              		.loc 3 616 0
 815 0054 009B     		ldr	r3, [sp]
 816 0056 1B01     		lsls	r3, r3, #4
 817 0058 043B     		subs	r3, r3, #4
 818 005a 019A     		ldr	r2, [sp, #4]
 819 005c 1A44     		add	r2, r2, r3
 820 005e 079B     		ldr	r3, [sp, #28]
 821 0060 1A60     		str	r2, [r3]
 617:../emlib/src/em_dma.c **** 
 618:../emlib/src/em_dma.c ****   /* The destination end address in the primary descriptor MUST point */
 619:../emlib/src/em_dma.c ****   /* to the corresponding alternate descriptor in scatter-gather mode. */
 620:../emlib/src/em_dma.c ****   descr->DSTEND = (uint32_t *)((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE) +
 822              		.loc 3 620 0
 823 0062 039B     		ldr	r3, [sp, #12]
 824 0064 1A01     		lsls	r2, r3, #4
 825 0066 444B     		ldr	r3, .L61+4
 826 0068 DB68     		ldr	r3, [r3, #12]
 827 006a 1344     		add	r3, r3, r2
 621:../emlib/src/em_dma.c ****                                channel + 1) - 1;
 828              		.loc 3 621 0
 829 006c 0C33     		adds	r3, r3, #12
 830 006e 1A46     		mov	r2, r3
 620:../emlib/src/em_dma.c ****   descr->DSTEND = (uint32_t *)((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE) +
 831              		.loc 3 620 0
 832 0070 079B     		ldr	r3, [sp, #28]
 833 0072 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cclZCIt2.s 			page 52


 622:../emlib/src/em_dma.c **** 
 623:../emlib/src/em_dma.c ****   /* The user field of the descriptor is used for callback configuration, */
 624:../emlib/src/em_dma.c ****   /* and already configured when channel is configured. Do not modify it. */
 625:../emlib/src/em_dma.c **** 
 626:../emlib/src/em_dma.c ****   /* Determine from alternate configuration whether this is a memory or */
 627:../emlib/src/em_dma.c ****   /* peripheral scatter-gather, by looking at the first alternate descriptor. */
 628:../emlib/src/em_dma.c ****   cycleCtrl  = altDescr->CTRL & _DMA_CTRL_CYCLE_CTRL_MASK;
 834              		.loc 3 628 0
 835 0074 019B     		ldr	r3, [sp, #4]
 836 0076 9B68     		ldr	r3, [r3, #8]
 837 0078 03F00703 		and	r3, r3, #7
 838 007c 0693     		str	r3, [sp, #24]
 629:../emlib/src/em_dma.c ****   cycleCtrl &= ~(1 << _DMA_CTRL_CYCLE_CTRL_SHIFT);
 839              		.loc 3 629 0
 840 007e 069B     		ldr	r3, [sp, #24]
 841 0080 23F00103 		bic	r3, r3, #1
 842 0084 0693     		str	r3, [sp, #24]
 630:../emlib/src/em_dma.c **** 
 631:../emlib/src/em_dma.c ****   EFM_ASSERT((cycleCtrl == dmaCycleCtrlMemScatterGather) ||
 843              		.loc 3 631 0
 844 0086 069B     		ldr	r3, [sp, #24]
 845 0088 042B     		cmp	r3, #4
 846 008a 07D0     		beq	.L56
 847              		.loc 3 631 0 is_stmt 0 discriminator 1
 848 008c 069B     		ldr	r3, [sp, #24]
 849 008e 062B     		cmp	r3, #6
 850 0090 04D0     		beq	.L56
 851 0092 3848     		ldr	r0, .L61
 852 0094 4FF41E71 		mov	r1, #632
 853 0098 FFF7FEFF 		bl	assertEFM
 854              	.L56:
 632:../emlib/src/em_dma.c ****              (cycleCtrl == dmaCycleCtrlPerScatterGather));
 633:../emlib/src/em_dma.c **** 
 634:../emlib/src/em_dma.c ****   /* Set last alternate descriptor to basic or auto-request cycle type in */
 635:../emlib/src/em_dma.c ****   /* order to have dma_done signal asserted when complete. Otherwise interrupt */
 636:../emlib/src/em_dma.c ****   /* will not be triggered when done. */
 637:../emlib/src/em_dma.c ****   altDescr[count - 1].CTRL &= ~_DMA_CTRL_CYCLE_CTRL_MASK;
 855              		.loc 3 637 0 is_stmt 1
 856 009c 009B     		ldr	r3, [sp]
 857 009e 03F18053 		add	r3, r3, #268435456
 858 00a2 013B     		subs	r3, r3, #1
 859 00a4 1B01     		lsls	r3, r3, #4
 860 00a6 019A     		ldr	r2, [sp, #4]
 861 00a8 1A44     		add	r2, r2, r3
 862 00aa 009B     		ldr	r3, [sp]
 863 00ac 03F18053 		add	r3, r3, #268435456
 864 00b0 013B     		subs	r3, r3, #1
 865 00b2 1B01     		lsls	r3, r3, #4
 866 00b4 0199     		ldr	r1, [sp, #4]
 867 00b6 0B44     		add	r3, r3, r1
 868 00b8 9B68     		ldr	r3, [r3, #8]
 869 00ba 23F00703 		bic	r3, r3, #7
 870 00be 9360     		str	r3, [r2, #8]
 638:../emlib/src/em_dma.c ****   if (cycleCtrl == dmaCycleCtrlMemScatterGather)
 871              		.loc 3 638 0
 872 00c0 069B     		ldr	r3, [sp, #24]
 873 00c2 042B     		cmp	r3, #4
ARM GAS  /tmp/cclZCIt2.s 			page 53


 874 00c4 12D1     		bne	.L57
 639:../emlib/src/em_dma.c ****   {
 640:../emlib/src/em_dma.c ****     altDescr[count - 1].CTRL |= (uint32_t)dmaCycleCtrlAuto << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 875              		.loc 3 640 0
 876 00c6 009B     		ldr	r3, [sp]
 877 00c8 03F18053 		add	r3, r3, #268435456
 878 00cc 013B     		subs	r3, r3, #1
 879 00ce 1B01     		lsls	r3, r3, #4
 880 00d0 019A     		ldr	r2, [sp, #4]
 881 00d2 1A44     		add	r2, r2, r3
 882 00d4 009B     		ldr	r3, [sp]
 883 00d6 03F18053 		add	r3, r3, #268435456
 884 00da 013B     		subs	r3, r3, #1
 885 00dc 1B01     		lsls	r3, r3, #4
 886 00de 0199     		ldr	r1, [sp, #4]
 887 00e0 0B44     		add	r3, r3, r1
 888 00e2 9B68     		ldr	r3, [r3, #8]
 889 00e4 43F00203 		orr	r3, r3, #2
 890 00e8 9360     		str	r3, [r2, #8]
 891 00ea 11E0     		b	.L58
 892              	.L57:
 641:../emlib/src/em_dma.c ****   }
 642:../emlib/src/em_dma.c ****   else
 643:../emlib/src/em_dma.c ****   {
 644:../emlib/src/em_dma.c ****     altDescr[count - 1].CTRL |= (uint32_t)dmaCycleCtrlBasic << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 893              		.loc 3 644 0
 894 00ec 009B     		ldr	r3, [sp]
 895 00ee 03F18053 		add	r3, r3, #268435456
 896 00f2 013B     		subs	r3, r3, #1
 897 00f4 1B01     		lsls	r3, r3, #4
 898 00f6 019A     		ldr	r2, [sp, #4]
 899 00f8 1A44     		add	r2, r2, r3
 900 00fa 009B     		ldr	r3, [sp]
 901 00fc 03F18053 		add	r3, r3, #268435456
 902 0100 013B     		subs	r3, r3, #1
 903 0102 1B01     		lsls	r3, r3, #4
 904 0104 0199     		ldr	r1, [sp, #4]
 905 0106 0B44     		add	r3, r3, r1
 906 0108 9B68     		ldr	r3, [r3, #8]
 907 010a 43F00103 		orr	r3, r3, #1
 908 010e 9360     		str	r3, [r2, #8]
 909              	.L58:
 645:../emlib/src/em_dma.c ****   }
 646:../emlib/src/em_dma.c **** 
 647:../emlib/src/em_dma.c ****   /* If callback defined, update info on whether callback is issued for */
 648:../emlib/src/em_dma.c ****   /* primary or alternate descriptor. Not really useful for scatter-gather, */
 649:../emlib/src/em_dma.c ****   /* but do for consistency. Always set to alternate, since that is the last */
 650:../emlib/src/em_dma.c ****   /* descriptor actually used. */
 651:../emlib/src/em_dma.c ****   cb = (DMA_CB_TypeDef *)(descr->USER);
 910              		.loc 3 651 0
 911 0110 079B     		ldr	r3, [sp, #28]
 912 0112 DB68     		ldr	r3, [r3, #12]
 913 0114 0593     		str	r3, [sp, #20]
 652:../emlib/src/em_dma.c ****   if (cb)
 914              		.loc 3 652 0
 915 0116 059B     		ldr	r3, [sp, #20]
 916 0118 002B     		cmp	r3, #0
ARM GAS  /tmp/cclZCIt2.s 			page 54


 917 011a 02D0     		beq	.L59
 653:../emlib/src/em_dma.c ****   {
 654:../emlib/src/em_dma.c ****     cb->primary = false;
 918              		.loc 3 654 0
 919 011c 059B     		ldr	r3, [sp, #20]
 920 011e 0022     		movs	r2, #0
 921 0120 1A72     		strb	r2, [r3, #8]
 922              	.L59:
 655:../emlib/src/em_dma.c ****   }
 656:../emlib/src/em_dma.c **** 
 657:../emlib/src/em_dma.c ****   /* Configure primary descriptor control word */
 658:../emlib/src/em_dma.c ****   descr->CTRL =
 659:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataInc4 << _DMA_CTRL_DST_INC_SHIFT) |
 660:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataSize4 << _DMA_CTRL_DST_SIZE_SHIFT) |
 661:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataInc4 << _DMA_CTRL_SRC_INC_SHIFT) |
 662:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataSize4 << _DMA_CTRL_SRC_SIZE_SHIFT) |
 663:../emlib/src/em_dma.c ****     /* Use same protection scheme as for alternate descriptors */
 664:../emlib/src/em_dma.c ****     (altDescr->CTRL & _DMA_CTRL_SRC_PROT_CTRL_MASK) |
 923              		.loc 3 664 0
 924 0122 019B     		ldr	r3, [sp, #4]
 925 0124 9B68     		ldr	r3, [r3, #8]
 926 0126 03F4E012 		and	r2, r3, #1835008
 665:../emlib/src/em_dma.c ****     ((uint32_t)dmaArbitrate4 << _DMA_CTRL_R_POWER_SHIFT) |
 666:../emlib/src/em_dma.c ****     (((count * 4) - 1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 927              		.loc 3 666 0
 928 012a 009B     		ldr	r3, [sp]
 929 012c 9B00     		lsls	r3, r3, #2
 930 012e 013B     		subs	r3, r3, #1
 931 0130 1B01     		lsls	r3, r3, #4
 665:../emlib/src/em_dma.c ****     ((uint32_t)dmaArbitrate4 << _DMA_CTRL_R_POWER_SHIFT) |
 932              		.loc 3 665 0
 933 0132 1A43     		orrs	r2, r2, r3
 667:../emlib/src/em_dma.c ****     (((uint32_t)useBurst & 1) << _DMA_CTRL_NEXT_USEBURST_SHIFT) |
 934              		.loc 3 667 0
 935 0134 9DF80B30 		ldrb	r3, [sp, #11]	@ zero_extendqisi2
 936 0138 DB00     		lsls	r3, r3, #3
 666:../emlib/src/em_dma.c ****     (((count * 4) - 1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 937              		.loc 3 666 0
 938 013a 1A43     		orrs	r2, r2, r3
 939              		.loc 3 667 0
 940 013c 069B     		ldr	r3, [sp, #24]
 941 013e 1343     		orrs	r3, r3, r2
 942 0140 43F02A43 		orr	r3, r3, #-1442840576
 943 0144 43F40043 		orr	r3, r3, #32768
 658:../emlib/src/em_dma.c ****   descr->CTRL =
 944              		.loc 3 658 0
 945 0148 079A     		ldr	r2, [sp, #28]
 946 014a 9360     		str	r3, [r2, #8]
 668:../emlib/src/em_dma.c ****     cycleCtrl;
 669:../emlib/src/em_dma.c **** 
 670:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 947              		.loc 3 670 0
 948 014c 039B     		ldr	r3, [sp, #12]
 949 014e 0122     		movs	r2, #1
 950 0150 02FA03F3 		lsl	r3, r2, r3
 951 0154 0493     		str	r3, [sp, #16]
 671:../emlib/src/em_dma.c **** 
ARM GAS  /tmp/cclZCIt2.s 			page 55


 672:../emlib/src/em_dma.c ****   /* Start with primary descriptor */
 673:../emlib/src/em_dma.c ****   DMA->CHALTC = chBit;
 952              		.loc 3 673 0
 953 0156 084B     		ldr	r3, .L61+4
 954 0158 049A     		ldr	r2, [sp, #16]
 955 015a 5A63     		str	r2, [r3, #52]
 674:../emlib/src/em_dma.c **** 
 675:../emlib/src/em_dma.c ****   /* Enable channel */
 676:../emlib/src/em_dma.c ****   DMA->CHENS = chBit;
 956              		.loc 3 676 0
 957 015c 064B     		ldr	r3, .L61+4
 958 015e 049A     		ldr	r2, [sp, #16]
 959 0160 9A62     		str	r2, [r3, #40]
 677:../emlib/src/em_dma.c **** 
 678:../emlib/src/em_dma.c ****   /* Send request if memory scatter-gather, otherwise request signal is */
 679:../emlib/src/em_dma.c ****   /* provided by peripheral. */
 680:../emlib/src/em_dma.c ****   if (cycleCtrl == dmaCycleCtrlMemScatterGather)
 960              		.loc 3 680 0
 961 0162 069B     		ldr	r3, [sp, #24]
 962 0164 042B     		cmp	r3, #4
 963 0166 02D1     		bne	.L51
 681:../emlib/src/em_dma.c ****   {
 682:../emlib/src/em_dma.c ****     DMA->CHSWREQ = chBit;
 964              		.loc 3 682 0
 965 0168 034B     		ldr	r3, .L61+4
 966 016a 049A     		ldr	r2, [sp, #16]
 967 016c 5A61     		str	r2, [r3, #20]
 968              	.L51:
 683:../emlib/src/em_dma.c ****   }
 684:../emlib/src/em_dma.c **** }
 969              		.loc 3 684 0
 970 016e 09B0     		add	sp, sp, #36
 971              		@ sp needed
 972 0170 5DF804FB 		ldr	pc, [sp], #4
 973              	.L62:
 974              		.align	2
 975              	.L61:
 976 0174 00000000 		.word	.LC0
 977 0178 00200C40 		.word	1074536448
 978              		.cfi_endproc
 979              	.LFE76:
 981              		.section	.text.DMA_CfgChannel,"ax",%progbits
 982              		.align	2
 983              		.global	DMA_CfgChannel
 984              		.thumb
 985              		.thumb_func
 987              	DMA_CfgChannel:
 988              	.LFB77:
 685:../emlib/src/em_dma.c **** 
 686:../emlib/src/em_dma.c **** 
 687:../emlib/src/em_dma.c **** /***************************************************************************//**
 688:../emlib/src/em_dma.c ****  * @brief
 689:../emlib/src/em_dma.c ****  *   Configure a DMA channel.
 690:../emlib/src/em_dma.c ****  *
 691:../emlib/src/em_dma.c ****  * @details
 692:../emlib/src/em_dma.c ****  *   Configure miscellaneous issues for a DMA channel. This function is typically
 693:../emlib/src/em_dma.c ****  *   used once to setup a channel for a certain type of use.
ARM GAS  /tmp/cclZCIt2.s 			page 56


 694:../emlib/src/em_dma.c ****  *
 695:../emlib/src/em_dma.c ****  * @note
 696:../emlib/src/em_dma.c ****  *   If using this function on a channel already in use by the DMA controller,
 697:../emlib/src/em_dma.c ****  *   the behaviour is undefined.
 698:../emlib/src/em_dma.c ****  *
 699:../emlib/src/em_dma.c ****  * @param[in] channel
 700:../emlib/src/em_dma.c ****  *   DMA channel to configure.
 701:../emlib/src/em_dma.c ****  *
 702:../emlib/src/em_dma.c ****  * @param[in] cfg
 703:../emlib/src/em_dma.c ****  *   Configuration to use.
 704:../emlib/src/em_dma.c ****  ******************************************************************************/
 705:../emlib/src/em_dma.c **** void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
 706:../emlib/src/em_dma.c **** {
 989              		.loc 3 706 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 16
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993 0000 00B5     		push	{lr}
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 14, -4
 996 0002 85B0     		sub	sp, sp, #20
 997              		.cfi_def_cfa_offset 24
 998 0004 0190     		str	r0, [sp, #4]
 999 0006 0091     		str	r1, [sp]
 707:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 708:../emlib/src/em_dma.c **** 
 709:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1000              		.loc 3 709 0
 1001 0008 019B     		ldr	r3, [sp, #4]
 1002 000a 072B     		cmp	r3, #7
 1003 000c 04D9     		bls	.L64
 1004              		.loc 3 709 0 is_stmt 0 discriminator 1
 1005 000e 2548     		ldr	r0, .L70
 1006 0010 40F2C521 		movw	r1, #709
 1007 0014 FFF7FEFF 		bl	assertEFM
 1008              	.L64:
 710:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 1009              		.loc 3 710 0 is_stmt 1
 1010 0018 009B     		ldr	r3, [sp]
 1011 001a 002B     		cmp	r3, #0
 1012 001c 04D1     		bne	.L65
 1013              		.loc 3 710 0 is_stmt 0 discriminator 1
 1014 001e 2148     		ldr	r0, .L70
 1015 0020 40F2C621 		movw	r1, #710
 1016 0024 FFF7FEFF 		bl	assertEFM
 1017              	.L65:
 711:../emlib/src/em_dma.c **** 
 712:../emlib/src/em_dma.c ****   /* Always keep callback configuration reference in primary descriptor */
 713:../emlib/src/em_dma.c ****   descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 1018              		.loc 3 713 0 is_stmt 1
 1019 0028 1F4B     		ldr	r3, .L70+4
 1020 002a 9B68     		ldr	r3, [r3, #8]
 1021 002c 0393     		str	r3, [sp, #12]
 714:../emlib/src/em_dma.c ****   descr[channel].USER = (uint32_t)(cfg->cb);
 1022              		.loc 3 714 0
 1023 002e 019B     		ldr	r3, [sp, #4]
 1024 0030 1B01     		lsls	r3, r3, #4
ARM GAS  /tmp/cclZCIt2.s 			page 57


 1025 0032 039A     		ldr	r2, [sp, #12]
 1026 0034 1344     		add	r3, r3, r2
 1027 0036 009A     		ldr	r2, [sp]
 1028 0038 9268     		ldr	r2, [r2, #8]
 1029 003a DA60     		str	r2, [r3, #12]
 715:../emlib/src/em_dma.c **** 
 716:../emlib/src/em_dma.c ****   /* Set to specified priority for channel */
 717:../emlib/src/em_dma.c ****   if (cfg->highPri)
 1030              		.loc 3 717 0
 1031 003c 009B     		ldr	r3, [sp]
 1032 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1033 0040 002B     		cmp	r3, #0
 1034 0042 06D0     		beq	.L66
 718:../emlib/src/em_dma.c ****   {
 719:../emlib/src/em_dma.c ****     DMA->CHPRIS = 1 << channel;
 1035              		.loc 3 719 0
 1036 0044 184B     		ldr	r3, .L70+4
 1037 0046 019A     		ldr	r2, [sp, #4]
 1038 0048 0121     		movs	r1, #1
 1039 004a 01FA02F2 		lsl	r2, r1, r2
 1040 004e 9A63     		str	r2, [r3, #56]
 1041 0050 05E0     		b	.L67
 1042              	.L66:
 720:../emlib/src/em_dma.c ****   }
 721:../emlib/src/em_dma.c ****   else
 722:../emlib/src/em_dma.c ****   {
 723:../emlib/src/em_dma.c ****     DMA->CHPRIC = 1 << channel;
 1043              		.loc 3 723 0
 1044 0052 154B     		ldr	r3, .L70+4
 1045 0054 019A     		ldr	r2, [sp, #4]
 1046 0056 0121     		movs	r1, #1
 1047 0058 01FA02F2 		lsl	r2, r1, r2
 1048 005c DA63     		str	r2, [r3, #60]
 1049              	.L67:
 724:../emlib/src/em_dma.c ****   }
 725:../emlib/src/em_dma.c **** 
 726:../emlib/src/em_dma.c ****   /* Set DMA signal source select */
 727:../emlib/src/em_dma.c ****   DMA->CH[channel].CTRL = cfg->select;
 1050              		.loc 3 727 0
 1051 005e 124B     		ldr	r3, .L70+4
 1052 0060 009A     		ldr	r2, [sp]
 1053 0062 5168     		ldr	r1, [r2, #4]
 1054 0064 019A     		ldr	r2, [sp, #4]
 1055 0066 02F58862 		add	r2, r2, #1088
 1056 006a 43F82210 		str	r1, [r3, r2, lsl #2]
 728:../emlib/src/em_dma.c **** 
 729:../emlib/src/em_dma.c ****   /* Enable/disable interrupt as specified */
 730:../emlib/src/em_dma.c ****   if (cfg->enableInt)
 1057              		.loc 3 730 0
 1058 006e 009B     		ldr	r3, [sp]
 1059 0070 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1060 0072 002B     		cmp	r3, #0
 1061 0074 0ED0     		beq	.L68
 731:../emlib/src/em_dma.c ****   {
 732:../emlib/src/em_dma.c ****     DMA->IFC = (1 << channel);
 1062              		.loc 3 732 0
 1063 0076 0C4B     		ldr	r3, .L70+4
ARM GAS  /tmp/cclZCIt2.s 			page 58


 1064 0078 019A     		ldr	r2, [sp, #4]
 1065 007a 0121     		movs	r1, #1
 1066 007c 01FA02F2 		lsl	r2, r1, r2
 1067 0080 03F58053 		add	r3, r3, #4096
 1068 0084 0833     		adds	r3, r3, #8
 1069 0086 1A60     		str	r2, [r3]
 733:../emlib/src/em_dma.c ****     BITBAND_Peripheral(&(DMA->IEN), channel, 1);
 1070              		.loc 3 733 0
 1071 0088 0848     		ldr	r0, .L70+8
 1072 008a 0199     		ldr	r1, [sp, #4]
 1073 008c 0122     		movs	r2, #1
 1074 008e FFF7FEFF 		bl	BITBAND_Peripheral
 1075 0092 04E0     		b	.L63
 1076              	.L68:
 734:../emlib/src/em_dma.c ****   }
 735:../emlib/src/em_dma.c ****   else
 736:../emlib/src/em_dma.c ****   {
 737:../emlib/src/em_dma.c ****     BITBAND_Peripheral(&(DMA->IEN), channel, 0);
 1077              		.loc 3 737 0
 1078 0094 0548     		ldr	r0, .L70+8
 1079 0096 0199     		ldr	r1, [sp, #4]
 1080 0098 0022     		movs	r2, #0
 1081 009a FFF7FEFF 		bl	BITBAND_Peripheral
 1082              	.L63:
 738:../emlib/src/em_dma.c ****   }
 739:../emlib/src/em_dma.c **** }
 1083              		.loc 3 739 0
 1084 009e 05B0     		add	sp, sp, #20
 1085              		@ sp needed
 1086 00a0 5DF804FB 		ldr	pc, [sp], #4
 1087              	.L71:
 1088              		.align	2
 1089              	.L70:
 1090 00a4 00000000 		.word	.LC0
 1091 00a8 00200C40 		.word	1074536448
 1092 00ac 0C300C40 		.word	1074540556
 1093              		.cfi_endproc
 1094              	.LFE77:
 1096              		.section	.text.DMA_CfgDescr,"ax",%progbits
 1097              		.align	2
 1098              		.global	DMA_CfgDescr
 1099              		.thumb
 1100              		.thumb_func
 1102              	DMA_CfgDescr:
 1103              	.LFB78:
 740:../emlib/src/em_dma.c **** 
 741:../emlib/src/em_dma.c **** 
 742:../emlib/src/em_dma.c **** /***************************************************************************//**
 743:../emlib/src/em_dma.c ****  * @brief
 744:../emlib/src/em_dma.c ****  *   Configure DMA descriptor for auto-request, basic or ping-pong DMA cycles.
 745:../emlib/src/em_dma.c ****  *
 746:../emlib/src/em_dma.c ****  * @details
 747:../emlib/src/em_dma.c ****  *   This function is used for configuration of a descriptor for the following
 748:../emlib/src/em_dma.c ****  *   DMA cycle types:
 749:../emlib/src/em_dma.c ****  *
 750:../emlib/src/em_dma.c ****  *   @li auto-request - used for memory/memory transfer
 751:../emlib/src/em_dma.c ****  *   @li basic - used for a peripheral/memory transfer
ARM GAS  /tmp/cclZCIt2.s 			page 59


 752:../emlib/src/em_dma.c ****  *   @li ping-pong - used for a ping-pong based peripheral/memory transfer
 753:../emlib/src/em_dma.c ****  *     style providing time to refresh one descriptor while the other is
 754:../emlib/src/em_dma.c ****  *     in use.
 755:../emlib/src/em_dma.c ****  *
 756:../emlib/src/em_dma.c ****  *   The DMA cycle is not activated, please see DMA_ActivateAuto(),
 757:../emlib/src/em_dma.c ****  *   DMA_ActivateBasic() or DMA_ActivatePingPong() to activate the DMA cycle.
 758:../emlib/src/em_dma.c ****  *   In many cases, the configuration only has to be done once, and all
 759:../emlib/src/em_dma.c ****  *   subsequent cycles may be activated with the activate function.
 760:../emlib/src/em_dma.c ****  *
 761:../emlib/src/em_dma.c ****  *   For ping-pong DMA cycles, this function must be used both on the primary
 762:../emlib/src/em_dma.c ****  *   and the alternate descriptor prior to activating the DMA cycle.
 763:../emlib/src/em_dma.c ****  *
 764:../emlib/src/em_dma.c ****  *   Notice that the DMA channel must also be configured, see DMA_CfgChannel().
 765:../emlib/src/em_dma.c ****  *
 766:../emlib/src/em_dma.c ****  * @note
 767:../emlib/src/em_dma.c ****  *   If using this function on a descriptor already activated and in use by
 768:../emlib/src/em_dma.c ****  *   the DMA controller, the behaviour is undefined.
 769:../emlib/src/em_dma.c ****  *
 770:../emlib/src/em_dma.c ****  * @param[in] channel
 771:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 772:../emlib/src/em_dma.c ****  *
 773:../emlib/src/em_dma.c ****  * @param[in] primary
 774:../emlib/src/em_dma.c ****  *   @li true - configure primary descriptor
 775:../emlib/src/em_dma.c ****  *   @li false - configure alternate descriptor
 776:../emlib/src/em_dma.c ****  *
 777:../emlib/src/em_dma.c ****  * @param[in] cfg
 778:../emlib/src/em_dma.c ****  *   Configuration to use.
 779:../emlib/src/em_dma.c ****  ******************************************************************************/
 780:../emlib/src/em_dma.c **** void DMA_CfgDescr(unsigned int channel,
 781:../emlib/src/em_dma.c ****                   bool primary,
 782:../emlib/src/em_dma.c ****                   DMA_CfgDescr_TypeDef *cfg)
 783:../emlib/src/em_dma.c **** {
 1104              		.loc 3 783 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 24
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108 0000 00B5     		push	{lr}
 1109              		.cfi_def_cfa_offset 4
 1110              		.cfi_offset 14, -4
 1111 0002 87B0     		sub	sp, sp, #28
 1112              		.cfi_def_cfa_offset 32
 1113 0004 0390     		str	r0, [sp, #12]
 1114 0006 0B46     		mov	r3, r1
 1115 0008 0192     		str	r2, [sp, #4]
 1116 000a 8DF80B30 		strb	r3, [sp, #11]
 784:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 785:../emlib/src/em_dma.c **** 
 786:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1117              		.loc 3 786 0
 1118 000e 039B     		ldr	r3, [sp, #12]
 1119 0010 072B     		cmp	r3, #7
 1120 0012 04D9     		bls	.L73
 1121              		.loc 3 786 0 is_stmt 0 discriminator 1
 1122 0014 1C48     		ldr	r0, .L77
 1123 0016 40F21231 		movw	r1, #786
 1124 001a FFF7FEFF 		bl	assertEFM
 1125              	.L73:
ARM GAS  /tmp/cclZCIt2.s 			page 60


 787:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 1126              		.loc 3 787 0 is_stmt 1
 1127 001e 019B     		ldr	r3, [sp, #4]
 1128 0020 002B     		cmp	r3, #0
 1129 0022 04D1     		bne	.L74
 1130              		.loc 3 787 0 is_stmt 0 discriminator 1
 1131 0024 1848     		ldr	r0, .L77
 1132 0026 40F21331 		movw	r1, #787
 1133 002a FFF7FEFF 		bl	assertEFM
 1134              	.L74:
 788:../emlib/src/em_dma.c **** 
 789:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
 790:../emlib/src/em_dma.c ****   if (primary)
 1135              		.loc 3 790 0 is_stmt 1
 1136 002e 9DF80B30 		ldrb	r3, [sp, #11]	@ zero_extendqisi2
 1137 0032 002B     		cmp	r3, #0
 1138 0034 03D0     		beq	.L75
 791:../emlib/src/em_dma.c ****   {
 792:../emlib/src/em_dma.c ****     descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
 1139              		.loc 3 792 0
 1140 0036 154B     		ldr	r3, .L77+4
 1141 0038 9B68     		ldr	r3, [r3, #8]
 1142 003a 0593     		str	r3, [sp, #20]
 1143 003c 02E0     		b	.L76
 1144              	.L75:
 793:../emlib/src/em_dma.c ****   }
 794:../emlib/src/em_dma.c ****   else
 795:../emlib/src/em_dma.c ****   {
 796:../emlib/src/em_dma.c ****     descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
 1145              		.loc 3 796 0
 1146 003e 134B     		ldr	r3, .L77+4
 1147 0040 DB68     		ldr	r3, [r3, #12]
 1148 0042 0593     		str	r3, [sp, #20]
 1149              	.L76:
 797:../emlib/src/em_dma.c ****   }
 798:../emlib/src/em_dma.c ****   descr += channel;
 1150              		.loc 3 798 0
 1151 0044 039B     		ldr	r3, [sp, #12]
 1152 0046 1B01     		lsls	r3, r3, #4
 1153 0048 059A     		ldr	r2, [sp, #20]
 1154 004a 1344     		add	r3, r3, r2
 1155 004c 0593     		str	r3, [sp, #20]
 799:../emlib/src/em_dma.c **** 
 800:../emlib/src/em_dma.c ****   /* Prepare the descriptor */
 801:../emlib/src/em_dma.c ****   /* Source/destination end addresses set when started */
 802:../emlib/src/em_dma.c ****   descr->CTRL =
 803:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 1156              		.loc 3 803 0
 1157 004e 019B     		ldr	r3, [sp, #4]
 1158 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1159 0052 9A07     		lsls	r2, r3, #30
 804:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 1160              		.loc 3 804 0
 1161 0054 019B     		ldr	r3, [sp, #4]
 1162 0056 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1163 0058 1B07     		lsls	r3, r3, #28
 803:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
ARM GAS  /tmp/cclZCIt2.s 			page 61


 1164              		.loc 3 803 0
 1165 005a 1A43     		orrs	r2, r2, r3
 805:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 1166              		.loc 3 805 0
 1167 005c 019B     		ldr	r3, [sp, #4]
 1168 005e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1169 0060 9B06     		lsls	r3, r3, #26
 804:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 1170              		.loc 3 804 0
 1171 0062 1A43     		orrs	r2, r2, r3
 806:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 1172              		.loc 3 806 0
 1173 0064 019B     		ldr	r3, [sp, #4]
 1174 0066 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1175 0068 1B06     		lsls	r3, r3, #24
 805:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 1176              		.loc 3 805 0
 1177 006a 1343     		orrs	r3, r3, r2
 1178              		.loc 3 806 0
 1179 006c 1A46     		mov	r2, r3
 807:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 1180              		.loc 3 807 0
 1181 006e 019B     		ldr	r3, [sp, #4]
 1182 0070 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1183 0072 9B04     		lsls	r3, r3, #18
 806:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 1184              		.loc 3 806 0
 1185 0074 1A43     		orrs	r2, r2, r3
 808:../emlib/src/em_dma.c ****     (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
 1186              		.loc 3 808 0
 1187 0076 019B     		ldr	r3, [sp, #4]
 1188 0078 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1189 007a 9B03     		lsls	r3, r3, #14
 809:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_N_MINUS_1_SHIFT) |         /* Set when activated */
 810:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |     /* Set when activated */
 1190              		.loc 3 810 0
 1191 007c 1A43     		orrs	r2, r2, r3
 802:../emlib/src/em_dma.c ****   descr->CTRL =
 1192              		.loc 3 802 0
 1193 007e 059B     		ldr	r3, [sp, #20]
 1194 0080 9A60     		str	r2, [r3, #8]
 811:../emlib/src/em_dma.c ****     DMA_CTRL_CYCLE_CTRL_INVALID;               /* Set when activated */
 812:../emlib/src/em_dma.c **** }
 1195              		.loc 3 812 0
 1196 0082 07B0     		add	sp, sp, #28
 1197              		@ sp needed
 1198 0084 5DF804FB 		ldr	pc, [sp], #4
 1199              	.L78:
 1200              		.align	2
 1201              	.L77:
 1202 0088 00000000 		.word	.LC0
 1203 008c 00200C40 		.word	1074536448
 1204              		.cfi_endproc
 1205              	.LFE78:
 1207              		.section	.text.DMA_CfgDescrScatterGather,"ax",%progbits
 1208              		.align	2
 1209              		.global	DMA_CfgDescrScatterGather
ARM GAS  /tmp/cclZCIt2.s 			page 62


 1210              		.thumb
 1211              		.thumb_func
 1213              	DMA_CfgDescrScatterGather:
 1214              	.LFB79:
 813:../emlib/src/em_dma.c **** 
 814:../emlib/src/em_dma.c **** 
 815:../emlib/src/em_dma.c **** #if defined( _DMA_LOOP0_MASK ) && defined( _DMA_LOOP1_MASK )
 816:../emlib/src/em_dma.c **** /***************************************************************************//**
 817:../emlib/src/em_dma.c ****  * @brief Configure DMA channel for Loop mode or 2D transfer.
 818:../emlib/src/em_dma.c ****  *
 819:../emlib/src/em_dma.c ****  * @details
 820:../emlib/src/em_dma.c ****  *   For 2D transfer, set cfg->enable to "false", and only configure nMinus1
 821:../emlib/src/em_dma.c ****  *   to same width as channel descriptor.
 822:../emlib/src/em_dma.c ****  *
 823:../emlib/src/em_dma.c ****  * @param[in] channel
 824:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 825:../emlib/src/em_dma.c ****  *
 826:../emlib/src/em_dma.c ****  * @param[in] cfg
 827:../emlib/src/em_dma.c ****  *   Configuration to use.
 828:../emlib/src/em_dma.c ****  ******************************************************************************/
 829:../emlib/src/em_dma.c **** void DMA_CfgLoop(unsigned int channel, DMA_CfgLoop_TypeDef *cfg)
 830:../emlib/src/em_dma.c **** {
 831:../emlib/src/em_dma.c ****   EFM_ASSERT(channel <= 1);
 832:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->nMinus1 <= 1023);
 833:../emlib/src/em_dma.c **** 
 834:../emlib/src/em_dma.c ****   /* Configure LOOP setting */
 835:../emlib/src/em_dma.c ****   switch( channel )
 836:../emlib/src/em_dma.c ****   {
 837:../emlib/src/em_dma.c ****   case 0:
 838:../emlib/src/em_dma.c ****     DMA->LOOP0 = (cfg->enable << _DMA_LOOP0_EN_SHIFT|
 839:../emlib/src/em_dma.c ****                   cfg->nMinus1 << _DMA_LOOP0_WIDTH_SHIFT);
 840:../emlib/src/em_dma.c ****     break;
 841:../emlib/src/em_dma.c ****   case 1:
 842:../emlib/src/em_dma.c ****     DMA->LOOP1 = (cfg->enable << _DMA_LOOP1_EN_SHIFT|
 843:../emlib/src/em_dma.c ****                   cfg->nMinus1 << _DMA_LOOP1_WIDTH_SHIFT);
 844:../emlib/src/em_dma.c ****     break;
 845:../emlib/src/em_dma.c ****   }
 846:../emlib/src/em_dma.c **** }
 847:../emlib/src/em_dma.c **** #endif
 848:../emlib/src/em_dma.c **** 
 849:../emlib/src/em_dma.c **** 
 850:../emlib/src/em_dma.c **** #if defined( _DMA_RECT0_MASK )
 851:../emlib/src/em_dma.c **** /***************************************************************************//**
 852:../emlib/src/em_dma.c ****  * @brief Configure DMA channel 2D transfer properties.
 853:../emlib/src/em_dma.c ****  *
 854:../emlib/src/em_dma.c ****  * @param[in] channel
 855:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 856:../emlib/src/em_dma.c ****  *
 857:../emlib/src/em_dma.c ****  * @param[in] cfg
 858:../emlib/src/em_dma.c ****  *   Configuration to use.
 859:../emlib/src/em_dma.c ****  ******************************************************************************/
 860:../emlib/src/em_dma.c **** void DMA_CfgRect(unsigned int channel, DMA_CfgRect_TypeDef *cfg)
 861:../emlib/src/em_dma.c **** {
 862:../emlib/src/em_dma.c ****   (void)channel;                            /* Unused parameter */
 863:../emlib/src/em_dma.c **** 
 864:../emlib/src/em_dma.c ****   EFM_ASSERT(channel == 0);
 865:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->dstStride <= 2047);
ARM GAS  /tmp/cclZCIt2.s 			page 63


 866:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->srcStride <= 2047);
 867:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->height <= 1023);
 868:../emlib/src/em_dma.c **** 
 869:../emlib/src/em_dma.c ****   /* Configure rectangular/2D copy */
 870:../emlib/src/em_dma.c ****   DMA->RECT0 = (cfg->dstStride << _DMA_RECT0_DSTSTRIDE_SHIFT|
 871:../emlib/src/em_dma.c ****                 cfg->srcStride << _DMA_RECT0_SRCSTRIDE_SHIFT|
 872:../emlib/src/em_dma.c ****                 cfg->height << _DMA_RECT0_HEIGHT_SHIFT);
 873:../emlib/src/em_dma.c **** }
 874:../emlib/src/em_dma.c **** #endif
 875:../emlib/src/em_dma.c **** 
 876:../emlib/src/em_dma.c **** 
 877:../emlib/src/em_dma.c **** /***************************************************************************//**
 878:../emlib/src/em_dma.c ****  * @brief
 879:../emlib/src/em_dma.c ****  *   Configure an alternate DMA descriptor for use with scatter-gather DMA
 880:../emlib/src/em_dma.c ****  *   cycles.
 881:../emlib/src/em_dma.c ****  *
 882:../emlib/src/em_dma.c ****  * @details
 883:../emlib/src/em_dma.c ****  *   In scatter-gather mode, the alternate descriptors are located in one
 884:../emlib/src/em_dma.c ****  *   contiguous memory area. Each of the alternate descriptor must be fully
 885:../emlib/src/em_dma.c ****  *   configured prior to starting the scatter-gather DMA cycle.
 886:../emlib/src/em_dma.c ****  *
 887:../emlib/src/em_dma.c ****  *   The DMA cycle is not activated by this function, please see
 888:../emlib/src/em_dma.c ****  *   DMA_ActivateScatterGather() to activate the DMA cycle. In some cases, the
 889:../emlib/src/em_dma.c ****  *   alternate configuration only has to be done once, and all subsequent
 890:../emlib/src/em_dma.c ****  *   transfers may be activated with the activate function.
 891:../emlib/src/em_dma.c ****  *
 892:../emlib/src/em_dma.c ****  *   Notice that the DMA channel must also be configured, see DMA_CfgChannel().
 893:../emlib/src/em_dma.c ****  *
 894:../emlib/src/em_dma.c ****  * @param[in] descr
 895:../emlib/src/em_dma.c ****  *   Points to start of memory area holding the alternate descriptors.
 896:../emlib/src/em_dma.c ****  *
 897:../emlib/src/em_dma.c ****  * @param[in] indx
 898:../emlib/src/em_dma.c ****  *   Alternate descriptor index number to configure (numbered from 0).
 899:../emlib/src/em_dma.c ****  *
 900:../emlib/src/em_dma.c ****  * @param[in] cfg
 901:../emlib/src/em_dma.c ****  *   Configuration to use.
 902:../emlib/src/em_dma.c ****  ******************************************************************************/
 903:../emlib/src/em_dma.c **** void DMA_CfgDescrScatterGather(DMA_DESCRIPTOR_TypeDef *descr,
 904:../emlib/src/em_dma.c ****                                unsigned int indx,
 905:../emlib/src/em_dma.c ****                                DMA_CfgDescrSGAlt_TypeDef *cfg)
 906:../emlib/src/em_dma.c **** {
 1215              		.loc 3 906 0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 24
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
 1219 0000 00B5     		push	{lr}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 14, -4
 1222 0002 87B0     		sub	sp, sp, #28
 1223              		.cfi_def_cfa_offset 32
 1224 0004 0390     		str	r0, [sp, #12]
 1225 0006 0291     		str	r1, [sp, #8]
 1226 0008 0192     		str	r2, [sp, #4]
 907:../emlib/src/em_dma.c ****   uint32_t cycleCtrl;
 908:../emlib/src/em_dma.c **** 
 909:../emlib/src/em_dma.c ****   EFM_ASSERT(descr);
 1227              		.loc 3 909 0
ARM GAS  /tmp/cclZCIt2.s 			page 64


 1228 000a 039B     		ldr	r3, [sp, #12]
 1229 000c 002B     		cmp	r3, #0
 1230 000e 04D1     		bne	.L80
 1231              		.loc 3 909 0 is_stmt 0 discriminator 1
 1232 0010 3748     		ldr	r0, .L88
 1233 0012 40F28D31 		movw	r1, #909
 1234 0016 FFF7FEFF 		bl	assertEFM
 1235              	.L80:
 910:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 1236              		.loc 3 910 0 is_stmt 1
 1237 001a 019B     		ldr	r3, [sp, #4]
 1238 001c 002B     		cmp	r3, #0
 1239 001e 04D1     		bne	.L81
 1240              		.loc 3 910 0 is_stmt 0 discriminator 1
 1241 0020 3348     		ldr	r0, .L88
 1242 0022 40F28E31 		movw	r1, #910
 1243 0026 FFF7FEFF 		bl	assertEFM
 1244              	.L81:
 911:../emlib/src/em_dma.c **** 
 912:../emlib/src/em_dma.c ****   /* Point to selected entry in alternate descriptor table */
 913:../emlib/src/em_dma.c ****   descr += indx;
 1245              		.loc 3 913 0 is_stmt 1
 1246 002a 029B     		ldr	r3, [sp, #8]
 1247 002c 1B01     		lsls	r3, r3, #4
 1248 002e 039A     		ldr	r2, [sp, #12]
 1249 0030 1344     		add	r3, r3, r2
 1250 0032 0393     		str	r3, [sp, #12]
 914:../emlib/src/em_dma.c **** 
 915:../emlib/src/em_dma.c ****   if (cfg->srcInc == dmaDataIncNone)
 1251              		.loc 3 915 0
 1252 0034 019B     		ldr	r3, [sp, #4]
 1253 0036 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1254 0038 032B     		cmp	r3, #3
 1255 003a 04D1     		bne	.L82
 916:../emlib/src/em_dma.c ****   {
 917:../emlib/src/em_dma.c ****     descr->SRCEND = cfg->src;
 1256              		.loc 3 917 0
 1257 003c 019B     		ldr	r3, [sp, #4]
 1258 003e 1A68     		ldr	r2, [r3]
 1259 0040 039B     		ldr	r3, [sp, #12]
 1260 0042 1A60     		str	r2, [r3]
 1261 0044 0DE0     		b	.L83
 1262              	.L82:
 918:../emlib/src/em_dma.c ****   }
 919:../emlib/src/em_dma.c ****   else
 920:../emlib/src/em_dma.c ****   {
 921:../emlib/src/em_dma.c ****     descr->SRCEND = (void *)((uint32_t)(cfg->src) + ((uint32_t)(cfg->nMinus1) << cfg->srcInc));
 1263              		.loc 3 921 0
 1264 0046 019B     		ldr	r3, [sp, #4]
 1265 0048 1B68     		ldr	r3, [r3]
 1266 004a 1A46     		mov	r2, r3
 1267 004c 019B     		ldr	r3, [sp, #4]
 1268 004e 9B89     		ldrh	r3, [r3, #12]
 1269 0050 1946     		mov	r1, r3
 1270 0052 019B     		ldr	r3, [sp, #4]
 1271 0054 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1272 0056 01FA03F3 		lsl	r3, r1, r3
ARM GAS  /tmp/cclZCIt2.s 			page 65


 1273 005a 1344     		add	r3, r3, r2
 1274 005c 1A46     		mov	r2, r3
 1275 005e 039B     		ldr	r3, [sp, #12]
 1276 0060 1A60     		str	r2, [r3]
 1277              	.L83:
 922:../emlib/src/em_dma.c ****   }
 923:../emlib/src/em_dma.c **** 
 924:../emlib/src/em_dma.c ****   if (cfg->dstInc == dmaDataIncNone)
 1278              		.loc 3 924 0
 1279 0062 019B     		ldr	r3, [sp, #4]
 1280 0064 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1281 0066 032B     		cmp	r3, #3
 1282 0068 04D1     		bne	.L84
 925:../emlib/src/em_dma.c ****   {
 926:../emlib/src/em_dma.c ****     descr->DSTEND = cfg->dst;
 1283              		.loc 3 926 0
 1284 006a 019B     		ldr	r3, [sp, #4]
 1285 006c 5A68     		ldr	r2, [r3, #4]
 1286 006e 039B     		ldr	r3, [sp, #12]
 1287 0070 5A60     		str	r2, [r3, #4]
 1288 0072 0DE0     		b	.L85
 1289              	.L84:
 927:../emlib/src/em_dma.c ****   }
 928:../emlib/src/em_dma.c ****   else
 929:../emlib/src/em_dma.c ****   {
 930:../emlib/src/em_dma.c ****     descr->DSTEND = (void *)((uint32_t)(cfg->dst) + ((uint32_t)(cfg->nMinus1) << cfg->dstInc));
 1290              		.loc 3 930 0
 1291 0074 019B     		ldr	r3, [sp, #4]
 1292 0076 5B68     		ldr	r3, [r3, #4]
 1293 0078 1A46     		mov	r2, r3
 1294 007a 019B     		ldr	r3, [sp, #4]
 1295 007c 9B89     		ldrh	r3, [r3, #12]
 1296 007e 1946     		mov	r1, r3
 1297 0080 019B     		ldr	r3, [sp, #4]
 1298 0082 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1299 0084 01FA03F3 		lsl	r3, r1, r3
 1300 0088 1344     		add	r3, r3, r2
 1301 008a 1A46     		mov	r2, r3
 1302 008c 039B     		ldr	r3, [sp, #12]
 1303 008e 5A60     		str	r2, [r3, #4]
 1304              	.L85:
 931:../emlib/src/em_dma.c ****   }
 932:../emlib/src/em_dma.c **** 
 933:../emlib/src/em_dma.c ****   /* User definable part not used */
 934:../emlib/src/em_dma.c ****   descr->USER = 0;
 1305              		.loc 3 934 0
 1306 0090 039B     		ldr	r3, [sp, #12]
 1307 0092 0022     		movs	r2, #0
 1308 0094 DA60     		str	r2, [r3, #12]
 935:../emlib/src/em_dma.c **** 
 936:../emlib/src/em_dma.c ****   if (cfg->peripheral)
 1309              		.loc 3 936 0
 1310 0096 019B     		ldr	r3, [sp, #4]
 1311 0098 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1312 009a 002B     		cmp	r3, #0
 1313 009c 02D0     		beq	.L86
 937:../emlib/src/em_dma.c ****   {
ARM GAS  /tmp/cclZCIt2.s 			page 66


 938:../emlib/src/em_dma.c ****     cycleCtrl = (uint32_t)dmaCycleCtrlPerScatterGather + 1;
 1314              		.loc 3 938 0
 1315 009e 0723     		movs	r3, #7
 1316 00a0 0593     		str	r3, [sp, #20]
 1317 00a2 01E0     		b	.L87
 1318              	.L86:
 939:../emlib/src/em_dma.c ****   }
 940:../emlib/src/em_dma.c ****   else
 941:../emlib/src/em_dma.c ****   {
 942:../emlib/src/em_dma.c ****     cycleCtrl = (uint32_t)dmaCycleCtrlMemScatterGather + 1;
 1319              		.loc 3 942 0
 1320 00a4 0523     		movs	r3, #5
 1321 00a6 0593     		str	r3, [sp, #20]
 1322              	.L87:
 943:../emlib/src/em_dma.c ****   }
 944:../emlib/src/em_dma.c **** 
 945:../emlib/src/em_dma.c ****   descr->CTRL =
 946:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 1323              		.loc 3 946 0
 1324 00a8 019B     		ldr	r3, [sp, #4]
 1325 00aa 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1326 00ac 9A07     		lsls	r2, r3, #30
 947:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 1327              		.loc 3 947 0
 1328 00ae 019B     		ldr	r3, [sp, #4]
 1329 00b0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1330 00b2 1B07     		lsls	r3, r3, #28
 946:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 1331              		.loc 3 946 0
 1332 00b4 1A43     		orrs	r2, r2, r3
 948:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 1333              		.loc 3 948 0
 1334 00b6 019B     		ldr	r3, [sp, #4]
 1335 00b8 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1336 00ba 9B06     		lsls	r3, r3, #26
 947:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 1337              		.loc 3 947 0
 1338 00bc 1A43     		orrs	r2, r2, r3
 949:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 1339              		.loc 3 949 0
 1340 00be 019B     		ldr	r3, [sp, #4]
 1341 00c0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1342 00c2 1B06     		lsls	r3, r3, #24
 948:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 1343              		.loc 3 948 0
 1344 00c4 1343     		orrs	r3, r3, r2
 1345              		.loc 3 949 0
 1346 00c6 1A46     		mov	r2, r3
 950:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 1347              		.loc 3 950 0
 1348 00c8 019B     		ldr	r3, [sp, #4]
 1349 00ca 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1350 00cc 9B04     		lsls	r3, r3, #18
 949:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 1351              		.loc 3 949 0
 1352 00ce 1A43     		orrs	r2, r2, r3
 951:../emlib/src/em_dma.c ****     (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
ARM GAS  /tmp/cclZCIt2.s 			page 67


 1353              		.loc 3 951 0
 1354 00d0 019B     		ldr	r3, [sp, #4]
 1355 00d2 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1356 00d4 9B03     		lsls	r3, r3, #14
 950:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 1357              		.loc 3 950 0
 1358 00d6 1A43     		orrs	r2, r2, r3
 952:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->nMinus1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 1359              		.loc 3 952 0
 1360 00d8 019B     		ldr	r3, [sp, #4]
 1361 00da 9B89     		ldrh	r3, [r3, #12]
 1362 00dc 1B01     		lsls	r3, r3, #4
 1363 00de 1A43     		orrs	r2, r2, r3
 953:../emlib/src/em_dma.c ****     /* Never set next useburst bit, since the descriptor used after the */
 954:../emlib/src/em_dma.c ****     /* alternate descriptor is the primary descriptor which operates on */
 955:../emlib/src/em_dma.c ****     /* memory. If the alternate descriptors need to have useBurst set, this */
 956:../emlib/src/em_dma.c ****     /* done when setting up the primary descriptor, ie when activating. */
 957:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |
 1364              		.loc 3 957 0
 1365 00e0 059B     		ldr	r3, [sp, #20]
 1366 00e2 1A43     		orrs	r2, r2, r3
 945:../emlib/src/em_dma.c ****   descr->CTRL =
 1367              		.loc 3 945 0
 1368 00e4 039B     		ldr	r3, [sp, #12]
 1369 00e6 9A60     		str	r2, [r3, #8]
 958:../emlib/src/em_dma.c ****     (cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT);
 959:../emlib/src/em_dma.c **** }
 1370              		.loc 3 959 0
 1371 00e8 07B0     		add	sp, sp, #28
 1372              		@ sp needed
 1373 00ea 5DF804FB 		ldr	pc, [sp], #4
 1374              	.L89:
 1375 00ee 00BF     		.align	2
 1376              	.L88:
 1377 00f0 00000000 		.word	.LC0
 1378              		.cfi_endproc
 1379              	.LFE79:
 1381              		.section	.text.DMA_ChannelEnabled,"ax",%progbits
 1382              		.align	2
 1383              		.global	DMA_ChannelEnabled
 1384              		.thumb
 1385              		.thumb_func
 1387              	DMA_ChannelEnabled:
 1388              	.LFB80:
 960:../emlib/src/em_dma.c **** 
 961:../emlib/src/em_dma.c **** 
 962:../emlib/src/em_dma.c **** /***************************************************************************//**
 963:../emlib/src/em_dma.c ****  * @brief
 964:../emlib/src/em_dma.c ****  *   Check if DMA channel is enabled.
 965:../emlib/src/em_dma.c ****  *
 966:../emlib/src/em_dma.c ****  * @details
 967:../emlib/src/em_dma.c ****  *   The DMA channel is disabled when the DMA controller has finished a DMA
 968:../emlib/src/em_dma.c ****  *   cycle.
 969:../emlib/src/em_dma.c ****  *
 970:../emlib/src/em_dma.c ****  * @param[in] channel
 971:../emlib/src/em_dma.c ****  *   DMA channel to check.
 972:../emlib/src/em_dma.c ****  *
ARM GAS  /tmp/cclZCIt2.s 			page 68


 973:../emlib/src/em_dma.c ****  * @return
 974:../emlib/src/em_dma.c ****  *   true if channel is enabled, false if not.
 975:../emlib/src/em_dma.c ****  ******************************************************************************/
 976:../emlib/src/em_dma.c **** bool DMA_ChannelEnabled(unsigned int channel)
 977:../emlib/src/em_dma.c **** {
 1389              		.loc 3 977 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 8
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393 0000 00B5     		push	{lr}
 1394              		.cfi_def_cfa_offset 4
 1395              		.cfi_offset 14, -4
 1396 0002 83B0     		sub	sp, sp, #12
 1397              		.cfi_def_cfa_offset 16
 1398 0004 0190     		str	r0, [sp, #4]
 978:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1399              		.loc 3 978 0
 1400 0006 019B     		ldr	r3, [sp, #4]
 1401 0008 072B     		cmp	r3, #7
 1402 000a 04D9     		bls	.L91
 1403              		.loc 3 978 0 is_stmt 0 discriminator 1
 1404 000c 0A48     		ldr	r0, .L93
 1405 000e 40F2D231 		movw	r1, #978
 1406 0012 FFF7FEFF 		bl	assertEFM
 1407              	.L91:
 979:../emlib/src/em_dma.c **** 
 980:../emlib/src/em_dma.c ****   return (bool)((DMA->CHENS >> channel) & 1);
 1408              		.loc 3 980 0 is_stmt 1
 1409 0016 094B     		ldr	r3, .L93+4
 1410 0018 9A6A     		ldr	r2, [r3, #40]
 1411 001a 019B     		ldr	r3, [sp, #4]
 1412 001c 22FA03F3 		lsr	r3, r2, r3
 1413 0020 03F00103 		and	r3, r3, #1
 1414 0024 002B     		cmp	r3, #0
 1415 0026 0CBF     		ite	eq
 1416 0028 0023     		moveq	r3, #0
 1417 002a 0123     		movne	r3, #1
 1418 002c DBB2     		uxtb	r3, r3
 981:../emlib/src/em_dma.c **** }
 1419              		.loc 3 981 0
 1420 002e 1846     		mov	r0, r3
 1421 0030 03B0     		add	sp, sp, #12
 1422              		@ sp needed
 1423 0032 5DF804FB 		ldr	pc, [sp], #4
 1424              	.L94:
 1425 0036 00BF     		.align	2
 1426              	.L93:
 1427 0038 00000000 		.word	.LC0
 1428 003c 00200C40 		.word	1074536448
 1429              		.cfi_endproc
 1430              	.LFE80:
 1432              		.section	.text.DMA_Init,"ax",%progbits
 1433              		.align	2
 1434              		.global	DMA_Init
 1435              		.thumb
 1436              		.thumb_func
 1438              	DMA_Init:
ARM GAS  /tmp/cclZCIt2.s 			page 69


 1439              	.LFB81:
 982:../emlib/src/em_dma.c **** 
 983:../emlib/src/em_dma.c **** 
 984:../emlib/src/em_dma.c **** /***************************************************************************//**
 985:../emlib/src/em_dma.c ****  * @brief
 986:../emlib/src/em_dma.c ****  *   Initializes DMA controller.
 987:../emlib/src/em_dma.c ****  *
 988:../emlib/src/em_dma.c ****  * @details
 989:../emlib/src/em_dma.c ****  *   This function will reset and prepare the DMA controller for use. Although
 990:../emlib/src/em_dma.c ****  *   it may be used several times, it is normally only used during system
 991:../emlib/src/em_dma.c ****  *   init. If reused during normal operation, notice that any ongoing DMA
 992:../emlib/src/em_dma.c ****  *   transfers will be aborted. When completed, the DMA controller is in
 993:../emlib/src/em_dma.c ****  *   an enabled state.
 994:../emlib/src/em_dma.c ****  *
 995:../emlib/src/em_dma.c ****  * @note
 996:../emlib/src/em_dma.c ****  *   Must be invoked before using the DMA controller.
 997:../emlib/src/em_dma.c ****  *
 998:../emlib/src/em_dma.c ****  * @param[in] init
 999:../emlib/src/em_dma.c ****  *   Pointer to a structure containing DMA init information.
1000:../emlib/src/em_dma.c ****  ******************************************************************************/
1001:../emlib/src/em_dma.c **** void DMA_Init(DMA_Init_TypeDef *init)
1002:../emlib/src/em_dma.c **** {
 1440              		.loc 3 1002 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 8
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444 0000 00B5     		push	{lr}
 1445              		.cfi_def_cfa_offset 4
 1446              		.cfi_offset 14, -4
 1447 0002 83B0     		sub	sp, sp, #12
 1448              		.cfi_def_cfa_offset 16
 1449 0004 0190     		str	r0, [sp, #4]
1003:../emlib/src/em_dma.c ****   EFM_ASSERT(init);
 1450              		.loc 3 1003 0
 1451 0006 019B     		ldr	r3, [sp, #4]
 1452 0008 002B     		cmp	r3, #0
 1453 000a 04D1     		bne	.L96
 1454              		.loc 3 1003 0 is_stmt 0 discriminator 1
 1455 000c 1748     		ldr	r0, .L98
 1456 000e 40F2EB31 		movw	r1, #1003
 1457 0012 FFF7FEFF 		bl	assertEFM
 1458              	.L96:
1004:../emlib/src/em_dma.c **** 
1005:../emlib/src/em_dma.c ****   /* Make sure control block is properly aligned */
1006:../emlib/src/em_dma.c ****   EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
 1459              		.loc 3 1006 0 is_stmt 1
 1460 0016 019B     		ldr	r3, [sp, #4]
 1461 0018 5B68     		ldr	r3, [r3, #4]
 1462 001a DBB2     		uxtb	r3, r3
 1463 001c 002B     		cmp	r3, #0
 1464 001e 04D0     		beq	.L97
 1465              		.loc 3 1006 0 is_stmt 0 discriminator 1
 1466 0020 1248     		ldr	r0, .L98
 1467 0022 40F2EE31 		movw	r1, #1006
 1468 0026 FFF7FEFF 		bl	assertEFM
 1469              	.L97:
1007:../emlib/src/em_dma.c **** 
ARM GAS  /tmp/cclZCIt2.s 			page 70


1008:../emlib/src/em_dma.c ****   /* Make sure DMA clock is enabled prior to accessing DMA module */
1009:../emlib/src/em_dma.c ****   CMU_ClockEnable(cmuClock_DMA, true);
 1470              		.loc 3 1009 0 is_stmt 1
 1471 002a 1148     		ldr	r0, .L98+4
 1472 002c 0121     		movs	r1, #1
 1473 002e FFF7FEFF 		bl	CMU_ClockEnable
1010:../emlib/src/em_dma.c **** 
1011:../emlib/src/em_dma.c ****   /* Make sure DMA controller is set to a known reset state */
1012:../emlib/src/em_dma.c ****   DMA_Reset();
 1474              		.loc 3 1012 0
 1475 0032 FFF7FEFF 		bl	DMA_Reset
1013:../emlib/src/em_dma.c **** 
1014:../emlib/src/em_dma.c ****   /* Clear/enable DMA interrupts */
1015:../emlib/src/em_dma.c ****   NVIC_ClearPendingIRQ(DMA_IRQn);
 1476              		.loc 3 1015 0
 1477 0036 0020     		movs	r0, #0
 1478 0038 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
1016:../emlib/src/em_dma.c ****   NVIC_EnableIRQ(DMA_IRQn);
 1479              		.loc 3 1016 0
 1480 003c 0020     		movs	r0, #0
 1481 003e FFF7FEFF 		bl	NVIC_EnableIRQ
1017:../emlib/src/em_dma.c **** 
1018:../emlib/src/em_dma.c ****   /* Enable bus error interrupt */
1019:../emlib/src/em_dma.c ****   DMA->IEN = DMA_IEN_ERR;
 1482              		.loc 3 1019 0
 1483 0042 0C4B     		ldr	r3, .L98+8
 1484 0044 03F58053 		add	r3, r3, #4096
 1485 0048 0C33     		adds	r3, r3, #12
 1486 004a 4FF00042 		mov	r2, #-2147483648
 1487 004e 1A60     		str	r2, [r3]
1020:../emlib/src/em_dma.c **** 
1021:../emlib/src/em_dma.c ****   /* Set pointer to control block, notice that this ptr must have been */
1022:../emlib/src/em_dma.c ****   /* properly aligned, according to requirements defined in the reference */
1023:../emlib/src/em_dma.c ****   /* manual. */
1024:../emlib/src/em_dma.c ****   DMA->CTRLBASE = (uint32_t)(init->controlBlock);
 1488              		.loc 3 1024 0
 1489 0050 084B     		ldr	r3, .L98+8
 1490 0052 019A     		ldr	r2, [sp, #4]
 1491 0054 5268     		ldr	r2, [r2, #4]
 1492 0056 9A60     		str	r2, [r3, #8]
1025:../emlib/src/em_dma.c **** 
1026:../emlib/src/em_dma.c ****   /* Configure and enable the DMA controller */
1027:../emlib/src/em_dma.c ****   DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT) | DMA_CONFIG_EN;
 1493              		.loc 3 1027 0
 1494 0058 064B     		ldr	r3, .L98+8
 1495 005a 019A     		ldr	r2, [sp, #4]
 1496 005c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1497 005e 5201     		lsls	r2, r2, #5
 1498 0060 42F00102 		orr	r2, r2, #1
 1499 0064 5A60     		str	r2, [r3, #4]
1028:../emlib/src/em_dma.c **** }
 1500              		.loc 3 1028 0
 1501 0066 03B0     		add	sp, sp, #12
 1502              		@ sp needed
 1503 0068 5DF804FB 		ldr	pc, [sp], #4
 1504              	.L99:
 1505              		.align	2
ARM GAS  /tmp/cclZCIt2.s 			page 71


 1506              	.L98:
 1507 006c 00000000 		.word	.LC0
 1508 0070 00130400 		.word	267008
 1509 0074 00200C40 		.word	1074536448
 1510              		.cfi_endproc
 1511              	.LFE81:
 1513              		.section	.text.DMA_RefreshPingPong,"ax",%progbits
 1514              		.align	2
 1515              		.global	DMA_RefreshPingPong
 1516              		.thumb
 1517              		.thumb_func
 1519              	DMA_RefreshPingPong:
 1520              	.LFB82:
1029:../emlib/src/em_dma.c **** 
1030:../emlib/src/em_dma.c **** 
1031:../emlib/src/em_dma.c **** /***************************************************************************//**
1032:../emlib/src/em_dma.c ****  * @brief
1033:../emlib/src/em_dma.c ****  *   Refresh a descriptor used in a DMA ping-pong cycle.
1034:../emlib/src/em_dma.c ****  *
1035:../emlib/src/em_dma.c ****  * @details
1036:../emlib/src/em_dma.c ****  *   During a ping-pong DMA cycle, the DMA controller automatically alternates
1037:../emlib/src/em_dma.c ****  *   between primary and alternate descriptors, when completing use of a
1038:../emlib/src/em_dma.c ****  *   descriptor. While the other descriptor is in use by the DMA controller,
1039:../emlib/src/em_dma.c ****  *   the SW should refresh the completed descriptor. This is typically done from
1040:../emlib/src/em_dma.c ****  *   the callback defined for the ping-pong cycle.
1041:../emlib/src/em_dma.c ****  *
1042:../emlib/src/em_dma.c ****  * @param[in] channel
1043:../emlib/src/em_dma.c ****  *   DMA channel to refresh ping-pong descriptor for.
1044:../emlib/src/em_dma.c ****  *
1045:../emlib/src/em_dma.c ****  * @param[in] primary
1046:../emlib/src/em_dma.c ****  *   @li true - refresh primary descriptor
1047:../emlib/src/em_dma.c ****  *   @li false - refresh alternate descriptor
1048:../emlib/src/em_dma.c ****  *
1049:../emlib/src/em_dma.c ****  * @param[in] useBurst
1050:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
1051:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
1052:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
1053:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
1054:../emlib/src/em_dma.c ****  *
1055:../emlib/src/em_dma.c ****  * @param[in] dst
1056:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
1057:../emlib/src/em_dma.c ****  *   descriptor as is.
1058:../emlib/src/em_dma.c ****  *
1059:../emlib/src/em_dma.c ****  * @param[in] src
1060:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
1061:../emlib/src/em_dma.c ****  *   descriptor as is.
1062:../emlib/src/em_dma.c ****  *
1063:../emlib/src/em_dma.c ****  * @param[in] nMinus1
1064:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
1065:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
1066:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
1067:../emlib/src/em_dma.c ****  *
1068:../emlib/src/em_dma.c ****  * @param[in] stop
1069:../emlib/src/em_dma.c ****  *   Indicate that the DMA ping-pong cycle shall stop @b after completing use
1070:../emlib/src/em_dma.c ****  *   of this descriptor.
1071:../emlib/src/em_dma.c ****  ******************************************************************************/
1072:../emlib/src/em_dma.c **** void DMA_RefreshPingPong(unsigned int channel,
ARM GAS  /tmp/cclZCIt2.s 			page 72


1073:../emlib/src/em_dma.c ****                          bool primary,
1074:../emlib/src/em_dma.c ****                          bool useBurst,
1075:../emlib/src/em_dma.c ****                          void *dst,
1076:../emlib/src/em_dma.c ****                          void *src,
1077:../emlib/src/em_dma.c ****                          unsigned int nMinus1,
1078:../emlib/src/em_dma.c ****                          bool stop)
1079:../emlib/src/em_dma.c **** {
 1521              		.loc 3 1079 0
 1522              		.cfi_startproc
 1523              		@ args = 12, pretend = 0, frame = 40
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 1525 0000 00B5     		push	{lr}
 1526              		.cfi_def_cfa_offset 4
 1527              		.cfi_offset 14, -4
 1528 0002 8BB0     		sub	sp, sp, #44
 1529              		.cfi_def_cfa_offset 48
 1530 0004 0390     		str	r0, [sp, #12]
 1531 0006 0193     		str	r3, [sp, #4]
 1532 0008 0B46     		mov	r3, r1
 1533 000a 8DF80B30 		strb	r3, [sp, #11]
 1534 000e 1346     		mov	r3, r2
 1535 0010 8DF80A30 		strb	r3, [sp, #10]
1080:../emlib/src/em_dma.c ****   DMA_CycleCtrl_TypeDef  cycleCtrl;
1081:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
1082:../emlib/src/em_dma.c ****   uint32_t               inc;
1083:../emlib/src/em_dma.c ****   uint32_t               chBit;
1084:../emlib/src/em_dma.c ****   uint32_t               tmp;
1085:../emlib/src/em_dma.c **** 
1086:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1536              		.loc 3 1086 0
 1537 0014 039B     		ldr	r3, [sp, #12]
 1538 0016 072B     		cmp	r3, #7
 1539 0018 04D9     		bls	.L101
 1540              		.loc 3 1086 0 is_stmt 0 discriminator 1
 1541 001a 3F48     		ldr	r0, .L113
 1542 001c 40F23E41 		movw	r1, #1086
 1543 0020 FFF7FEFF 		bl	assertEFM
 1544              	.L101:
1087:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 1545              		.loc 3 1087 0 is_stmt 1
 1546 0024 0D9B     		ldr	r3, [sp, #52]
 1547 0026 B3F5806F 		cmp	r3, #1024
 1548 002a 04D3     		bcc	.L102
 1549              		.loc 3 1087 0 is_stmt 0 discriminator 1
 1550 002c 3A48     		ldr	r0, .L113
 1551 002e 40F23F41 		movw	r1, #1087
 1552 0032 FFF7FEFF 		bl	assertEFM
 1553              	.L102:
1088:../emlib/src/em_dma.c **** 
1089:../emlib/src/em_dma.c ****   /* The ping-pong DMA cycle may be stopped by issuing a basic cycle type */
1090:../emlib/src/em_dma.c ****   if (stop)
 1554              		.loc 3 1090 0 is_stmt 1
 1555 0036 9DF83830 		ldrb	r3, [sp, #56]	@ zero_extendqisi2
 1556 003a 002B     		cmp	r3, #0
 1557 003c 03D0     		beq	.L103
1091:../emlib/src/em_dma.c ****   {
1092:../emlib/src/em_dma.c ****     cycleCtrl = dmaCycleCtrlBasic;
ARM GAS  /tmp/cclZCIt2.s 			page 73


 1558              		.loc 3 1092 0
 1559 003e 0123     		movs	r3, #1
 1560 0040 8DF82730 		strb	r3, [sp, #39]
 1561 0044 02E0     		b	.L104
 1562              	.L103:
1093:../emlib/src/em_dma.c ****   }
1094:../emlib/src/em_dma.c ****   else
1095:../emlib/src/em_dma.c ****   {
1096:../emlib/src/em_dma.c ****     cycleCtrl = dmaCycleCtrlPingPong;
 1563              		.loc 3 1096 0
 1564 0046 0323     		movs	r3, #3
 1565 0048 8DF82730 		strb	r3, [sp, #39]
 1566              	.L104:
1097:../emlib/src/em_dma.c ****   }
1098:../emlib/src/em_dma.c **** 
1099:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
1100:../emlib/src/em_dma.c ****   if (primary)
 1567              		.loc 3 1100 0
 1568 004c 9DF80B30 		ldrb	r3, [sp, #11]	@ zero_extendqisi2
 1569 0050 002B     		cmp	r3, #0
 1570 0052 06D0     		beq	.L105
1101:../emlib/src/em_dma.c ****   {
1102:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
 1571              		.loc 3 1102 0
 1572 0054 039B     		ldr	r3, [sp, #12]
 1573 0056 1A01     		lsls	r2, r3, #4
 1574 0058 304B     		ldr	r3, .L113+4
 1575 005a 9B68     		ldr	r3, [r3, #8]
 1576 005c 1344     		add	r3, r3, r2
 1577 005e 0893     		str	r3, [sp, #32]
 1578 0060 05E0     		b	.L106
 1579              	.L105:
1103:../emlib/src/em_dma.c ****   }
1104:../emlib/src/em_dma.c ****   else
1105:../emlib/src/em_dma.c ****   {
1106:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
 1580              		.loc 3 1106 0
 1581 0062 039B     		ldr	r3, [sp, #12]
 1582 0064 1A01     		lsls	r2, r3, #4
 1583 0066 2D4B     		ldr	r3, .L113+4
 1584 0068 DB68     		ldr	r3, [r3, #12]
 1585 006a 1344     		add	r3, r3, r2
 1586 006c 0893     		str	r3, [sp, #32]
 1587              	.L106:
1107:../emlib/src/em_dma.c ****   }
1108:../emlib/src/em_dma.c **** 
1109:../emlib/src/em_dma.c ****   if (src)
 1588              		.loc 3 1109 0
 1589 006e 0C9B     		ldr	r3, [sp, #48]
 1590 0070 002B     		cmp	r3, #0
 1591 0072 14D0     		beq	.L107
1110:../emlib/src/em_dma.c ****   {
1111:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
 1592              		.loc 3 1111 0
 1593 0074 089B     		ldr	r3, [sp, #32]
 1594 0076 9B68     		ldr	r3, [r3, #8]
 1595 0078 03F04063 		and	r3, r3, #201326592
ARM GAS  /tmp/cclZCIt2.s 			page 74


 1596 007c 9B0E     		lsrs	r3, r3, #26
 1597 007e 0793     		str	r3, [sp, #28]
1112:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_SRC_INC_NONE)
 1598              		.loc 3 1112 0
 1599 0080 079B     		ldr	r3, [sp, #28]
 1600 0082 032B     		cmp	r3, #3
 1601 0084 03D1     		bne	.L108
1113:../emlib/src/em_dma.c ****     {
1114:../emlib/src/em_dma.c ****       descr->SRCEND = src;
 1602              		.loc 3 1114 0
 1603 0086 089B     		ldr	r3, [sp, #32]
 1604 0088 0C9A     		ldr	r2, [sp, #48]
 1605 008a 1A60     		str	r2, [r3]
 1606 008c 07E0     		b	.L107
 1607              	.L108:
1115:../emlib/src/em_dma.c ****     }
1116:../emlib/src/em_dma.c ****     else
1117:../emlib/src/em_dma.c ****     {
1118:../emlib/src/em_dma.c ****       descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
 1608              		.loc 3 1118 0
 1609 008e 079B     		ldr	r3, [sp, #28]
 1610 0090 0D9A     		ldr	r2, [sp, #52]
 1611 0092 9A40     		lsls	r2, r2, r3
 1612 0094 0C9B     		ldr	r3, [sp, #48]
 1613 0096 1344     		add	r3, r3, r2
 1614 0098 1A46     		mov	r2, r3
 1615 009a 089B     		ldr	r3, [sp, #32]
 1616 009c 1A60     		str	r2, [r3]
 1617              	.L107:
1119:../emlib/src/em_dma.c ****     }
1120:../emlib/src/em_dma.c ****   }
1121:../emlib/src/em_dma.c **** 
1122:../emlib/src/em_dma.c ****   if (dst)
 1618              		.loc 3 1122 0
 1619 009e 019B     		ldr	r3, [sp, #4]
 1620 00a0 002B     		cmp	r3, #0
 1621 00a2 12D0     		beq	.L109
1123:../emlib/src/em_dma.c ****   {
1124:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
 1622              		.loc 3 1124 0
 1623 00a4 089B     		ldr	r3, [sp, #32]
 1624 00a6 9B68     		ldr	r3, [r3, #8]
 1625 00a8 9B0F     		lsrs	r3, r3, #30
 1626 00aa 0793     		str	r3, [sp, #28]
1125:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_DST_INC_NONE)
 1627              		.loc 3 1125 0
 1628 00ac 079B     		ldr	r3, [sp, #28]
 1629 00ae 032B     		cmp	r3, #3
 1630 00b0 03D1     		bne	.L110
1126:../emlib/src/em_dma.c ****     {
1127:../emlib/src/em_dma.c ****       descr->DSTEND = dst;
 1631              		.loc 3 1127 0
 1632 00b2 089B     		ldr	r3, [sp, #32]
 1633 00b4 019A     		ldr	r2, [sp, #4]
 1634 00b6 5A60     		str	r2, [r3, #4]
 1635 00b8 07E0     		b	.L109
 1636              	.L110:
ARM GAS  /tmp/cclZCIt2.s 			page 75


1128:../emlib/src/em_dma.c ****     }
1129:../emlib/src/em_dma.c ****     else
1130:../emlib/src/em_dma.c ****     {
1131:../emlib/src/em_dma.c ****       descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
 1637              		.loc 3 1131 0
 1638 00ba 079B     		ldr	r3, [sp, #28]
 1639 00bc 0D9A     		ldr	r2, [sp, #52]
 1640 00be 9A40     		lsls	r2, r2, r3
 1641 00c0 019B     		ldr	r3, [sp, #4]
 1642 00c2 1344     		add	r3, r3, r2
 1643 00c4 1A46     		mov	r2, r3
 1644 00c6 089B     		ldr	r3, [sp, #32]
 1645 00c8 5A60     		str	r2, [r3, #4]
 1646              	.L109:
1132:../emlib/src/em_dma.c ****     }
1133:../emlib/src/em_dma.c ****   }
1134:../emlib/src/em_dma.c **** 
1135:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 1647              		.loc 3 1135 0
 1648 00ca 039B     		ldr	r3, [sp, #12]
 1649 00cc 0122     		movs	r2, #1
 1650 00ce 02FA03F3 		lsl	r3, r2, r3
 1651 00d2 0693     		str	r3, [sp, #24]
1136:../emlib/src/em_dma.c ****   if (useBurst)
 1652              		.loc 3 1136 0
 1653 00d4 9DF80A30 		ldrb	r3, [sp, #10]	@ zero_extendqisi2
 1654 00d8 002B     		cmp	r3, #0
 1655 00da 03D0     		beq	.L111
1137:../emlib/src/em_dma.c ****   {
1138:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTS = chBit;
 1656              		.loc 3 1138 0
 1657 00dc 0F4B     		ldr	r3, .L113+4
 1658 00de 069A     		ldr	r2, [sp, #24]
 1659 00e0 9A61     		str	r2, [r3, #24]
 1660 00e2 02E0     		b	.L112
 1661              	.L111:
1139:../emlib/src/em_dma.c ****   }
1140:../emlib/src/em_dma.c ****   else
1141:../emlib/src/em_dma.c ****   {
1142:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTC = chBit;
 1662              		.loc 3 1142 0
 1663 00e4 0D4B     		ldr	r3, .L113+4
 1664 00e6 069A     		ldr	r2, [sp, #24]
 1665 00e8 DA61     		str	r2, [r3, #28]
 1666              	.L112:
1143:../emlib/src/em_dma.c ****   }
1144:../emlib/src/em_dma.c **** 
1145:../emlib/src/em_dma.c ****   /* Set cycle control */
1146:../emlib/src/em_dma.c ****   tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
 1667              		.loc 3 1146 0
 1668 00ea 089B     		ldr	r3, [sp, #32]
 1669 00ec 9B68     		ldr	r3, [r3, #8]
 1670 00ee 23F47F53 		bic	r3, r3, #16320
 1671 00f2 23F03703 		bic	r3, r3, #55
 1672 00f6 0593     		str	r3, [sp, #20]
1147:../emlib/src/em_dma.c ****   tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
 1673              		.loc 3 1147 0
ARM GAS  /tmp/cclZCIt2.s 			page 76


 1674 00f8 0D9B     		ldr	r3, [sp, #52]
 1675 00fa 1B01     		lsls	r3, r3, #4
 1676 00fc 059A     		ldr	r2, [sp, #20]
 1677 00fe 1343     		orrs	r3, r3, r2
 1678 0100 0593     		str	r3, [sp, #20]
1148:../emlib/src/em_dma.c ****   tmp        |= cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 1679              		.loc 3 1148 0
 1680 0102 9DF82730 		ldrb	r3, [sp, #39]	@ zero_extendqisi2
 1681 0106 059A     		ldr	r2, [sp, #20]
 1682 0108 1343     		orrs	r3, r3, r2
 1683 010a 0593     		str	r3, [sp, #20]
1149:../emlib/src/em_dma.c ****   descr->CTRL = tmp;
 1684              		.loc 3 1149 0
 1685 010c 089B     		ldr	r3, [sp, #32]
 1686 010e 059A     		ldr	r2, [sp, #20]
 1687 0110 9A60     		str	r2, [r3, #8]
1150:../emlib/src/em_dma.c **** }
 1688              		.loc 3 1150 0
 1689 0112 0BB0     		add	sp, sp, #44
 1690              		@ sp needed
 1691 0114 5DF804FB 		ldr	pc, [sp], #4
 1692              	.L114:
 1693              		.align	2
 1694              	.L113:
 1695 0118 00000000 		.word	.LC0
 1696 011c 00200C40 		.word	1074536448
 1697              		.cfi_endproc
 1698              	.LFE82:
 1700              		.section	.text.DMA_Reset,"ax",%progbits
 1701              		.align	2
 1702              		.global	DMA_Reset
 1703              		.thumb
 1704              		.thumb_func
 1706              	DMA_Reset:
 1707              	.LFB83:
1151:../emlib/src/em_dma.c **** 
1152:../emlib/src/em_dma.c **** 
1153:../emlib/src/em_dma.c **** /***************************************************************************//**
1154:../emlib/src/em_dma.c ****  * @brief
1155:../emlib/src/em_dma.c ****  *   Reset the DMA controller.
1156:../emlib/src/em_dma.c ****  *
1157:../emlib/src/em_dma.c ****  * @details
1158:../emlib/src/em_dma.c ****  *   This functions will disable the DMA controller and set it to a reset
1159:../emlib/src/em_dma.c ****  *   state.
1160:../emlib/src/em_dma.c ****  *
1161:../emlib/src/em_dma.c ****  * @note
1162:../emlib/src/em_dma.c ****  *   Notice that any ongoing transfers will be aborted.
1163:../emlib/src/em_dma.c ****  ******************************************************************************/
1164:../emlib/src/em_dma.c **** void DMA_Reset(void)
1165:../emlib/src/em_dma.c **** {
 1708              		.loc 3 1165 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 8
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 1712 0000 00B5     		push	{lr}
 1713              		.cfi_def_cfa_offset 4
 1714              		.cfi_offset 14, -4
ARM GAS  /tmp/cclZCIt2.s 			page 77


 1715 0002 83B0     		sub	sp, sp, #12
 1716              		.cfi_def_cfa_offset 16
1166:../emlib/src/em_dma.c ****   int i;
1167:../emlib/src/em_dma.c **** 
1168:../emlib/src/em_dma.c ****   /* Disable DMA interrupts */
1169:../emlib/src/em_dma.c ****   NVIC_DisableIRQ(DMA_IRQn);
 1717              		.loc 3 1169 0
 1718 0004 0020     		movs	r0, #0
 1719 0006 FFF7FEFF 		bl	NVIC_DisableIRQ
1170:../emlib/src/em_dma.c **** 
1171:../emlib/src/em_dma.c ****   /* Put the DMA controller into a known state, first disabling it. */
1172:../emlib/src/em_dma.c ****   DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
 1720              		.loc 3 1172 0
 1721 000a 1A4B     		ldr	r3, .L118
 1722 000c 0022     		movs	r2, #0
 1723 000e 5A60     		str	r2, [r3, #4]
1173:../emlib/src/em_dma.c ****   DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
 1724              		.loc 3 1173 0
 1725 0010 184B     		ldr	r3, .L118
 1726 0012 FF22     		movs	r2, #255
 1727 0014 DA61     		str	r2, [r3, #28]
1174:../emlib/src/em_dma.c ****   DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
 1728              		.loc 3 1174 0
 1729 0016 174B     		ldr	r3, .L118
 1730 0018 FF22     		movs	r2, #255
 1731 001a 5A62     		str	r2, [r3, #36]
1175:../emlib/src/em_dma.c ****   DMA->CHENC       = _DMA_CHENC_MASK;
 1732              		.loc 3 1175 0
 1733 001c 154B     		ldr	r3, .L118
 1734 001e FF22     		movs	r2, #255
 1735 0020 DA62     		str	r2, [r3, #44]
1176:../emlib/src/em_dma.c ****   DMA->CHALTC      = _DMA_CHALTC_MASK;
 1736              		.loc 3 1176 0
 1737 0022 144B     		ldr	r3, .L118
 1738 0024 FF22     		movs	r2, #255
 1739 0026 5A63     		str	r2, [r3, #52]
1177:../emlib/src/em_dma.c ****   DMA->CHPRIC      = _DMA_CHPRIC_MASK;
 1740              		.loc 3 1177 0
 1741 0028 124B     		ldr	r3, .L118
 1742 002a FF22     		movs	r2, #255
 1743 002c DA63     		str	r2, [r3, #60]
1178:../emlib/src/em_dma.c ****   DMA->ERRORC      = DMA_ERRORC_ERRORC;
 1744              		.loc 3 1178 0
 1745 002e 114B     		ldr	r3, .L118
 1746 0030 0122     		movs	r2, #1
 1747 0032 DA64     		str	r2, [r3, #76]
1179:../emlib/src/em_dma.c ****   DMA->IEN         = _DMA_IEN_RESETVALUE;
 1748              		.loc 3 1179 0
 1749 0034 0F4B     		ldr	r3, .L118
 1750 0036 03F58053 		add	r3, r3, #4096
 1751 003a 0C33     		adds	r3, r3, #12
 1752 003c 0022     		movs	r2, #0
 1753 003e 1A60     		str	r2, [r3]
1180:../emlib/src/em_dma.c ****   DMA->IFC         = _DMA_IFC_MASK;
 1754              		.loc 3 1180 0
 1755 0040 0C4B     		ldr	r3, .L118
 1756 0042 03F58053 		add	r3, r3, #4096
ARM GAS  /tmp/cclZCIt2.s 			page 78


 1757 0046 0833     		adds	r3, r3, #8
 1758 0048 0B4A     		ldr	r2, .L118+4
 1759 004a 1A60     		str	r2, [r3]
1181:../emlib/src/em_dma.c **** 
1182:../emlib/src/em_dma.c ****   /* Clear channel control flags */
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1760              		.loc 3 1183 0
 1761 004c 0023     		movs	r3, #0
 1762 004e 0193     		str	r3, [sp, #4]
 1763 0050 09E0     		b	.L116
 1764              	.L117:
1184:../emlib/src/em_dma.c ****   {
1185:../emlib/src/em_dma.c ****     DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
 1765              		.loc 3 1185 0 discriminator 2
 1766 0052 084B     		ldr	r3, .L118
 1767 0054 019A     		ldr	r2, [sp, #4]
 1768 0056 02F58862 		add	r2, r2, #1088
 1769 005a 0021     		movs	r1, #0
 1770 005c 43F82210 		str	r1, [r3, r2, lsl #2]
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1771              		.loc 3 1183 0 discriminator 2
 1772 0060 019B     		ldr	r3, [sp, #4]
 1773 0062 0133     		adds	r3, r3, #1
 1774 0064 0193     		str	r3, [sp, #4]
 1775              	.L116:
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1776              		.loc 3 1183 0 is_stmt 0 discriminator 1
 1777 0066 019B     		ldr	r3, [sp, #4]
 1778 0068 072B     		cmp	r3, #7
 1779 006a F2DD     		ble	.L117
1186:../emlib/src/em_dma.c ****   }
1187:../emlib/src/em_dma.c **** }
 1780              		.loc 3 1187 0 is_stmt 1
 1781 006c 03B0     		add	sp, sp, #12
 1782              		@ sp needed
 1783 006e 5DF804FB 		ldr	pc, [sp], #4
 1784              	.L119:
 1785 0072 00BF     		.align	2
 1786              	.L118:
 1787 0074 00200C40 		.word	1074536448
 1788 0078 FF000080 		.word	-2147483393
 1789              		.cfi_endproc
 1790              	.LFE83:
 1792              		.text
 1793              	.Letext0:
 1794              		.file 4 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 1795              		.file 5 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 1796              		.file 6 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1797              		.file 7 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_ch.h"
 1798              		.file 8 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_descriptor.h"
 1799              		.file 9 "../emlib/inc/em_dma.h"
 1800              		.file 10 "../emlib/inc/em_cmu.h"
