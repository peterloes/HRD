
exe/Akku_LCD.out:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ada8  00000000  00000000  00008000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ada8  0000ada8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000950  20000000  0000adb0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000898  20000a00  0000b800  00018a00  2**8
                  ALLOC
  4 .heap         00000c00  20001298  20001298  00018950  2**3
                  CONTENTS, READONLY
  5 .stack_dummy  00000400  20001298  20001298  00019550  2**3
                  CONTENTS, READONLY
  6 .ARM.attributes 00000029  00000000  00000000  00019950  2**0
                  CONTENTS, READONLY
  7 .comment      00000070  00000000  00000000  00019979  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000be95  00000000  00000000  000199e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000272c  00000000  00000000  0002587e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008f8  00000000  00000000  00027faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000778  00000000  00000000  000288a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000040d2  00000000  00000000  0002901a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003aa6  00000000  00000000  0002d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002130  00000000  00000000  00030b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20004000 	.word	0x20004000
       4:	000046bd 	.word	0x000046bd
       8:	000046f3 	.word	0x000046f3
       c:	000046f5 	.word	0x000046f5
      10:	000046f7 	.word	0x000046f7
      14:	000046f9 	.word	0x000046f9
      18:	000046fb 	.word	0x000046fb
      1c:	000046f1 	.word	0x000046f1
      20:	000046f1 	.word	0x000046f1
      24:	000046f1 	.word	0x000046f1
      28:	000046f1 	.word	0x000046f1
      2c:	000046fd 	.word	0x000046fd
      30:	000046ff 	.word	0x000046ff
      34:	000046f1 	.word	0x000046f1
      38:	00004701 	.word	0x00004701
      3c:	00004703 	.word	0x00004703
      40:	00000e35 	.word	0x00000e35
      44:	00003761 	.word	0x00003761
      48:	00004709 	.word	0x00004709
      4c:	0000470b 	.word	0x0000470b
      50:	0000470d 	.word	0x0000470d
      54:	0000470f 	.word	0x0000470f
      58:	00004711 	.word	0x00004711
      5c:	00004713 	.word	0x00004713
      60:	0000434d 	.word	0x0000434d
      64:	00003769 	.word	0x00003769
      68:	00004719 	.word	0x00004719
      6c:	0000471b 	.word	0x0000471b
      70:	0000471d 	.word	0x0000471d
      74:	0000471f 	.word	0x0000471f
      78:	00004721 	.word	0x00004721
      7c:	00004723 	.word	0x00004723
      80:	00004725 	.word	0x00004725
      84:	00004727 	.word	0x00004727
      88:	00004729 	.word	0x00004729
      8c:	0000472b 	.word	0x0000472b
      90:	0000472d 	.word	0x0000472d
      94:	0000472f 	.word	0x0000472f
      98:	00004731 	.word	0x00004731
      9c:	00004733 	.word	0x00004733
      a0:	00003175 	.word	0x00003175
      a4:	00004737 	.word	0x00004737
      a8:	00004739 	.word	0x00004739
      ac:	0000473b 	.word	0x0000473b
      b0:	0000473d 	.word	0x0000473d
      b4:	0000473f 	.word	0x0000473f
	...

00000100 <__do_global_dtors_aux>:
     100:	b510      	push	{r4, lr}
     102:	4c05      	ldr	r4, [pc, #20]	; (118 <__do_global_dtors_aux+0x18>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	b933      	cbnz	r3, 116 <__do_global_dtors_aux+0x16>
     108:	4b04      	ldr	r3, [pc, #16]	; (11c <__do_global_dtors_aux+0x1c>)
     10a:	b113      	cbz	r3, 112 <__do_global_dtors_aux+0x12>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x20>)
     10e:	f3af 8000 	nop.w
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	20000a00 	.word	0x20000a00
     11c:	00000000 	.word	0x00000000
     120:	0000ada4 	.word	0x0000ada4

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <frame_dummy+0x1c>)
     128:	b11b      	cbz	r3, 132 <frame_dummy+0xe>
     12a:	4806      	ldr	r0, [pc, #24]	; (144 <frame_dummy+0x20>)
     12c:	4906      	ldr	r1, [pc, #24]	; (148 <frame_dummy+0x24>)
     12e:	f3af 8000 	nop.w
     132:	4806      	ldr	r0, [pc, #24]	; (14c <frame_dummy+0x28>)
     134:	6803      	ldr	r3, [r0, #0]
     136:	b113      	cbz	r3, 13e <frame_dummy+0x1a>
     138:	4b05      	ldr	r3, [pc, #20]	; (150 <frame_dummy+0x2c>)
     13a:	b103      	cbz	r3, 13e <frame_dummy+0x1a>
     13c:	4798      	blx	r3
     13e:	bd08      	pop	{r3, pc}
     140:	00000000 	.word	0x00000000
     144:	0000ada4 	.word	0x0000ada4
     148:	20000a04 	.word	0x20000a04
     14c:	20000950 	.word	0x20000950
     150:	00000000 	.word	0x00000000

00000154 <_mainCRTStartup>:
     154:	4b15      	ldr	r3, [pc, #84]	; (1ac <_mainCRTStartup+0x58>)
     156:	2b00      	cmp	r3, #0
     158:	bf08      	it	eq
     15a:	4b13      	ldreq	r3, [pc, #76]	; (1a8 <_mainCRTStartup+0x54>)
     15c:	469d      	mov	sp, r3
     15e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     162:	2100      	movs	r1, #0
     164:	468b      	mov	fp, r1
     166:	460f      	mov	r7, r1
     168:	4813      	ldr	r0, [pc, #76]	; (1b8 <_mainCRTStartup+0x64>)
     16a:	4a14      	ldr	r2, [pc, #80]	; (1bc <_mainCRTStartup+0x68>)
     16c:	1a12      	subs	r2, r2, r0
     16e:	f004 fb2b 	bl	47c8 <memset>
     172:	4b0f      	ldr	r3, [pc, #60]	; (1b0 <_mainCRTStartup+0x5c>)
     174:	2b00      	cmp	r3, #0
     176:	d000      	beq.n	17a <_mainCRTStartup+0x26>
     178:	4798      	blx	r3
     17a:	4b0e      	ldr	r3, [pc, #56]	; (1b4 <_mainCRTStartup+0x60>)
     17c:	2b00      	cmp	r3, #0
     17e:	d000      	beq.n	182 <_mainCRTStartup+0x2e>
     180:	4798      	blx	r3
     182:	2000      	movs	r0, #0
     184:	2100      	movs	r1, #0
     186:	0004      	movs	r4, r0
     188:	000d      	movs	r5, r1
     18a:	480d      	ldr	r0, [pc, #52]	; (1c0 <_mainCRTStartup+0x6c>)
     18c:	2800      	cmp	r0, #0
     18e:	d002      	beq.n	196 <_mainCRTStartup+0x42>
     190:	480c      	ldr	r0, [pc, #48]	; (1c4 <_mainCRTStartup+0x70>)
     192:	f006 fdc1 	bl	6d18 <atexit>
     196:	f004 fae3 	bl	4760 <__libc_init_array>
     19a:	0020      	movs	r0, r4
     19c:	0029      	movs	r1, r5
     19e:	f002 f923 	bl	23e8 <main>
     1a2:	f004 facd 	bl	4740 <exit>
     1a6:	bf00      	nop
     1a8:	00080000 	.word	0x00080000
     1ac:	20004000 	.word	0x20004000
	...
     1b8:	20000a00 	.word	0x20000a00
     1bc:	20001298 	.word	0x20001298
     1c0:	00006d19 	.word	0x00006d19
     1c4:	00007cd1 	.word	0x00007cd1

000001c8 <GetProdRev>:
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     1c8:	4b02      	ldr	r3, [pc, #8]	; (1d4 <GetProdRev+0xc>)
     1ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                         >> _DEVINFO_PART_PROD_REV_SHIFT);
     1cc:	0e1b      	lsrs	r3, r3, #24
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     1ce:	b2db      	uxtb	r3, r3
                         >> _DEVINFO_PART_PROD_REV_SHIFT);
}
     1d0:	4618      	mov	r0, r3
     1d2:	4770      	bx	lr
     1d4:	0fe081b0 	.word	0x0fe081b0

000001d8 <SystemCoreClockGet>:
 *
 * @return
 *   The current core clock frequency in Hz.
 ******************************************************************************/
uint32_t SystemCoreClockGet(void)
{
     1d8:	b500      	push	{lr}
     1da:	b083      	sub	sp, #12
  uint32_t ret;
  
  ret = SystemHFClockGet();
     1dc:	f000 f816 	bl	20c <SystemHFClockGet>
     1e0:	9001      	str	r0, [sp, #4]
#if defined (_EFM32_GIANT_FAMILY)
  /* Leopard/Giant Gecko has an additional divider */
  ret =  ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)>>_CMU_CTRL_HFCLKDIV_SHIFT));
#endif
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >> 
     1e2:	4b08      	ldr	r3, [pc, #32]	; (204 <SystemCoreClockGet+0x2c>)
     1e4:	685b      	ldr	r3, [r3, #4]
     1e6:	f003 030f 	and.w	r3, r3, #15
     1ea:	9a01      	ldr	r2, [sp, #4]
     1ec:	fa22 f303 	lsr.w	r3, r2, r3
     1f0:	9301      	str	r3, [sp, #4]
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
     1f2:	4b05      	ldr	r3, [pc, #20]	; (208 <SystemCoreClockGet+0x30>)
     1f4:	9a01      	ldr	r2, [sp, #4]
     1f6:	601a      	str	r2, [r3, #0]

  return ret;
     1f8:	9b01      	ldr	r3, [sp, #4]
}
     1fa:	4618      	mov	r0, r3
     1fc:	b003      	add	sp, #12
     1fe:	f85d fb04 	ldr.w	pc, [sp], #4
     202:	bf00      	nop
     204:	400c8000 	.word	0x400c8000
     208:	20000fa8 	.word	0x20000fa8

0000020c <SystemHFClockGet>:
 *
 * @return
 *   The current HFCLK frequency in Hz.
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
     20c:	b500      	push	{lr}
     20e:	b083      	sub	sp, #12
  uint32_t ret;
  
  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
     210:	4b2f      	ldr	r3, [pc, #188]	; (2d0 <SystemHFClockGet+0xc4>)
     212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     214:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
     218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     21c:	d00a      	beq.n	234 <SystemHFClockGet+0x28>
     21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     222:	d003      	beq.n	22c <SystemHFClockGet+0x20>
     224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     228:	d008      	beq.n	23c <SystemHFClockGet+0x30>
     22a:	e00b      	b.n	244 <SystemHFClockGet+0x38>
                         CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
     22c:	4b29      	ldr	r3, [pc, #164]	; (2d4 <SystemHFClockGet+0xc8>)
     22e:	681b      	ldr	r3, [r3, #0]
     230:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
     232:	e047      	b.n	2c4 <SystemHFClockGet+0xb8>
      
    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
     234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     238:	9301      	str	r3, [sp, #4]
      break;
     23a:	e043      	b.n	2c4 <SystemHFClockGet+0xb8>
      
    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
     23c:	4b26      	ldr	r3, [pc, #152]	; (2d8 <SystemHFClockGet+0xcc>)
     23e:	681b      	ldr	r3, [r3, #0]
     240:	9301      	str	r3, [sp, #4]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
     242:	e03f      	b.n	2c4 <SystemHFClockGet+0xb8>
      
    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
     244:	4b22      	ldr	r3, [pc, #136]	; (2d0 <SystemHFClockGet+0xc4>)
     246:	68db      	ldr	r3, [r3, #12]
     248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     250:	d01b      	beq.n	28a <SystemHFClockGet+0x7e>
     252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     256:	d805      	bhi.n	264 <SystemHFClockGet+0x58>
     258:	2b00      	cmp	r3, #0
     25a:	d024      	beq.n	2a6 <SystemHFClockGet+0x9a>
     25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     260:	d016      	beq.n	290 <SystemHFClockGet+0x84>
     262:	e02b      	b.n	2bc <SystemHFClockGet+0xb0>
     264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     268:	d009      	beq.n	27e <SystemHFClockGet+0x72>
     26a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     26e:	d003      	beq.n	278 <SystemHFClockGet+0x6c>
     270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     274:	d006      	beq.n	284 <SystemHFClockGet+0x78>
     276:	e021      	b.n	2bc <SystemHFClockGet+0xb0>
      {
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
     278:	4b18      	ldr	r3, [pc, #96]	; (2dc <SystemHFClockGet+0xd0>)
     27a:	9301      	str	r3, [sp, #4]
        break;
     27c:	e021      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
     27e:	4b18      	ldr	r3, [pc, #96]	; (2e0 <SystemHFClockGet+0xd4>)
     280:	9301      	str	r3, [sp, #4]
        break;
     282:	e01e      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
     284:	4b17      	ldr	r3, [pc, #92]	; (2e4 <SystemHFClockGet+0xd8>)
     286:	9301      	str	r3, [sp, #4]
        break;
     288:	e01b      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
     28a:	4b17      	ldr	r3, [pc, #92]	; (2e8 <SystemHFClockGet+0xdc>)
     28c:	9301      	str	r3, [sp, #4]
        break;
     28e:	e018      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
     290:	f7ff ff9a 	bl	1c8 <GetProdRev>
     294:	4603      	mov	r3, r0
     296:	2b12      	cmp	r3, #18
     298:	d902      	bls.n	2a0 <SystemHFClockGet+0x94>
          ret = 6600000;
     29a:	4b14      	ldr	r3, [pc, #80]	; (2ec <SystemHFClockGet+0xe0>)
     29c:	9301      	str	r3, [sp, #4]
        else
          ret = 7000000;
        break;
     29e:	e010      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
     2a0:	4b13      	ldr	r3, [pc, #76]	; (2f0 <SystemHFClockGet+0xe4>)
     2a2:	9301      	str	r3, [sp, #4]
        break;
     2a4:	e00d      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
     2a6:	f7ff ff8f 	bl	1c8 <GetProdRev>
     2aa:	4603      	mov	r3, r0
     2ac:	2b12      	cmp	r3, #18
     2ae:	d902      	bls.n	2b6 <SystemHFClockGet+0xaa>
          ret = 1200000;
     2b0:	4b10      	ldr	r3, [pc, #64]	; (2f4 <SystemHFClockGet+0xe8>)
     2b2:	9301      	str	r3, [sp, #4]
        else
          ret = 1000000;
        break;
     2b4:	e005      	b.n	2c2 <SystemHFClockGet+0xb6>

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
     2b6:	4b10      	ldr	r3, [pc, #64]	; (2f8 <SystemHFClockGet+0xec>)
     2b8:	9301      	str	r3, [sp, #4]
        break;
     2ba:	e002      	b.n	2c2 <SystemHFClockGet+0xb6>

      default:
        ret = 0;
     2bc:	2300      	movs	r3, #0
     2be:	9301      	str	r3, [sp, #4]
        break;
     2c0:	bf00      	nop
      }
      break;
     2c2:	bf00      	nop
  }

  return ret;
     2c4:	9b01      	ldr	r3, [sp, #4]
}
     2c6:	4618      	mov	r0, r3
     2c8:	b003      	add	sp, #12
     2ca:	f85d fb04 	ldr.w	pc, [sp], #4
     2ce:	bf00      	nop
     2d0:	400c8000 	.word	0x400c8000
     2d4:	20000004 	.word	0x20000004
     2d8:	20000000 	.word	0x20000000
     2dc:	01ab3f00 	.word	0x01ab3f00
     2e0:	01406f40 	.word	0x01406f40
     2e4:	00d59f80 	.word	0x00d59f80
     2e8:	00a7d8c0 	.word	0x00a7d8c0
     2ec:	0064b540 	.word	0x0064b540
     2f0:	006acfc0 	.word	0x006acfc0
     2f4:	00124f80 	.word	0x00124f80
     2f8:	000f4240 	.word	0x000f4240

000002fc <SystemInit>:
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
}
     2fc:	4770      	bx	lr
     2fe:	bf00      	nop

00000300 <SystemLFRCOClockGet>:
uint32_t SystemLFRCOClockGet(void)
{
  /* Currently we assume that this frequency is properly tuned during */
  /* manufacturing and is not changed after reset. If future requirements */
  /* for re-tuning by user, we can add support for that. */
  return EFM32_LFRCO_FREQ;
     300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
     304:	4618      	mov	r0, r3
     306:	4770      	bx	lr

00000308 <SystemLFXOClockGet>:
 *****************************************************************************/
uint32_t SystemLFXOClockGet(void)
{
  /* External crystal oscillator present? */
#if (EFM32_LFXO_FREQ > 0)
  return SystemLFXOClock;
     308:	4b01      	ldr	r3, [pc, #4]	; (310 <SystemLFXOClockGet+0x8>)
     30a:	681b      	ldr	r3, [r3, #0]
#else
  return 0;
#endif
}
     30c:	4618      	mov	r0, r3
     30e:	4770      	bx	lr
     310:	20000004 	.word	0x20000004

00000314 <assertEFM>:
 *
 * @par line
 *   Line number in source file where assertion failed.
 ******************************************************************************/
void assertEFM(const char *file, int line)
{
     314:	b082      	sub	sp, #8
     316:	9001      	str	r0, [sp, #4]
     318:	9100      	str	r1, [sp, #0]
  (void)file;  /* Unused parameter */
  (void)line;  /* Unused parameter */

  while (1)
    ;
     31a:	e7fe      	b.n	31a <assertEFM+0x6>

0000031c <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
     31c:	b086      	sub	sp, #24
     31e:	9003      	str	r0, [sp, #12]
     320:	9102      	str	r1, [sp, #8]
     322:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
     324:	9b03      	ldr	r3, [sp, #12]
     326:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
     32a:	00da      	lsls	r2, r3, #3
     32c:	9b02      	ldr	r3, [sp, #8]
     32e:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
     330:	009b      	lsls	r3, r3, #2
     332:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
     334:	9b05      	ldr	r3, [sp, #20]
     336:	9a01      	ldr	r2, [sp, #4]
     338:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
     33a:	b006      	add	sp, #24
     33c:	4770      	bx	lr
     33e:	bf00      	nop

00000340 <CMU_FlashWaitStateMax>:
 * @brief
 *   Configure flash access wait states to most conservative setting for
 *   this target. Retain SCBTP setting.
 ******************************************************************************/
static void CMU_FlashWaitStateMax(void)
{
     340:	b082      	sub	sp, #8
  uint32_t cfg;

  cfg = MSC->READCTRL;
     342:	4b13      	ldr	r3, [pc, #76]	; (390 <CMU_FlashWaitStateMax+0x50>)
     344:	685b      	ldr	r3, [r3, #4]
     346:	9301      	str	r3, [sp, #4]

  switch(cfg & _MSC_READCTRL_MODE_MASK)
     348:	9b01      	ldr	r3, [sp, #4]
     34a:	f003 0307 	and.w	r3, r3, #7
     34e:	2b03      	cmp	r3, #3
     350:	d818      	bhi.n	384 <CMU_FlashWaitStateMax+0x44>
     352:	a201      	add	r2, pc, #4	; (adr r2, 358 <CMU_FlashWaitStateMax+0x18>)
     354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     358:	00000369 	.word	0x00000369
     35c:	00000369 	.word	0x00000369
     360:	00000377 	.word	0x00000377
     364:	00000377 	.word	0x00000377

#if defined( MSC_READCTRL_MODE_WS2 )
  case MSC_READCTRL_MODE_WS2:
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
#else
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
     368:	9b01      	ldr	r3, [sp, #4]
     36a:	f023 0307 	bic.w	r3, r3, #7
     36e:	f043 0301 	orr.w	r3, r3, #1
     372:	9301      	str	r3, [sp, #4]
#endif
    break;
     374:	e006      	b.n	384 <CMU_FlashWaitStateMax+0x44>

#if defined( MSC_READCTRL_MODE_WS2SCBTP )
  case MSC_READCTRL_MODE_WS2SCBTP:
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2SCBTP;
#elif defined( MSC_READCTRL_MODE_WS1SCBTP )
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1SCBTP;
     376:	9b01      	ldr	r3, [sp, #4]
     378:	f023 0307 	bic.w	r3, r3, #7
     37c:	f043 0303 	orr.w	r3, r3, #3
     380:	9301      	str	r3, [sp, #4]
#endif
#if defined( MSC_READCTRL_MODE_WS2SCBTP ) || \
    defined( MSC_READCTRL_MODE_WS1SCBTP ) || defined( MSC_READCTRL_MODE_WS0SCBTP )
      break;
     382:	bf00      	nop
#endif
  }
  MSC->READCTRL = cfg;
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <CMU_FlashWaitStateMax+0x50>)
     386:	9a01      	ldr	r2, [sp, #4]
     388:	605a      	str	r2, [r3, #4]
}
     38a:	b002      	add	sp, #8
     38c:	4770      	bx	lr
     38e:	bf00      	nop
     390:	400c0000 	.word	0x400c0000

00000394 <CMU_DivToLog2>:
 *        numbers equal to 2^n
 * @param[in] div Unscaled dividend,
 * @return Base 2 logarithm of input, as used by fixed prescalers
 ******************************************************************************/
__STATIC_INLINE uint32_t CMU_DivToLog2(CMU_ClkDiv_TypeDef div)
{
     394:	b500      	push	{lr}
     396:	b087      	sub	sp, #28
     398:	9001      	str	r0, [sp, #4]
  uint32_t log2;

  /* Prescalers take argument of 32768 or less */
  EFM_ASSERT((div>0) && (div <= 32768));
     39a:	9b01      	ldr	r3, [sp, #4]
     39c:	2b00      	cmp	r3, #0
     39e:	d003      	beq.n	3a8 <CMU_DivToLog2+0x14>
     3a0:	9b01      	ldr	r3, [sp, #4]
     3a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     3a6:	d903      	bls.n	3b0 <CMU_DivToLog2+0x1c>
     3a8:	4809      	ldr	r0, [pc, #36]	; (3d0 <CMU_DivToLog2+0x3c>)
     3aa:	2187      	movs	r1, #135	; 0x87
     3ac:	f7ff ffb2 	bl	314 <assertEFM>
     3b0:	9b01      	ldr	r3, [sp, #4]
     3b2:	9304      	str	r3, [sp, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
     3b4:	9b04      	ldr	r3, [sp, #16]
     3b6:	fab3 f383 	clz	r3, r3
     3ba:	9303      	str	r3, [sp, #12]
  return(result);
     3bc:	9b03      	ldr	r3, [sp, #12]
     3be:	b2db      	uxtb	r3, r3

  /* Count leading zeroes and "reverse" result, Cortex-M3 intrinsic */
  log2 = (31 - __CLZ(div));
     3c0:	f1c3 031f 	rsb	r3, r3, #31
     3c4:	9305      	str	r3, [sp, #20]

  return log2;
     3c6:	9b05      	ldr	r3, [sp, #20]
}
     3c8:	4618      	mov	r0, r3
     3ca:	b007      	add	sp, #28
     3cc:	f85d fb04 	ldr.w	pc, [sp], #4
     3d0:	0000a224 	.word	0x0000a224

000003d4 <CMU_FlashWaitStateControl>:
 *
 * @param[in] hfcoreclk
 *   HFCORECLK frequency that flash access wait states must be configured for.
 ******************************************************************************/
static void CMU_FlashWaitStateControl(uint32_t hfcoreclk)
{
     3d4:	b084      	sub	sp, #16
     3d6:	9001      	str	r0, [sp, #4]
  uint32_t cfg;

  cfg = MSC->READCTRL;
     3d8:	4b1c      	ldr	r3, [pc, #112]	; (44c <Stack_Size+0x4c>)
     3da:	685b      	ldr	r3, [r3, #4]
     3dc:	9303      	str	r3, [sp, #12]
      break;
    }
  }
#endif

  if ((hfcoreclk > CMU_MAX_FREQ_0WS) && (hfcoreclk <= CMU_MAX_FREQ_1WS))
     3de:	9a01      	ldr	r2, [sp, #4]
     3e0:	4b1b      	ldr	r3, [pc, #108]	; (450 <Stack_Size+0x50>)
     3e2:	429a      	cmp	r2, r3
     3e4:	d917      	bls.n	416 <Stack_Size+0x16>
     3e6:	9a01      	ldr	r2, [sp, #4]
     3e8:	4b1a      	ldr	r3, [pc, #104]	; (454 <Stack_Size+0x54>)
     3ea:	429a      	cmp	r2, r3
     3ec:	d813      	bhi.n	416 <Stack_Size+0x16>
  {
    switch (cfg & _MSC_READCTRL_MODE_MASK)
     3ee:	9b03      	ldr	r3, [sp, #12]
     3f0:	f003 0307 	and.w	r3, r3, #7
     3f4:	3b02      	subs	r3, #2
     3f6:	2b01      	cmp	r3, #1
     3f8:	d806      	bhi.n	408 <Stack_Size+0x8>
    case MSC_READCTRL_MODE_WS2SCBTP:
#endif
#if defined( MSC_READCTRL_MODE_WS1SCBTP ) && defined( MSC_READCTRL_MODE_WS0SCBTP )
    case MSC_READCTRL_MODE_WS0SCBTP:
    case MSC_READCTRL_MODE_WS1SCBTP:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1SCBTP;
     3fa:	9b03      	ldr	r3, [sp, #12]
     3fc:	f023 0307 	bic.w	r3, r3, #7
     400:	f043 0303 	orr.w	r3, r3, #3
     404:	9303      	str	r3, [sp, #12]
#endif
#if defined( MSC_READCTRL_MODE_WS2SCBTP ) || \
    defined( MSC_READCTRL_MODE_WS1SCBTP ) || defined( MSC_READCTRL_MODE_WS0SCBTP )
      break;
     406:	e006      	b.n	416 <Stack_Size+0x16>
#endif

    default:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
     408:	9b03      	ldr	r3, [sp, #12]
     40a:	f023 0307 	bic.w	r3, r3, #7
     40e:	f043 0301 	orr.w	r3, r3, #1
     412:	9303      	str	r3, [sp, #12]
      break;
     414:	bf00      	nop
    }
  }

  if (hfcoreclk <= CMU_MAX_FREQ_0WS)
     416:	9a01      	ldr	r2, [sp, #4]
     418:	4b0d      	ldr	r3, [pc, #52]	; (450 <Stack_Size+0x50>)
     41a:	429a      	cmp	r2, r3
     41c:	d811      	bhi.n	442 <Stack_Size+0x42>
  {
    switch (cfg & _MSC_READCTRL_MODE_MASK)
     41e:	9b03      	ldr	r3, [sp, #12]
     420:	f003 0307 	and.w	r3, r3, #7
     424:	3b02      	subs	r3, #2
     426:	2b01      	cmp	r3, #1
     428:	d806      	bhi.n	438 <Stack_Size+0x38>
    case MSC_READCTRL_MODE_WS2SCBTP:
#endif
#if defined( MSC_READCTRL_MODE_WS0SCBTP )
    case MSC_READCTRL_MODE_WS1SCBTP:
    case MSC_READCTRL_MODE_WS0SCBTP:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0SCBTP;
     42a:	9b03      	ldr	r3, [sp, #12]
     42c:	f023 0307 	bic.w	r3, r3, #7
     430:	f043 0302 	orr.w	r3, r3, #2
     434:	9303      	str	r3, [sp, #12]
#endif
#if defined( MSC_READCTRL_MODE_WS2SCBTP ) || \
    defined( MSC_READCTRL_MODE_WS1SCBTP ) || defined( MSC_READCTRL_MODE_WS0SCBTP )
      break;
     436:	e004      	b.n	442 <Stack_Size+0x42>
#endif

    default:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
     438:	9b03      	ldr	r3, [sp, #12]
     43a:	f023 0307 	bic.w	r3, r3, #7
     43e:	9303      	str	r3, [sp, #12]
      break;
     440:	bf00      	nop
    }
  }

  MSC->READCTRL = cfg;
     442:	4b02      	ldr	r3, [pc, #8]	; (44c <Stack_Size+0x4c>)
     444:	9a03      	ldr	r2, [sp, #12]
     446:	605a      	str	r2, [r3, #4]
}
     448:	b004      	add	sp, #16
     44a:	4770      	bx	lr
     44c:	400c0000 	.word	0x400c0000
     450:	00f42400 	.word	0x00f42400
     454:	01e84800 	.word	0x01e84800

00000458 <CMU_AUXClkGet>:
 *
 * @return
 *   AUX Frequency in Hz
 ******************************************************************************/
static uint32_t CMU_AUXClkGet(void)
{
     458:	b082      	sub	sp, #8
  uint32_t ret;

#if defined(_EFM32_GECKO_FAMILY)
  /* Gecko has a fixed 14Mhz AUXHFRCO clock */
  ret = 14000000;
     45a:	4b03      	ldr	r3, [pc, #12]	; (468 <CMU_AUXClkGet+0x10>)
     45c:	9301      	str	r3, [sp, #4]
  default:
    ret = 0;
    break;
  }
#endif
  return ret;
     45e:	9b01      	ldr	r3, [sp, #4]
}
     460:	4618      	mov	r0, r3
     462:	b002      	add	sp, #8
     464:	4770      	bx	lr
     466:	bf00      	nop
     468:	00d59f80 	.word	0x00d59f80

0000046c <CMU_DBGClkGet>:
 *
 * @return
 *   Debug Trace frequency in Hz
 ******************************************************************************/
static uint32_t CMU_DBGClkGet(void)
{
     46c:	b500      	push	{lr}
     46e:	b083      	sub	sp, #12
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_DBG);
     470:	4810      	ldr	r0, [pc, #64]	; (4b4 <CMU_DBGClkGet+0x48>)
     472:	f000 fa5f 	bl	934 <CMU_ClockSelectGet>
     476:	4603      	mov	r3, r0
     478:	f88d 3003 	strb.w	r3, [sp, #3]

  switch(clk)
     47c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     480:	2b07      	cmp	r3, #7
     482:	d005      	beq.n	490 <CMU_DBGClkGet+0x24>
     484:	2b08      	cmp	r3, #8
     486:	d107      	bne.n	498 <CMU_DBGClkGet+0x2c>
  {
  case cmuSelect_HFCLK:
    ret = SystemHFClockGet();
     488:	f7ff fec0 	bl	20c <SystemHFClockGet>
     48c:	9001      	str	r0, [sp, #4]
#if defined( _CMU_CTRL_HFCLKDIV_MASK )
    /* Giant Gecko has an additional divider, not used by USBC */
    ret = ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK) >>
                      _CMU_CTRL_HFCLKDIV_SHIFT));
#endif
    break;
     48e:	e00b      	b.n	4a8 <CMU_DBGClkGet+0x3c>

  case cmuSelect_AUXHFRCO:
    ret = CMU_AUXClkGet();
     490:	f7ff ffe2 	bl	458 <CMU_AUXClkGet>
     494:	9001      	str	r0, [sp, #4]
    break;
     496:	e007      	b.n	4a8 <CMU_DBGClkGet+0x3c>

  default:
    EFM_ASSERT(0);
     498:	4807      	ldr	r0, [pc, #28]	; (4b8 <CMU_DBGClkGet+0x4c>)
     49a:	f44f 71b0 	mov.w	r1, #352	; 0x160
     49e:	f7ff ff39 	bl	314 <assertEFM>
    ret = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	9301      	str	r3, [sp, #4]
    break;
     4a6:	bf00      	nop
  }
  return ret;
     4a8:	9b01      	ldr	r3, [sp, #4]
}
     4aa:	4618      	mov	r0, r3
     4ac:	b003      	add	sp, #12
     4ae:	f85d fb04 	ldr.w	pc, [sp], #4
     4b2:	bf00      	nop
     4b4:	00180004 	.word	0x00180004
     4b8:	0000a224 	.word	0x0000a224

000004bc <CMU_LFClkGet>:
 * @return
 *   The LFnCLK frequency in Hz. If no LFnCLK is selected (disabled), 0 is
 *   returned.
 ******************************************************************************/
static uint32_t CMU_LFClkGet(unsigned int lfClkBranch)
{
     4bc:	b500      	push	{lr}
     4be:	b085      	sub	sp, #20
     4c0:	9001      	str	r0, [sp, #4]
  uint32_t ret;

  EFM_ASSERT(lfClkBranch == CMU_LFA || lfClkBranch == CMU_LFB);
     4c2:	9b01      	ldr	r3, [sp, #4]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d007      	beq.n	4d8 <CMU_LFClkGet+0x1c>
     4c8:	9b01      	ldr	r3, [sp, #4]
     4ca:	2b01      	cmp	r3, #1
     4cc:	d004      	beq.n	4d8 <CMU_LFClkGet+0x1c>
     4ce:	481a      	ldr	r0, [pc, #104]	; (538 <CMU_LFClkGet+0x7c>)
     4d0:	f240 1177 	movw	r1, #375	; 0x177
     4d4:	f7ff ff1e 	bl	314 <assertEFM>

  switch ((CMU->LFCLKSEL >> (lfClkBranch * 2)) & 0x3)
     4d8:	4b18      	ldr	r3, [pc, #96]	; (53c <CMU_LFClkGet+0x80>)
     4da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     4dc:	9b01      	ldr	r3, [sp, #4]
     4de:	005b      	lsls	r3, r3, #1
     4e0:	fa22 f303 	lsr.w	r3, r2, r3
     4e4:	f003 0303 	and.w	r3, r3, #3
     4e8:	2b03      	cmp	r3, #3
     4ea:	d81c      	bhi.n	526 <CMU_LFClkGet+0x6a>
     4ec:	a201      	add	r2, pc, #4	; (adr r2, 4f4 <CMU_LFClkGet+0x38>)
     4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     4f2:	bf00      	nop
     4f4:	00000521 	.word	0x00000521
     4f8:	00000505 	.word	0x00000505
     4fc:	0000050d 	.word	0x0000050d
     500:	00000515 	.word	0x00000515
  {
  case _CMU_LFCLKSEL_LFA_LFRCO:
    ret = SystemLFRCOClockGet();
     504:	f7ff fefc 	bl	300 <SystemLFRCOClockGet>
     508:	9003      	str	r0, [sp, #12]
    break;
     50a:	e00f      	b.n	52c <CMU_LFClkGet+0x70>

  case _CMU_LFCLKSEL_LFA_LFXO:
    ret = SystemLFXOClockGet();
     50c:	f7ff fefc 	bl	308 <SystemLFXOClockGet>
     510:	9003      	str	r0, [sp, #12]
    break;
     512:	e00b      	b.n	52c <CMU_LFClkGet+0x70>
    else
    {
      ret = SystemCoreClockGet() / 2;
    }
#else
    ret = SystemCoreClockGet() / 2;
     514:	f7ff fe60 	bl	1d8 <SystemCoreClockGet>
     518:	4603      	mov	r3, r0
     51a:	085b      	lsrs	r3, r3, #1
     51c:	9303      	str	r3, [sp, #12]
#endif
    break;
     51e:	e005      	b.n	52c <CMU_LFClkGet+0x70>
    else
    {
      ret = 0;
    }
#else
    ret = 0;
     520:	2300      	movs	r3, #0
     522:	9303      	str	r3, [sp, #12]
#endif
    break;
     524:	e002      	b.n	52c <CMU_LFClkGet+0x70>

  default:
    ret = 0;
     526:	2300      	movs	r3, #0
     528:	9303      	str	r3, [sp, #12]
    break;
     52a:	bf00      	nop
  }

  return ret;
     52c:	9b03      	ldr	r3, [sp, #12]
}
     52e:	4618      	mov	r0, r3
     530:	b005      	add	sp, #20
     532:	f85d fb04 	ldr.w	pc, [sp], #4
     536:	bf00      	nop
     538:	0000a224 	.word	0x0000a224
     53c:	400c8000 	.word	0x400c8000

00000540 <CMU_Sync>:
 * @param[in] mask
 *   Bitmask corresponding to SYNCBUSY register defined bits, indicating
 *   registers that must complete any ongoing synchronization.
 ******************************************************************************/
__STATIC_INLINE void CMU_Sync(uint32_t mask)
{
     540:	b082      	sub	sp, #8
     542:	9001      	str	r0, [sp, #4]
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE)
     544:	4b07      	ldr	r3, [pc, #28]	; (564 <CMU_Sync+0x24>)
     546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     548:	f003 0301 	and.w	r3, r3, #1
     54c:	2b00      	cmp	r3, #0
     54e:	d000      	beq.n	552 <CMU_Sync+0x12>
    return;
     550:	e006      	b.n	560 <CMU_Sync+0x20>

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask)
     552:	bf00      	nop
     554:	4b03      	ldr	r3, [pc, #12]	; (564 <CMU_Sync+0x24>)
     556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     558:	9b01      	ldr	r3, [sp, #4]
     55a:	4013      	ands	r3, r2
     55c:	2b00      	cmp	r3, #0
     55e:	d1f9      	bne.n	554 <CMU_Sync+0x14>
    ;
}
     560:	b002      	add	sp, #8
     562:	4770      	bx	lr
     564:	400c8000 	.word	0x400c8000

00000568 <CMU_ClockDivSet>:
 *
 * @param[in] div
 *   The clock divisor to use (<= cmuClkDiv_512).
 ******************************************************************************/
void CMU_ClockDivSet(CMU_Clock_TypeDef clock, CMU_ClkDiv_TypeDef div)
{
     568:	b500      	push	{lr}
     56a:	b085      	sub	sp, #20
     56c:	9001      	str	r0, [sp, #4]
     56e:	9100      	str	r1, [sp, #0]
  uint32_t freq;
  uint32_t divReg;

  /* Get divisor reg id */
  divReg = (clock >> CMU_DIV_REG_POS) & CMU_DIV_REG_MASK;
     570:	9b01      	ldr	r3, [sp, #4]
     572:	091b      	lsrs	r3, r3, #4
     574:	f003 030f 	and.w	r3, r3, #15
     578:	9303      	str	r3, [sp, #12]

  switch (divReg)
     57a:	9b03      	ldr	r3, [sp, #12]
     57c:	3b01      	subs	r3, #1
     57e:	2b03      	cmp	r3, #3
     580:	f200 80c5 	bhi.w	70e <CMU_ClockDivSet+0x1a6>
     584:	a201      	add	r2, pc, #4	; (adr r2, 58c <CMU_ClockDivSet+0x24>)
     586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     58a:	bf00      	nop
     58c:	0000059d 	.word	0x0000059d
     590:	000005cf 	.word	0x000005cf
     594:	0000060b 	.word	0x0000060b
     598:	0000068f 	.word	0x0000068f
    CMU_FlashWaitStateControl(freq);
    break;
#endif

  case CMU_HFPERCLKDIV_REG:
    EFM_ASSERT((div >= cmuClkDiv_1) && (div <= cmuClkDiv_512));
     59c:	9b00      	ldr	r3, [sp, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d003      	beq.n	5aa <CMU_ClockDivSet+0x42>
     5a2:	9b00      	ldr	r3, [sp, #0]
     5a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     5a8:	d904      	bls.n	5b4 <CMU_ClockDivSet+0x4c>
     5aa:	485d      	ldr	r0, [pc, #372]	; (720 <CMU_ClockDivSet+0x1b8>)
     5ac:	f240 311a 	movw	r1, #794	; 0x31a
     5b0:	f7ff feb0 	bl	314 <assertEFM>
    /* Convert to correct scale */
    div = CMU_DivToLog2(div);
     5b4:	9800      	ldr	r0, [sp, #0]
     5b6:	f7ff feed 	bl	394 <CMU_DivToLog2>
     5ba:	9000      	str	r0, [sp, #0]
    CMU->HFPERCLKDIV = (CMU->HFPERCLKDIV & ~_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK) |
     5bc:	4b59      	ldr	r3, [pc, #356]	; (724 <CMU_ClockDivSet+0x1bc>)
     5be:	4a59      	ldr	r2, [pc, #356]	; (724 <CMU_ClockDivSet+0x1bc>)
     5c0:	6892      	ldr	r2, [r2, #8]
     5c2:	f022 010f 	bic.w	r1, r2, #15
     5c6:	9a00      	ldr	r2, [sp, #0]
     5c8:	430a      	orrs	r2, r1
     5ca:	609a      	str	r2, [r3, #8]
                       (div << _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT);
    break;
     5cc:	e0a5      	b.n	71a <CMU_ClockDivSet+0x1b2>

  case CMU_HFCORECLKDIV_REG:
    EFM_ASSERT(div <= cmuClkDiv_512);
     5ce:	9b00      	ldr	r3, [sp, #0]
     5d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     5d4:	d904      	bls.n	5e0 <CMU_ClockDivSet+0x78>
     5d6:	4852      	ldr	r0, [pc, #328]	; (720 <CMU_ClockDivSet+0x1b8>)
     5d8:	f240 3122 	movw	r1, #802	; 0x322
     5dc:	f7ff fe9a 	bl	314 <assertEFM>

    /* Configure worst case wait states for flash access before setting divisor */
    CMU_FlashWaitStateMax();
     5e0:	f7ff feae 	bl	340 <CMU_FlashWaitStateMax>
                         _CMU_HFCORECLKDIV_HFCORECLKLEDIV_SHIFT, 1);
    }
#endif

    /* Convert to correct scale */
    div = CMU_DivToLog2(div);
     5e4:	9800      	ldr	r0, [sp, #0]
     5e6:	f7ff fed5 	bl	394 <CMU_DivToLog2>
     5ea:	9000      	str	r0, [sp, #0]

    CMU->HFCORECLKDIV = (CMU->HFCORECLKDIV & ~_CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) |
     5ec:	4b4d      	ldr	r3, [pc, #308]	; (724 <CMU_ClockDivSet+0x1bc>)
     5ee:	4a4d      	ldr	r2, [pc, #308]	; (724 <CMU_ClockDivSet+0x1bc>)
     5f0:	6852      	ldr	r2, [r2, #4]
     5f2:	f022 010f 	bic.w	r1, r2, #15
     5f6:	9a00      	ldr	r2, [sp, #0]
     5f8:	430a      	orrs	r2, r1
     5fa:	605a      	str	r2, [r3, #4]
                        (div << _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT);

    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();
     5fc:	f7ff fdec 	bl	1d8 <SystemCoreClockGet>
     600:	9002      	str	r0, [sp, #8]

    /* Optimize flash access wait state setting for current core clk */
    CMU_FlashWaitStateControl(freq);
     602:	9802      	ldr	r0, [sp, #8]
     604:	f7ff fee6 	bl	3d4 <CMU_FlashWaitStateControl>
    break;
     608:	e087      	b.n	71a <CMU_ClockDivSet+0x1b2>

  case CMU_LFAPRESC0_REG:
    switch (clock)
     60a:	9b01      	ldr	r3, [sp, #4]
     60c:	4a46      	ldr	r2, [pc, #280]	; (728 <CMU_ClockDivSet+0x1c0>)
     60e:	4293      	cmp	r3, r2
     610:	d003      	beq.n	61a <CMU_ClockDivSet+0xb2>
     612:	4a46      	ldr	r2, [pc, #280]	; (72c <CMU_ClockDivSet+0x1c4>)
     614:	4293      	cmp	r3, r2
     616:	d019      	beq.n	64c <CMU_ClockDivSet+0xe4>
     618:	e032      	b.n	680 <CMU_ClockDivSet+0x118>
    {
    case cmuClock_RTC:
      EFM_ASSERT(div <= cmuClkDiv_32768);
     61a:	9b00      	ldr	r3, [sp, #0]
     61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     620:	d904      	bls.n	62c <CMU_ClockDivSet+0xc4>
     622:	483f      	ldr	r0, [pc, #252]	; (720 <CMU_ClockDivSet+0x1b8>)
     624:	f240 3151 	movw	r1, #849	; 0x351
     628:	f7ff fe74 	bl	314 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFAPRESC0);
     62c:	2004      	movs	r0, #4
     62e:	f7ff ff87 	bl	540 <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     632:	9800      	ldr	r0, [sp, #0]
     634:	f7ff feae 	bl	394 <CMU_DivToLog2>
     638:	9000      	str	r0, [sp, #0]

      CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_RTC_MASK) |
     63a:	4b3a      	ldr	r3, [pc, #232]	; (724 <CMU_ClockDivSet+0x1bc>)
     63c:	4a39      	ldr	r2, [pc, #228]	; (724 <CMU_ClockDivSet+0x1bc>)
     63e:	6e92      	ldr	r2, [r2, #104]	; 0x68
     640:	f022 010f 	bic.w	r1, r2, #15
     644:	9a00      	ldr	r2, [sp, #0]
     646:	430a      	orrs	r2, r1
     648:	669a      	str	r2, [r3, #104]	; 0x68
                       (div << _CMU_LFAPRESC0_RTC_SHIFT);
      break;
     64a:	e01f      	b.n	68c <CMU_ClockDivSet+0x124>

#if defined(_CMU_LFAPRESC0_LETIMER0_MASK)
    case cmuClock_LETIMER0:
      EFM_ASSERT(div <= cmuClkDiv_32768);
     64c:	9b00      	ldr	r3, [sp, #0]
     64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
     652:	d904      	bls.n	65e <CMU_ClockDivSet+0xf6>
     654:	4832      	ldr	r0, [pc, #200]	; (720 <CMU_ClockDivSet+0x1b8>)
     656:	f240 315f 	movw	r1, #863	; 0x35f
     65a:	f7ff fe5b 	bl	314 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFAPRESC0);
     65e:	2004      	movs	r0, #4
     660:	f7ff ff6e 	bl	540 <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     664:	9800      	ldr	r0, [sp, #0]
     666:	f7ff fe95 	bl	394 <CMU_DivToLog2>
     66a:	9000      	str	r0, [sp, #0]

      CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LETIMER0_MASK) |
     66c:	4b2d      	ldr	r3, [pc, #180]	; (724 <CMU_ClockDivSet+0x1bc>)
     66e:	4a2d      	ldr	r2, [pc, #180]	; (724 <CMU_ClockDivSet+0x1bc>)
     670:	6e92      	ldr	r2, [r2, #104]	; 0x68
     672:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
                       (div << _CMU_LFAPRESC0_LETIMER0_SHIFT);
     676:	9a00      	ldr	r2, [sp, #0]
     678:	0112      	lsls	r2, r2, #4
      CMU_Sync(CMU_SYNCBUSY_LFAPRESC0);

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);

      CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LETIMER0_MASK) |
     67a:	430a      	orrs	r2, r1
     67c:	669a      	str	r2, [r3, #104]	; 0x68
                       (div << _CMU_LFAPRESC0_LETIMER0_SHIFT);
      break;
     67e:	e005      	b.n	68c <CMU_ClockDivSet+0x124>
                       (div << _CMU_LFAPRESC0_LESENSE_SHIFT);
      break;
#endif /* defined(LESENSE_PRESENT) */

    default:
      EFM_ASSERT(0);
     680:	4827      	ldr	r0, [pc, #156]	; (720 <CMU_ClockDivSet+0x1b8>)
     682:	f240 318b 	movw	r1, #907	; 0x38b
     686:	f7ff fe45 	bl	314 <assertEFM>
      break;
     68a:	bf00      	nop
    }
    break;
     68c:	e045      	b.n	71a <CMU_ClockDivSet+0x1b2>

  case CMU_LFBPRESC0_REG:
    switch (clock)
     68e:	9b01      	ldr	r3, [sp, #4]
     690:	4a27      	ldr	r2, [pc, #156]	; (730 <CMU_ClockDivSet+0x1c8>)
     692:	4293      	cmp	r3, r2
     694:	d003      	beq.n	69e <CMU_ClockDivSet+0x136>
     696:	4a27      	ldr	r2, [pc, #156]	; (734 <CMU_ClockDivSet+0x1cc>)
     698:	4293      	cmp	r3, r2
     69a:	d018      	beq.n	6ce <CMU_ClockDivSet+0x166>
     69c:	e030      	b.n	700 <CMU_ClockDivSet+0x198>
    {
#if defined(_CMU_LFBPRESC0_LEUART0_MASK)
    case cmuClock_LEUART0:
      EFM_ASSERT(div <= cmuClkDiv_8);
     69e:	9b00      	ldr	r3, [sp, #0]
     6a0:	2b08      	cmp	r3, #8
     6a2:	d904      	bls.n	6ae <CMU_ClockDivSet+0x146>
     6a4:	481e      	ldr	r0, [pc, #120]	; (720 <CMU_ClockDivSet+0x1b8>)
     6a6:	f240 3195 	movw	r1, #917	; 0x395
     6aa:	f7ff fe33 	bl	314 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFBPRESC0);
     6ae:	2040      	movs	r0, #64	; 0x40
     6b0:	f7ff ff46 	bl	540 <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     6b4:	9800      	ldr	r0, [sp, #0]
     6b6:	f7ff fe6d 	bl	394 <CMU_DivToLog2>
     6ba:	9000      	str	r0, [sp, #0]

      CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART0_MASK) |
     6bc:	4b19      	ldr	r3, [pc, #100]	; (724 <CMU_ClockDivSet+0x1bc>)
     6be:	4a19      	ldr	r2, [pc, #100]	; (724 <CMU_ClockDivSet+0x1bc>)
     6c0:	6f12      	ldr	r2, [r2, #112]	; 0x70
     6c2:	f022 0103 	bic.w	r1, r2, #3
     6c6:	9a00      	ldr	r2, [sp, #0]
     6c8:	430a      	orrs	r2, r1
     6ca:	671a      	str	r2, [r3, #112]	; 0x70
                       (((uint32_t)div) << _CMU_LFBPRESC0_LEUART0_SHIFT);
      break;
     6cc:	e01e      	b.n	70c <CMU_ClockDivSet+0x1a4>
#endif

#if defined(_CMU_LFBPRESC0_LEUART1_MASK)
    case cmuClock_LEUART1:
      EFM_ASSERT(div <= cmuClkDiv_8);
     6ce:	9b00      	ldr	r3, [sp, #0]
     6d0:	2b08      	cmp	r3, #8
     6d2:	d904      	bls.n	6de <CMU_ClockDivSet+0x176>
     6d4:	4812      	ldr	r0, [pc, #72]	; (720 <CMU_ClockDivSet+0x1b8>)
     6d6:	f44f 7169 	mov.w	r1, #932	; 0x3a4
     6da:	f7ff fe1b 	bl	314 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFBPRESC0);
     6de:	2040      	movs	r0, #64	; 0x40
     6e0:	f7ff ff2e 	bl	540 <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     6e4:	9800      	ldr	r0, [sp, #0]
     6e6:	f7ff fe55 	bl	394 <CMU_DivToLog2>
     6ea:	9000      	str	r0, [sp, #0]

      CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART1_MASK) |
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <CMU_ClockDivSet+0x1bc>)
     6ee:	4a0d      	ldr	r2, [pc, #52]	; (724 <CMU_ClockDivSet+0x1bc>)
     6f0:	6f12      	ldr	r2, [r2, #112]	; 0x70
     6f2:	f022 0130 	bic.w	r1, r2, #48	; 0x30
                       (((uint32_t)div) << _CMU_LFBPRESC0_LEUART1_SHIFT);
     6f6:	9a00      	ldr	r2, [sp, #0]
     6f8:	0112      	lsls	r2, r2, #4
      CMU_Sync(CMU_SYNCBUSY_LFBPRESC0);

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);

      CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART1_MASK) |
     6fa:	430a      	orrs	r2, r1
     6fc:	671a      	str	r2, [r3, #112]	; 0x70
                       (((uint32_t)div) << _CMU_LFBPRESC0_LEUART1_SHIFT);
      break;
     6fe:	e005      	b.n	70c <CMU_ClockDivSet+0x1a4>
#endif

    default:
      EFM_ASSERT(0);
     700:	4807      	ldr	r0, [pc, #28]	; (720 <CMU_ClockDivSet+0x1b8>)
     702:	f240 31b2 	movw	r1, #946	; 0x3b2
     706:	f7ff fe05 	bl	314 <assertEFM>
      break;
     70a:	bf00      	nop
    }
    break;
     70c:	e005      	b.n	71a <CMU_ClockDivSet+0x1b2>

  default:
    EFM_ASSERT(0);
     70e:	4804      	ldr	r0, [pc, #16]	; (720 <CMU_ClockDivSet+0x1b8>)
     710:	f44f 716e 	mov.w	r1, #952	; 0x3b8
     714:	f7ff fdfe 	bl	314 <assertEFM>
    break;
     718:	bf00      	nop
  }
}
     71a:	b005      	add	sp, #20
     71c:	f85d fb04 	ldr.w	pc, [sp], #4
     720:	0000a224 	.word	0x0000a224
     724:	400c8000 	.word	0x400c8000
     728:	00080430 	.word	0x00080430
     72c:	000a1430 	.word	0x000a1430
     730:	00140540 	.word	0x00140540
     734:	00161540 	.word	0x00161540

00000738 <CMU_ClockEnable>:
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
     738:	b500      	push	{lr}
     73a:	b087      	sub	sp, #28
     73c:	9001      	str	r0, [sp, #4]
     73e:	460b      	mov	r3, r1
     740:	f88d 3003 	strb.w	r3, [sp, #3]
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     744:	2300      	movs	r3, #0
     746:	9304      	str	r3, [sp, #16]

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK)
     748:	9b01      	ldr	r3, [sp, #4]
     74a:	0a1b      	lsrs	r3, r3, #8
     74c:	f003 030f 	and.w	r3, r3, #15
     750:	3b01      	subs	r3, #1
     752:	2b05      	cmp	r3, #5
     754:	d824      	bhi.n	7a0 <CMU_ClockEnable+0x68>
     756:	a201      	add	r2, pc, #4	; (adr r2, 75c <CMU_ClockEnable+0x24>)
     758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     75c:	00000775 	.word	0x00000775
     760:	0000077b 	.word	0x0000077b
     764:	00000781 	.word	0x00000781
     768:	00000787 	.word	0x00000787
     76c:	00000791 	.word	0x00000791
     770:	0000079b 	.word	0x0000079b
  {
  case CMU_HFPERCLKDIV_EN_REG:
    reg = &(CMU->HFPERCLKDIV);
     774:	4b18      	ldr	r3, [pc, #96]	; (7d8 <CMU_ClockEnable+0xa0>)
     776:	9305      	str	r3, [sp, #20]
    break;
     778:	e018      	b.n	7ac <CMU_ClockEnable+0x74>

  case CMU_HFPERCLKEN0_EN_REG:
    reg = &(CMU->HFPERCLKEN0);
     77a:	4b18      	ldr	r3, [pc, #96]	; (7dc <CMU_ClockEnable+0xa4>)
     77c:	9305      	str	r3, [sp, #20]
    break;
     77e:	e015      	b.n	7ac <CMU_ClockEnable+0x74>

  case CMU_HFCORECLKEN0_EN_REG:
    reg = &(CMU->HFCORECLKEN0);
     780:	4b17      	ldr	r3, [pc, #92]	; (7e0 <CMU_ClockEnable+0xa8>)
     782:	9305      	str	r3, [sp, #20]
      /* Set DIV4 factor for peripheral clock */
      BITBAND_Peripheral(&(CMU->HFCORECLKDIV),
                         _CMU_HFCORECLKDIV_HFCORECLKLEDIV_SHIFT, 1);
    }
#endif
    break;
     784:	e012      	b.n	7ac <CMU_ClockEnable+0x74>

  case CMU_LFACLKEN0_EN_REG:
    reg  = &(CMU->LFACLKEN0);
     786:	4b17      	ldr	r3, [pc, #92]	; (7e4 <CMU_ClockEnable+0xac>)
     788:	9305      	str	r3, [sp, #20]
    sync = CMU_SYNCBUSY_LFACLKEN0;
     78a:	2301      	movs	r3, #1
     78c:	9304      	str	r3, [sp, #16]
    break;
     78e:	e00d      	b.n	7ac <CMU_ClockEnable+0x74>

  case CMU_LFBCLKEN0_EN_REG:
    reg  = &(CMU->LFBCLKEN0);
     790:	4b15      	ldr	r3, [pc, #84]	; (7e8 <CMU_ClockEnable+0xb0>)
     792:	9305      	str	r3, [sp, #20]
    sync = CMU_SYNCBUSY_LFBCLKEN0;
     794:	2310      	movs	r3, #16
     796:	9304      	str	r3, [sp, #16]
    break;
     798:	e008      	b.n	7ac <CMU_ClockEnable+0x74>

  case CMU_PCNT_EN_REG:
    reg = &(CMU->PCNTCTRL);
     79a:	4b14      	ldr	r3, [pc, #80]	; (7ec <CMU_ClockEnable+0xb4>)
     79c:	9305      	str	r3, [sp, #20]
    break;
     79e:	e005      	b.n	7ac <CMU_ClockEnable+0x74>

  default: /* Cannot enable/disable clock point */
    EFM_ASSERT(0);
     7a0:	4813      	ldr	r0, [pc, #76]	; (7f0 <CMU_ClockEnable+0xb8>)
     7a2:	f240 410d 	movw	r1, #1037	; 0x40d
     7a6:	f7ff fdb5 	bl	314 <assertEFM>
    return;
     7aa:	e011      	b.n	7d0 <CMU_ClockEnable+0x98>
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
     7ac:	9b01      	ldr	r3, [sp, #4]
     7ae:	0b1b      	lsrs	r3, r3, #12
     7b0:	f003 031f 	and.w	r3, r3, #31
     7b4:	9303      	str	r3, [sp, #12]

  /* LF synchronization required? */
  if (sync)
     7b6:	9b04      	ldr	r3, [sp, #16]
     7b8:	2b00      	cmp	r3, #0
     7ba:	d002      	beq.n	7c2 <CMU_ClockEnable+0x8a>
  {
    CMU_Sync(sync);
     7bc:	9804      	ldr	r0, [sp, #16]
     7be:	f7ff febf 	bl	540 <CMU_Sync>
  }

  /* Set/clear bit as requested */
  BITBAND_Peripheral(reg, bit, (unsigned int)enable);
     7c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     7c6:	9805      	ldr	r0, [sp, #20]
     7c8:	9903      	ldr	r1, [sp, #12]
     7ca:	461a      	mov	r2, r3
     7cc:	f7ff fda6 	bl	31c <BITBAND_Peripheral>
}
     7d0:	b007      	add	sp, #28
     7d2:	f85d fb04 	ldr.w	pc, [sp], #4
     7d6:	bf00      	nop
     7d8:	400c8008 	.word	0x400c8008
     7dc:	400c8044 	.word	0x400c8044
     7e0:	400c8040 	.word	0x400c8040
     7e4:	400c8058 	.word	0x400c8058
     7e8:	400c8060 	.word	0x400c8060
     7ec:	400c8078 	.word	0x400c8078
     7f0:	0000a224 	.word	0x0000a224

000007f4 <CMU_ClockFreqGet>:
 *
 * @return
 *   The current frequency in Hz.
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
     7f4:	b500      	push	{lr}
     7f6:	b085      	sub	sp, #20
     7f8:	9001      	str	r0, [sp, #4]
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     7fa:	9b01      	ldr	r3, [sp, #4]
     7fc:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
     800:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
     804:	d04f      	beq.n	8a6 <CMU_ClockFreqGet+0xb2>
     806:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
     80a:	d812      	bhi.n	832 <CMU_ClockFreqGet+0x3e>
     80c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     810:	d033      	beq.n	87a <CMU_ClockFreqGet+0x86>
     812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     816:	d805      	bhi.n	824 <CMU_ClockFreqGet+0x30>
     818:	2b00      	cmp	r3, #0
     81a:	d01e      	beq.n	85a <CMU_ClockFreqGet+0x66>
     81c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
     820:	d01f      	beq.n	862 <CMU_ClockFreqGet+0x6e>
     822:	e076      	b.n	912 <CMU_ClockFreqGet+0x11e>
     824:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
     828:	d02b      	beq.n	882 <CMU_ClockFreqGet+0x8e>
     82a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
     82e:	d02d      	beq.n	88c <CMU_ClockFreqGet+0x98>
     830:	e06f      	b.n	912 <CMU_ClockFreqGet+0x11e>
     832:	f5b3 1fb0 	cmp.w	r3, #1441792	; 0x160000
     836:	d056      	beq.n	8e6 <CMU_ClockFreqGet+0xf2>
     838:	f5b3 1fb0 	cmp.w	r3, #1441792	; 0x160000
     83c:	d806      	bhi.n	84c <CMU_ClockFreqGet+0x58>
     83e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
     842:	d03e      	beq.n	8c2 <CMU_ClockFreqGet+0xce>
     844:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
     848:	d040      	beq.n	8cc <CMU_ClockFreqGet+0xd8>
     84a:	e062      	b.n	912 <CMU_ClockFreqGet+0x11e>
     84c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
     850:	d057      	beq.n	902 <CMU_ClockFreqGet+0x10e>
     852:	f5b3 1fd0 	cmp.w	r3, #1703936	; 0x1a0000
     856:	d058      	beq.n	90a <CMU_ClockFreqGet+0x116>
     858:	e05b      	b.n	912 <CMU_ClockFreqGet+0x11e>
  {
    case (CMU_HF_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemHFClockGet();
     85a:	f7ff fcd7 	bl	20c <SystemHFClockGet>
     85e:	9003      	str	r0, [sp, #12]
#if defined( _CMU_CTRL_HFCLKDIV_MASK )
      /* Giant Gecko has an additional divider, not used by USBC */
      ret = ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK) >>
                   _CMU_CTRL_HFCLKDIV_SHIFT));
#endif
    } break;
     860:	e05f      	b.n	922 <CMU_ClockFreqGet+0x12e>
    defined(PRS_PRESENT) || \
    defined(VCMP_PRESENT)|| \
    defined(GPIO_PRESENT)
    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = SystemHFClockGet();
     862:	f7ff fcd3 	bl	20c <SystemHFClockGet>
     866:	9003      	str	r0, [sp, #12]
#if defined( _CMU_CTRL_HFCLKDIV_MASK )
      /* Leopard/Giant Gecko has an additional divider */
      ret = ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK) >>
                        _CMU_CTRL_HFCLKDIV_SHIFT));
#endif
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK) >>
     868:	4b30      	ldr	r3, [pc, #192]	; (92c <CMU_ClockFreqGet+0x138>)
     86a:	689b      	ldr	r3, [r3, #8]
     86c:	f003 030f 	and.w	r3, r3, #15
     870:	9a03      	ldr	r2, [sp, #12]
     872:	fa22 f303 	lsr.w	r3, r2, r3
     876:	9303      	str	r3, [sp, #12]
              _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT;
    } break;
     878:	e053      	b.n	922 <CMU_ClockFreqGet+0x12e>
    defined(DMA_PRESENT) || \
    defined(EBI_PRESENT) || \
    defined(USB_PRESENT)
    case (CMU_HFCORE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemCoreClockGet();
     87a:	f7ff fcad 	bl	1d8 <SystemCoreClockGet>
     87e:	9003      	str	r0, [sp, #12]
    } break;
     880:	e04f      	b.n	922 <CMU_ClockFreqGet+0x12e>
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = CMU_LFClkGet(CMU_LFA);
     882:	2000      	movs	r0, #0
     884:	f7ff fe1a 	bl	4bc <CMU_LFClkGet>
     888:	9003      	str	r0, [sp, #12]
    } break;
     88a:	e04a      	b.n	922 <CMU_ClockFreqGet+0x12e>
#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFA);
     88c:	2000      	movs	r0, #0
     88e:	f7ff fe15 	bl	4bc <CMU_LFClkGet>
     892:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >>
     894:	4b25      	ldr	r3, [pc, #148]	; (92c <CMU_ClockFreqGet+0x138>)
     896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     898:	f003 030f 	and.w	r3, r3, #15
     89c:	9a03      	ldr	r2, [sp, #12]
     89e:	fa22 f303 	lsr.w	r3, r2, r3
     8a2:	9303      	str	r3, [sp, #12]
              _CMU_LFAPRESC0_RTC_SHIFT;
    } break;
     8a4:	e03d      	b.n	922 <CMU_ClockFreqGet+0x12e>
#endif
#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFA);
     8a6:	2000      	movs	r0, #0
     8a8:	f7ff fe08 	bl	4bc <CMU_LFClkGet>
     8ac:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >>
     8ae:	4b1f      	ldr	r3, [pc, #124]	; (92c <CMU_ClockFreqGet+0x138>)
     8b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     8b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     8b6:	091b      	lsrs	r3, r3, #4
     8b8:	9a03      	ldr	r2, [sp, #12]
     8ba:	fa22 f303 	lsr.w	r3, r2, r3
     8be:	9303      	str	r3, [sp, #12]
              _CMU_LFAPRESC0_LETIMER0_SHIFT;
    } break;
     8c0:	e02f      	b.n	922 <CMU_ClockFreqGet+0x12e>
              _CMU_LFAPRESC0_LESENSE_SHIFT;
    } break;
#endif
    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = CMU_LFClkGet(CMU_LFB);
     8c2:	2001      	movs	r0, #1
     8c4:	f7ff fdfa 	bl	4bc <CMU_LFClkGet>
     8c8:	9003      	str	r0, [sp, #12]
    } break;
     8ca:	e02a      	b.n	922 <CMU_ClockFreqGet+0x12e>
#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFB);
     8cc:	2001      	movs	r0, #1
     8ce:	f7ff fdf5 	bl	4bc <CMU_LFClkGet>
     8d2:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >>
     8d4:	4b15      	ldr	r3, [pc, #84]	; (92c <CMU_ClockFreqGet+0x138>)
     8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     8d8:	f003 0303 	and.w	r3, r3, #3
     8dc:	9a03      	ldr	r2, [sp, #12]
     8de:	fa22 f303 	lsr.w	r3, r2, r3
     8e2:	9303      	str	r3, [sp, #12]
              _CMU_LFBPRESC0_LEUART0_SHIFT;
    } break;
     8e4:	e01d      	b.n	922 <CMU_ClockFreqGet+0x12e>
#endif
#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFB);
     8e6:	2001      	movs	r0, #1
     8e8:	f7ff fde8 	bl	4bc <CMU_LFClkGet>
     8ec:	9003      	str	r0, [sp, #12]
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >>
     8ee:	4b0f      	ldr	r3, [pc, #60]	; (92c <CMU_ClockFreqGet+0x138>)
     8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     8f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
     8f6:	091b      	lsrs	r3, r3, #4
     8f8:	9a03      	ldr	r2, [sp, #12]
     8fa:	fa22 f303 	lsr.w	r3, r2, r3
     8fe:	9303      	str	r3, [sp, #12]
        _CMU_LFBPRESC0_LEUART1_SHIFT;
    } break;
     900:	e00f      	b.n	922 <CMU_ClockFreqGet+0x12e>
#endif

    case (CMU_DBG_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret  = CMU_DBGClkGet();
     902:	f7ff fdb3 	bl	46c <CMU_DBGClkGet>
     906:	9003      	str	r0, [sp, #12]
    } break;
     908:	e00b      	b.n	922 <CMU_ClockFreqGet+0x12e>

    case (CMU_AUX_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret  = CMU_AUXClkGet();
     90a:	f7ff fda5 	bl	458 <CMU_AUXClkGet>
     90e:	9003      	str	r0, [sp, #12]
    } break;
     910:	e007      	b.n	922 <CMU_ClockFreqGet+0x12e>
      ret = CMU_USBCClkGet();
    } break;
#endif
    default:
    {
      EFM_ASSERT(0);
     912:	4807      	ldr	r0, [pc, #28]	; (930 <CMU_ClockFreqGet+0x13c>)
     914:	f240 41b7 	movw	r1, #1207	; 0x4b7
     918:	f7ff fcfc 	bl	314 <assertEFM>
      ret = 0;
     91c:	2300      	movs	r3, #0
     91e:	9303      	str	r3, [sp, #12]
    } break;
     920:	bf00      	nop
  }
  return ret;
     922:	9b03      	ldr	r3, [sp, #12]
}
     924:	4618      	mov	r0, r3
     926:	b005      	add	sp, #20
     928:	f85d fb04 	ldr.w	pc, [sp], #4
     92c:	400c8000 	.word	0x400c8000
     930:	0000a224 	.word	0x0000a224

00000934 <CMU_ClockSelectGet>:
 * @return
 *   Reference clock used for clocking selected branch, #cmuSelect_Error if
 *   invalid @p clock provided.
 *****************************************************************************/
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
     934:	b500      	push	{lr}
     936:	b085      	sub	sp, #20
     938:	9001      	str	r0, [sp, #4]
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
     93a:	2301      	movs	r3, #1
     93c:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t           selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
     940:	9b01      	ldr	r3, [sp, #4]
     942:	f003 030f 	and.w	r3, r3, #15
     946:	9302      	str	r3, [sp, #8]

  switch (selReg)
     948:	9b02      	ldr	r3, [sp, #8]
     94a:	3b01      	subs	r3, #1
     94c:	2b03      	cmp	r3, #3
     94e:	d864      	bhi.n	a1a <CMU_ClockSelectGet+0xe6>
     950:	a201      	add	r2, pc, #4	; (adr r2, 958 <CMU_ClockSelectGet+0x24>)
     952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     956:	bf00      	nop
     958:	00000969 	.word	0x00000969
     95c:	000009a7 	.word	0x000009a7
     960:	000009dd 	.word	0x000009dd
     964:	00000a13 	.word	0x00000a13
  {
  case CMU_HFCLKSEL_REG:
    switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
     968:	4b33      	ldr	r3, [pc, #204]	; (a38 <CMU_ClockSelectGet+0x104>)
     96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     96c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
     970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     974:	d00a      	beq.n	98c <CMU_ClockSelectGet+0x58>
     976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     97a:	d003      	beq.n	984 <CMU_ClockSelectGet+0x50>
     97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     980:	d008      	beq.n	994 <CMU_ClockSelectGet+0x60>
     982:	e00b      	b.n	99c <CMU_ClockSelectGet+0x68>
                           CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
    {
    case CMU_STATUS_LFXOSEL:
      ret = cmuSelect_LFXO;
     984:	2302      	movs	r3, #2
     986:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     98a:	e00b      	b.n	9a4 <CMU_ClockSelectGet+0x70>

    case CMU_STATUS_LFRCOSEL:
      ret = cmuSelect_LFRCO;
     98c:	2303      	movs	r3, #3
     98e:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     992:	e007      	b.n	9a4 <CMU_ClockSelectGet+0x70>

    case CMU_STATUS_HFXOSEL:
      ret = cmuSelect_HFXO;
     994:	2304      	movs	r3, #4
     996:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     99a:	e003      	b.n	9a4 <CMU_ClockSelectGet+0x70>

    default:
      ret = cmuSelect_HFRCO;
     99c:	2305      	movs	r3, #5
     99e:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9a2:	bf00      	nop
    }
    break;
     9a4:	e042      	b.n	a2c <CMU_ClockSelectGet+0xf8>

  case CMU_LFACLKSEL_REG:
    switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK)
     9a6:	4b24      	ldr	r3, [pc, #144]	; (a38 <CMU_ClockSelectGet+0x104>)
     9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9aa:	f003 0303 	and.w	r3, r3, #3
     9ae:	2b02      	cmp	r3, #2
     9b0:	d007      	beq.n	9c2 <CMU_ClockSelectGet+0x8e>
     9b2:	2b03      	cmp	r3, #3
     9b4:	d009      	beq.n	9ca <CMU_ClockSelectGet+0x96>
     9b6:	2b01      	cmp	r3, #1
     9b8:	d10b      	bne.n	9d2 <CMU_ClockSelectGet+0x9e>
    {
    case CMU_LFCLKSEL_LFA_LFRCO:
      ret = cmuSelect_LFRCO;
     9ba:	2303      	movs	r3, #3
     9bc:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9c0:	e00b      	b.n	9da <CMU_ClockSelectGet+0xa6>

    case CMU_LFCLKSEL_LFA_LFXO:
      ret = cmuSelect_LFXO;
     9c2:	2302      	movs	r3, #2
     9c4:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9c8:	e007      	b.n	9da <CMU_ClockSelectGet+0xa6>

    case CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2:
      ret = cmuSelect_CORELEDIV2;
     9ca:	2306      	movs	r3, #6
     9cc:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9d0:	e003      	b.n	9da <CMU_ClockSelectGet+0xa6>
      {
        ret = cmuSelect_ULFRCO;
        break;
      }
#else
      ret = cmuSelect_Disabled;
     9d2:	2301      	movs	r3, #1
     9d4:	f88d 300f 	strb.w	r3, [sp, #15]
#endif
      break;
     9d8:	bf00      	nop
    }
    break;
     9da:	e027      	b.n	a2c <CMU_ClockSelectGet+0xf8>

  case CMU_LFBCLKSEL_REG:
    switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK)
     9dc:	4b16      	ldr	r3, [pc, #88]	; (a38 <CMU_ClockSelectGet+0x104>)
     9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9e0:	f003 030c 	and.w	r3, r3, #12
     9e4:	2b08      	cmp	r3, #8
     9e6:	d007      	beq.n	9f8 <CMU_ClockSelectGet+0xc4>
     9e8:	2b0c      	cmp	r3, #12
     9ea:	d009      	beq.n	a00 <CMU_ClockSelectGet+0xcc>
     9ec:	2b04      	cmp	r3, #4
     9ee:	d10b      	bne.n	a08 <CMU_ClockSelectGet+0xd4>
    {
    case CMU_LFCLKSEL_LFB_LFRCO:
      ret = cmuSelect_LFRCO;
     9f0:	2303      	movs	r3, #3
     9f2:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9f6:	e00b      	b.n	a10 <CMU_ClockSelectGet+0xdc>

    case CMU_LFCLKSEL_LFB_LFXO:
      ret = cmuSelect_LFXO;
     9f8:	2302      	movs	r3, #2
     9fa:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     9fe:	e007      	b.n	a10 <CMU_ClockSelectGet+0xdc>

    case CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2:
      ret = cmuSelect_CORELEDIV2;
     a00:	2306      	movs	r3, #6
     a02:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
     a06:	e003      	b.n	a10 <CMU_ClockSelectGet+0xdc>
      {
        ret = cmuSelect_ULFRCO;
        break;
      }
#else
      ret = cmuSelect_Disabled;
     a08:	2301      	movs	r3, #1
     a0a:	f88d 300f 	strb.w	r3, [sp, #15]
#endif
      break;
     a0e:	bf00      	nop
    }
    break;
     a10:	e00c      	b.n	a2c <CMU_ClockSelectGet+0xf8>
      ret = cmuSelect_HFCLK;
      break;
    }
#endif
#if defined(_EFM32_GECKO_FAMILY)
    ret = cmuSelect_AUXHFRCO;
     a12:	2307      	movs	r3, #7
     a14:	f88d 300f 	strb.w	r3, [sp, #15]
#endif
    break;
     a18:	e008      	b.n	a2c <CMU_ClockSelectGet+0xf8>
    }
    break;
#endif

  default:
    EFM_ASSERT(0);
     a1a:	4808      	ldr	r0, [pc, #32]	; (a3c <CMU_ClockSelectGet+0x108>)
     a1c:	f240 5155 	movw	r1, #1365	; 0x555
     a20:	f7ff fc78 	bl	314 <assertEFM>
    ret = cmuSelect_Error;
     a24:	2300      	movs	r3, #0
     a26:	f88d 300f 	strb.w	r3, [sp, #15]
    break;
     a2a:	bf00      	nop
  }

  return ret;
     a2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     a30:	4618      	mov	r0, r3
     a32:	b005      	add	sp, #20
     a34:	f85d fb04 	ldr.w	pc, [sp], #4
     a38:	400c8000 	.word	0x400c8000
     a3c:	0000a224 	.word	0x0000a224

00000a40 <CMU_ClockSelectSet>:
 *   @li #cmuSelect_AUXHFRC
 *   @li #cmuSelect_HFCLK
 *   @li #cmuSelect_ULFRCO
 *****************************************************************************/
void CMU_ClockSelectSet(CMU_Clock_TypeDef clock, CMU_Select_TypeDef ref)
{
     a40:	b500      	push	{lr}
     a42:	b089      	sub	sp, #36	; 0x24
     a44:	9001      	str	r0, [sp, #4]
     a46:	460b      	mov	r3, r1
     a48:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t        select = cmuOsc_HFRCO;
     a4c:	2303      	movs	r3, #3
     a4e:	9307      	str	r3, [sp, #28]
  CMU_Osc_TypeDef osc    = cmuOsc_HFRCO;
     a50:	2303      	movs	r3, #3
     a52:	f88d 301b 	strb.w	r3, [sp, #27]
#if !defined(_EFM32_GECKO_FAMILY)
  uint32_t        lfExtended = 0;
#endif
  uint32_t        tmp;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
     a56:	9b01      	ldr	r3, [sp, #4]
     a58:	f003 030f 	and.w	r3, r3, #15
     a5c:	9304      	str	r3, [sp, #16]

  switch (selReg)
     a5e:	9b04      	ldr	r3, [sp, #16]
     a60:	2b01      	cmp	r3, #1
     a62:	d006      	beq.n	a72 <CMU_ClockSelectSet+0x32>
     a64:	2b01      	cmp	r3, #1
     a66:	f0c0 8094 	bcc.w	b92 <CMU_ClockSelectSet+0x152>
     a6a:	2b03      	cmp	r3, #3
     a6c:	f200 8091 	bhi.w	b92 <CMU_ClockSelectSet+0x152>
     a70:	e043      	b.n	afa <CMU_ClockSelectSet+0xba>
  {
  case CMU_HFCLKSEL_REG:
    switch (ref)
     a72:	f89d 3003 	ldrb.w	r3, [sp, #3]
     a76:	3b02      	subs	r3, #2
     a78:	2b03      	cmp	r3, #3
     a7a:	d823      	bhi.n	ac4 <CMU_ClockSelectSet+0x84>
     a7c:	a201      	add	r2, pc, #4	; (adr r2, a84 <CMU_ClockSelectSet+0x44>)
     a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a82:	bf00      	nop
     a84:	00000a95 	.word	0x00000a95
     a88:	00000aa1 	.word	0x00000aa1
     a8c:	00000aad 	.word	0x00000aad
     a90:	00000ab9 	.word	0x00000ab9
    {
    case cmuSelect_LFXO:
      select = CMU_CMD_HFCLKSEL_LFXO;
     a94:	2304      	movs	r3, #4
     a96:	9307      	str	r3, [sp, #28]
      osc    = cmuOsc_LFXO;
     a98:	2300      	movs	r3, #0
     a9a:	f88d 301b 	strb.w	r3, [sp, #27]
      break;
     a9e:	e017      	b.n	ad0 <CMU_ClockSelectSet+0x90>

    case cmuSelect_LFRCO:
      select = CMU_CMD_HFCLKSEL_LFRCO;
     aa0:	2303      	movs	r3, #3
     aa2:	9307      	str	r3, [sp, #28]
      osc    = cmuOsc_LFRCO;
     aa4:	2301      	movs	r3, #1
     aa6:	f88d 301b 	strb.w	r3, [sp, #27]
      break;
     aaa:	e011      	b.n	ad0 <CMU_ClockSelectSet+0x90>

    case cmuSelect_HFXO:
      select = CMU_CMD_HFCLKSEL_HFXO;
     aac:	2302      	movs	r3, #2
     aae:	9307      	str	r3, [sp, #28]
      osc    = cmuOsc_HFXO;
     ab0:	2302      	movs	r3, #2
     ab2:	f88d 301b 	strb.w	r3, [sp, #27]
        /* use another oscillator frequency */
        CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK) |
          CMU_CTRL_HFXOBUFCUR_BOOSTUPTO32MHZ;
      }
#endif
      break;
     ab6:	e00b      	b.n	ad0 <CMU_ClockSelectSet+0x90>

    case cmuSelect_HFRCO:
      select = CMU_CMD_HFCLKSEL_HFRCO;
     ab8:	2301      	movs	r3, #1
     aba:	9307      	str	r3, [sp, #28]
      osc    = cmuOsc_HFRCO;
     abc:	2303      	movs	r3, #3
     abe:	f88d 301b 	strb.w	r3, [sp, #27]
      break;
     ac2:	e005      	b.n	ad0 <CMU_ClockSelectSet+0x90>
      EFM_ASSERT(0);
      break;
#endif

    default:
      EFM_ASSERT(0);
     ac4:	4837      	ldr	r0, [pc, #220]	; (ba4 <CMU_ClockSelectSet+0x164>)
     ac6:	f240 51c6 	movw	r1, #1478	; 0x5c6
     aca:	f7ff fc23 	bl	314 <assertEFM>
      return;
     ace:	e066      	b.n	b9e <CMU_ClockSelectSet+0x15e>
    }

    /* Ensure selected oscillator is enabled, waiting for it to stabilize */
    CMU_OscillatorEnable(osc, true, true);
     ad0:	f89d 301b 	ldrb.w	r3, [sp, #27]
     ad4:	4618      	mov	r0, r3
     ad6:	2101      	movs	r1, #1
     ad8:	2201      	movs	r2, #1
     ada:	f000 f869 	bl	bb0 <CMU_OscillatorEnable>

    /* Configure worst case wait states for flash access before selecting */
    CMU_FlashWaitStateMax();
     ade:	f7ff fc2f 	bl	340 <CMU_FlashWaitStateMax>

    /* Switch to selected oscillator */
    CMU->CMD = select;
     ae2:	4b31      	ldr	r3, [pc, #196]	; (ba8 <CMU_ClockSelectSet+0x168>)
     ae4:	9a07      	ldr	r2, [sp, #28]
     ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Keep EMU module informed */
    EMU_UpdateOscConfig();
     ae8:	f000 fbf6 	bl	12d8 <EMU_UpdateOscConfig>

    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();
     aec:	f7ff fb74 	bl	1d8 <SystemCoreClockGet>
     af0:	9003      	str	r0, [sp, #12]

    /* Optimize flash access wait state setting for currently selected core clk */
    CMU_FlashWaitStateControl(freq);
     af2:	9803      	ldr	r0, [sp, #12]
     af4:	f7ff fc6e 	bl	3d4 <CMU_FlashWaitStateControl>
    break;
     af8:	e051      	b.n	b9e <CMU_ClockSelectSet+0x15e>

  case CMU_LFACLKSEL_REG:
  case CMU_LFBCLKSEL_REG:

    switch (ref)
     afa:	f89d 3003 	ldrb.w	r3, [sp, #3]
     afe:	3b01      	subs	r3, #1
     b00:	2b05      	cmp	r3, #5
     b02:	d82a      	bhi.n	b5a <CMU_ClockSelectSet+0x11a>
     b04:	a201      	add	r2, pc, #4	; (adr r2, b0c <CMU_ClockSelectSet+0xcc>)
     b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b0a:	bf00      	nop
     b0c:	00000b25 	.word	0x00000b25
     b10:	00000b2b 	.word	0x00000b2b
     b14:	00000b3b 	.word	0x00000b3b
     b18:	00000b5b 	.word	0x00000b5b
     b1c:	00000b5b 	.word	0x00000b5b
     b20:	00000b4b 	.word	0x00000b4b
    {
    case cmuSelect_Disabled:
      tmp = _CMU_LFCLKSEL_LFA_DISABLED;
     b24:	2300      	movs	r3, #0
     b26:	9305      	str	r3, [sp, #20]
      break;
     b28:	e01d      	b.n	b66 <CMU_ClockSelectSet+0x126>

    case cmuSelect_LFXO:
      /* Ensure selected oscillator is enabled, waiting for it to stabilize */
      CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
     b2a:	2000      	movs	r0, #0
     b2c:	2101      	movs	r1, #1
     b2e:	2201      	movs	r2, #1
     b30:	f000 f83e 	bl	bb0 <CMU_OscillatorEnable>
      tmp = _CMU_LFCLKSEL_LFA_LFXO;
     b34:	2302      	movs	r3, #2
     b36:	9305      	str	r3, [sp, #20]
      break;
     b38:	e015      	b.n	b66 <CMU_ClockSelectSet+0x126>

    case cmuSelect_LFRCO:
      /* Ensure selected oscillator is enabled, waiting for it to stabilize */
      CMU_OscillatorEnable(cmuOsc_LFRCO, true, true);
     b3a:	2001      	movs	r0, #1
     b3c:	2101      	movs	r1, #1
     b3e:	2201      	movs	r2, #1
     b40:	f000 f836 	bl	bb0 <CMU_OscillatorEnable>
      tmp = _CMU_LFCLKSEL_LFA_LFRCO;
     b44:	2301      	movs	r3, #1
     b46:	9305      	str	r3, [sp, #20]
      break;
     b48:	e00d      	b.n	b66 <CMU_ClockSelectSet+0x126>

    case cmuSelect_CORELEDIV2:
      /* Ensure HFCORE to LE clocking is enabled */
      BITBAND_Peripheral(&(CMU->HFCORECLKEN0), _CMU_HFCORECLKEN0_LE_SHIFT, 1);
     b4a:	4818      	ldr	r0, [pc, #96]	; (bac <CMU_ClockSelectSet+0x16c>)
     b4c:	2102      	movs	r1, #2
     b4e:	2201      	movs	r2, #1
     b50:	f7ff fbe4 	bl	31c <BITBAND_Peripheral>
      tmp = _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2;
     b54:	2303      	movs	r3, #3
     b56:	9305      	str	r3, [sp, #20]
        /* Enable DIV4 factor for peripheral clock */
        BITBAND_Peripheral(&(CMU->HFCORECLKDIV),
                           _CMU_HFCORECLKDIV_HFCORECLKLEDIV_SHIFT, 1);
      }
#endif
      break;
     b58:	e005      	b.n	b66 <CMU_ClockSelectSet+0x126>
      break;
#endif

    default:
      /* Illegal clock source for LFA/LFB selected */
      EFM_ASSERT(0);
     b5a:	4812      	ldr	r0, [pc, #72]	; (ba4 <CMU_ClockSelectSet+0x164>)
     b5c:	f44f 61c2 	mov.w	r1, #1552	; 0x610
     b60:	f7ff fbd8 	bl	314 <assertEFM>
      return;
     b64:	e01b      	b.n	b9e <CMU_ClockSelectSet+0x15e>
    }


    if (selReg == CMU_LFACLKSEL_REG)
     b66:	9b04      	ldr	r3, [sp, #16]
     b68:	2b02      	cmp	r3, #2
     b6a:	d108      	bne.n	b7e <CMU_ClockSelectSet+0x13e>
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFA_MASK | _CMU_LFCLKSEL_LFAE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFA_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFAE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFA_MASK) |
     b6c:	4b0e      	ldr	r3, [pc, #56]	; (ba8 <CMU_ClockSelectSet+0x168>)
     b6e:	4a0e      	ldr	r2, [pc, #56]	; (ba8 <CMU_ClockSelectSet+0x168>)
     b70:	6a92      	ldr	r2, [r2, #40]	; 0x28
     b72:	f022 0103 	bic.w	r1, r2, #3
     b76:	9a05      	ldr	r2, [sp, #20]
     b78:	430a      	orrs	r2, r1
     b7a:	629a      	str	r2, [r3, #40]	; 0x28
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFB_MASK) |
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT);
      #endif
    }
    break;
     b7c:	e00f      	b.n	b9e <CMU_ClockSelectSet+0x15e>
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFB_MASK | _CMU_LFCLKSEL_LFBE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFBE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFB_MASK) |
     b7e:	4b0a      	ldr	r3, [pc, #40]	; (ba8 <CMU_ClockSelectSet+0x168>)
     b80:	4a09      	ldr	r2, [pc, #36]	; (ba8 <CMU_ClockSelectSet+0x168>)
     b82:	6a92      	ldr	r2, [r2, #40]	; 0x28
     b84:	f022 010c 	bic.w	r1, r2, #12
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT);
     b88:	9a05      	ldr	r2, [sp, #20]
     b8a:	0092      	lsls	r2, r2, #2
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFB_MASK | _CMU_LFCLKSEL_LFBE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFBE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFB_MASK) |
     b8c:	430a      	orrs	r2, r1
     b8e:	629a      	str	r2, [r3, #40]	; 0x28
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT);
      #endif
    }
    break;
     b90:	e005      	b.n	b9e <CMU_ClockSelectSet+0x15e>
    /* Wait until clock has been activated */
    break;
#endif

  default:
    EFM_ASSERT(0);
     b92:	4804      	ldr	r0, [pc, #16]	; (ba4 <CMU_ClockSelectSet+0x164>)
     b94:	f240 6172 	movw	r1, #1650	; 0x672
     b98:	f7ff fbbc 	bl	314 <assertEFM>
    break;
     b9c:	bf00      	nop
  }
}
     b9e:	b009      	add	sp, #36	; 0x24
     ba0:	f85d fb04 	ldr.w	pc, [sp], #4
     ba4:	0000a224 	.word	0x0000a224
     ba8:	400c8000 	.word	0x400c8000
     bac:	400c8040 	.word	0x400c8040

00000bb0 <CMU_OscillatorEnable>:
 *   @li true - wait for oscillator start-up time to timeout before returning.
 *   @li false - do not wait for oscillator start-up time to timeout before
 *     returning.
 ******************************************************************************/
void CMU_OscillatorEnable(CMU_Osc_TypeDef osc, bool enable, bool wait)
{
     bb0:	b500      	push	{lr}
     bb2:	b087      	sub	sp, #28
     bb4:	4613      	mov	r3, r2
     bb6:	4602      	mov	r2, r0
     bb8:	f88d 2007 	strb.w	r2, [sp, #7]
     bbc:	460a      	mov	r2, r1
     bbe:	f88d 2006 	strb.w	r2, [sp, #6]
     bc2:	f88d 3005 	strb.w	r3, [sp, #5]
  uint32_t status;
  uint32_t enBit;
  uint32_t disBit;

  switch (osc)
     bc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bca:	2b04      	cmp	r3, #4
     bcc:	d832      	bhi.n	c34 <Heap_Size+0x34>
     bce:	a201      	add	r2, pc, #4	; (adr r2, bd4 <CMU_OscillatorEnable+0x24>)
     bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bd4:	00000c21 	.word	0x00000c21
     bd8:	00000c13 	.word	0x00000c13
     bdc:	00000bf7 	.word	0x00000bf7
     be0:	00000be9 	.word	0x00000be9
     be4:	00000c05 	.word	0x00000c05
  {
  case cmuOsc_HFRCO:
    enBit  = CMU_OSCENCMD_HFRCOEN;
     be8:	2301      	movs	r3, #1
     bea:	9304      	str	r3, [sp, #16]
    disBit = CMU_OSCENCMD_HFRCODIS;
     bec:	2302      	movs	r3, #2
     bee:	9303      	str	r3, [sp, #12]
    status = CMU_STATUS_HFRCORDY;
     bf0:	2302      	movs	r3, #2
     bf2:	9305      	str	r3, [sp, #20]
    break;
     bf4:	e024      	b.n	c40 <Heap_Size+0x40>

  case cmuOsc_HFXO:
    enBit  = CMU_OSCENCMD_HFXOEN;
     bf6:	2304      	movs	r3, #4
     bf8:	9304      	str	r3, [sp, #16]
    disBit = CMU_OSCENCMD_HFXODIS;
     bfa:	2308      	movs	r3, #8
     bfc:	9303      	str	r3, [sp, #12]
    status = CMU_STATUS_HFXORDY;
     bfe:	2308      	movs	r3, #8
     c00:	9305      	str	r3, [sp, #20]
    break;
     c02:	e01d      	b.n	c40 <Heap_Size+0x40>

  case cmuOsc_AUXHFRCO:
    enBit  = CMU_OSCENCMD_AUXHFRCOEN;
     c04:	2310      	movs	r3, #16
     c06:	9304      	str	r3, [sp, #16]
    disBit = CMU_OSCENCMD_AUXHFRCODIS;
     c08:	2320      	movs	r3, #32
     c0a:	9303      	str	r3, [sp, #12]
    status = CMU_STATUS_AUXHFRCORDY;
     c0c:	2320      	movs	r3, #32
     c0e:	9305      	str	r3, [sp, #20]
    break;
     c10:	e016      	b.n	c40 <Heap_Size+0x40>

  case cmuOsc_LFRCO:
    enBit  = CMU_OSCENCMD_LFRCOEN;
     c12:	2340      	movs	r3, #64	; 0x40
     c14:	9304      	str	r3, [sp, #16]
    disBit = CMU_OSCENCMD_LFRCODIS;
     c16:	2380      	movs	r3, #128	; 0x80
     c18:	9303      	str	r3, [sp, #12]
    status = CMU_STATUS_LFRCORDY;
     c1a:	2380      	movs	r3, #128	; 0x80
     c1c:	9305      	str	r3, [sp, #20]
    break;
     c1e:	e00f      	b.n	c40 <Heap_Size+0x40>

  case cmuOsc_LFXO:
    enBit  = CMU_OSCENCMD_LFXOEN;
     c20:	f44f 7380 	mov.w	r3, #256	; 0x100
     c24:	9304      	str	r3, [sp, #16]
    disBit = CMU_OSCENCMD_LFXODIS;
     c26:	f44f 7300 	mov.w	r3, #512	; 0x200
     c2a:	9303      	str	r3, [sp, #12]
    status = CMU_STATUS_LFXORDY;
     c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
     c30:	9305      	str	r3, [sp, #20]
    break;
     c32:	e005      	b.n	c40 <Heap_Size+0x40>
    return;
#endif

  default:
    /* Undefined clock source */
    EFM_ASSERT(0);
     c34:	4810      	ldr	r0, [pc, #64]	; (c78 <Heap_Size+0x78>)
     c36:	f240 71f6 	movw	r1, #2038	; 0x7f6
     c3a:	f7ff fb6b 	bl	314 <assertEFM>
    return;
     c3e:	e017      	b.n	c70 <Heap_Size+0x70>
  }

  if (enable)
     c40:	f89d 3006 	ldrb.w	r3, [sp, #6]
     c44:	2b00      	cmp	r3, #0
     c46:	d00e      	beq.n	c66 <Heap_Size+0x66>
  {
    CMU->OSCENCMD = enBit;
     c48:	4b0c      	ldr	r3, [pc, #48]	; (c7c <Heap_Size+0x7c>)
     c4a:	9a04      	ldr	r2, [sp, #16]
     c4c:	621a      	str	r2, [r3, #32]

    /* Wait for clock to stabilize if requested */
    if (wait)
     c4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
     c52:	2b00      	cmp	r3, #0
     c54:	d00a      	beq.n	c6c <Heap_Size+0x6c>
    {
      while (!(CMU->STATUS & status))
     c56:	bf00      	nop
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <Heap_Size+0x7c>)
     c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c5c:	9b05      	ldr	r3, [sp, #20]
     c5e:	4013      	ands	r3, r2
     c60:	2b00      	cmp	r3, #0
     c62:	d0f9      	beq.n	c58 <Heap_Size+0x58>
     c64:	e002      	b.n	c6c <Heap_Size+0x6c>
        ;
    }
  }
  else
  {
    CMU->OSCENCMD = disBit;
     c66:	4b05      	ldr	r3, [pc, #20]	; (c7c <Heap_Size+0x7c>)
     c68:	9a03      	ldr	r2, [sp, #12]
     c6a:	621a      	str	r2, [r3, #32]
  }

  /* Keep EMU module informed */
  EMU_UpdateOscConfig();
     c6c:	f000 fb34 	bl	12d8 <EMU_UpdateOscConfig>
}
     c70:	b007      	add	sp, #28
     c72:	f85d fb04 	ldr.w	pc, [sp], #4
     c76:	bf00      	nop
     c78:	0000a224 	.word	0x0000a224
     c7c:	400c8000 	.word	0x400c8000

00000c80 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     c80:	b082      	sub	sp, #8
     c82:	4603      	mov	r3, r0
     c84:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     c88:	4b07      	ldr	r3, [pc, #28]	; (ca8 <NVIC_EnableIRQ+0x28>)
     c8a:	f99d 2007 	ldrsb.w	r2, [sp, #7]
     c8e:	0952      	lsrs	r2, r2, #5
     c90:	f89d 1007 	ldrb.w	r1, [sp, #7]
     c94:	f001 011f 	and.w	r1, r1, #31
     c98:	2001      	movs	r0, #1
     c9a:	fa00 f101 	lsl.w	r1, r0, r1
     c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     ca2:	b002      	add	sp, #8
     ca4:	4770      	bx	lr
     ca6:	bf00      	nop
     ca8:	e000e100 	.word	0xe000e100

00000cac <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     cac:	b082      	sub	sp, #8
     cae:	4603      	mov	r3, r0
     cb0:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     cb4:	4b07      	ldr	r3, [pc, #28]	; (cd4 <NVIC_DisableIRQ+0x28>)
     cb6:	f99d 2007 	ldrsb.w	r2, [sp, #7]
     cba:	0952      	lsrs	r2, r2, #5
     cbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
     cc0:	f001 011f 	and.w	r1, r1, #31
     cc4:	2001      	movs	r0, #1
     cc6:	fa00 f101 	lsl.w	r1, r0, r1
     cca:	3220      	adds	r2, #32
     ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     cd0:	b002      	add	sp, #8
     cd2:	4770      	bx	lr
     cd4:	e000e100 	.word	0xe000e100

00000cd8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     cd8:	b082      	sub	sp, #8
     cda:	4603      	mov	r3, r0
     cdc:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     ce0:	4b07      	ldr	r3, [pc, #28]	; (d00 <NVIC_ClearPendingIRQ+0x28>)
     ce2:	f99d 2007 	ldrsb.w	r2, [sp, #7]
     ce6:	0952      	lsrs	r2, r2, #5
     ce8:	f89d 1007 	ldrb.w	r1, [sp, #7]
     cec:	f001 011f 	and.w	r1, r1, #31
     cf0:	2001      	movs	r0, #1
     cf2:	fa00 f101 	lsl.w	r1, r0, r1
     cf6:	3260      	adds	r2, #96	; 0x60
     cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     cfc:	b002      	add	sp, #8
     cfe:	4770      	bx	lr
     d00:	e000e100 	.word	0xe000e100

00000d04 <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
     d04:	b086      	sub	sp, #24
     d06:	9003      	str	r0, [sp, #12]
     d08:	9102      	str	r1, [sp, #8]
     d0a:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
     d0c:	9b03      	ldr	r3, [sp, #12]
     d0e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
     d12:	00da      	lsls	r2, r3, #3
     d14:	9b02      	ldr	r3, [sp, #8]
     d16:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
     d18:	009b      	lsls	r3, r3, #2
     d1a:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
     d1c:	9b05      	ldr	r3, [sp, #20]
     d1e:	9a01      	ldr	r2, [sp, #4]
     d20:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
     d22:	b006      	add	sp, #24
     d24:	4770      	bx	lr
     d26:	bf00      	nop

00000d28 <DMA_Prepare>:
                        bool primary,
                        bool useBurst,
                        void *dst,
                        void *src,
                        unsigned int nMinus1)
{
     d28:	b088      	sub	sp, #32
     d2a:	9001      	str	r0, [sp, #4]
     d2c:	f88d 1003 	strb.w	r1, [sp, #3]
     d30:	f88d 2002 	strb.w	r2, [sp, #2]
     d34:	f88d 3001 	strb.w	r3, [sp, #1]
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
     d38:	9b01      	ldr	r3, [sp, #4]
     d3a:	011a      	lsls	r2, r3, #4
     d3c:	4b3c      	ldr	r3, [pc, #240]	; (e30 <DMA_Prepare+0x108>)
     d3e:	689b      	ldr	r3, [r3, #8]
     d40:	4413      	add	r3, r2
     d42:	9306      	str	r3, [sp, #24]

  /* Find descriptor to configure */
  if (primary)
     d44:	f89d 3002 	ldrb.w	r3, [sp, #2]
     d48:	2b00      	cmp	r3, #0
     d4a:	d002      	beq.n	d52 <DMA_Prepare+0x2a>
  {
    descr = primDescr;
     d4c:	9b06      	ldr	r3, [sp, #24]
     d4e:	9307      	str	r3, [sp, #28]
     d50:	e005      	b.n	d5e <DMA_Prepare+0x36>
  }
  else
  {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
     d52:	9b01      	ldr	r3, [sp, #4]
     d54:	011a      	lsls	r2, r3, #4
     d56:	4b36      	ldr	r3, [pc, #216]	; (e30 <DMA_Prepare+0x108>)
     d58:	68db      	ldr	r3, [r3, #12]
     d5a:	4413      	add	r3, r2
     d5c:	9307      	str	r3, [sp, #28]
  }

  /* If callback defined, update info on whether callback is issued */
  /* for primary or alternate descriptor. Mainly needed for ping-pong */
  /* cycles. */
  cb = (DMA_CB_TypeDef *)(primDescr->USER);
     d5e:	9b06      	ldr	r3, [sp, #24]
     d60:	68db      	ldr	r3, [r3, #12]
     d62:	9305      	str	r3, [sp, #20]
  if (cb)
     d64:	9b05      	ldr	r3, [sp, #20]
     d66:	2b00      	cmp	r3, #0
     d68:	d003      	beq.n	d72 <DMA_Prepare+0x4a>
  {
    cb->primary = (uint8_t)primary;
     d6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
     d6e:	9b05      	ldr	r3, [sp, #20]
     d70:	721a      	strb	r2, [r3, #8]
  }

  if (src)
     d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d74:	2b00      	cmp	r3, #0
     d76:	d014      	beq.n	da2 <DMA_Prepare+0x7a>
  {
    inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
     d78:	9b07      	ldr	r3, [sp, #28]
     d7a:	689b      	ldr	r3, [r3, #8]
     d7c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
     d80:	0e9b      	lsrs	r3, r3, #26
     d82:	9304      	str	r3, [sp, #16]
    if (inc == _DMA_CTRL_SRC_INC_NONE)
     d84:	9b04      	ldr	r3, [sp, #16]
     d86:	2b03      	cmp	r3, #3
     d88:	d103      	bne.n	d92 <DMA_Prepare+0x6a>
    {
      descr->SRCEND = src;
     d8a:	9b07      	ldr	r3, [sp, #28]
     d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d8e:	601a      	str	r2, [r3, #0]
     d90:	e007      	b.n	da2 <DMA_Prepare+0x7a>
    }
    else
    {
      descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
     d92:	9b04      	ldr	r3, [sp, #16]
     d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     d96:	409a      	lsls	r2, r3
     d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d9a:	4413      	add	r3, r2
     d9c:	461a      	mov	r2, r3
     d9e:	9b07      	ldr	r3, [sp, #28]
     da0:	601a      	str	r2, [r3, #0]
    }
  }

  if (dst)
     da2:	9b08      	ldr	r3, [sp, #32]
     da4:	2b00      	cmp	r3, #0
     da6:	d012      	beq.n	dce <DMA_Prepare+0xa6>
  {
    inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
     da8:	9b07      	ldr	r3, [sp, #28]
     daa:	689b      	ldr	r3, [r3, #8]
     dac:	0f9b      	lsrs	r3, r3, #30
     dae:	9304      	str	r3, [sp, #16]
    if (inc == _DMA_CTRL_DST_INC_NONE)
     db0:	9b04      	ldr	r3, [sp, #16]
     db2:	2b03      	cmp	r3, #3
     db4:	d103      	bne.n	dbe <DMA_Prepare+0x96>
    {
      descr->DSTEND = dst;
     db6:	9b07      	ldr	r3, [sp, #28]
     db8:	9a08      	ldr	r2, [sp, #32]
     dba:	605a      	str	r2, [r3, #4]
     dbc:	e007      	b.n	dce <DMA_Prepare+0xa6>
    }
    else
    {
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
     dbe:	9b04      	ldr	r3, [sp, #16]
     dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     dc2:	409a      	lsls	r2, r3
     dc4:	9b08      	ldr	r3, [sp, #32]
     dc6:	4413      	add	r3, r2
     dc8:	461a      	mov	r2, r3
     dca:	9b07      	ldr	r3, [sp, #28]
     dcc:	605a      	str	r2, [r3, #4]
    }
  }

  chBit = 1 << channel;
     dce:	9b01      	ldr	r3, [sp, #4]
     dd0:	2201      	movs	r2, #1
     dd2:	fa02 f303 	lsl.w	r3, r2, r3
     dd6:	9303      	str	r3, [sp, #12]
  if (useBurst)
     dd8:	f89d 3001 	ldrb.w	r3, [sp, #1]
     ddc:	2b00      	cmp	r3, #0
     dde:	d003      	beq.n	de8 <DMA_Prepare+0xc0>
  {
    DMA->CHUSEBURSTS = chBit;
     de0:	4b13      	ldr	r3, [pc, #76]	; (e30 <DMA_Prepare+0x108>)
     de2:	9a03      	ldr	r2, [sp, #12]
     de4:	619a      	str	r2, [r3, #24]
     de6:	e002      	b.n	dee <DMA_Prepare+0xc6>
  }
  else
  {
    DMA->CHUSEBURSTC = chBit;
     de8:	4b11      	ldr	r3, [pc, #68]	; (e30 <DMA_Prepare+0x108>)
     dea:	9a03      	ldr	r2, [sp, #12]
     dec:	61da      	str	r2, [r3, #28]
  }

  if (primary)
     dee:	f89d 3002 	ldrb.w	r3, [sp, #2]
     df2:	2b00      	cmp	r3, #0
     df4:	d003      	beq.n	dfe <DMA_Prepare+0xd6>
  {
    DMA->CHALTC = chBit;
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <DMA_Prepare+0x108>)
     df8:	9a03      	ldr	r2, [sp, #12]
     dfa:	635a      	str	r2, [r3, #52]	; 0x34
     dfc:	e002      	b.n	e04 <DMA_Prepare+0xdc>
  }
  else
  {
    DMA->CHALTS = chBit;
     dfe:	4b0c      	ldr	r3, [pc, #48]	; (e30 <DMA_Prepare+0x108>)
     e00:	9a03      	ldr	r2, [sp, #12]
     e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Set cycle control */
  tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
     e04:	9b07      	ldr	r3, [sp, #28]
     e06:	689b      	ldr	r3, [r3, #8]
     e08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
     e0c:	f023 0337 	bic.w	r3, r3, #55	; 0x37
     e10:	9302      	str	r3, [sp, #8]
  tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
     e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e14:	011b      	lsls	r3, r3, #4
     e16:	9a02      	ldr	r2, [sp, #8]
     e18:	4313      	orrs	r3, r2
     e1a:	9302      	str	r3, [sp, #8]
  tmp        |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
     e1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e20:	9a02      	ldr	r2, [sp, #8]
     e22:	4313      	orrs	r3, r2
     e24:	9302      	str	r3, [sp, #8]
  descr->CTRL = tmp;
     e26:	9b07      	ldr	r3, [sp, #28]
     e28:	9a02      	ldr	r2, [sp, #8]
     e2a:	609a      	str	r2, [r3, #8]
}
     e2c:	b008      	add	sp, #32
     e2e:	4770      	bx	lr
     e30:	400c2000 	.word	0x400c2000

00000e34 <DMA_IRQHandler>:
 *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 *   with a \#define statement or with the compiler option -D.
 *
 ******************************************************************************/
void DMA_IRQHandler(void)
{
     e34:	b500      	push	{lr}
     e36:	b08b      	sub	sp, #44	; 0x2c
  uint32_t               prio;
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
     e38:	4b35      	ldr	r3, [pc, #212]	; (f10 <DMA_IRQHandler+0xdc>)
     e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	9306      	str	r3, [sp, #24]
  pending &= DMA->IEN;
     e42:	4b33      	ldr	r3, [pc, #204]	; (f10 <DMA_IRQHandler+0xdc>)
     e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     e48:	330c      	adds	r3, #12
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	9a06      	ldr	r2, [sp, #24]
     e4e:	4013      	ands	r3, r2
     e50:	9306      	str	r3, [sp, #24]

  /* Check for bus error */
  if (pending & DMA_IF_ERR)
     e52:	9b06      	ldr	r3, [sp, #24]
     e54:	2b00      	cmp	r3, #0
     e56:	da00      	bge.n	e5a <DMA_IRQHandler+0x26>
  {
    /* Loop here to enable the debugger to see what has happened */
    while (1)
      ;
     e58:	e7fe      	b.n	e58 <DMA_IRQHandler+0x24>
  }

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
     e5a:	4b2d      	ldr	r3, [pc, #180]	; (f10 <DMA_IRQHandler+0xdc>)
     e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     e5e:	9305      	str	r3, [sp, #20]
  pendingPrio = pending & prio;
     e60:	9a06      	ldr	r2, [sp, #24]
     e62:	9b05      	ldr	r3, [sp, #20]
     e64:	4013      	ands	r3, r2
     e66:	9308      	str	r3, [sp, #32]
  for (i = 0; i < 2; i++)
     e68:	2300      	movs	r3, #0
     e6a:	9307      	str	r3, [sp, #28]
     e6c:	e049      	b.n	f02 <DMA_IRQHandler+0xce>
  {
    channel = 0;
     e6e:	2300      	movs	r3, #0
     e70:	9309      	str	r3, [sp, #36]	; 0x24
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio)
     e72:	e03b      	b.n	eec <DMA_IRQHandler+0xb8>
    {
      if (pendingPrio & 1)
     e74:	9b08      	ldr	r3, [sp, #32]
     e76:	f003 0301 	and.w	r3, r3, #1
     e7a:	2b00      	cmp	r3, #0
     e7c:	d030      	beq.n	ee0 <DMA_IRQHandler+0xac>
      {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     e7e:	4b24      	ldr	r3, [pc, #144]	; (f10 <DMA_IRQHandler+0xdc>)
     e80:	689b      	ldr	r3, [r3, #8]
     e82:	9304      	str	r3, [sp, #16]
        uint32_t chmask = 1 << channel;
     e84:	2201      	movs	r2, #1
     e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e88:	fa02 f303 	lsl.w	r3, r2, r3
     e8c:	9303      	str	r3, [sp, #12]

        /* Clear pending interrupt prior to invoking callback, in case it */
        /* sets up another DMA cycle. */
        DMA->IFC = chmask;
     e8e:	4b20      	ldr	r3, [pc, #128]	; (f10 <DMA_IRQHandler+0xdc>)
     e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     e94:	3308      	adds	r3, #8
     e96:	9a03      	ldr	r2, [sp, #12]
     e98:	601a      	str	r2, [r3, #0]

        /* Normally, no point in enabling interrupt without callback, but */
        /* check if callback is defined anyway. Callback info is always */
        /* located in primary descriptor. */
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
     e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e9c:	011b      	lsls	r3, r3, #4
     e9e:	9a04      	ldr	r2, [sp, #16]
     ea0:	4413      	add	r3, r2
     ea2:	68db      	ldr	r3, [r3, #12]
     ea4:	9302      	str	r3, [sp, #8]
        if (cb)
     ea6:	9b02      	ldr	r3, [sp, #8]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d019      	beq.n	ee0 <DMA_IRQHandler+0xac>
        {
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
     eac:	9b02      	ldr	r3, [sp, #8]
     eae:	7a1b      	ldrb	r3, [r3, #8]
     eb0:	9301      	str	r3, [sp, #4]
          cb->primary ^= 1;
     eb2:	9b02      	ldr	r3, [sp, #8]
     eb4:	7a1b      	ldrb	r3, [r3, #8]
     eb6:	f083 0301 	eor.w	r3, r3, #1
     eba:	b2da      	uxtb	r2, r3
     ebc:	9b02      	ldr	r3, [sp, #8]
     ebe:	721a      	strb	r2, [r3, #8]
          if (cb->cbFunc)
     ec0:	9b02      	ldr	r3, [sp, #8]
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d00b      	beq.n	ee0 <DMA_IRQHandler+0xac>
          {
            cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
     ec8:	9b02      	ldr	r3, [sp, #8]
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
     ece:	9a01      	ldr	r2, [sp, #4]
     ed0:	2a00      	cmp	r2, #0
     ed2:	bf0c      	ite	eq
     ed4:	2200      	moveq	r2, #0
     ed6:	2201      	movne	r2, #1
     ed8:	b2d1      	uxtb	r1, r2
     eda:	9a02      	ldr	r2, [sp, #8]
     edc:	6852      	ldr	r2, [r2, #4]
     ede:	4798      	blx	r3
          }
        }
      }

      pendingPrio >>= 1;
     ee0:	9b08      	ldr	r3, [sp, #32]
     ee2:	085b      	lsrs	r3, r3, #1
     ee4:	9308      	str	r3, [sp, #32]
      channel++;
     ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ee8:	3301      	adds	r3, #1
     eea:	9309      	str	r3, [sp, #36]	; 0x24
  for (i = 0; i < 2; i++)
  {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio)
     eec:	9b08      	ldr	r3, [sp, #32]
     eee:	2b00      	cmp	r3, #0
     ef0:	d1c0      	bne.n	e74 <DMA_IRQHandler+0x40>
      pendingPrio >>= 1;
      channel++;
    }

    /* On second iteration, process default priority channels */
    pendingPrio = pending & ~prio;
     ef2:	9b05      	ldr	r3, [sp, #20]
     ef4:	43da      	mvns	r2, r3
     ef6:	9b06      	ldr	r3, [sp, #24]
     ef8:	4013      	ands	r3, r2
     efa:	9308      	str	r3, [sp, #32]

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++)
     efc:	9b07      	ldr	r3, [sp, #28]
     efe:	3301      	adds	r3, #1
     f00:	9307      	str	r3, [sp, #28]
     f02:	9b07      	ldr	r3, [sp, #28]
     f04:	2b01      	cmp	r3, #1
     f06:	ddb2      	ble.n	e6e <DMA_IRQHandler+0x3a>
    }

    /* On second iteration, process default priority channels */
    pendingPrio = pending & ~prio;
  }
}
     f08:	b00b      	add	sp, #44	; 0x2c
     f0a:	f85d fb04 	ldr.w	pc, [sp], #4
     f0e:	bf00      	nop
     f10:	400c2000 	.word	0x400c2000

00000f14 <DMA_ActivateBasic>:
                       bool primary,
                       bool useBurst,
                       void *dst,
                       void *src,
                       unsigned int nMinus1)
{
     f14:	b500      	push	{lr}
     f16:	b089      	sub	sp, #36	; 0x24
     f18:	9007      	str	r0, [sp, #28]
     f1a:	9305      	str	r3, [sp, #20]
     f1c:	460b      	mov	r3, r1
     f1e:	f88d 301b 	strb.w	r3, [sp, #27]
     f22:	4613      	mov	r3, r2
     f24:	f88d 301a 	strb.w	r3, [sp, #26]
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     f28:	9b07      	ldr	r3, [sp, #28]
     f2a:	2b07      	cmp	r3, #7
     f2c:	d904      	bls.n	f38 <DMA_ActivateBasic+0x24>
     f2e:	4812      	ldr	r0, [pc, #72]	; (f78 <DMA_ActivateBasic+0x64>)
     f30:	f240 11cd 	movw	r1, #461	; 0x1cd
     f34:	f7ff f9ee 	bl	314 <assertEFM>
  EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
     f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     f3e:	d304      	bcc.n	f4a <DMA_ActivateBasic+0x36>
     f40:	480d      	ldr	r0, [pc, #52]	; (f78 <DMA_ActivateBasic+0x64>)
     f42:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
     f46:	f7ff f9e5 	bl	314 <assertEFM>

  DMA_Prepare(channel,
     f4a:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f4e:	f89d 301a 	ldrb.w	r3, [sp, #26]
     f52:	9905      	ldr	r1, [sp, #20]
     f54:	9100      	str	r1, [sp, #0]
     f56:	990a      	ldr	r1, [sp, #40]	; 0x28
     f58:	9101      	str	r1, [sp, #4]
     f5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
     f5c:	9102      	str	r1, [sp, #8]
     f5e:	9807      	ldr	r0, [sp, #28]
     f60:	2101      	movs	r1, #1
     f62:	f7ff fee1 	bl	d28 <DMA_Prepare>
              dst,
              src,
              nMinus1);

  /* Enable channel, request signal is provided by peripheral device */
  DMA->CHENS = 1 << channel;
     f66:	4b05      	ldr	r3, [pc, #20]	; (f7c <DMA_ActivateBasic+0x68>)
     f68:	9a07      	ldr	r2, [sp, #28]
     f6a:	2101      	movs	r1, #1
     f6c:	fa01 f202 	lsl.w	r2, r1, r2
     f70:	629a      	str	r2, [r3, #40]	; 0x28
}
     f72:	b009      	add	sp, #36	; 0x24
     f74:	f85d fb04 	ldr.w	pc, [sp], #4
     f78:	0000a23c 	.word	0x0000a23c
     f7c:	400c2000 	.word	0x400c2000

00000f80 <DMA_CfgChannel>:
 *
 * @param[in] cfg
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
{
     f80:	b500      	push	{lr}
     f82:	b085      	sub	sp, #20
     f84:	9001      	str	r0, [sp, #4]
     f86:	9100      	str	r1, [sp, #0]
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     f88:	9b01      	ldr	r3, [sp, #4]
     f8a:	2b07      	cmp	r3, #7
     f8c:	d904      	bls.n	f98 <DMA_CfgChannel+0x18>
     f8e:	4825      	ldr	r0, [pc, #148]	; (1024 <DMA_CfgChannel+0xa4>)
     f90:	f240 21c5 	movw	r1, #709	; 0x2c5
     f94:	f7ff f9be 	bl	314 <assertEFM>
  EFM_ASSERT(cfg);
     f98:	9b00      	ldr	r3, [sp, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d104      	bne.n	fa8 <DMA_CfgChannel+0x28>
     f9e:	4821      	ldr	r0, [pc, #132]	; (1024 <DMA_CfgChannel+0xa4>)
     fa0:	f240 21c6 	movw	r1, #710	; 0x2c6
     fa4:	f7ff f9b6 	bl	314 <assertEFM>

  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     fa8:	4b1f      	ldr	r3, [pc, #124]	; (1028 <DMA_CfgChannel+0xa8>)
     faa:	689b      	ldr	r3, [r3, #8]
     fac:	9303      	str	r3, [sp, #12]
  descr[channel].USER = (uint32_t)(cfg->cb);
     fae:	9b01      	ldr	r3, [sp, #4]
     fb0:	011b      	lsls	r3, r3, #4
     fb2:	9a03      	ldr	r2, [sp, #12]
     fb4:	4413      	add	r3, r2
     fb6:	9a00      	ldr	r2, [sp, #0]
     fb8:	6892      	ldr	r2, [r2, #8]
     fba:	60da      	str	r2, [r3, #12]

  /* Set to specified priority for channel */
  if (cfg->highPri)
     fbc:	9b00      	ldr	r3, [sp, #0]
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d006      	beq.n	fd2 <DMA_CfgChannel+0x52>
  {
    DMA->CHPRIS = 1 << channel;
     fc4:	4b18      	ldr	r3, [pc, #96]	; (1028 <DMA_CfgChannel+0xa8>)
     fc6:	9a01      	ldr	r2, [sp, #4]
     fc8:	2101      	movs	r1, #1
     fca:	fa01 f202 	lsl.w	r2, r1, r2
     fce:	639a      	str	r2, [r3, #56]	; 0x38
     fd0:	e005      	b.n	fde <DMA_CfgChannel+0x5e>
  }
  else
  {
    DMA->CHPRIC = 1 << channel;
     fd2:	4b15      	ldr	r3, [pc, #84]	; (1028 <DMA_CfgChannel+0xa8>)
     fd4:	9a01      	ldr	r2, [sp, #4]
     fd6:	2101      	movs	r1, #1
     fd8:	fa01 f202 	lsl.w	r2, r1, r2
     fdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set DMA signal source select */
  DMA->CH[channel].CTRL = cfg->select;
     fde:	4b12      	ldr	r3, [pc, #72]	; (1028 <DMA_CfgChannel+0xa8>)
     fe0:	9a00      	ldr	r2, [sp, #0]
     fe2:	6851      	ldr	r1, [r2, #4]
     fe4:	9a01      	ldr	r2, [sp, #4]
     fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
     fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable/disable interrupt as specified */
  if (cfg->enableInt)
     fee:	9b00      	ldr	r3, [sp, #0]
     ff0:	785b      	ldrb	r3, [r3, #1]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d00e      	beq.n	1014 <DMA_CfgChannel+0x94>
  {
    DMA->IFC = (1 << channel);
     ff6:	4b0c      	ldr	r3, [pc, #48]	; (1028 <DMA_CfgChannel+0xa8>)
     ff8:	9a01      	ldr	r2, [sp, #4]
     ffa:	2101      	movs	r1, #1
     ffc:	fa01 f202 	lsl.w	r2, r1, r2
    1000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1004:	3308      	adds	r3, #8
    1006:	601a      	str	r2, [r3, #0]
    BITBAND_Peripheral(&(DMA->IEN), channel, 1);
    1008:	4808      	ldr	r0, [pc, #32]	; (102c <DMA_CfgChannel+0xac>)
    100a:	9901      	ldr	r1, [sp, #4]
    100c:	2201      	movs	r2, #1
    100e:	f7ff fe79 	bl	d04 <BITBAND_Peripheral>
    1012:	e004      	b.n	101e <DMA_CfgChannel+0x9e>
  }
  else
  {
    BITBAND_Peripheral(&(DMA->IEN), channel, 0);
    1014:	4805      	ldr	r0, [pc, #20]	; (102c <DMA_CfgChannel+0xac>)
    1016:	9901      	ldr	r1, [sp, #4]
    1018:	2200      	movs	r2, #0
    101a:	f7ff fe73 	bl	d04 <BITBAND_Peripheral>
  }
}
    101e:	b005      	add	sp, #20
    1020:	f85d fb04 	ldr.w	pc, [sp], #4
    1024:	0000a23c 	.word	0x0000a23c
    1028:	400c2000 	.word	0x400c2000
    102c:	400c300c 	.word	0x400c300c

00001030 <DMA_CfgDescr>:
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgDescr(unsigned int channel,
                  bool primary,
                  DMA_CfgDescr_TypeDef *cfg)
{
    1030:	b500      	push	{lr}
    1032:	b087      	sub	sp, #28
    1034:	9003      	str	r0, [sp, #12]
    1036:	460b      	mov	r3, r1
    1038:	9201      	str	r2, [sp, #4]
    103a:	f88d 300b 	strb.w	r3, [sp, #11]
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
    103e:	9b03      	ldr	r3, [sp, #12]
    1040:	2b07      	cmp	r3, #7
    1042:	d904      	bls.n	104e <DMA_CfgDescr+0x1e>
    1044:	481c      	ldr	r0, [pc, #112]	; (10b8 <DMA_CfgDescr+0x88>)
    1046:	f240 3112 	movw	r1, #786	; 0x312
    104a:	f7ff f963 	bl	314 <assertEFM>
  EFM_ASSERT(cfg);
    104e:	9b01      	ldr	r3, [sp, #4]
    1050:	2b00      	cmp	r3, #0
    1052:	d104      	bne.n	105e <DMA_CfgDescr+0x2e>
    1054:	4818      	ldr	r0, [pc, #96]	; (10b8 <DMA_CfgDescr+0x88>)
    1056:	f240 3113 	movw	r1, #787	; 0x313
    105a:	f7ff f95b 	bl	314 <assertEFM>

  /* Find descriptor to configure */
  if (primary)
    105e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1062:	2b00      	cmp	r3, #0
    1064:	d003      	beq.n	106e <DMA_CfgDescr+0x3e>
  {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
    1066:	4b15      	ldr	r3, [pc, #84]	; (10bc <DMA_CfgDescr+0x8c>)
    1068:	689b      	ldr	r3, [r3, #8]
    106a:	9305      	str	r3, [sp, #20]
    106c:	e002      	b.n	1074 <DMA_CfgDescr+0x44>
  }
  else
  {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
    106e:	4b13      	ldr	r3, [pc, #76]	; (10bc <DMA_CfgDescr+0x8c>)
    1070:	68db      	ldr	r3, [r3, #12]
    1072:	9305      	str	r3, [sp, #20]
  }
  descr += channel;
    1074:	9b03      	ldr	r3, [sp, #12]
    1076:	011b      	lsls	r3, r3, #4
    1078:	9a05      	ldr	r2, [sp, #20]
    107a:	4413      	add	r3, r2
    107c:	9305      	str	r3, [sp, #20]

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    107e:	9b01      	ldr	r3, [sp, #4]
    1080:	781b      	ldrb	r3, [r3, #0]
    1082:	079a      	lsls	r2, r3, #30
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	789b      	ldrb	r3, [r3, #2]
    1088:	071b      	lsls	r3, r3, #28
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    108a:	431a      	orrs	r2, r3
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    108c:	9b01      	ldr	r3, [sp, #4]
    108e:	785b      	ldrb	r3, [r3, #1]
    1090:	069b      	lsls	r3, r3, #26

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    1092:	431a      	orrs	r2, r3
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    1094:	9b01      	ldr	r3, [sp, #4]
    1096:	789b      	ldrb	r3, [r3, #2]
    1098:	061b      	lsls	r3, r3, #24
  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    109a:	4313      	orrs	r3, r2
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    109c:	461a      	mov	r2, r3
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
    109e:	9b01      	ldr	r3, [sp, #4]
    10a0:	791b      	ldrb	r3, [r3, #4]
    10a2:	049b      	lsls	r3, r3, #18
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    10a4:	431a      	orrs	r2, r3
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
    (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
    10a6:	9b01      	ldr	r3, [sp, #4]
    10a8:	78db      	ldrb	r3, [r3, #3]
    10aa:	039b      	lsls	r3, r3, #14
    (0 << _DMA_CTRL_N_MINUS_1_SHIFT) |         /* Set when activated */
    (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |     /* Set when activated */
    10ac:	431a      	orrs	r2, r3
  }
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    10ae:	9b05      	ldr	r3, [sp, #20]
    10b0:	609a      	str	r2, [r3, #8]
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
    (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
    (0 << _DMA_CTRL_N_MINUS_1_SHIFT) |         /* Set when activated */
    (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |     /* Set when activated */
    DMA_CTRL_CYCLE_CTRL_INVALID;               /* Set when activated */
}
    10b2:	b007      	add	sp, #28
    10b4:	f85d fb04 	ldr.w	pc, [sp], #4
    10b8:	0000a23c 	.word	0x0000a23c
    10bc:	400c2000 	.word	0x400c2000

000010c0 <DMA_Init>:
 *
 * @param[in] init
 *   Pointer to a structure containing DMA init information.
 ******************************************************************************/
void DMA_Init(DMA_Init_TypeDef *init)
{
    10c0:	b500      	push	{lr}
    10c2:	b083      	sub	sp, #12
    10c4:	9001      	str	r0, [sp, #4]
  EFM_ASSERT(init);
    10c6:	9b01      	ldr	r3, [sp, #4]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d104      	bne.n	10d6 <DMA_Init+0x16>
    10cc:	4817      	ldr	r0, [pc, #92]	; (112c <DMA_Init+0x6c>)
    10ce:	f240 31eb 	movw	r1, #1003	; 0x3eb
    10d2:	f7ff f91f 	bl	314 <assertEFM>

  /* Make sure control block is properly aligned */
  EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
    10d6:	9b01      	ldr	r3, [sp, #4]
    10d8:	685b      	ldr	r3, [r3, #4]
    10da:	b2db      	uxtb	r3, r3
    10dc:	2b00      	cmp	r3, #0
    10de:	d004      	beq.n	10ea <DMA_Init+0x2a>
    10e0:	4812      	ldr	r0, [pc, #72]	; (112c <DMA_Init+0x6c>)
    10e2:	f240 31ee 	movw	r1, #1006	; 0x3ee
    10e6:	f7ff f915 	bl	314 <assertEFM>

  /* Make sure DMA clock is enabled prior to accessing DMA module */
  CMU_ClockEnable(cmuClock_DMA, true);
    10ea:	4811      	ldr	r0, [pc, #68]	; (1130 <DMA_Init+0x70>)
    10ec:	2101      	movs	r1, #1
    10ee:	f7ff fb23 	bl	738 <CMU_ClockEnable>

  /* Make sure DMA controller is set to a known reset state */
  DMA_Reset();
    10f2:	f000 f821 	bl	1138 <DMA_Reset>

  /* Clear/enable DMA interrupts */
  NVIC_ClearPendingIRQ(DMA_IRQn);
    10f6:	2000      	movs	r0, #0
    10f8:	f7ff fdee 	bl	cd8 <NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(DMA_IRQn);
    10fc:	2000      	movs	r0, #0
    10fe:	f7ff fdbf 	bl	c80 <NVIC_EnableIRQ>

  /* Enable bus error interrupt */
  DMA->IEN = DMA_IEN_ERR;
    1102:	4b0c      	ldr	r3, [pc, #48]	; (1134 <DMA_Init+0x74>)
    1104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1108:	330c      	adds	r3, #12
    110a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    110e:	601a      	str	r2, [r3, #0]

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
    1110:	4b08      	ldr	r3, [pc, #32]	; (1134 <DMA_Init+0x74>)
    1112:	9a01      	ldr	r2, [sp, #4]
    1114:	6852      	ldr	r2, [r2, #4]
    1116:	609a      	str	r2, [r3, #8]

  /* Configure and enable the DMA controller */
  DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT) | DMA_CONFIG_EN;
    1118:	4b06      	ldr	r3, [pc, #24]	; (1134 <DMA_Init+0x74>)
    111a:	9a01      	ldr	r2, [sp, #4]
    111c:	7812      	ldrb	r2, [r2, #0]
    111e:	0152      	lsls	r2, r2, #5
    1120:	f042 0201 	orr.w	r2, r2, #1
    1124:	605a      	str	r2, [r3, #4]
}
    1126:	b003      	add	sp, #12
    1128:	f85d fb04 	ldr.w	pc, [sp], #4
    112c:	0000a23c 	.word	0x0000a23c
    1130:	00041300 	.word	0x00041300
    1134:	400c2000 	.word	0x400c2000

00001138 <DMA_Reset>:
 *
 * @note
 *   Notice that any ongoing transfers will be aborted.
 ******************************************************************************/
void DMA_Reset(void)
{
    1138:	b500      	push	{lr}
    113a:	b083      	sub	sp, #12
  int i;

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);
    113c:	2000      	movs	r0, #0
    113e:	f7ff fdb5 	bl	cac <NVIC_DisableIRQ>

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
    1142:	4b1a      	ldr	r3, [pc, #104]	; (11ac <DMA_Reset+0x74>)
    1144:	2200      	movs	r2, #0
    1146:	605a      	str	r2, [r3, #4]
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
    1148:	4b18      	ldr	r3, [pc, #96]	; (11ac <DMA_Reset+0x74>)
    114a:	22ff      	movs	r2, #255	; 0xff
    114c:	61da      	str	r2, [r3, #28]
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
    114e:	4b17      	ldr	r3, [pc, #92]	; (11ac <DMA_Reset+0x74>)
    1150:	22ff      	movs	r2, #255	; 0xff
    1152:	625a      	str	r2, [r3, #36]	; 0x24
  DMA->CHENC       = _DMA_CHENC_MASK;
    1154:	4b15      	ldr	r3, [pc, #84]	; (11ac <DMA_Reset+0x74>)
    1156:	22ff      	movs	r2, #255	; 0xff
    1158:	62da      	str	r2, [r3, #44]	; 0x2c
  DMA->CHALTC      = _DMA_CHALTC_MASK;
    115a:	4b14      	ldr	r3, [pc, #80]	; (11ac <DMA_Reset+0x74>)
    115c:	22ff      	movs	r2, #255	; 0xff
    115e:	635a      	str	r2, [r3, #52]	; 0x34
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
    1160:	4b12      	ldr	r3, [pc, #72]	; (11ac <DMA_Reset+0x74>)
    1162:	22ff      	movs	r2, #255	; 0xff
    1164:	63da      	str	r2, [r3, #60]	; 0x3c
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
    1166:	4b11      	ldr	r3, [pc, #68]	; (11ac <DMA_Reset+0x74>)
    1168:	2201      	movs	r2, #1
    116a:	64da      	str	r2, [r3, #76]	; 0x4c
  DMA->IEN         = _DMA_IEN_RESETVALUE;
    116c:	4b0f      	ldr	r3, [pc, #60]	; (11ac <DMA_Reset+0x74>)
    116e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1172:	330c      	adds	r3, #12
    1174:	2200      	movs	r2, #0
    1176:	601a      	str	r2, [r3, #0]
  DMA->IFC         = _DMA_IFC_MASK;
    1178:	4b0c      	ldr	r3, [pc, #48]	; (11ac <DMA_Reset+0x74>)
    117a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    117e:	3308      	adds	r3, #8
    1180:	4a0b      	ldr	r2, [pc, #44]	; (11b0 <DMA_Reset+0x78>)
    1182:	601a      	str	r2, [r3, #0]

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
    1184:	2300      	movs	r3, #0
    1186:	9301      	str	r3, [sp, #4]
    1188:	e009      	b.n	119e <DMA_Reset+0x66>
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <DMA_Reset+0x74>)
    118c:	9a01      	ldr	r2, [sp, #4]
    118e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
    1192:	2100      	movs	r1, #0
    1194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
    1198:	9b01      	ldr	r3, [sp, #4]
    119a:	3301      	adds	r3, #1
    119c:	9301      	str	r3, [sp, #4]
    119e:	9b01      	ldr	r3, [sp, #4]
    11a0:	2b07      	cmp	r3, #7
    11a2:	ddf2      	ble.n	118a <DMA_Reset+0x52>
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
  }
}
    11a4:	b003      	add	sp, #12
    11a6:	f85d fb04 	ldr.w	pc, [sp], #4
    11aa:	bf00      	nop
    11ac:	400c2000 	.word	0x400c2000
    11b0:	800000ff 	.word	0x800000ff

000011b4 <SystemCoreClockUpdate>:
 *   API, this variable will be kept updated. This function is only provided
 *   for CMSIS compliance and if a user modifies the the core clock outside
 *   the CMU API.
 *****************************************************************************/
static __INLINE void SystemCoreClockUpdate(void)
{
    11b4:	b508      	push	{r3, lr}
  SystemCoreClockGet();
    11b6:	f7ff f80f 	bl	1d8 <SystemCoreClockGet>
}
    11ba:	bd08      	pop	{r3, pc}

000011bc <CMU_Lock>:
 *   If locking the CMU registers, they must be unlocked prior to using any
 *   CMU API functions modifying CMU registers protected by the lock.
 ******************************************************************************/
__STATIC_INLINE void CMU_Lock(void)
{
  CMU->LOCK = CMU_LOCK_LOCKKEY_LOCK;
    11bc:	4b02      	ldr	r3, [pc, #8]	; (11c8 <CMU_Lock+0xc>)
    11be:	2200      	movs	r2, #0
    11c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop
    11c8:	400c8000 	.word	0x400c8000

000011cc <CMU_Unlock>:
 * @brief
 *   Unlock the CMU so that writing to locked registers again is possible.
 ******************************************************************************/
__STATIC_INLINE void CMU_Unlock(void)
{
  CMU->LOCK = CMU_LOCK_LOCKKEY_UNLOCK;
    11cc:	4b02      	ldr	r3, [pc, #8]	; (11d8 <CMU_Unlock+0xc>)
    11ce:	f645 020e 	movw	r2, #22542	; 0x580e
    11d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    11d6:	4770      	bx	lr
    11d8:	400c8000 	.word	0x400c8000

000011dc <EMU_Restore>:
/***************************************************************************//**
 * @brief
 *   Restore oscillators and core clock after having been in EM2 or EM3.
 ******************************************************************************/
static void EMU_Restore(void)
{
    11dc:	b500      	push	{lr}
    11de:	b083      	sub	sp, #12

  /* Although we could use the CMU API for most of the below handling, we */
  /* would like this function to be as efficient as possible. */

  /* CMU registers may be locked */
  cmuLocked = CMU->LOCK & CMU_LOCK_LOCKKEY_LOCKED;
    11e0:	4b26      	ldr	r3, [pc, #152]	; (127c <EMU_Restore+0xa0>)
    11e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    11e6:	f003 0301 	and.w	r3, r3, #1
    11ea:	9301      	str	r3, [sp, #4]
  CMU_Unlock();
    11ec:	f7ff ffee 	bl	11cc <CMU_Unlock>

  /* AUXHFRCO was automatically disabled (except if using debugger). */
  /* HFXO was automatically disabled. */
  /* LFRCO/LFXO were possibly disabled by SW in EM3. */
  /* Restore according to status prior to entering EM. */
  CMU->OSCENCMD = cmuStatus & (CMU_STATUS_AUXHFRCOENS |
    11f0:	4b22      	ldr	r3, [pc, #136]	; (127c <EMU_Restore+0xa0>)
    11f2:	4a23      	ldr	r2, [pc, #140]	; (1280 <EMU_Restore+0xa4>)
    11f4:	8812      	ldrh	r2, [r2, #0]
    11f6:	f402 72aa 	and.w	r2, r2, #340	; 0x154
    11fa:	621a      	str	r2, [r3, #32]
                               CMU_STATUS_HFXOENS |
                               CMU_STATUS_LFRCOENS |
                               CMU_STATUS_LFXOENS);

  /* Restore oscillator used for clocking core */
  switch (cmuStatus & (CMU_STATUS_HFXOSEL | CMU_STATUS_HFRCOSEL |
    11fc:	4b20      	ldr	r3, [pc, #128]	; (1280 <EMU_Restore+0xa4>)
    11fe:	881b      	ldrh	r3, [r3, #0]
    1200:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
    1204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    1208:	d006      	beq.n	1218 <EMU_Restore+0x3c>
    120a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    120e:	d00e      	beq.n	122e <EMU_Restore+0x52>
    1210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    1214:	d016      	beq.n	1244 <EMU_Restore+0x68>
    break;

  default: /* CMU_STATUS_HFRCOSEL */
    /* If core clock was HFRCO core clock, it is automatically restored to */
    /* state prior to entering energy mode. No need for further action. */
    break;
    1216:	e020      	b.n	125a <EMU_Restore+0x7e>
  switch (cmuStatus & (CMU_STATUS_HFXOSEL | CMU_STATUS_HFRCOSEL |
                       CMU_STATUS_LFXOSEL | CMU_STATUS_LFRCOSEL))
  {
  case CMU_STATUS_LFRCOSEL:
    /* Wait for LFRCO to stabilize */
    while (!(CMU->STATUS & CMU_STATUS_LFRCORDY))
    1218:	bf00      	nop
    121a:	4b18      	ldr	r3, [pc, #96]	; (127c <EMU_Restore+0xa0>)
    121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1222:	2b00      	cmp	r3, #0
    1224:	d0f9      	beq.n	121a <EMU_Restore+0x3e>
      ;
    CMU->CMD = CMU_CMD_HFCLKSEL_LFRCO;
    1226:	4b15      	ldr	r3, [pc, #84]	; (127c <EMU_Restore+0xa0>)
    1228:	2203      	movs	r2, #3
    122a:	625a      	str	r2, [r3, #36]	; 0x24
    break;
    122c:	e015      	b.n	125a <EMU_Restore+0x7e>

  case CMU_STATUS_LFXOSEL:
    /* Wait for LFXO to stabilize */
    while (!(CMU->STATUS & CMU_STATUS_LFXORDY))
    122e:	bf00      	nop
    1230:	4b12      	ldr	r3, [pc, #72]	; (127c <EMU_Restore+0xa0>)
    1232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1234:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1238:	2b00      	cmp	r3, #0
    123a:	d0f9      	beq.n	1230 <EMU_Restore+0x54>
      ;
    CMU->CMD = CMU_CMD_HFCLKSEL_LFXO;
    123c:	4b0f      	ldr	r3, [pc, #60]	; (127c <EMU_Restore+0xa0>)
    123e:	2204      	movs	r2, #4
    1240:	625a      	str	r2, [r3, #36]	; 0x24
    break;
    1242:	e00a      	b.n	125a <EMU_Restore+0x7e>

  case CMU_STATUS_HFXOSEL:
    /* Wait for HFXO to stabilize */
    while (!(CMU->STATUS & CMU_STATUS_HFXORDY))
    1244:	bf00      	nop
    1246:	4b0d      	ldr	r3, [pc, #52]	; (127c <EMU_Restore+0xa0>)
    1248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    124a:	f003 0308 	and.w	r3, r3, #8
    124e:	2b00      	cmp	r3, #0
    1250:	d0f9      	beq.n	1246 <EMU_Restore+0x6a>
      ;
    CMU->CMD = CMU_CMD_HFCLKSEL_HFXO;
    1252:	4b0a      	ldr	r3, [pc, #40]	; (127c <EMU_Restore+0xa0>)
    1254:	2202      	movs	r2, #2
    1256:	625a      	str	r2, [r3, #36]	; 0x24
    break;
    1258:	bf00      	nop
    break;
  }

  /* If HFRCO was disabled before entering Energy Mode, turn it off again */
  /* as it is automatically enabled by wake up */
  if ( ! (cmuStatus & CMU_STATUS_HFRCOENS) )
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <EMU_Restore+0xa4>)
    125c:	881b      	ldrh	r3, [r3, #0]
    125e:	f003 0301 	and.w	r3, r3, #1
    1262:	2b00      	cmp	r3, #0
    1264:	d102      	bne.n	126c <EMU_Restore+0x90>
  {
    CMU->OSCENCMD = CMU_OSCENCMD_HFRCODIS;
    1266:	4b05      	ldr	r3, [pc, #20]	; (127c <EMU_Restore+0xa0>)
    1268:	2202      	movs	r2, #2
    126a:	621a      	str	r2, [r3, #32]
  }

  /* Restore CMU register locking */
  if (cmuLocked)
    126c:	9b01      	ldr	r3, [sp, #4]
    126e:	2b00      	cmp	r3, #0
    1270:	d001      	beq.n	1276 <EMU_Restore+0x9a>
  {
    CMU_Lock();
    1272:	f7ff ffa3 	bl	11bc <CMU_Lock>
  }
}
    1276:	b003      	add	sp, #12
    1278:	f85d fb04 	ldr.w	pc, [sp], #4
    127c:	400c8000 	.word	0x400c8000
    1280:	20000a1c 	.word	0x20000a1c

00001284 <EMU_EnterEM2>:
 * @par
 *   The @p restore option should only be used if all clock control is done
 *   via the CMU API.
 ******************************************************************************/
void EMU_EnterEM2(bool restore)
{
    1284:	b500      	push	{lr}
    1286:	b083      	sub	sp, #12
    1288:	4603      	mov	r3, r0
    128a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Auto-update CMU status just in case before entering energy mode. */
  /* This variable is normally kept up-to-date by the CMU API. */
  cmuStatus = (uint16_t)(CMU->STATUS);
    128e:	4b0f      	ldr	r3, [pc, #60]	; (12cc <EMU_EnterEM2+0x48>)
    1290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1292:	b29a      	uxth	r2, r3
    1294:	4b0e      	ldr	r3, [pc, #56]	; (12d0 <EMU_EnterEM2+0x4c>)
    1296:	801a      	strh	r2, [r3, #0]

  /* Enter Cortex-M3 deep sleep mode */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    1298:	4b0e      	ldr	r3, [pc, #56]	; (12d4 <EMU_EnterEM2+0x50>)
    129a:	4a0e      	ldr	r2, [pc, #56]	; (12d4 <EMU_EnterEM2+0x50>)
    129c:	6912      	ldr	r2, [r2, #16]
    129e:	f042 0204 	orr.w	r2, r2, #4
    12a2:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    12a4:	bf30      	wfi
  __WFI();

  /* Restore oscillators/clocks if specified */
  if (restore)
    12a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12aa:	2b00      	cmp	r3, #0
    12ac:	d002      	beq.n	12b4 <EMU_EnterEM2+0x30>
  {
    EMU_Restore();
    12ae:	f7ff ff95 	bl	11dc <EMU_Restore>
    12b2:	e007      	b.n	12c4 <EMU_EnterEM2+0x40>
  }
  /* If not restoring, and original clock was not HFRCO, we have to */
  /* update CMSIS core clock variable since core clock has changed */
  /* to using HFRCO. */
  else if (!(cmuStatus & CMU_STATUS_HFRCOSEL))
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <EMU_EnterEM2+0x4c>)
    12b6:	881b      	ldrh	r3, [r3, #0]
    12b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    12bc:	2b00      	cmp	r3, #0
    12be:	d101      	bne.n	12c4 <EMU_EnterEM2+0x40>
  {
    SystemCoreClockUpdate();
    12c0:	f7ff ff78 	bl	11b4 <SystemCoreClockUpdate>
  }
}
    12c4:	b003      	add	sp, #12
    12c6:	f85d fb04 	ldr.w	pc, [sp], #4
    12ca:	bf00      	nop
    12cc:	400c8000 	.word	0x400c8000
    12d0:	20000a1c 	.word	0x20000a1c
    12d4:	e000ed00 	.word	0xe000ed00

000012d8 <EMU_UpdateOscConfig>:
 *   up-to-date.
 ******************************************************************************/
void EMU_UpdateOscConfig(void)
{
  /* Fetch current configuration */
  cmuStatus = (uint16_t)(CMU->STATUS);
    12d8:	4b02      	ldr	r3, [pc, #8]	; (12e4 <EMU_UpdateOscConfig+0xc>)
    12da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12dc:	b29a      	uxth	r2, r3
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <EMU_UpdateOscConfig+0x10>)
    12e0:	801a      	strh	r2, [r3, #0]
}
    12e2:	4770      	bx	lr
    12e4:	400c8000 	.word	0x400c8000
    12e8:	20000a1c 	.word	0x20000a1c

000012ec <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
    12ec:	b086      	sub	sp, #24
    12ee:	9003      	str	r0, [sp, #12]
    12f0:	9102      	str	r1, [sp, #8]
    12f2:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    12f4:	9b03      	ldr	r3, [sp, #12]
    12f6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    12fa:	00da      	lsls	r2, r3, #3
    12fc:	9b02      	ldr	r3, [sp, #8]
    12fe:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    1300:	009b      	lsls	r3, r3, #2
    1302:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
    1304:	9b05      	ldr	r3, [sp, #20]
    1306:	9a01      	ldr	r2, [sp, #4]
    1308:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
    130a:	b006      	add	sp, #24
    130c:	4770      	bx	lr
    130e:	bf00      	nop

00001310 <GPIO_IntConfig>:
void GPIO_IntConfig(GPIO_Port_TypeDef port,
                    unsigned int pin,
                    bool risingEdge,
                    bool fallingEdge,
                    bool enable)
{
    1310:	b500      	push	{lr}
    1312:	b085      	sub	sp, #20
    1314:	9100      	str	r1, [sp, #0]
    1316:	4601      	mov	r1, r0
    1318:	f88d 1007 	strb.w	r1, [sp, #7]
    131c:	f88d 2006 	strb.w	r2, [sp, #6]
    1320:	f88d 3005 	strb.w	r3, [sp, #5]
  uint32_t tmp;

  EFM_ASSERT(GPIO_PORT_VALID(port) && GPIO_PIN_VALID(pin));
    1324:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1328:	2b05      	cmp	r3, #5
    132a:	d802      	bhi.n	1332 <GPIO_IntConfig+0x22>
    132c:	9b00      	ldr	r3, [sp, #0]
    132e:	2b0f      	cmp	r3, #15
    1330:	d903      	bls.n	133a <GPIO_IntConfig+0x2a>
    1332:	4829      	ldr	r0, [pc, #164]	; (13d8 <GPIO_IntConfig+0xc8>)
    1334:	2196      	movs	r1, #150	; 0x96
    1336:	f7fe ffed 	bl	314 <assertEFM>

  /* There are two registers controlling the interrupt configuration:
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (pin < 8)
    133a:	9b00      	ldr	r3, [sp, #0]
    133c:	2b07      	cmp	r3, #7
    133e:	d814      	bhi.n	136a <GPIO_IntConfig+0x5a>
  {
    GPIO->EXTIPSELL = (GPIO->EXTIPSELL & ~(0xF << (4 * pin))) |
    1340:	4b26      	ldr	r3, [pc, #152]	; (13dc <GPIO_IntConfig+0xcc>)
    1342:	4a26      	ldr	r2, [pc, #152]	; (13dc <GPIO_IntConfig+0xcc>)
    1344:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    1348:	9a00      	ldr	r2, [sp, #0]
    134a:	0092      	lsls	r2, r2, #2
    134c:	200f      	movs	r0, #15
    134e:	fa00 f202 	lsl.w	r2, r0, r2
    1352:	43d2      	mvns	r2, r2
    1354:	4011      	ands	r1, r2
                      (port << (4 * pin));
    1356:	f89d 0007 	ldrb.w	r0, [sp, #7]
    135a:	9a00      	ldr	r2, [sp, #0]
    135c:	0092      	lsls	r2, r2, #2
    135e:	fa00 f202 	lsl.w	r2, r0, r2
  /* There are two registers controlling the interrupt configuration:
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (pin < 8)
  {
    GPIO->EXTIPSELL = (GPIO->EXTIPSELL & ~(0xF << (4 * pin))) |
    1362:	430a      	orrs	r2, r1
    1364:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1368:	e016      	b.n	1398 <GPIO_IntConfig+0x88>
                      (port << (4 * pin));
  }
  else
  {
    tmp             = pin - 8;
    136a:	9b00      	ldr	r3, [sp, #0]
    136c:	3b08      	subs	r3, #8
    136e:	9303      	str	r3, [sp, #12]
    GPIO->EXTIPSELH = (GPIO->EXTIPSELH & ~(0xF << (4 * tmp))) |
    1370:	4b1a      	ldr	r3, [pc, #104]	; (13dc <GPIO_IntConfig+0xcc>)
    1372:	4a1a      	ldr	r2, [pc, #104]	; (13dc <GPIO_IntConfig+0xcc>)
    1374:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    1378:	9a03      	ldr	r2, [sp, #12]
    137a:	0092      	lsls	r2, r2, #2
    137c:	200f      	movs	r0, #15
    137e:	fa00 f202 	lsl.w	r2, r0, r2
    1382:	43d2      	mvns	r2, r2
    1384:	4011      	ands	r1, r2
                      (port << (4 * tmp));
    1386:	f89d 0007 	ldrb.w	r0, [sp, #7]
    138a:	9a03      	ldr	r2, [sp, #12]
    138c:	0092      	lsls	r2, r2, #2
    138e:	fa00 f202 	lsl.w	r2, r0, r2
                      (port << (4 * pin));
  }
  else
  {
    tmp             = pin - 8;
    GPIO->EXTIPSELH = (GPIO->EXTIPSELH & ~(0xF << (4 * tmp))) |
    1392:	430a      	orrs	r2, r1
    1394:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                      (port << (4 * tmp));
  }

  /* Enable/disable rising edge */
  BITBAND_Peripheral(&(GPIO->EXTIRISE), pin, (unsigned int)risingEdge);
    1398:	f89d 3006 	ldrb.w	r3, [sp, #6]
    139c:	4810      	ldr	r0, [pc, #64]	; (13e0 <GPIO_IntConfig+0xd0>)
    139e:	9900      	ldr	r1, [sp, #0]
    13a0:	461a      	mov	r2, r3
    13a2:	f7ff ffa3 	bl	12ec <BITBAND_Peripheral>

  /* Enable/disable falling edge */
  BITBAND_Peripheral(&(GPIO->EXTIFALL), pin, (unsigned int)fallingEdge);
    13a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    13aa:	480e      	ldr	r0, [pc, #56]	; (13e4 <GPIO_IntConfig+0xd4>)
    13ac:	9900      	ldr	r1, [sp, #0]
    13ae:	461a      	mov	r2, r3
    13b0:	f7ff ff9c 	bl	12ec <BITBAND_Peripheral>

  /* Clear any pending interrupt */
  GPIO->IFC = 1 << pin;
    13b4:	4b09      	ldr	r3, [pc, #36]	; (13dc <GPIO_IntConfig+0xcc>)
    13b6:	9a00      	ldr	r2, [sp, #0]
    13b8:	2101      	movs	r1, #1
    13ba:	fa01 f202 	lsl.w	r2, r1, r2
    13be:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Finally enable/disable interrupt */
  BITBAND_Peripheral(&(GPIO->IEN), pin, (unsigned int)enable);
    13c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    13c6:	4808      	ldr	r0, [pc, #32]	; (13e8 <GPIO_IntConfig+0xd8>)
    13c8:	9900      	ldr	r1, [sp, #0]
    13ca:	461a      	mov	r2, r3
    13cc:	f7ff ff8e 	bl	12ec <BITBAND_Peripheral>
}
    13d0:	b005      	add	sp, #20
    13d2:	f85d fb04 	ldr.w	pc, [sp], #4
    13d6:	bf00      	nop
    13d8:	0000a26c 	.word	0x0000a26c
    13dc:	40006000 	.word	0x40006000
    13e0:	40006108 	.word	0x40006108
    13e4:	4000610c 	.word	0x4000610c
    13e8:	40006110 	.word	0x40006110

000013ec <GPIO_PinModeSet>:
 ******************************************************************************/
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
    13ec:	b510      	push	{r4, lr}
    13ee:	b084      	sub	sp, #16
    13f0:	9102      	str	r1, [sp, #8]
    13f2:	9301      	str	r3, [sp, #4]
    13f4:	4603      	mov	r3, r0
    13f6:	f88d 300f 	strb.w	r3, [sp, #15]
    13fa:	4613      	mov	r3, r2
    13fc:	f88d 300e 	strb.w	r3, [sp, #14]
  EFM_ASSERT(GPIO_PORT_VALID(port) && GPIO_PIN_VALID(pin));
    1400:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1404:	2b05      	cmp	r3, #5
    1406:	d802      	bhi.n	140e <GPIO_PinModeSet+0x22>
    1408:	9b02      	ldr	r3, [sp, #8]
    140a:	2b0f      	cmp	r3, #15
    140c:	d903      	bls.n	1416 <GPIO_PinModeSet+0x2a>
    140e:	484f      	ldr	r0, [pc, #316]	; (154c <GPIO_PinModeSet+0x160>)
    1410:	21cb      	movs	r1, #203	; 0xcb
    1412:	f7fe ff7f 	bl	314 <assertEFM>

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled)
    1416:	f89d 300e 	ldrb.w	r3, [sp, #14]
    141a:	2b00      	cmp	r3, #0
    141c:	d021      	beq.n	1462 <GPIO_PinModeSet+0x76>
  {
    if (out)
    141e:	9b01      	ldr	r3, [sp, #4]
    1420:	2b00      	cmp	r3, #0
    1422:	d00f      	beq.n	1444 <GPIO_PinModeSet+0x58>
    {
      GPIO->P[port].DOUTSET = 1 << pin;
    1424:	484a      	ldr	r0, [pc, #296]	; (1550 <GPIO_PinModeSet+0x164>)
    1426:	f89d 200f 	ldrb.w	r2, [sp, #15]
    142a:	9b02      	ldr	r3, [sp, #8]
    142c:	2101      	movs	r1, #1
    142e:	fa01 f303 	lsl.w	r3, r1, r3
    1432:	4619      	mov	r1, r3
    1434:	4613      	mov	r3, r2
    1436:	00db      	lsls	r3, r3, #3
    1438:	4413      	add	r3, r2
    143a:	009b      	lsls	r3, r3, #2
    143c:	4403      	add	r3, r0
    143e:	3310      	adds	r3, #16
    1440:	6019      	str	r1, [r3, #0]
    1442:	e00e      	b.n	1462 <GPIO_PinModeSet+0x76>
    }
    else
    {
      GPIO->P[port].DOUTCLR = 1 << pin;
    1444:	4842      	ldr	r0, [pc, #264]	; (1550 <GPIO_PinModeSet+0x164>)
    1446:	f89d 200f 	ldrb.w	r2, [sp, #15]
    144a:	9b02      	ldr	r3, [sp, #8]
    144c:	2101      	movs	r1, #1
    144e:	fa01 f303 	lsl.w	r3, r1, r3
    1452:	4619      	mov	r1, r3
    1454:	4613      	mov	r3, r2
    1456:	00db      	lsls	r3, r3, #3
    1458:	4413      	add	r3, r2
    145a:	009b      	lsls	r3, r3, #2
    145c:	4403      	add	r3, r0
    145e:	3310      	adds	r3, #16
    1460:	6059      	str	r1, [r3, #4]
    }
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8)
    1462:	9b02      	ldr	r3, [sp, #8]
    1464:	2b07      	cmp	r3, #7
    1466:	d820      	bhi.n	14aa <GPIO_PinModeSet+0xbe>
  {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
    1468:	4839      	ldr	r0, [pc, #228]	; (1550 <GPIO_PinModeSet+0x164>)
    146a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    146e:	4c38      	ldr	r4, [pc, #224]	; (1550 <GPIO_PinModeSet+0x164>)
    1470:	f89d 100f 	ldrb.w	r1, [sp, #15]
    1474:	460b      	mov	r3, r1
    1476:	00db      	lsls	r3, r3, #3
    1478:	440b      	add	r3, r1
    147a:	009b      	lsls	r3, r3, #2
    147c:	4423      	add	r3, r4
    147e:	6859      	ldr	r1, [r3, #4]
    1480:	9b02      	ldr	r3, [sp, #8]
    1482:	009b      	lsls	r3, r3, #2
    1484:	240f      	movs	r4, #15
    1486:	fa04 f303 	lsl.w	r3, r4, r3
    148a:	43db      	mvns	r3, r3
    148c:	4019      	ands	r1, r3
                          (mode << (pin * 4));
    148e:	f89d 400e 	ldrb.w	r4, [sp, #14]
    1492:	9b02      	ldr	r3, [sp, #8]
    1494:	009b      	lsls	r3, r3, #2
    1496:	fa04 f303 	lsl.w	r3, r4, r3

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8)
  {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
    149a:	4319      	orrs	r1, r3
    149c:	4613      	mov	r3, r2
    149e:	00db      	lsls	r3, r3, #3
    14a0:	4413      	add	r3, r2
    14a2:	009b      	lsls	r3, r3, #2
    14a4:	4403      	add	r3, r0
    14a6:	6059      	str	r1, [r3, #4]
    14a8:	e027      	b.n	14fa <GPIO_PinModeSet+0x10e>
                          (mode << (pin * 4));
  }
  else
  {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xF << ((pin - 8) * 4))) |
    14aa:	4829      	ldr	r0, [pc, #164]	; (1550 <GPIO_PinModeSet+0x164>)
    14ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14b0:	4c27      	ldr	r4, [pc, #156]	; (1550 <GPIO_PinModeSet+0x164>)
    14b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    14b6:	460b      	mov	r3, r1
    14b8:	00db      	lsls	r3, r3, #3
    14ba:	440b      	add	r3, r1
    14bc:	009b      	lsls	r3, r3, #2
    14be:	4423      	add	r3, r4
    14c0:	3308      	adds	r3, #8
    14c2:	6819      	ldr	r1, [r3, #0]
    14c4:	9b02      	ldr	r3, [sp, #8]
    14c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    14ca:	3b08      	subs	r3, #8
    14cc:	009b      	lsls	r3, r3, #2
    14ce:	240f      	movs	r4, #15
    14d0:	fa04 f303 	lsl.w	r3, r4, r3
    14d4:	43db      	mvns	r3, r3
    14d6:	4019      	ands	r1, r3
                          (mode << ((pin - 8) * 4));
    14d8:	f89d 400e 	ldrb.w	r4, [sp, #14]
    14dc:	9b02      	ldr	r3, [sp, #8]
    14de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    14e2:	3b08      	subs	r3, #8
    14e4:	009b      	lsls	r3, r3, #2
    14e6:	fa04 f303 	lsl.w	r3, r4, r3
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
                          (mode << (pin * 4));
  }
  else
  {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xF << ((pin - 8) * 4))) |
    14ea:	4319      	orrs	r1, r3
    14ec:	4613      	mov	r3, r2
    14ee:	00db      	lsls	r3, r3, #3
    14f0:	4413      	add	r3, r2
    14f2:	009b      	lsls	r3, r3, #2
    14f4:	4403      	add	r3, r0
    14f6:	3308      	adds	r3, #8
    14f8:	6019      	str	r1, [r3, #0]
                          (mode << ((pin - 8) * 4));
  }

  if (mode == gpioModeDisabled)
    14fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    14fe:	2b00      	cmp	r3, #0
    1500:	d121      	bne.n	1546 <GPIO_PinModeSet+0x15a>
  {
    if (out)
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	2b00      	cmp	r3, #0
    1506:	d00f      	beq.n	1528 <GPIO_PinModeSet+0x13c>
    {
      GPIO->P[port].DOUTSET = 1 << pin;
    1508:	4811      	ldr	r0, [pc, #68]	; (1550 <GPIO_PinModeSet+0x164>)
    150a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    150e:	9b02      	ldr	r3, [sp, #8]
    1510:	2101      	movs	r1, #1
    1512:	fa01 f303 	lsl.w	r3, r1, r3
    1516:	4619      	mov	r1, r3
    1518:	4613      	mov	r3, r2
    151a:	00db      	lsls	r3, r3, #3
    151c:	4413      	add	r3, r2
    151e:	009b      	lsls	r3, r3, #2
    1520:	4403      	add	r3, r0
    1522:	3310      	adds	r3, #16
    1524:	6019      	str	r1, [r3, #0]
    1526:	e00e      	b.n	1546 <GPIO_PinModeSet+0x15a>
    }
    else
    {
      GPIO->P[port].DOUTCLR = 1 << pin;
    1528:	4809      	ldr	r0, [pc, #36]	; (1550 <GPIO_PinModeSet+0x164>)
    152a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    152e:	9b02      	ldr	r3, [sp, #8]
    1530:	2101      	movs	r1, #1
    1532:	fa01 f303 	lsl.w	r3, r1, r3
    1536:	4619      	mov	r1, r3
    1538:	4613      	mov	r3, r2
    153a:	00db      	lsls	r3, r3, #3
    153c:	4413      	add	r3, r2
    153e:	009b      	lsls	r3, r3, #2
    1540:	4403      	add	r3, r0
    1542:	3310      	adds	r3, #16
    1544:	6059      	str	r1, [r3, #4]
    }
  }
}
    1546:	b004      	add	sp, #16
    1548:	bd10      	pop	{r4, pc}
    154a:	bf00      	nop
    154c:	0000a26c 	.word	0x0000a26c
    1550:	40006000 	.word	0x40006000

00001554 <LEUART_Sync>:
 * @param[in] mask
 *   Bitmask corresponding to SYNCBUSY register defined bits, indicating
 *   registers that must complete any ongoing synchronization.
 ******************************************************************************/
__STATIC_INLINE void LEUART_Sync(LEUART_TypeDef *leuart, uint32_t mask)
{
    1554:	b082      	sub	sp, #8
    1556:	9001      	str	r0, [sp, #4]
    1558:	9100      	str	r1, [sp, #0]
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (leuart->FREEZE & LEUART_FREEZE_REGFREEZE)
    155a:	9b01      	ldr	r3, [sp, #4]
    155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    155e:	f003 0301 	and.w	r3, r3, #1
    1562:	2b00      	cmp	r3, #0
    1564:	d000      	beq.n	1568 <LEUART_Sync+0x14>
  {
    return;
    1566:	e006      	b.n	1576 <LEUART_Sync+0x22>
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (leuart->SYNCBUSY & mask)
    1568:	bf00      	nop
    156a:	9b01      	ldr	r3, [sp, #4]
    156c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    156e:	9b00      	ldr	r3, [sp, #0]
    1570:	4013      	ands	r3, r2
    1572:	2b00      	cmp	r3, #0
    1574:	d1f9      	bne.n	156a <LEUART_Sync+0x16>
    ;
}
    1576:	b002      	add	sp, #8
    1578:	4770      	bx	lr
    157a:	bf00      	nop

0000157c <LEUART_BaudrateSet>:
 *   Baudrate to try to achieve for LEUART.
 ******************************************************************************/
void LEUART_BaudrateSet(LEUART_TypeDef *leuart,
                        uint32_t refFreq,
                        uint32_t baudrate)
{
    157c:	b500      	push	{lr}
    157e:	b087      	sub	sp, #28
    1580:	9003      	str	r0, [sp, #12]
    1582:	9102      	str	r1, [sp, #8]
    1584:	9201      	str	r2, [sp, #4]
  uint32_t          clkdiv;
  CMU_Clock_TypeDef clock;

  /* Inhibit divide by 0 */
  EFM_ASSERT(baudrate);
    1586:	9b01      	ldr	r3, [sp, #4]
    1588:	2b00      	cmp	r3, #0
    158a:	d104      	bne.n	1596 <LEUART_BaudrateSet+0x1a>
    158c:	4822      	ldr	r0, [pc, #136]	; (1618 <LEUART_BaudrateSet+0x9c>)
    158e:	f44f 7184 	mov.w	r1, #264	; 0x108
    1592:	f7fe febf 	bl	314 <assertEFM>
   * and calculate 1/8 of CLKDIV first. This allows for fLEUARTn
   * up to 128MHz without overflowing a 32 bit value!
   */

  /* Get current frequency? */
  if (!refFreq)
    1596:	9b02      	ldr	r3, [sp, #8]
    1598:	2b00      	cmp	r3, #0
    159a:	d117      	bne.n	15cc <LEUART_BaudrateSet+0x50>
  {
    if (leuart == LEUART0)
    159c:	9a03      	ldr	r2, [sp, #12]
    159e:	4b1f      	ldr	r3, [pc, #124]	; (161c <LEUART_BaudrateSet+0xa0>)
    15a0:	429a      	cmp	r2, r3
    15a2:	d102      	bne.n	15aa <LEUART_BaudrateSet+0x2e>
    {
      clock = cmuClock_LEUART0;
    15a4:	4b1e      	ldr	r3, [pc, #120]	; (1620 <LEUART_BaudrateSet+0xa4>)
    15a6:	9305      	str	r3, [sp, #20]
    15a8:	e00c      	b.n	15c4 <LEUART_BaudrateSet+0x48>
    }
#if (LEUART_COUNT > 1)
    else if (leuart == LEUART1)
    15aa:	9a03      	ldr	r2, [sp, #12]
    15ac:	4b1d      	ldr	r3, [pc, #116]	; (1624 <LEUART_BaudrateSet+0xa8>)
    15ae:	429a      	cmp	r2, r3
    15b0:	d102      	bne.n	15b8 <LEUART_BaudrateSet+0x3c>
    {
      clock = cmuClock_LEUART1;
    15b2:	4b1d      	ldr	r3, [pc, #116]	; (1628 <LEUART_BaudrateSet+0xac>)
    15b4:	9305      	str	r3, [sp, #20]
    15b6:	e005      	b.n	15c4 <LEUART_BaudrateSet+0x48>
    }
#endif
    else
    {
      EFM_ASSERT(0);
    15b8:	4817      	ldr	r0, [pc, #92]	; (1618 <LEUART_BaudrateSet+0x9c>)
    15ba:	f44f 719a 	mov.w	r1, #308	; 0x134
    15be:	f7fe fea9 	bl	314 <assertEFM>
      return;
    15c2:	e025      	b.n	1610 <LEUART_BaudrateSet+0x94>
    }

    refFreq = CMU_ClockFreqGet(clock);
    15c4:	9805      	ldr	r0, [sp, #20]
    15c6:	f7ff f915 	bl	7f4 <CMU_ClockFreqGet>
    15ca:	9002      	str	r0, [sp, #8]
  }

  /* Calculate and set CLKDIV with fractional bits */
  clkdiv  = (32 * refFreq) / baudrate;
    15cc:	9b02      	ldr	r3, [sp, #8]
    15ce:	015a      	lsls	r2, r3, #5
    15d0:	9b01      	ldr	r3, [sp, #4]
    15d2:	fbb2 f3f3 	udiv	r3, r2, r3
    15d6:	9304      	str	r3, [sp, #16]
  clkdiv -= 32;
    15d8:	9b04      	ldr	r3, [sp, #16]
    15da:	3b20      	subs	r3, #32
    15dc:	9304      	str	r3, [sp, #16]
  clkdiv *= 8;
    15de:	9b04      	ldr	r3, [sp, #16]
    15e0:	00db      	lsls	r3, r3, #3
    15e2:	9304      	str	r3, [sp, #16]

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(clkdiv <= _LEUART_CLKDIV_MASK);
    15e4:	9a04      	ldr	r2, [sp, #16]
    15e6:	f647 73f8 	movw	r3, #32760	; 0x7ff8
    15ea:	429a      	cmp	r2, r3
    15ec:	d904      	bls.n	15f8 <LEUART_BaudrateSet+0x7c>
    15ee:	480a      	ldr	r0, [pc, #40]	; (1618 <LEUART_BaudrateSet+0x9c>)
    15f0:	f240 1141 	movw	r1, #321	; 0x141
    15f4:	f7fe fe8e 	bl	314 <assertEFM>

  /* If EFM_ASSERT is not enabled, make sure we don't write to reserved bits */
  clkdiv &= _LEUART_CLKDIV_MASK;
    15f8:	9a04      	ldr	r2, [sp, #16]
    15fa:	f647 73f8 	movw	r3, #32760	; 0x7ff8
    15fe:	4013      	ands	r3, r2
    1600:	9304      	str	r3, [sp, #16]

  /* LF register about to be modified require sync. busy check */
  LEUART_Sync(leuart, LEUART_SYNCBUSY_CLKDIV);
    1602:	9803      	ldr	r0, [sp, #12]
    1604:	2104      	movs	r1, #4
    1606:	f7ff ffa5 	bl	1554 <LEUART_Sync>

  leuart->CLKDIV = clkdiv;
    160a:	9b03      	ldr	r3, [sp, #12]
    160c:	9a04      	ldr	r2, [sp, #16]
    160e:	60da      	str	r2, [r3, #12]
}
    1610:	b007      	add	sp, #28
    1612:	f85d fb04 	ldr.w	pc, [sp], #4
    1616:	bf00      	nop
    1618:	0000a284 	.word	0x0000a284
    161c:	40084000 	.word	0x40084000
    1620:	00140540 	.word	0x00140540
    1624:	40084400 	.word	0x40084400
    1628:	00161540 	.word	0x00161540

0000162c <LEUART_FreezeEnable>:
 *       LF domain
 *   @li false - disables freeze, modified registers are propagated to LF
 *       domain
 ******************************************************************************/
void LEUART_FreezeEnable(LEUART_TypeDef *leuart, bool enable)
{
    162c:	b082      	sub	sp, #8
    162e:	9001      	str	r0, [sp, #4]
    1630:	460b      	mov	r3, r1
    1632:	f88d 3003 	strb.w	r3, [sp, #3]
  if (enable)
    1636:	f89d 3003 	ldrb.w	r3, [sp, #3]
    163a:	2b00      	cmp	r3, #0
    163c:	d008      	beq.n	1650 <LEUART_FreezeEnable+0x24>
     * - then enables freeze before LF sync completed
     * - then modifies the same register again
     * since modifying a register while it is in sync progress should be
     * avoided.
     */
    while (leuart->SYNCBUSY)
    163e:	bf00      	nop
    1640:	9b01      	ldr	r3, [sp, #4]
    1642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1644:	2b00      	cmp	r3, #0
    1646:	d1fb      	bne.n	1640 <LEUART_FreezeEnable+0x14>
      ;

    leuart->FREEZE = LEUART_FREEZE_REGFREEZE;
    1648:	9b01      	ldr	r3, [sp, #4]
    164a:	2201      	movs	r2, #1
    164c:	641a      	str	r2, [r3, #64]	; 0x40
    164e:	e002      	b.n	1656 <LEUART_FreezeEnable+0x2a>
  }
  else
  {
    leuart->FREEZE = 0;
    1650:	9b01      	ldr	r3, [sp, #4]
    1652:	2200      	movs	r2, #0
    1654:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
    1656:	b002      	add	sp, #8
    1658:	4770      	bx	lr
    165a:	bf00      	nop

0000165c <LEUART_Init>:
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void LEUART_Init(LEUART_TypeDef *leuart, LEUART_Init_TypeDef const *init)
{
    165c:	b500      	push	{lr}
    165e:	b083      	sub	sp, #12
    1660:	9001      	str	r0, [sp, #4]
    1662:	9100      	str	r1, [sp, #0]
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
    1664:	9a01      	ldr	r2, [sp, #4]
    1666:	4b1d      	ldr	r3, [pc, #116]	; (16dc <LEUART_Init+0x80>)
    1668:	429a      	cmp	r2, r3
    166a:	d008      	beq.n	167e <LEUART_Init+0x22>
    166c:	9a01      	ldr	r2, [sp, #4]
    166e:	4b1c      	ldr	r3, [pc, #112]	; (16e0 <LEUART_Init+0x84>)
    1670:	429a      	cmp	r2, r3
    1672:	d004      	beq.n	167e <LEUART_Init+0x22>
    1674:	481b      	ldr	r0, [pc, #108]	; (16e4 <LEUART_Init+0x88>)
    1676:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    167a:	f7fe fe4b 	bl	314 <assertEFM>

  /* LF register about to be modified require sync. busy check */
  LEUART_Sync(leuart, LEUART_SYNCBUSY_CMD);
    167e:	9801      	ldr	r0, [sp, #4]
    1680:	2102      	movs	r1, #2
    1682:	f7ff ff67 	bl	1554 <LEUART_Sync>

  /* Ensure disabled while doing config */
  leuart->CMD = LEUART_CMD_RXDIS | LEUART_CMD_TXDIS;
    1686:	9b01      	ldr	r3, [sp, #4]
    1688:	220a      	movs	r2, #10
    168a:	605a      	str	r2, [r3, #4]

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);
    168c:	9801      	ldr	r0, [sp, #4]
    168e:	2101      	movs	r1, #1
    1690:	f7ff ffcc 	bl	162c <LEUART_FreezeEnable>

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
    1694:	9b01      	ldr	r3, [sp, #4]
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	f023 021c 	bic.w	r2, r3, #28
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
    169c:	9b00      	ldr	r3, [sp, #0]
    169e:	7b1b      	ldrb	r3, [r3, #12]
  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
                                   _LEUART_CTRL_STOPBITS_MASK)) |
    16a0:	431a      	orrs	r2, r3
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
    16a2:	9b00      	ldr	r3, [sp, #0]
    16a4:	7b5b      	ldrb	r3, [r3, #13]
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
    16a6:	431a      	orrs	r2, r3
                 (uint32_t)(init->parity) |
                 (uint32_t)(init->stopbits);
    16a8:	9b00      	ldr	r3, [sp, #0]
    16aa:	7b9b      	ldrb	r3, [r3, #14]

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
    16ac:	431a      	orrs	r2, r3

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
    16ae:	9b01      	ldr	r3, [sp, #4]
    16b0:	601a      	str	r2, [r3, #0]
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
                 (uint32_t)(init->stopbits);

  /* Configure baudrate */
  LEUART_BaudrateSet(leuart, init->refFreq, init->baudrate);
    16b2:	9b00      	ldr	r3, [sp, #0]
    16b4:	685a      	ldr	r2, [r3, #4]
    16b6:	9b00      	ldr	r3, [sp, #0]
    16b8:	689b      	ldr	r3, [r3, #8]
    16ba:	9801      	ldr	r0, [sp, #4]
    16bc:	4611      	mov	r1, r2
    16be:	461a      	mov	r2, r3
    16c0:	f7ff ff5c 	bl	157c <LEUART_BaudrateSet>

  /* Finally enable (as specified) */
  leuart->CMD = (uint32_t)(init->enable);
    16c4:	9b00      	ldr	r3, [sp, #0]
    16c6:	781b      	ldrb	r3, [r3, #0]
    16c8:	461a      	mov	r2, r3
    16ca:	9b01      	ldr	r3, [sp, #4]
    16cc:	605a      	str	r2, [r3, #4]

  /* Unfreeze registers, pass new settings on to LEUART */
  LEUART_FreezeEnable(leuart, false);
    16ce:	9801      	ldr	r0, [sp, #4]
    16d0:	2100      	movs	r1, #0
    16d2:	f7ff ffab 	bl	162c <LEUART_FreezeEnable>
}
    16d6:	b003      	add	sp, #12
    16d8:	f85d fb04 	ldr.w	pc, [sp], #4
    16dc:	40084000 	.word	0x40084000
    16e0:	40084400 	.word	0x40084400
    16e4:	0000a284 	.word	0x0000a284

000016e8 <LEUART_Reset>:
 *
 * @param[in] leuart
 *   Pointer to LEUART peripheral register block.
 ******************************************************************************/
void LEUART_Reset(LEUART_TypeDef *leuart)
{
    16e8:	b500      	push	{lr}
    16ea:	b083      	sub	sp, #12
    16ec:	9001      	str	r0, [sp, #4]
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
    16ee:	9a01      	ldr	r2, [sp, #4]
    16f0:	4b19      	ldr	r3, [pc, #100]	; (1758 <LEUART_Reset+0x70>)
    16f2:	429a      	cmp	r2, r3
    16f4:	d008      	beq.n	1708 <LEUART_Reset+0x20>
    16f6:	9a01      	ldr	r2, [sp, #4]
    16f8:	4b18      	ldr	r3, [pc, #96]	; (175c <LEUART_Reset+0x74>)
    16fa:	429a      	cmp	r2, r3
    16fc:	d004      	beq.n	1708 <LEUART_Reset+0x20>
    16fe:	4818      	ldr	r0, [pc, #96]	; (1760 <LEUART_Reset+0x78>)
    1700:	f240 11f3 	movw	r1, #499	; 0x1f3
    1704:	f7fe fe06 	bl	314 <assertEFM>

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);
    1708:	9801      	ldr	r0, [sp, #4]
    170a:	2101      	movs	r1, #1
    170c:	f7ff ff8e 	bl	162c <LEUART_FreezeEnable>

  /* Make sure disabled first, before resetting other registers */
  leuart->CMD = LEUART_CMD_RXDIS | LEUART_CMD_TXDIS | LEUART_CMD_RXBLOCKDIS |
    1710:	9b01      	ldr	r3, [sp, #4]
    1712:	22ea      	movs	r2, #234	; 0xea
    1714:	605a      	str	r2, [r3, #4]
                LEUART_CMD_CLEARTX | LEUART_CMD_CLEARRX;
  leuart->CTRL       = _LEUART_CTRL_RESETVALUE;
    1716:	9b01      	ldr	r3, [sp, #4]
    1718:	2200      	movs	r2, #0
    171a:	601a      	str	r2, [r3, #0]
  leuart->CLKDIV     = _LEUART_CLKDIV_RESETVALUE;
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	2200      	movs	r2, #0
    1720:	60da      	str	r2, [r3, #12]
  leuart->STARTFRAME = _LEUART_STARTFRAME_RESETVALUE;
    1722:	9b01      	ldr	r3, [sp, #4]
    1724:	2200      	movs	r2, #0
    1726:	611a      	str	r2, [r3, #16]
  leuart->SIGFRAME   = _LEUART_SIGFRAME_RESETVALUE;
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	2200      	movs	r2, #0
    172c:	615a      	str	r2, [r3, #20]
  leuart->IEN        = _LEUART_IEN_RESETVALUE;
    172e:	9b01      	ldr	r3, [sp, #4]
    1730:	2200      	movs	r2, #0
    1732:	639a      	str	r2, [r3, #56]	; 0x38
  leuart->IFC        = _LEUART_IFC_MASK;
    1734:	9b01      	ldr	r3, [sp, #4]
    1736:	f240 72f9 	movw	r2, #2041	; 0x7f9
    173a:	635a      	str	r2, [r3, #52]	; 0x34
  leuart->PULSECTRL  = _LEUART_PULSECTRL_RESETVALUE;
    173c:	9b01      	ldr	r3, [sp, #4]
    173e:	2200      	movs	r2, #0
    1740:	63da      	str	r2, [r3, #60]	; 0x3c
  leuart->ROUTE      = _LEUART_ROUTE_RESETVALUE;
    1742:	9b01      	ldr	r3, [sp, #4]
    1744:	2200      	movs	r2, #0
    1746:	655a      	str	r2, [r3, #84]	; 0x54

  /* Unfreeze registers, pass new settings on to LEUART */
  LEUART_FreezeEnable(leuart, false);
    1748:	9801      	ldr	r0, [sp, #4]
    174a:	2100      	movs	r1, #0
    174c:	f7ff ff6e 	bl	162c <LEUART_FreezeEnable>
}
    1750:	b003      	add	sp, #12
    1752:	f85d fb04 	ldr.w	pc, [sp], #4
    1756:	bf00      	nop
    1758:	40084000 	.word	0x40084000
    175c:	40084400 	.word	0x40084400
    1760:	0000a284 	.word	0x0000a284

00001764 <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
    1764:	b086      	sub	sp, #24
    1766:	9003      	str	r0, [sp, #12]
    1768:	9102      	str	r1, [sp, #8]
    176a:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    176c:	9b03      	ldr	r3, [sp, #12]
    176e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    1772:	00da      	lsls	r2, r3, #3
    1774:	9b02      	ldr	r3, [sp, #8]
    1776:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    1778:	009b      	lsls	r3, r3, #2
    177a:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
    177c:	9b05      	ldr	r3, [sp, #20]
    177e:	9a01      	ldr	r2, [sp, #4]
    1780:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
    1782:	b006      	add	sp, #24
    1784:	4770      	bx	lr
    1786:	bf00      	nop

00001788 <I2C_BusFreqSet>:
 ******************************************************************************/
void I2C_BusFreqSet(I2C_TypeDef *i2c,
                    uint32_t refFreq,
                    uint32_t freq,
                    I2C_ClockHLR_TypeDef type)
{
    1788:	b500      	push	{lr}
    178a:	b087      	sub	sp, #28
    178c:	9003      	str	r0, [sp, #12]
    178e:	9102      	str	r1, [sp, #8]
    1790:	9201      	str	r2, [sp, #4]
    1792:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t n;
  uint32_t div;

  /* Avoid divide by 0 */
  EFM_ASSERT(freq);
    1796:	9b01      	ldr	r3, [sp, #4]
    1798:	2b00      	cmp	r3, #0
    179a:	d103      	bne.n	17a4 <I2C_BusFreqSet+0x1c>
    179c:	4822      	ldr	r0, [pc, #136]	; (1828 <I2C_BusFreqSet+0xa0>)
    179e:	21db      	movs	r1, #219	; 0xdb
    17a0:	f7fe fdb8 	bl	314 <assertEFM>
  if (!freq)
    17a4:	9b01      	ldr	r3, [sp, #4]
    17a6:	2b00      	cmp	r3, #0
    17a8:	d100      	bne.n	17ac <I2C_BusFreqSet+0x24>
  {
    return;
    17aa:	e03a      	b.n	1822 <I2C_BusFreqSet+0x9a>
  }

  /* Set the CLHR (clock low to high ratio). */
  i2c->CTRL &= ~_I2C_CTRL_CLHR_MASK;
    17ac:	9b03      	ldr	r3, [sp, #12]
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    17b4:	9b03      	ldr	r3, [sp, #12]
    17b6:	601a      	str	r2, [r3, #0]
  i2c->CTRL |= type <<_I2C_CTRL_CLHR_SHIFT;
    17b8:	9b03      	ldr	r3, [sp, #12]
    17ba:	681a      	ldr	r2, [r3, #0]
    17bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17c0:	021b      	lsls	r3, r3, #8
    17c2:	431a      	orrs	r2, r3
    17c4:	9b03      	ldr	r3, [sp, #12]
    17c6:	601a      	str	r2, [r3, #0]

  /* Frequency is given by fSCL = fHFPERCLK/((Nlow + Nhigh)(DIV + 1) + 4), thus */
  /* DIV = ((fHFPERCLK - 4fSCL)/((Nlow + Nhigh)fSCL)) - 1 */

  if (!refFreq)
    17c8:	9b02      	ldr	r3, [sp, #8]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d103      	bne.n	17d6 <I2C_BusFreqSet+0x4e>
  {
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    17ce:	4817      	ldr	r0, [pc, #92]	; (182c <I2C_BusFreqSet+0xa4>)
    17d0:	f7ff f810 	bl	7f4 <CMU_ClockFreqGet>
    17d4:	9002      	str	r0, [sp, #8]
  }
  n = (uint32_t)(i2cNSum[type]);
    17d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    17da:	4a15      	ldr	r2, [pc, #84]	; (1830 <I2C_BusFreqSet+0xa8>)
    17dc:	5cd3      	ldrb	r3, [r2, r3]
    17de:	9304      	str	r3, [sp, #16]

  div = (refFreq - (4 * freq)) / (n * freq);
    17e0:	9b01      	ldr	r3, [sp, #4]
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	9a02      	ldr	r2, [sp, #8]
    17e6:	1ad2      	subs	r2, r2, r3
    17e8:	9b04      	ldr	r3, [sp, #16]
    17ea:	9901      	ldr	r1, [sp, #4]
    17ec:	fb01 f303 	mul.w	r3, r1, r3
    17f0:	fbb2 f3f3 	udiv	r3, r2, r3
    17f4:	9305      	str	r3, [sp, #20]

  /* Clock divisor must be at least 1 in slave mode according to reference */
  /* manual (in which case there is normally no need to set bus frequency). */
  if ((i2c->CTRL & I2C_CTRL_SLAVE) && !div)
    17f6:	9b03      	ldr	r3, [sp, #12]
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	f003 0302 	and.w	r3, r3, #2
    17fe:	2b00      	cmp	r3, #0
    1800:	d004      	beq.n	180c <I2C_BusFreqSet+0x84>
    1802:	9b05      	ldr	r3, [sp, #20]
    1804:	2b00      	cmp	r3, #0
    1806:	d101      	bne.n	180c <I2C_BusFreqSet+0x84>
  {
    div = 1;
    1808:	2301      	movs	r3, #1
    180a:	9305      	str	r3, [sp, #20]
  }

  EFM_ASSERT(div <= _I2C_CLKDIV_DIV_MASK);
    180c:	9b05      	ldr	r3, [sp, #20]
    180e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1812:	d303      	bcc.n	181c <I2C_BusFreqSet+0x94>
    1814:	4804      	ldr	r0, [pc, #16]	; (1828 <I2C_BusFreqSet+0xa0>)
    1816:	21f7      	movs	r1, #247	; 0xf7
    1818:	f7fe fd7c 	bl	314 <assertEFM>
  i2c->CLKDIV = div;
    181c:	9b03      	ldr	r3, [sp, #12]
    181e:	9a05      	ldr	r2, [sp, #20]
    1820:	611a      	str	r2, [r3, #16]
}
    1822:	b007      	add	sp, #28
    1824:	f85d fb04 	ldr.w	pc, [sp], #4
    1828:	0000a2a4 	.word	0x0000a2a4
    182c:	00028110 	.word	0x00028110
    1830:	0000a2a0 	.word	0x0000a2a0

00001834 <I2C_Init>:
 *
 * @param[in] init
 *   Pointer to I2C initialization structure.
 ******************************************************************************/
void I2C_Init(I2C_TypeDef *i2c, const I2C_Init_TypeDef *init)
{
    1834:	b500      	push	{lr}
    1836:	b083      	sub	sp, #12
    1838:	9001      	str	r0, [sp, #4]
    183a:	9100      	str	r1, [sp, #0]
  EFM_ASSERT(I2C_REF_VALID(i2c));
    183c:	9a01      	ldr	r2, [sp, #4]
    183e:	4b17      	ldr	r3, [pc, #92]	; (189c <I2C_Init+0x68>)
    1840:	429a      	cmp	r2, r3
    1842:	d004      	beq.n	184e <I2C_Init+0x1a>
    1844:	4816      	ldr	r0, [pc, #88]	; (18a0 <I2C_Init+0x6c>)
    1846:	f240 111d 	movw	r1, #285	; 0x11d
    184a:	f7fe fd63 	bl	314 <assertEFM>

  i2c->IEN = 0;
    184e:	9b01      	ldr	r3, [sp, #4]
    1850:	2200      	movs	r2, #0
    1852:	635a      	str	r2, [r3, #52]	; 0x34
  i2c->IFC = _I2C_IFC_MASK;
    1854:	9b01      	ldr	r3, [sp, #4]
    1856:	4a13      	ldr	r2, [pc, #76]	; (18a4 <I2C_Init+0x70>)
    1858:	631a      	str	r2, [r3, #48]	; 0x30

  BITBAND_Peripheral(&(i2c->CTRL),
    185a:	9a01      	ldr	r2, [sp, #4]
                     _I2C_CTRL_SLAVE_SHIFT,
                     init->master? 0 : 1);
    185c:	9b00      	ldr	r3, [sp, #0]
    185e:	785b      	ldrb	r3, [r3, #1]
  EFM_ASSERT(I2C_REF_VALID(i2c));

  i2c->IEN = 0;
  i2c->IFC = _I2C_IFC_MASK;

  BITBAND_Peripheral(&(i2c->CTRL),
    1860:	2b00      	cmp	r3, #0
    1862:	d001      	beq.n	1868 <I2C_Init+0x34>
    1864:	2300      	movs	r3, #0
    1866:	e000      	b.n	186a <I2C_Init+0x36>
    1868:	2301      	movs	r3, #1
    186a:	4610      	mov	r0, r2
    186c:	2101      	movs	r1, #1
    186e:	461a      	mov	r2, r3
    1870:	f7ff ff78 	bl	1764 <BITBAND_Peripheral>
                     _I2C_CTRL_SLAVE_SHIFT,
                     init->master? 0 : 1);

  I2C_BusFreqSet(i2c, init->refFreq, init->freq, init->clhr);
    1874:	9b00      	ldr	r3, [sp, #0]
    1876:	6859      	ldr	r1, [r3, #4]
    1878:	9b00      	ldr	r3, [sp, #0]
    187a:	689a      	ldr	r2, [r3, #8]
    187c:	9b00      	ldr	r3, [sp, #0]
    187e:	7b1b      	ldrb	r3, [r3, #12]
    1880:	9801      	ldr	r0, [sp, #4]
    1882:	f7ff ff81 	bl	1788 <I2C_BusFreqSet>

  BITBAND_Peripheral(&(i2c->CTRL),
    1886:	9a01      	ldr	r2, [sp, #4]
                     _I2C_CTRL_EN_SHIFT,
                     (unsigned int)(init->enable));
    1888:	9b00      	ldr	r3, [sp, #0]
    188a:	781b      	ldrb	r3, [r3, #0]
                     _I2C_CTRL_SLAVE_SHIFT,
                     init->master? 0 : 1);

  I2C_BusFreqSet(i2c, init->refFreq, init->freq, init->clhr);

  BITBAND_Peripheral(&(i2c->CTRL),
    188c:	4610      	mov	r0, r2
    188e:	2100      	movs	r1, #0
    1890:	461a      	mov	r2, r3
    1892:	f7ff ff67 	bl	1764 <BITBAND_Peripheral>
                     _I2C_CTRL_EN_SHIFT,
                     (unsigned int)(init->enable));
}
    1896:	b003      	add	sp, #12
    1898:	f85d fb04 	ldr.w	pc, [sp], #4
    189c:	4000a000 	.word	0x4000a000
    18a0:	0000a2a4 	.word	0x0000a2a4
    18a4:	0001ffcf 	.word	0x0001ffcf

000018a8 <I2C_Transfer>:
 *   @li #i2cTransferDone - transfer completed successfully.
 *   @li otherwise some sort of error has occurred.
 *
 ******************************************************************************/
I2C_TransferReturn_TypeDef I2C_Transfer(I2C_TypeDef *i2c)
{
    18a8:	b500      	push	{lr}
    18aa:	b089      	sub	sp, #36	; 0x24
    18ac:	9001      	str	r0, [sp, #4]
  uint32_t                tmp;
  uint32_t                pending;
  I2C_Transfer_TypeDef    *transfer;
  I2C_TransferSeq_TypeDef *seq;

  EFM_ASSERT(I2C_REF_VALID(i2c));
    18ae:	9a01      	ldr	r2, [sp, #4]
    18b0:	4b99      	ldr	r3, [pc, #612]	; (1b18 <I2C_Transfer+0x270>)
    18b2:	429a      	cmp	r2, r3
    18b4:	d004      	beq.n	18c0 <I2C_Transfer+0x18>
    18b6:	4899      	ldr	r0, [pc, #612]	; (1b1c <I2C_Transfer+0x274>)
    18b8:	f44f 71b8 	mov.w	r1, #368	; 0x170
    18bc:	f7fe fd2a 	bl	314 <assertEFM>

  /* Support up to 2 I2C buses */
  if (i2c == I2C0)
    18c0:	9a01      	ldr	r2, [sp, #4]
    18c2:	4b95      	ldr	r3, [pc, #596]	; (1b18 <I2C_Transfer+0x270>)
    18c4:	429a      	cmp	r2, r3
    18c6:	d105      	bne.n	18d4 <I2C_Transfer+0x2c>
  {
    transfer = i2cTransfer;
    18c8:	4b95      	ldr	r3, [pc, #596]	; (1b20 <I2C_Transfer+0x278>)
    18ca:	9306      	str	r3, [sp, #24]
  else
  {
    return(i2cTransferUsageFault);
  }

  seq = transfer->seq;
    18cc:	9b06      	ldr	r3, [sp, #24]
    18ce:	689b      	ldr	r3, [r3, #8]
    18d0:	9305      	str	r3, [sp, #20]
    18d2:	e001      	b.n	18d8 <I2C_Transfer+0x30>
    transfer = i2cTransfer + 1;
  }
#endif
  else
  {
    return(i2cTransferUsageFault);
    18d4:	23fc      	movs	r3, #252	; 0xfc
    18d6:	e1fd      	b.n	1cd4 <I2C_Transfer+0x42c>
  }

  seq = transfer->seq;
  for (;; )
  {
    pending = i2c->IF;
    18d8:	9b01      	ldr	r3, [sp, #4]
    18da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18dc:	9304      	str	r3, [sp, #16]

    /* If some sort of fault, abort transfer. */
    if (pending & I2C_IF_ERRORS)
    18de:	9b04      	ldr	r3, [sp, #16]
    18e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    18e4:	2b00      	cmp	r3, #0
    18e6:	d014      	beq.n	1912 <I2C_Transfer+0x6a>
    {
      if (pending & I2C_IF_ARBLOST)
    18e8:	9b04      	ldr	r3, [sp, #16]
    18ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
    18ee:	2b00      	cmp	r3, #0
    18f0:	d003      	beq.n	18fa <I2C_Transfer+0x52>
      {
        /* If arbitration fault, it indicates either a slave device */
        /* not responding as expected, or other master which is not */
        /* supported by this SW. */
        transfer->result = i2cTransferArbLost;
    18f2:	9b06      	ldr	r3, [sp, #24]
    18f4:	22fd      	movs	r2, #253	; 0xfd
    18f6:	705a      	strb	r2, [r3, #1]
    18f8:	e007      	b.n	190a <I2C_Transfer+0x62>
      }
      else if (pending & I2C_IF_BUSERR)
    18fa:	9b04      	ldr	r3, [sp, #16]
    18fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1900:	2b00      	cmp	r3, #0
    1902:	d002      	beq.n	190a <I2C_Transfer+0x62>
      {
        /* A bus error indicates a misplaced start or stop, which should */
        /* not occur in master mode controlled by this SW. */
        transfer->result = i2cTransferBusErr;
    1904:	9b06      	ldr	r3, [sp, #24]
    1906:	22fe      	movs	r2, #254	; 0xfe
    1908:	705a      	strb	r2, [r3, #1]
      }

      /* If error situation occurred, it is difficult to know */
      /* exact cause and how to resolve. It will be up to a wrapper */
      /* to determine how to handle a fault/recovery if possible. */
      transfer->state = i2cStateDone;
    190a:	9b06      	ldr	r3, [sp, #24]
    190c:	2209      	movs	r2, #9
    190e:	701a      	strb	r2, [r3, #0]
      goto done;
    1910:	e1cc      	b.n	1cac <I2C_Transfer+0x404>
    }

    switch (transfer->state)
    1912:	9b06      	ldr	r3, [sp, #24]
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	2b08      	cmp	r3, #8
    1918:	f200 81c0 	bhi.w	1c9c <I2C_Transfer+0x3f4>
    191c:	a201      	add	r2, pc, #4	; (adr r2, 1924 <I2C_Transfer+0x7c>)
    191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1922:	bf00      	nop
    1924:	00001949 	.word	0x00001949
    1928:	0000199b 	.word	0x0000199b
    192c:	00001a21 	.word	0x00001a21
    1930:	00001a73 	.word	0x00001a73
    1934:	00001ac5 	.word	0x00001ac5
    1938:	00001b25 	.word	0x00001b25
    193c:	00001bad 	.word	0x00001bad
    1940:	00001beb 	.word	0x00001beb
    1944:	00001c81 	.word	0x00001c81
    {
    /***************************************************/
    /* Send first start+address (first byte if 10 bit) */
    /***************************************************/
    case i2cStateStartAddrSend:
      if (seq->flags & I2C_FLAG_10BIT_ADDR)
    1948:	9b05      	ldr	r3, [sp, #20]
    194a:	885b      	ldrh	r3, [r3, #2]
    194c:	f003 0310 	and.w	r3, r3, #16
    1950:	2b00      	cmp	r3, #0
    1952:	d009      	beq.n	1968 <I2C_Transfer+0xc0>
      {
        tmp = (((uint32_t)(seq->addr) >> 8) & 0x06) | 0xf0;
    1954:	9b05      	ldr	r3, [sp, #20]
    1956:	881b      	ldrh	r3, [r3, #0]
    1958:	0a1b      	lsrs	r3, r3, #8
    195a:	b29b      	uxth	r3, r3
    195c:	f003 0306 	and.w	r3, r3, #6
    1960:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1964:	9307      	str	r3, [sp, #28]
    1966:	e00e      	b.n	1986 <I2C_Transfer+0xde>
        /* In 10 bit address mode, the address following the first */
        /* start always indicate write. */
      }
      else
      {
        tmp = (uint32_t)(seq->addr) & 0xfe;
    1968:	9b05      	ldr	r3, [sp, #20]
    196a:	881b      	ldrh	r3, [r3, #0]
    196c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1970:	9307      	str	r3, [sp, #28]

        if (seq->flags & I2C_FLAG_READ)
    1972:	9b05      	ldr	r3, [sp, #20]
    1974:	885b      	ldrh	r3, [r3, #2]
    1976:	f003 0302 	and.w	r3, r3, #2
    197a:	2b00      	cmp	r3, #0
    197c:	d003      	beq.n	1986 <I2C_Transfer+0xde>
        {
          /* Indicate read request */
          tmp |= 1;
    197e:	9b07      	ldr	r3, [sp, #28]
    1980:	f043 0301 	orr.w	r3, r3, #1
    1984:	9307      	str	r3, [sp, #28]
        }
      }

      transfer->state = i2cStateAddrWFAckNack;
    1986:	9b06      	ldr	r3, [sp, #24]
    1988:	2201      	movs	r2, #1
    198a:	701a      	strb	r2, [r3, #0]
      i2c->TXDATA     = tmp; /* Data not transmitted until START sent */
    198c:	9b01      	ldr	r3, [sp, #4]
    198e:	9a07      	ldr	r2, [sp, #28]
    1990:	625a      	str	r2, [r3, #36]	; 0x24
      i2c->CMD        = I2C_CMD_START;
    1992:	9b01      	ldr	r3, [sp, #4]
    1994:	2201      	movs	r2, #1
    1996:	605a      	str	r2, [r3, #4]
      goto done;
    1998:	e188      	b.n	1cac <I2C_Transfer+0x404>

    /*******************************************************/
    /* Wait for ACK/NACK on address (first byte if 10 bit) */
    /*******************************************************/
    case i2cStateAddrWFAckNack:
      if (pending & I2C_IF_NACK)
    199a:	9b04      	ldr	r3, [sp, #16]
    199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    19a0:	2b00      	cmp	r3, #0
    19a2:	d00c      	beq.n	19be <I2C_Transfer+0x116>
      {
        i2c->IFC         = I2C_IFC_NACK;
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	2280      	movs	r2, #128	; 0x80
    19a8:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->result = i2cTransferNack;
    19aa:	9b06      	ldr	r3, [sp, #24]
    19ac:	22ff      	movs	r2, #255	; 0xff
    19ae:	705a      	strb	r2, [r3, #1]
        transfer->state  = i2cStateWFStopSent;
    19b0:	9b06      	ldr	r3, [sp, #24]
    19b2:	2208      	movs	r2, #8
    19b4:	701a      	strb	r2, [r3, #0]
        i2c->CMD         = I2C_CMD_STOP;
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	2202      	movs	r2, #2
    19ba:	605a      	str	r2, [r3, #4]
    19bc:	e02f      	b.n	1a1e <I2C_Transfer+0x176>
      }
      else if (pending & I2C_IF_ACK)
    19be:	9b04      	ldr	r3, [sp, #16]
    19c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    19c4:	2b00      	cmp	r3, #0
    19c6:	d02a      	beq.n	1a1e <I2C_Transfer+0x176>
      {
        i2c->IFC = I2C_IFC_ACK;
    19c8:	9b01      	ldr	r3, [sp, #4]
    19ca:	2240      	movs	r2, #64	; 0x40
    19cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* If 10 bit address, send 2nd byte of address. */
        if (seq->flags & I2C_FLAG_10BIT_ADDR)
    19ce:	9b05      	ldr	r3, [sp, #20]
    19d0:	885b      	ldrh	r3, [r3, #2]
    19d2:	f003 0310 	and.w	r3, r3, #16
    19d6:	2b00      	cmp	r3, #0
    19d8:	d008      	beq.n	19ec <I2C_Transfer+0x144>
        {
          transfer->state = i2cStateAddrWF2ndAckNack;
    19da:	9b06      	ldr	r3, [sp, #24]
    19dc:	2202      	movs	r2, #2
    19de:	701a      	strb	r2, [r3, #0]
          i2c->TXDATA     = (uint32_t)(seq->addr) & 0xff;
    19e0:	9b05      	ldr	r3, [sp, #20]
    19e2:	881b      	ldrh	r3, [r3, #0]
    19e4:	b2da      	uxtb	r2, r3
    19e6:	9b01      	ldr	r3, [sp, #4]
    19e8:	625a      	str	r2, [r3, #36]	; 0x24
    19ea:	e018      	b.n	1a1e <I2C_Transfer+0x176>
        }
        else
        {
          /* Determine whether receiving or sending data */
          if (seq->flags & I2C_FLAG_READ)
    19ec:	9b05      	ldr	r3, [sp, #20]
    19ee:	885b      	ldrh	r3, [r3, #2]
    19f0:	f003 0302 	and.w	r3, r3, #2
    19f4:	2b00      	cmp	r3, #0
    19f6:	d00e      	beq.n	1a16 <I2C_Transfer+0x16e>
          {
            transfer->state = i2cStateWFData;
    19f8:	9b06      	ldr	r3, [sp, #24]
    19fa:	2207      	movs	r2, #7
    19fc:	701a      	strb	r2, [r3, #0]
            if(seq->buf[transfer->bufIndx].len==1)
    19fe:	9b06      	ldr	r3, [sp, #24]
    1a00:	791b      	ldrb	r3, [r3, #4]
    1a02:	9a05      	ldr	r2, [sp, #20]
    1a04:	00db      	lsls	r3, r3, #3
    1a06:	4413      	add	r3, r2
    1a08:	891b      	ldrh	r3, [r3, #8]
    1a0a:	2b01      	cmp	r3, #1
    1a0c:	d107      	bne.n	1a1e <I2C_Transfer+0x176>
            {
              i2c->CMD  = I2C_CMD_NACK;
    1a0e:	9b01      	ldr	r3, [sp, #4]
    1a10:	2208      	movs	r2, #8
    1a12:	605a      	str	r2, [r3, #4]
            transfer->state = i2cStateDataSend;
            continue;
          }
        }
      }
      goto done;
    1a14:	e14a      	b.n	1cac <I2C_Transfer+0x404>
              i2c->CMD  = I2C_CMD_NACK;
            }
          }
          else
          {
            transfer->state = i2cStateDataSend;
    1a16:	9b06      	ldr	r3, [sp, #24]
    1a18:	2205      	movs	r2, #5
    1a1a:	701a      	strb	r2, [r3, #0]
            continue;
    1a1c:	e145      	b.n	1caa <I2C_Transfer+0x402>
          }
        }
      }
      goto done;
    1a1e:	e145      	b.n	1cac <I2C_Transfer+0x404>

    /******************************************************/
    /* Wait for ACK/NACK on second byte of 10 bit address */
    /******************************************************/
    case i2cStateAddrWF2ndAckNack:
      if (pending & I2C_IF_NACK)
    1a20:	9b04      	ldr	r3, [sp, #16]
    1a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1a26:	2b00      	cmp	r3, #0
    1a28:	d00c      	beq.n	1a44 <I2C_Transfer+0x19c>
      {
        i2c->IFC         = I2C_IFC_NACK;
    1a2a:	9b01      	ldr	r3, [sp, #4]
    1a2c:	2280      	movs	r2, #128	; 0x80
    1a2e:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->result = i2cTransferNack;
    1a30:	9b06      	ldr	r3, [sp, #24]
    1a32:	22ff      	movs	r2, #255	; 0xff
    1a34:	705a      	strb	r2, [r3, #1]
        transfer->state  = i2cStateWFStopSent;
    1a36:	9b06      	ldr	r3, [sp, #24]
    1a38:	2208      	movs	r2, #8
    1a3a:	701a      	strb	r2, [r3, #0]
        i2c->CMD         = I2C_CMD_STOP;
    1a3c:	9b01      	ldr	r3, [sp, #4]
    1a3e:	2202      	movs	r2, #2
    1a40:	605a      	str	r2, [r3, #4]
    1a42:	e015      	b.n	1a70 <I2C_Transfer+0x1c8>
      }
      else if (pending & I2C_IF_ACK)
    1a44:	9b04      	ldr	r3, [sp, #16]
    1a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d010      	beq.n	1a70 <I2C_Transfer+0x1c8>
      {
        i2c->IFC = I2C_IFC_ACK;
    1a4e:	9b01      	ldr	r3, [sp, #4]
    1a50:	2240      	movs	r2, #64	; 0x40
    1a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* If using plain read sequence with 10 bit address, switch to send */
        /* repeated start. */
        if (seq->flags & I2C_FLAG_READ)
    1a54:	9b05      	ldr	r3, [sp, #20]
    1a56:	885b      	ldrh	r3, [r3, #2]
    1a58:	f003 0302 	and.w	r3, r3, #2
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d003      	beq.n	1a68 <I2C_Transfer+0x1c0>
        {
          transfer->state = i2cStateRStartAddrSend;
    1a60:	9b06      	ldr	r3, [sp, #24]
    1a62:	2203      	movs	r2, #3
    1a64:	701a      	strb	r2, [r3, #0]
        /* Otherwise expected to write 0 or more bytes */
        else
        {
          transfer->state = i2cStateDataSend;
        }
        continue;
    1a66:	e120      	b.n	1caa <I2C_Transfer+0x402>
          transfer->state = i2cStateRStartAddrSend;
        }
        /* Otherwise expected to write 0 or more bytes */
        else
        {
          transfer->state = i2cStateDataSend;
    1a68:	9b06      	ldr	r3, [sp, #24]
    1a6a:	2205      	movs	r2, #5
    1a6c:	701a      	strb	r2, [r3, #0]
        }
        continue;
    1a6e:	e11c      	b.n	1caa <I2C_Transfer+0x402>
      }
      goto done;
    1a70:	e11c      	b.n	1cac <I2C_Transfer+0x404>

    /*******************************/
    /* Send repeated start+address */
    /*******************************/
    case i2cStateRStartAddrSend:
      if (seq->flags & I2C_FLAG_10BIT_ADDR)
    1a72:	9b05      	ldr	r3, [sp, #20]
    1a74:	885b      	ldrh	r3, [r3, #2]
    1a76:	f003 0310 	and.w	r3, r3, #16
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d009      	beq.n	1a92 <I2C_Transfer+0x1ea>
      {
        tmp = ((seq->addr >> 8) & 0x06) | 0xf0;
    1a7e:	9b05      	ldr	r3, [sp, #20]
    1a80:	881b      	ldrh	r3, [r3, #0]
    1a82:	0a1b      	lsrs	r3, r3, #8
    1a84:	b29b      	uxth	r3, r3
    1a86:	f003 0306 	and.w	r3, r3, #6
    1a8a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1a8e:	9307      	str	r3, [sp, #28]
    1a90:	e004      	b.n	1a9c <I2C_Transfer+0x1f4>
      }
      else
      {
        tmp = seq->addr & 0xfe;
    1a92:	9b05      	ldr	r3, [sp, #20]
    1a94:	881b      	ldrh	r3, [r3, #0]
    1a96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1a9a:	9307      	str	r3, [sp, #28]
      }

      /* If this is a write+read combined sequence, then read is about to start */
      if (seq->flags & I2C_FLAG_WRITE_READ)
    1a9c:	9b05      	ldr	r3, [sp, #20]
    1a9e:	885b      	ldrh	r3, [r3, #2]
    1aa0:	f003 0304 	and.w	r3, r3, #4
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d003      	beq.n	1ab0 <I2C_Transfer+0x208>
      {
        /* Indicate read request */
        tmp |= 1;
    1aa8:	9b07      	ldr	r3, [sp, #28]
    1aaa:	f043 0301 	orr.w	r3, r3, #1
    1aae:	9307      	str	r3, [sp, #28]
      }

      transfer->state = i2cStateRAddrWFAckNack;
    1ab0:	9b06      	ldr	r3, [sp, #24]
    1ab2:	2204      	movs	r2, #4
    1ab4:	701a      	strb	r2, [r3, #0]
      /* We have to write START cmd first since repeated start, otherwise */
      /* data would be sent first. */
      i2c->CMD    = I2C_CMD_START;
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	2201      	movs	r2, #1
    1aba:	605a      	str	r2, [r3, #4]
      i2c->TXDATA = tmp;
    1abc:	9b01      	ldr	r3, [sp, #4]
    1abe:	9a07      	ldr	r2, [sp, #28]
    1ac0:	625a      	str	r2, [r3, #36]	; 0x24
      goto done;
    1ac2:	e0f3      	b.n	1cac <I2C_Transfer+0x404>

    /**********************************************************************/
    /* Wait for ACK/NACK on repeated start+address (first byte if 10 bit) */
    /**********************************************************************/
    case i2cStateRAddrWFAckNack:
      if (pending & I2C_IF_NACK)
    1ac4:	9b04      	ldr	r3, [sp, #16]
    1ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1aca:	2b00      	cmp	r3, #0
    1acc:	d00c      	beq.n	1ae8 <I2C_Transfer+0x240>
      {
        i2c->IFC         = I2C_IFC_NACK;
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->result = i2cTransferNack;
    1ad4:	9b06      	ldr	r3, [sp, #24]
    1ad6:	22ff      	movs	r2, #255	; 0xff
    1ad8:	705a      	strb	r2, [r3, #1]
        transfer->state  = i2cStateWFStopSent;
    1ada:	9b06      	ldr	r3, [sp, #24]
    1adc:	2208      	movs	r2, #8
    1ade:	701a      	strb	r2, [r3, #0]
        i2c->CMD         = I2C_CMD_STOP;
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	2202      	movs	r2, #2
    1ae4:	605a      	str	r2, [r3, #4]
    1ae6:	e015      	b.n	1b14 <I2C_Transfer+0x26c>
      }
      else if (pending & I2C_IF_ACK)
    1ae8:	9b04      	ldr	r3, [sp, #16]
    1aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1aee:	2b00      	cmp	r3, #0
    1af0:	d010      	beq.n	1b14 <I2C_Transfer+0x26c>
      {
        i2c->IFC = I2C_IFC_ACK;
    1af2:	9b01      	ldr	r3, [sp, #4]
    1af4:	2240      	movs	r2, #64	; 0x40
    1af6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Determine whether receiving or sending data */
        if (seq->flags & I2C_FLAG_WRITE_READ)
    1af8:	9b05      	ldr	r3, [sp, #20]
    1afa:	885b      	ldrh	r3, [r3, #2]
    1afc:	f003 0304 	and.w	r3, r3, #4
    1b00:	2b00      	cmp	r3, #0
    1b02:	d003      	beq.n	1b0c <I2C_Transfer+0x264>
        {
          transfer->state = i2cStateWFData;
    1b04:	9b06      	ldr	r3, [sp, #24]
    1b06:	2207      	movs	r2, #7
    1b08:	701a      	strb	r2, [r3, #0]
    1b0a:	e003      	b.n	1b14 <I2C_Transfer+0x26c>
        }
        else
        {
          transfer->state = i2cStateDataSend;
    1b0c:	9b06      	ldr	r3, [sp, #24]
    1b0e:	2205      	movs	r2, #5
    1b10:	701a      	strb	r2, [r3, #0]
          continue;
    1b12:	e0ca      	b.n	1caa <I2C_Transfer+0x402>
        }
      }
      goto done;
    1b14:	e0ca      	b.n	1cac <I2C_Transfer+0x404>
    1b16:	bf00      	nop
    1b18:	4000a000 	.word	0x4000a000
    1b1c:	0000a2a4 	.word	0x0000a2a4
    1b20:	20000a20 	.word	0x20000a20
    /*****************************/
    /* Send a data byte to slave */
    /*****************************/
    case i2cStateDataSend:
      /* Reached end of data buffer? */
      if (transfer->offset >= seq->buf[transfer->bufIndx].len)
    1b24:	9b06      	ldr	r3, [sp, #24]
    1b26:	885a      	ldrh	r2, [r3, #2]
    1b28:	9b06      	ldr	r3, [sp, #24]
    1b2a:	791b      	ldrb	r3, [r3, #4]
    1b2c:	9905      	ldr	r1, [sp, #20]
    1b2e:	00db      	lsls	r3, r3, #3
    1b30:	440b      	add	r3, r1
    1b32:	891b      	ldrh	r3, [r3, #8]
    1b34:	429a      	cmp	r2, r3
    1b36:	d324      	bcc.n	1b82 <I2C_Transfer+0x2da>
      {
        /* Move to next message part */
        transfer->offset = 0;
    1b38:	9b06      	ldr	r3, [sp, #24]
    1b3a:	2200      	movs	r2, #0
    1b3c:	805a      	strh	r2, [r3, #2]
        transfer->bufIndx++;
    1b3e:	9b06      	ldr	r3, [sp, #24]
    1b40:	791b      	ldrb	r3, [r3, #4]
    1b42:	3301      	adds	r3, #1
    1b44:	b2da      	uxtb	r2, r3
    1b46:	9b06      	ldr	r3, [sp, #24]
    1b48:	711a      	strb	r2, [r3, #4]

        /* Send repeated start when switching to read mode on 2nd buffer */
        if (seq->flags & I2C_FLAG_WRITE_READ)
    1b4a:	9b05      	ldr	r3, [sp, #20]
    1b4c:	885b      	ldrh	r3, [r3, #2]
    1b4e:	f003 0304 	and.w	r3, r3, #4
    1b52:	2b00      	cmp	r3, #0
    1b54:	d003      	beq.n	1b5e <I2C_Transfer+0x2b6>
        {
          transfer->state = i2cStateRStartAddrSend;
    1b56:	9b06      	ldr	r3, [sp, #24]
    1b58:	2203      	movs	r2, #3
    1b5a:	701a      	strb	r2, [r3, #0]
          continue;
    1b5c:	e0a5      	b.n	1caa <I2C_Transfer+0x402>
        }

        /* Only writing from one buffer, or finished both buffers */
        if ((seq->flags & I2C_FLAG_WRITE) || (transfer->bufIndx > 1))
    1b5e:	9b05      	ldr	r3, [sp, #20]
    1b60:	885b      	ldrh	r3, [r3, #2]
    1b62:	f003 0301 	and.w	r3, r3, #1
    1b66:	2b00      	cmp	r3, #0
    1b68:	d103      	bne.n	1b72 <I2C_Transfer+0x2ca>
    1b6a:	9b06      	ldr	r3, [sp, #24]
    1b6c:	791b      	ldrb	r3, [r3, #4]
    1b6e:	2b01      	cmp	r3, #1
    1b70:	d906      	bls.n	1b80 <I2C_Transfer+0x2d8>
        {
          transfer->state = i2cStateWFStopSent;
    1b72:	9b06      	ldr	r3, [sp, #24]
    1b74:	2208      	movs	r2, #8
    1b76:	701a      	strb	r2, [r3, #0]
          i2c->CMD        = I2C_CMD_STOP;
    1b78:	9b01      	ldr	r3, [sp, #4]
    1b7a:	2202      	movs	r2, #2
    1b7c:	605a      	str	r2, [r3, #4]
          goto done;
    1b7e:	e095      	b.n	1cac <I2C_Transfer+0x404>
        }

        /* Reprocess in case next buffer is empty */
        continue;
    1b80:	e093      	b.n	1caa <I2C_Transfer+0x402>
      }

      /* Send byte */
      i2c->TXDATA     = (uint32_t)(seq->buf[transfer->bufIndx].data[transfer->offset++]);
    1b82:	9b06      	ldr	r3, [sp, #24]
    1b84:	791b      	ldrb	r3, [r3, #4]
    1b86:	9a05      	ldr	r2, [sp, #20]
    1b88:	00db      	lsls	r3, r3, #3
    1b8a:	4413      	add	r3, r2
    1b8c:	685a      	ldr	r2, [r3, #4]
    1b8e:	9b06      	ldr	r3, [sp, #24]
    1b90:	885b      	ldrh	r3, [r3, #2]
    1b92:	1c59      	adds	r1, r3, #1
    1b94:	b288      	uxth	r0, r1
    1b96:	9906      	ldr	r1, [sp, #24]
    1b98:	8048      	strh	r0, [r1, #2]
    1b9a:	4413      	add	r3, r2
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	461a      	mov	r2, r3
    1ba0:	9b01      	ldr	r3, [sp, #4]
    1ba2:	625a      	str	r2, [r3, #36]	; 0x24
      transfer->state = i2cStateDataWFAckNack;
    1ba4:	9b06      	ldr	r3, [sp, #24]
    1ba6:	2206      	movs	r2, #6
    1ba8:	701a      	strb	r2, [r3, #0]
      goto done;
    1baa:	e07f      	b.n	1cac <I2C_Transfer+0x404>

    /*********************************************************/
    /* Wait for ACK/NACK from slave after sending data to it */
    /*********************************************************/
    case i2cStateDataWFAckNack:
      if (pending & I2C_IF_NACK)
    1bac:	9b04      	ldr	r3, [sp, #16]
    1bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d00c      	beq.n	1bd0 <I2C_Transfer+0x328>
      {
        i2c->IFC         = I2C_IFC_NACK;
    1bb6:	9b01      	ldr	r3, [sp, #4]
    1bb8:	2280      	movs	r2, #128	; 0x80
    1bba:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->result = i2cTransferNack;
    1bbc:	9b06      	ldr	r3, [sp, #24]
    1bbe:	22ff      	movs	r2, #255	; 0xff
    1bc0:	705a      	strb	r2, [r3, #1]
        transfer->state  = i2cStateWFStopSent;
    1bc2:	9b06      	ldr	r3, [sp, #24]
    1bc4:	2208      	movs	r2, #8
    1bc6:	701a      	strb	r2, [r3, #0]
        i2c->CMD         = I2C_CMD_STOP;
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	2202      	movs	r2, #2
    1bcc:	605a      	str	r2, [r3, #4]
    1bce:	e00b      	b.n	1be8 <I2C_Transfer+0x340>
      }
      else if (pending & I2C_IF_ACK)
    1bd0:	9b04      	ldr	r3, [sp, #16]
    1bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d006      	beq.n	1be8 <I2C_Transfer+0x340>
      {
        i2c->IFC        = I2C_IFC_ACK;
    1bda:	9b01      	ldr	r3, [sp, #4]
    1bdc:	2240      	movs	r2, #64	; 0x40
    1bde:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->state = i2cStateDataSend;
    1be0:	9b06      	ldr	r3, [sp, #24]
    1be2:	2205      	movs	r2, #5
    1be4:	701a      	strb	r2, [r3, #0]
        continue;
    1be6:	e060      	b.n	1caa <I2C_Transfer+0x402>
      }
      goto done;
    1be8:	e060      	b.n	1cac <I2C_Transfer+0x404>

    /****************************/
    /* Wait for data from slave */
    /****************************/
    case i2cStateWFData:
      if (pending & I2C_IF_RXDATAV)
    1bea:	9b04      	ldr	r3, [sp, #16]
    1bec:	f003 0320 	and.w	r3, r3, #32
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d044      	beq.n	1c7e <I2C_Transfer+0x3d6>
      {
        uint8_t       data;
        unsigned int  rxLen = seq->buf[transfer->bufIndx].len;
    1bf4:	9b06      	ldr	r3, [sp, #24]
    1bf6:	791b      	ldrb	r3, [r3, #4]
    1bf8:	9a05      	ldr	r2, [sp, #20]
    1bfa:	00db      	lsls	r3, r3, #3
    1bfc:	4413      	add	r3, r2
    1bfe:	891b      	ldrh	r3, [r3, #8]
    1c00:	9303      	str	r3, [sp, #12]

        /* Must read out data in order to not block further progress */
        data = (uint8_t)(i2c->RXDATA);
    1c02:	9b01      	ldr	r3, [sp, #4]
    1c04:	69db      	ldr	r3, [r3, #28]
    1c06:	f88d 300b 	strb.w	r3, [sp, #11]

        /* Make sure not storing beyond end of buffer just in case */
        if (transfer->offset < rxLen)
    1c0a:	9b06      	ldr	r3, [sp, #24]
    1c0c:	885b      	ldrh	r3, [r3, #2]
    1c0e:	461a      	mov	r2, r3
    1c10:	9b03      	ldr	r3, [sp, #12]
    1c12:	429a      	cmp	r2, r3
    1c14:	d20f      	bcs.n	1c36 <I2C_Transfer+0x38e>
        {
          seq->buf[transfer->bufIndx].data[transfer->offset++] = data;
    1c16:	9b06      	ldr	r3, [sp, #24]
    1c18:	791b      	ldrb	r3, [r3, #4]
    1c1a:	9a05      	ldr	r2, [sp, #20]
    1c1c:	00db      	lsls	r3, r3, #3
    1c1e:	4413      	add	r3, r2
    1c20:	685a      	ldr	r2, [r3, #4]
    1c22:	9b06      	ldr	r3, [sp, #24]
    1c24:	885b      	ldrh	r3, [r3, #2]
    1c26:	1c59      	adds	r1, r3, #1
    1c28:	b288      	uxth	r0, r1
    1c2a:	9906      	ldr	r1, [sp, #24]
    1c2c:	8048      	strh	r0, [r1, #2]
    1c2e:	4413      	add	r3, r2
    1c30:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1c34:	701a      	strb	r2, [r3, #0]
        }

        /* If we have read all requested data, then the sequence should end */
        if (transfer->offset >= rxLen)
    1c36:	9b06      	ldr	r3, [sp, #24]
    1c38:	885b      	ldrh	r3, [r3, #2]
    1c3a:	461a      	mov	r2, r3
    1c3c:	9b03      	ldr	r3, [sp, #12]
    1c3e:	429a      	cmp	r2, r3
    1c40:	d30c      	bcc.n	1c5c <I2C_Transfer+0x3b4>
        {
          /* If there is only one byte to receive we need to transmit the
             NACK now, before the stop. */
          if (1 == rxLen)
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	2b01      	cmp	r3, #1
    1c46:	d102      	bne.n	1c4e <I2C_Transfer+0x3a6>
          {
            i2c->CMD  = I2C_CMD_NACK;
    1c48:	9b01      	ldr	r3, [sp, #4]
    1c4a:	2208      	movs	r2, #8
    1c4c:	605a      	str	r2, [r3, #4]
          }
            
          transfer->state = i2cStateWFStopSent;
    1c4e:	9b06      	ldr	r3, [sp, #24]
    1c50:	2208      	movs	r2, #8
    1c52:	701a      	strb	r2, [r3, #0]
          i2c->CMD        = I2C_CMD_STOP;
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	2202      	movs	r2, #2
    1c58:	605a      	str	r2, [r3, #4]
    1c5a:	e010      	b.n	1c7e <I2C_Transfer+0x3d6>
        }
        else
        {
          /* Send ACK and wait for next byte */
          i2c->CMD = I2C_CMD_ACK;
    1c5c:	9b01      	ldr	r3, [sp, #4]
    1c5e:	2204      	movs	r2, #4
    1c60:	605a      	str	r2, [r3, #4]

          if ( (1<rxLen) && (transfer->offset == (rxLen-1)) )
    1c62:	9b03      	ldr	r3, [sp, #12]
    1c64:	2b01      	cmp	r3, #1
    1c66:	d90a      	bls.n	1c7e <I2C_Transfer+0x3d6>
    1c68:	9b06      	ldr	r3, [sp, #24]
    1c6a:	885b      	ldrh	r3, [r3, #2]
    1c6c:	461a      	mov	r2, r3
    1c6e:	9b03      	ldr	r3, [sp, #12]
    1c70:	3b01      	subs	r3, #1
    1c72:	429a      	cmp	r2, r3
    1c74:	d103      	bne.n	1c7e <I2C_Transfer+0x3d6>
          {
            /* If there is more than one byte to receive and this is the next
               to last byte we need to transmit the NACK now, before receiving
               the last byte. */
            i2c->CMD  = I2C_CMD_NACK;
    1c76:	9b01      	ldr	r3, [sp, #4]
    1c78:	2208      	movs	r2, #8
    1c7a:	605a      	str	r2, [r3, #4]
          }
        }
      }
      goto done;
    1c7c:	e016      	b.n	1cac <I2C_Transfer+0x404>
    1c7e:	e015      	b.n	1cac <I2C_Transfer+0x404>

    /***********************************/
    /* Wait for STOP to have been sent */
    /***********************************/
    case i2cStateWFStopSent:
      if (pending & I2C_IF_MSTOP)
    1c80:	9b04      	ldr	r3, [sp, #16]
    1c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1c86:	2b00      	cmp	r3, #0
    1c88:	d007      	beq.n	1c9a <I2C_Transfer+0x3f2>
      {
        i2c->IFC        = I2C_IFC_MSTOP;
    1c8a:	9b01      	ldr	r3, [sp, #4]
    1c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
    1c90:	631a      	str	r2, [r3, #48]	; 0x30
        transfer->state = i2cStateDone;
    1c92:	9b06      	ldr	r3, [sp, #24]
    1c94:	2209      	movs	r2, #9
    1c96:	701a      	strb	r2, [r3, #0]
      }
      goto done;
    1c98:	e008      	b.n	1cac <I2C_Transfer+0x404>
    1c9a:	e007      	b.n	1cac <I2C_Transfer+0x404>

    /******************************/
    /* Unexpected state, SW fault */
    /******************************/
    default:
      transfer->result = i2cTransferSwFault;
    1c9c:	9b06      	ldr	r3, [sp, #24]
    1c9e:	22fb      	movs	r2, #251	; 0xfb
    1ca0:	705a      	strb	r2, [r3, #1]
      transfer->state  = i2cStateDone;
    1ca2:	9b06      	ldr	r3, [sp, #24]
    1ca4:	2209      	movs	r2, #9
    1ca6:	701a      	strb	r2, [r3, #0]
      goto done;
    1ca8:	e000      	b.n	1cac <I2C_Transfer+0x404>
    }
  }
    1caa:	e615      	b.n	18d8 <I2C_Transfer+0x30>

 done:

  if (transfer->state == i2cStateDone)
    1cac:	9b06      	ldr	r3, [sp, #24]
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	2b09      	cmp	r3, #9
    1cb2:	d10b      	bne.n	1ccc <I2C_Transfer+0x424>
  {
    /* Disable interrupt sources when done */
    i2c->IEN = 0;
    1cb4:	9b01      	ldr	r3, [sp, #4]
    1cb6:	2200      	movs	r2, #0
    1cb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Update result unless some fault already occurred */
    if (transfer->result == i2cTransferInProgress)
    1cba:	9b06      	ldr	r3, [sp, #24]
    1cbc:	785b      	ldrb	r3, [r3, #1]
    1cbe:	b25b      	sxtb	r3, r3
    1cc0:	2b01      	cmp	r3, #1
    1cc2:	d105      	bne.n	1cd0 <I2C_Transfer+0x428>
    {
      transfer->result = i2cTransferDone;
    1cc4:	9b06      	ldr	r3, [sp, #24]
    1cc6:	2200      	movs	r2, #0
    1cc8:	705a      	strb	r2, [r3, #1]
    1cca:	e001      	b.n	1cd0 <I2C_Transfer+0x428>
    }
  }
  /* Until transfer is done keep returning i2cTransferInProgress */
  else
  {
    return(i2cTransferInProgress);
    1ccc:	2301      	movs	r3, #1
    1cce:	e001      	b.n	1cd4 <I2C_Transfer+0x42c>
  }

  return transfer->result;
    1cd0:	9b06      	ldr	r3, [sp, #24]
    1cd2:	785b      	ldrb	r3, [r3, #1]
    1cd4:	b25b      	sxtb	r3, r3
}
    1cd6:	4618      	mov	r0, r3
    1cd8:	b009      	add	sp, #36	; 0x24
    1cda:	f85d fb04 	ldr.w	pc, [sp], #4
    1cde:	bf00      	nop

00001ce0 <I2C_TransferInit>:
 *   @li #i2cTransferInProgress - indicates that transfer not finished.
 *   @li otherwise some sort of error has occurred.
 ******************************************************************************/
I2C_TransferReturn_TypeDef I2C_TransferInit(I2C_TypeDef *i2c,
                                            I2C_TransferSeq_TypeDef *seq)
{
    1ce0:	b500      	push	{lr}
    1ce2:	b085      	sub	sp, #20
    1ce4:	9001      	str	r0, [sp, #4]
    1ce6:	9100      	str	r1, [sp, #0]
  I2C_Transfer_TypeDef *transfer;

  EFM_ASSERT(I2C_REF_VALID(i2c));
    1ce8:	9a01      	ldr	r2, [sp, #4]
    1cea:	4b31      	ldr	r3, [pc, #196]	; (1db0 <I2C_TransferInit+0xd0>)
    1cec:	429a      	cmp	r2, r3
    1cee:	d004      	beq.n	1cfa <I2C_TransferInit+0x1a>
    1cf0:	4830      	ldr	r0, [pc, #192]	; (1db4 <I2C_TransferInit+0xd4>)
    1cf2:	f240 21e9 	movw	r1, #745	; 0x2e9
    1cf6:	f7fe fb0d 	bl	314 <assertEFM>
  EFM_ASSERT(seq);
    1cfa:	9b00      	ldr	r3, [sp, #0]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d104      	bne.n	1d0a <I2C_TransferInit+0x2a>
    1d00:	482c      	ldr	r0, [pc, #176]	; (1db4 <I2C_TransferInit+0xd4>)
    1d02:	f240 21ea 	movw	r1, #746	; 0x2ea
    1d06:	f7fe fb05 	bl	314 <assertEFM>

  /* Support up to 2 I2C buses */
  if (i2c == I2C0)
    1d0a:	9a01      	ldr	r2, [sp, #4]
    1d0c:	4b28      	ldr	r3, [pc, #160]	; (1db0 <I2C_TransferInit+0xd0>)
    1d0e:	429a      	cmp	r2, r3
    1d10:	d108      	bne.n	1d24 <I2C_TransferInit+0x44>
  {
    transfer = i2cTransfer;
    1d12:	4b29      	ldr	r3, [pc, #164]	; (1db8 <I2C_TransferInit+0xd8>)
    1d14:	9303      	str	r3, [sp, #12]
    return(i2cTransferUsageFault);
  }

  /* Check if in busy state. Since this SW assumes single master, we can */
  /* just issue an abort. The BUSY state is normal after a reset. */
  if (i2c->STATE & I2C_STATE_BUSY)
    1d16:	9b01      	ldr	r3, [sp, #4]
    1d18:	689b      	ldr	r3, [r3, #8]
    1d1a:	f003 0301 	and.w	r3, r3, #1
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d005      	beq.n	1d2e <I2C_TransferInit+0x4e>
    1d22:	e001      	b.n	1d28 <I2C_TransferInit+0x48>
    transfer = i2cTransfer + 1;
  }
#endif
  else
  {
    return(i2cTransferUsageFault);
    1d24:	23fc      	movs	r3, #252	; 0xfc
    1d26:	e03d      	b.n	1da4 <I2C_TransferInit+0xc4>

  /* Check if in busy state. Since this SW assumes single master, we can */
  /* just issue an abort. The BUSY state is normal after a reset. */
  if (i2c->STATE & I2C_STATE_BUSY)
  {
    i2c->CMD = I2C_CMD_ABORT;
    1d28:	9b01      	ldr	r3, [sp, #4]
    1d2a:	2220      	movs	r2, #32
    1d2c:	605a      	str	r2, [r3, #4]

  /* Make sure user is not trying to read 0 bytes, it is not */
  /* possible according to I2C spec, since slave will always start */
  /* sending first byte ACK on address. The read operation can */
  /* only be stopped by NACKing a received byte, ie minimum 1 byte. */
  if (((seq->flags & I2C_FLAG_READ) && !(seq->buf[0].len)) ||
    1d2e:	9b00      	ldr	r3, [sp, #0]
    1d30:	885b      	ldrh	r3, [r3, #2]
    1d32:	f003 0302 	and.w	r3, r3, #2
    1d36:	2b00      	cmp	r3, #0
    1d38:	d003      	beq.n	1d42 <I2C_TransferInit+0x62>
    1d3a:	9b00      	ldr	r3, [sp, #0]
    1d3c:	891b      	ldrh	r3, [r3, #8]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d009      	beq.n	1d56 <I2C_TransferInit+0x76>
      ((seq->flags & I2C_FLAG_WRITE_READ) && !(seq->buf[1].len))
    1d42:	9b00      	ldr	r3, [sp, #0]
    1d44:	885b      	ldrh	r3, [r3, #2]
    1d46:	f003 0304 	and.w	r3, r3, #4

  /* Make sure user is not trying to read 0 bytes, it is not */
  /* possible according to I2C spec, since slave will always start */
  /* sending first byte ACK on address. The read operation can */
  /* only be stopped by NACKing a received byte, ie minimum 1 byte. */
  if (((seq->flags & I2C_FLAG_READ) && !(seq->buf[0].len)) ||
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d005      	beq.n	1d5a <I2C_TransferInit+0x7a>
      ((seq->flags & I2C_FLAG_WRITE_READ) && !(seq->buf[1].len))
    1d4e:	9b00      	ldr	r3, [sp, #0]
    1d50:	8a1b      	ldrh	r3, [r3, #16]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d101      	bne.n	1d5a <I2C_TransferInit+0x7a>
      )
  {
    return(i2cTransferUsageFault);
    1d56:	23fc      	movs	r3, #252	; 0xfc
    1d58:	e024      	b.n	1da4 <I2C_TransferInit+0xc4>
  }

  /* Prepare for a transfer */
  transfer->state   = i2cStateStartAddrSend;
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	2200      	movs	r2, #0
    1d5e:	701a      	strb	r2, [r3, #0]
  transfer->result  = i2cTransferInProgress;
    1d60:	9b03      	ldr	r3, [sp, #12]
    1d62:	2201      	movs	r2, #1
    1d64:	705a      	strb	r2, [r3, #1]
  transfer->offset  = 0;
    1d66:	9b03      	ldr	r3, [sp, #12]
    1d68:	2200      	movs	r2, #0
    1d6a:	805a      	strh	r2, [r3, #2]
  transfer->bufIndx = 0;
    1d6c:	9b03      	ldr	r3, [sp, #12]
    1d6e:	2200      	movs	r2, #0
    1d70:	711a      	strb	r2, [r3, #4]
  transfer->seq     = seq;
    1d72:	9b03      	ldr	r3, [sp, #12]
    1d74:	9a00      	ldr	r2, [sp, #0]
    1d76:	609a      	str	r2, [r3, #8]

  /* Ensure buffers are empty */
  i2c->CMD = I2C_CMD_CLEARPC | I2C_CMD_CLEARTX;
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	22c0      	movs	r2, #192	; 0xc0
    1d7c:	605a      	str	r2, [r3, #4]
  if (i2c->IF & I2C_IF_RXDATAV)
    1d7e:	9b01      	ldr	r3, [sp, #4]
    1d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d82:	f003 0320 	and.w	r3, r3, #32
    1d86:	2b00      	cmp	r3, #0
    1d88:	d001      	beq.n	1d8e <I2C_TransferInit+0xae>
  {
    i2c->RXDATA;
    1d8a:	9b01      	ldr	r3, [sp, #4]
    1d8c:	69db      	ldr	r3, [r3, #28]
  }

  /* Clear all pending interrupts prior to starting transfer. */
  i2c->IFC = _I2C_IFC_MASK;
    1d8e:	9b01      	ldr	r3, [sp, #4]
    1d90:	4a0a      	ldr	r2, [pc, #40]	; (1dbc <I2C_TransferInit+0xdc>)
    1d92:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable those interrupts we are interested in throughout transfer. */
  /* Notice that the I2C interrupt must also be enabled in the NVIC, but */
  /* that is left for an additional driver wrapper. */
  i2c->IEN = I2C_IF_NACK | I2C_IF_ACK | I2C_IF_MSTOP |
    1d94:	9b01      	ldr	r3, [sp, #4]
    1d96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
    1d9a:	635a      	str	r2, [r3, #52]	; 0x34
             I2C_IF_RXDATAV | I2C_IF_ERRORS;

  /* Start transfer */
  return(I2C_Transfer(i2c));
    1d9c:	9801      	ldr	r0, [sp, #4]
    1d9e:	f7ff fd83 	bl	18a8 <I2C_Transfer>
    1da2:	4603      	mov	r3, r0
    1da4:	b25b      	sxtb	r3, r3
}
    1da6:	4618      	mov	r0, r3
    1da8:	b005      	add	sp, #20
    1daa:	f85d fb04 	ldr.w	pc, [sp], #4
    1dae:	bf00      	nop
    1db0:	4000a000 	.word	0x4000a000
    1db4:	0000a2a4 	.word	0x0000a2a4
    1db8:	20000a20 	.word	0x20000a20
    1dbc:	0001ffcf 	.word	0x0001ffcf

00001dc0 <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
    1dc0:	b086      	sub	sp, #24
    1dc2:	9003      	str	r0, [sp, #12]
    1dc4:	9102      	str	r1, [sp, #8]
    1dc6:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    1dc8:	9b03      	ldr	r3, [sp, #12]
    1dca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    1dce:	00da      	lsls	r2, r3, #3
    1dd0:	9b02      	ldr	r3, [sp, #8]
    1dd2:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    1dd4:	009b      	lsls	r3, r3, #2
    1dd6:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
    1dd8:	9b05      	ldr	r3, [sp, #20]
    1dda:	9a01      	ldr	r2, [sp, #4]
    1ddc:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
    1dde:	b006      	add	sp, #24
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop

00001de4 <RTC_Sync>:
 * @param[in] mask
 *   Bitmask corresponding to SYNCBUSY register defined bits, indicating
 *   registers that must complete any ongoing synchronization.
 ******************************************************************************/
__STATIC_INLINE void RTC_Sync(uint32_t mask)
{
    1de4:	b082      	sub	sp, #8
    1de6:	9001      	str	r0, [sp, #4]
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (RTC->FREEZE & RTC_FREEZE_REGFREEZE)
    1de8:	4b07      	ldr	r3, [pc, #28]	; (1e08 <RTC_Sync+0x24>)
    1dea:	6a1b      	ldr	r3, [r3, #32]
    1dec:	f003 0301 	and.w	r3, r3, #1
    1df0:	2b00      	cmp	r3, #0
    1df2:	d000      	beq.n	1df6 <RTC_Sync+0x12>
    return;
    1df4:	e006      	b.n	1e04 <RTC_Sync+0x20>

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain. This is only required for the Gecko Family */
  while (RTC->SYNCBUSY & mask)
    1df6:	bf00      	nop
    1df8:	4b03      	ldr	r3, [pc, #12]	; (1e08 <RTC_Sync+0x24>)
    1dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1dfc:	9b01      	ldr	r3, [sp, #4]
    1dfe:	4013      	ands	r3, r2
    1e00:	2b00      	cmp	r3, #0
    1e02:	d1f9      	bne.n	1df8 <RTC_Sync+0x14>
    ;
}
    1e04:	b002      	add	sp, #8
    1e06:	4770      	bx	lr
    1e08:	40080000 	.word	0x40080000

00001e0c <RTC_CompareSet>:
 *
 * @param[in] value
 *   Initialization value (<= 0x00ffffff)
 ******************************************************************************/
void RTC_CompareSet(unsigned int comp, uint32_t value)
{
    1e0c:	b500      	push	{lr}
    1e0e:	b085      	sub	sp, #20
    1e10:	9001      	str	r0, [sp, #4]
    1e12:	9100      	str	r1, [sp, #0]
  volatile uint32_t *compReg;
#if defined(_EFM32_GECKO_FAMILY)
  uint32_t          syncbusy;
#endif

  EFM_ASSERT(RTC_COMP_REG_VALID(comp) &&
    1e14:	9b01      	ldr	r3, [sp, #4]
    1e16:	2b01      	cmp	r3, #1
    1e18:	d804      	bhi.n	1e24 <RTC_CompareSet+0x18>
    1e1a:	9b00      	ldr	r3, [sp, #0]
    1e1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    1e20:	2b00      	cmp	r3, #0
    1e22:	d003      	beq.n	1e2c <RTC_CompareSet+0x20>
    1e24:	480e      	ldr	r0, [pc, #56]	; (1e60 <RTC_CompareSet+0x54>)
    1e26:	21a6      	movs	r1, #166	; 0xa6
    1e28:	f7fe fa74 	bl	314 <assertEFM>
             ((value & ~(_RTC_COMP0_COMP0_MASK >> _RTC_COMP0_COMP0_SHIFT)) == 0));

  /* Initialize selected compare value */
  switch (comp)
    1e2c:	9b01      	ldr	r3, [sp, #4]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d002      	beq.n	1e38 <RTC_CompareSet+0x2c>
    1e32:	2b01      	cmp	r3, #1
    1e34:	d005      	beq.n	1e42 <RTC_CompareSet+0x36>
#endif
    break;

  default:
    /* Unknown compare register selected, abort */
    return;
    1e36:	e00f      	b.n	1e58 <RTC_CompareSet+0x4c>

  /* Initialize selected compare value */
  switch (comp)
  {
  case 0:
    compReg = &(RTC->COMP0);
    1e38:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <RTC_CompareSet+0x58>)
    1e3a:	9303      	str	r3, [sp, #12]
#if defined(_EFM32_GECKO_FAMILY)
    syncbusy = RTC_SYNCBUSY_COMP0;
    1e3c:	2302      	movs	r3, #2
    1e3e:	9302      	str	r3, [sp, #8]
#endif
    break;
    1e40:	e004      	b.n	1e4c <RTC_CompareSet+0x40>

  case 1:
    compReg = &(RTC->COMP1);
    1e42:	4b09      	ldr	r3, [pc, #36]	; (1e68 <RTC_CompareSet+0x5c>)
    1e44:	9303      	str	r3, [sp, #12]
#if defined(_EFM32_GECKO_FAMILY)
    syncbusy = RTC_SYNCBUSY_COMP1;
    1e46:	2304      	movs	r3, #4
    1e48:	9302      	str	r3, [sp, #8]
#endif
    break;
    1e4a:	bf00      	nop
    /* Unknown compare register selected, abort */
    return;
  }
#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(syncbusy);
    1e4c:	9802      	ldr	r0, [sp, #8]
    1e4e:	f7ff ffc9 	bl	1de4 <RTC_Sync>
#endif

  *compReg = value;
    1e52:	9b03      	ldr	r3, [sp, #12]
    1e54:	9a00      	ldr	r2, [sp, #0]
    1e56:	601a      	str	r2, [r3, #0]
}
    1e58:	b005      	add	sp, #20
    1e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1e5e:	bf00      	nop
    1e60:	0000a2bc 	.word	0x0000a2bc
    1e64:	40080008 	.word	0x40080008
    1e68:	4008000c 	.word	0x4008000c

00001e6c <RTC_Enable>:
 *
 * @param[in] enable
 *   true to enable counting, false to disable.
 ******************************************************************************/
void RTC_Enable(bool enable)
{
    1e6c:	b500      	push	{lr}
    1e6e:	b083      	sub	sp, #12
    1e70:	4603      	mov	r3, r0
    1e72:	f88d 3007 	strb.w	r3, [sp, #7]
#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(RTC_SYNCBUSY_CTRL);
    1e76:	2001      	movs	r0, #1
    1e78:	f7ff ffb4 	bl	1de4 <RTC_Sync>
#endif

  BITBAND_Peripheral(&(RTC->CTRL), _RTC_CTRL_EN_SHIFT, (unsigned int) enable);
    1e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e80:	4803      	ldr	r0, [pc, #12]	; (1e90 <RTC_Enable+0x24>)
    1e82:	2100      	movs	r1, #0
    1e84:	461a      	mov	r2, r3
    1e86:	f7ff ff9b 	bl	1dc0 <BITBAND_Peripheral>
}
    1e8a:	b003      	add	sp, #12
    1e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    1e90:	40080000 	.word	0x40080000

00001e94 <RTC_Init>:
 *
 * @param[in] init
 *   Pointer to RTC initialization structure.
 ******************************************************************************/
void RTC_Init(const RTC_Init_TypeDef *init)
{
    1e94:	b500      	push	{lr}
    1e96:	b085      	sub	sp, #20
    1e98:	9001      	str	r0, [sp, #4]
  uint32_t tmp;

  if (init->enable)
    1e9a:	9b01      	ldr	r3, [sp, #4]
    1e9c:	781b      	ldrb	r3, [r3, #0]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d002      	beq.n	1ea8 <RTC_Init+0x14>
  {
    tmp = RTC_CTRL_EN;
    1ea2:	2301      	movs	r3, #1
    1ea4:	9303      	str	r3, [sp, #12]
    1ea6:	e001      	b.n	1eac <RTC_Init+0x18>
  }
  else
  {
    tmp = 0;
    1ea8:	2300      	movs	r3, #0
    1eaa:	9303      	str	r3, [sp, #12]
  }

  /* Configure DEBUGRUN flag, sets whether or not counter should be
   * updated when debugger is active */
  if (init->debugRun)
    1eac:	9b01      	ldr	r3, [sp, #4]
    1eae:	785b      	ldrb	r3, [r3, #1]
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d003      	beq.n	1ebc <RTC_Init+0x28>
  {
    tmp |= RTC_CTRL_DEBUGRUN;
    1eb4:	9b03      	ldr	r3, [sp, #12]
    1eb6:	f043 0302 	orr.w	r3, r3, #2
    1eba:	9303      	str	r3, [sp, #12]
  }

  /* Configure COMP0TOP, this will use the COMP0 compare value as an
   * overflow value, instead of default 24-bit 0x00ffffff */
  if (init->comp0Top)
    1ebc:	9b01      	ldr	r3, [sp, #4]
    1ebe:	789b      	ldrb	r3, [r3, #2]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d003      	beq.n	1ecc <RTC_Init+0x38>
  {
    tmp |= RTC_CTRL_COMP0TOP;
    1ec4:	9b03      	ldr	r3, [sp, #12]
    1ec6:	f043 0304 	orr.w	r3, r3, #4
    1eca:	9303      	str	r3, [sp, #12]
  }

#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(RTC_SYNCBUSY_CTRL);
    1ecc:	2001      	movs	r0, #1
    1ece:	f7ff ff89 	bl	1de4 <RTC_Sync>
#endif

  RTC->CTRL = tmp;
    1ed2:	4b03      	ldr	r3, [pc, #12]	; (1ee0 <RTC_Init+0x4c>)
    1ed4:	9a03      	ldr	r2, [sp, #12]
    1ed6:	601a      	str	r2, [r3, #0]
}
    1ed8:	b005      	add	sp, #20
    1eda:	f85d fb04 	ldr.w	pc, [sp], #4
    1ede:	bf00      	nop
    1ee0:	40080000 	.word	0x40080000

00001ee4 <ADC_CalibrateLoadSingle>:
 * @param[in] ref
 *   Reference to load calibrated values for. No values are loaded for
 *   external references.
 ******************************************************************************/
static void ADC_CalibrateLoadSingle(ADC_TypeDef *adc, ADC_Ref_TypeDef ref)
{
    1ee4:	b084      	sub	sp, #16
    1ee6:	9001      	str	r0, [sp, #4]
    1ee8:	460b      	mov	r3, r1
    1eea:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t cal;

  /* Load proper calibration data depending on selected reference */
  /* NOTE: We use ...SCAN... defines below, they are the same as */
  /* similar ...SINGLE... defines. */
  switch (ref)
    1eee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ef2:	2b06      	cmp	r3, #6
    1ef4:	f200 808c 	bhi.w	2010 <ADC_CalibrateLoadSingle+0x12c>
    1ef8:	a201      	add	r2, pc, #4	; (adr r2, 1f00 <ADC_CalibrateLoadSingle+0x1c>)
    1efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1efe:	bf00      	nop
    1f00:	00001f1d 	.word	0x00001f1d
    1f04:	00001f4f 	.word	0x00001f4f
    1f08:	00001f87 	.word	0x00001f87
    1f0c:	00001fb9 	.word	0x00001fb9
    1f10:	00002011 	.word	0x00002011
    1f14:	00002011 	.word	0x00002011
    1f18:	00001ff1 	.word	0x00001ff1
  {
  case adcRef1V25:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    1f1c:	9b01      	ldr	r3, [sp, #4]
    1f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    1f24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1f28:	9303      	str	r3, [sp, #12]
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_1V25_GAIN_MASK) >>
    1f2a:	4b3b      	ldr	r3, [pc, #236]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1f2c:	685b      	ldr	r3, [r3, #4]
            _DEVINFO_ADC0CAL0_1V25_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    1f2e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  /* similar ...SINGLE... defines. */
  switch (ref)
  {
  case adcRef1V25:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_1V25_GAIN_MASK) >>
    1f32:	9a03      	ldr	r2, [sp, #12]
    1f34:	4313      	orrs	r3, r2
    1f36:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL0_1V25_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_1V25_OFFSET_MASK) >>
    1f38:	4b37      	ldr	r3, [pc, #220]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1f3a:	685b      	ldr	r3, [r3, #4]
            _DEVINFO_ADC0CAL0_1V25_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    1f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  {
  case adcRef1V25:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_1V25_GAIN_MASK) >>
            _DEVINFO_ADC0CAL0_1V25_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_1V25_OFFSET_MASK) >>
    1f40:	9a03      	ldr	r2, [sp, #12]
    1f42:	4313      	orrs	r3, r2
    1f44:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL0_1V25_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    adc->CAL = cal;
    1f46:	9b01      	ldr	r3, [sp, #4]
    1f48:	9a03      	ldr	r2, [sp, #12]
    1f4a:	635a      	str	r2, [r3, #52]	; 0x34
    break;
    1f4c:	e061      	b.n	2012 <ADC_CalibrateLoadSingle+0x12e>

  case adcRef2V5:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    1f4e:	9b01      	ldr	r3, [sp, #4]
    1f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    1f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1f5a:	9303      	str	r3, [sp, #12]
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_2V5_GAIN_MASK) >>
    1f5c:	4b2e      	ldr	r3, [pc, #184]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1f5e:	685b      	ldr	r3, [r3, #4]
    1f60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
    1f64:	0e1b      	lsrs	r3, r3, #24
            _DEVINFO_ADC0CAL0_2V5_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    1f66:	021b      	lsls	r3, r3, #8
    adc->CAL = cal;
    break;

  case adcRef2V5:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_2V5_GAIN_MASK) >>
    1f68:	9a03      	ldr	r2, [sp, #12]
    1f6a:	4313      	orrs	r3, r2
    1f6c:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL0_2V5_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_2V5_OFFSET_MASK) >>
    1f6e:	4b2a      	ldr	r3, [pc, #168]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1f70:	685b      	ldr	r3, [r3, #4]
    1f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
            _DEVINFO_ADC0CAL0_2V5_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    1f76:	0c1b      	lsrs	r3, r3, #16

  case adcRef2V5:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_2V5_GAIN_MASK) >>
            _DEVINFO_ADC0CAL0_2V5_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL0 & _DEVINFO_ADC0CAL0_2V5_OFFSET_MASK) >>
    1f78:	9a03      	ldr	r2, [sp, #12]
    1f7a:	4313      	orrs	r3, r2
    1f7c:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL0_2V5_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    adc->CAL = cal;
    1f7e:	9b01      	ldr	r3, [sp, #4]
    1f80:	9a03      	ldr	r2, [sp, #12]
    1f82:	635a      	str	r2, [r3, #52]	; 0x34
    break;
    1f84:	e045      	b.n	2012 <ADC_CalibrateLoadSingle+0x12e>

  case adcRefVDD:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    1f86:	9b01      	ldr	r3, [sp, #4]
    1f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    1f8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1f92:	9303      	str	r3, [sp, #12]
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_VDD_GAIN_MASK) >>
    1f94:	4b20      	ldr	r3, [pc, #128]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1f96:	689b      	ldr	r3, [r3, #8]
            _DEVINFO_ADC0CAL1_VDD_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    1f98:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
    adc->CAL = cal;
    break;

  case adcRefVDD:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_VDD_GAIN_MASK) >>
    1f9c:	9a03      	ldr	r2, [sp, #12]
    1f9e:	4313      	orrs	r3, r2
    1fa0:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL1_VDD_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_VDD_OFFSET_MASK) >>
    1fa2:	4b1d      	ldr	r3, [pc, #116]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1fa4:	689b      	ldr	r3, [r3, #8]
            _DEVINFO_ADC0CAL1_VDD_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    1fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  case adcRefVDD:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_VDD_GAIN_MASK) >>
            _DEVINFO_ADC0CAL1_VDD_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_VDD_OFFSET_MASK) >>
    1faa:	9a03      	ldr	r2, [sp, #12]
    1fac:	4313      	orrs	r3, r2
    1fae:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL1_VDD_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    adc->CAL = cal;
    1fb0:	9b01      	ldr	r3, [sp, #4]
    1fb2:	9a03      	ldr	r2, [sp, #12]
    1fb4:	635a      	str	r2, [r3, #52]	; 0x34
    break;
    1fb6:	e02c      	b.n	2012 <ADC_CalibrateLoadSingle+0x12e>

  case adcRef5VDIFF:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    1fb8:	9b01      	ldr	r3, [sp, #4]
    1fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    1fc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1fc4:	9303      	str	r3, [sp, #12]
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_5VDIFF_GAIN_MASK) >>
    1fc6:	4b14      	ldr	r3, [pc, #80]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1fc8:	689b      	ldr	r3, [r3, #8]
    1fca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
    1fce:	0e1b      	lsrs	r3, r3, #24
            _DEVINFO_ADC0CAL1_5VDIFF_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    1fd0:	021b      	lsls	r3, r3, #8
    adc->CAL = cal;
    break;

  case adcRef5VDIFF:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_5VDIFF_GAIN_MASK) >>
    1fd2:	9a03      	ldr	r2, [sp, #12]
    1fd4:	4313      	orrs	r3, r2
    1fd6:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL1_5VDIFF_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_5VDIFF_OFFSET_MASK) >>
    1fd8:	4b0f      	ldr	r3, [pc, #60]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1fda:	689b      	ldr	r3, [r3, #8]
    1fdc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
            _DEVINFO_ADC0CAL1_5VDIFF_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    1fe0:	0c1b      	lsrs	r3, r3, #16

  case adcRef5VDIFF:
    cal  = adc->CAL & ~(_ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEGAIN_MASK);
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_5VDIFF_GAIN_MASK) >>
            _DEVINFO_ADC0CAL1_5VDIFF_GAIN_SHIFT) << _ADC_CAL_SINGLEGAIN_SHIFT;
    cal |= ((DEVINFO->ADC0CAL1 & _DEVINFO_ADC0CAL1_5VDIFF_OFFSET_MASK) >>
    1fe2:	9a03      	ldr	r2, [sp, #12]
    1fe4:	4313      	orrs	r3, r2
    1fe6:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL1_5VDIFF_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    adc->CAL = cal;
    1fe8:	9b01      	ldr	r3, [sp, #4]
    1fea:	9a03      	ldr	r2, [sp, #12]
    1fec:	635a      	str	r2, [r3, #52]	; 0x34
    break;
    1fee:	e010      	b.n	2012 <ADC_CalibrateLoadSingle+0x12e>

  case adcRef2xVDD:
    /* Gain value not of relevance for this reference, leave as is */
    cal  = adc->CAL & ~_ADC_CAL_SINGLEOFFSET_MASK;
    1ff0:	9b01      	ldr	r3, [sp, #4]
    1ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1ff4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1ff8:	9303      	str	r3, [sp, #12]
    cal |= ((DEVINFO->ADC0CAL2 & _DEVINFO_ADC0CAL2_2XVDDVSS_OFFSET_MASK) >>
    1ffa:	4b07      	ldr	r3, [pc, #28]	; (2018 <ADC_CalibrateLoadSingle+0x134>)
    1ffc:	68db      	ldr	r3, [r3, #12]
            _DEVINFO_ADC0CAL2_2XVDDVSS_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    1ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    break;

  case adcRef2xVDD:
    /* Gain value not of relevance for this reference, leave as is */
    cal  = adc->CAL & ~_ADC_CAL_SINGLEOFFSET_MASK;
    cal |= ((DEVINFO->ADC0CAL2 & _DEVINFO_ADC0CAL2_2XVDDVSS_OFFSET_MASK) >>
    2002:	9a03      	ldr	r2, [sp, #12]
    2004:	4313      	orrs	r3, r2
    2006:	9303      	str	r3, [sp, #12]
            _DEVINFO_ADC0CAL2_2XVDDVSS_OFFSET_SHIFT) << _ADC_CAL_SINGLEOFFSET_SHIFT;
    adc->CAL = cal;
    2008:	9b01      	ldr	r3, [sp, #4]
    200a:	9a03      	ldr	r2, [sp, #12]
    200c:	635a      	str	r2, [r3, #52]	; 0x34
    break;
    200e:	e000      	b.n	2012 <ADC_CalibrateLoadSingle+0x12e>

  /* For external references, the calibration must be determined for the */
  /* specific application and set explicitly. */
  default:
    break;
    2010:	bf00      	nop
  }
}
    2012:	b004      	add	sp, #16
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	0fe081b0 	.word	0x0fe081b0

0000201c <ADC_Init>:
 *
 * @param[in] init
 *   Pointer to ADC initialization structure.
 ******************************************************************************/
void ADC_Init(ADC_TypeDef *adc, const ADC_Init_TypeDef *init)
{
    201c:	b500      	push	{lr}
    201e:	b085      	sub	sp, #20
    2020:	9001      	str	r0, [sp, #4]
    2022:	9100      	str	r1, [sp, #0]
  uint32_t tmp;

  EFM_ASSERT(ADC_REF_VALID(adc));
    2024:	9a01      	ldr	r2, [sp, #4]
    2026:	4b18      	ldr	r3, [pc, #96]	; (2088 <ADC_Init+0x6c>)
    2028:	429a      	cmp	r2, r3
    202a:	d004      	beq.n	2036 <ADC_Init+0x1a>
    202c:	4817      	ldr	r0, [pc, #92]	; (208c <ADC_Init+0x70>)
    202e:	f44f 7181 	mov.w	r1, #258	; 0x102
    2032:	f7fe f96f 	bl	314 <assertEFM>

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;
    2036:	9b01      	ldr	r3, [sp, #4]
    2038:	220a      	movs	r2, #10
    203a:	605a      	str	r2, [r3, #4]

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT) |
    203c:	9b00      	ldr	r3, [sp, #0]
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	061a      	lsls	r2, r3, #24
        (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT) & _ADC_CTRL_TIMEBASE_MASK) |
    2042:	9b00      	ldr	r3, [sp, #0]
    2044:	78db      	ldrb	r3, [r3, #3]
    2046:	041b      	lsls	r3, r3, #16
    2048:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  EFM_ASSERT(ADC_REF_VALID(adc));

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT) |
    204c:	431a      	orrs	r2, r3
        (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT) & _ADC_CTRL_TIMEBASE_MASK) |
        (((uint32_t)(init->prescale) << _ADC_CTRL_PRESC_SHIFT) & _ADC_CTRL_PRESC_MASK) |
    204e:	9b00      	ldr	r3, [sp, #0]
    2050:	791b      	ldrb	r3, [r3, #4]
    2052:	021b      	lsls	r3, r3, #8
    2054:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT) |
        (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT) & _ADC_CTRL_TIMEBASE_MASK) |
    2058:	431a      	orrs	r2, r3
        (((uint32_t)(init->prescale) << _ADC_CTRL_PRESC_SHIFT) & _ADC_CTRL_PRESC_MASK) |
        ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT) |
    205a:	9b00      	ldr	r3, [sp, #0]
    205c:	785b      	ldrb	r3, [r3, #1]
    205e:	011b      	lsls	r3, r3, #4
  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT) |
        (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT) & _ADC_CTRL_TIMEBASE_MASK) |
        (((uint32_t)(init->prescale) << _ADC_CTRL_PRESC_SHIFT) & _ADC_CTRL_PRESC_MASK) |
    2060:	431a      	orrs	r2, r3
        ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT) |
        ((uint32_t)(init->warmUpMode) << _ADC_CTRL_WARMUPMODE_SHIFT);
    2062:	9b00      	ldr	r3, [sp, #0]
    2064:	789b      	ldrb	r3, [r3, #2]
  EFM_ASSERT(ADC_REF_VALID(adc));

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT) |
    2066:	4313      	orrs	r3, r2
    2068:	9303      	str	r3, [sp, #12]
        (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT) & _ADC_CTRL_TIMEBASE_MASK) |
        (((uint32_t)(init->prescale) << _ADC_CTRL_PRESC_SHIFT) & _ADC_CTRL_PRESC_MASK) |
        ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT) |
        ((uint32_t)(init->warmUpMode) << _ADC_CTRL_WARMUPMODE_SHIFT);

  if (init->tailgate)
    206a:	9b00      	ldr	r3, [sp, #0]
    206c:	795b      	ldrb	r3, [r3, #5]
    206e:	2b00      	cmp	r3, #0
    2070:	d003      	beq.n	207a <ADC_Init+0x5e>
  {
    tmp |= ADC_CTRL_TAILGATE;
    2072:	9b03      	ldr	r3, [sp, #12]
    2074:	f043 0308 	orr.w	r3, r3, #8
    2078:	9303      	str	r3, [sp, #12]
  }

  adc->CTRL = tmp;
    207a:	9b01      	ldr	r3, [sp, #4]
    207c:	9a03      	ldr	r2, [sp, #12]
    207e:	601a      	str	r2, [r3, #0]
}
    2080:	b005      	add	sp, #20
    2082:	f85d fb04 	ldr.w	pc, [sp], #4
    2086:	bf00      	nop
    2088:	40002000 	.word	0x40002000
    208c:	0000a2d4 	.word	0x0000a2d4

00002090 <ADC_InitSingle>:
 *
 * @param[in] init
 *   Pointer to ADC initialization structure.
 ******************************************************************************/
void ADC_InitSingle(ADC_TypeDef *adc, const ADC_InitSingle_TypeDef *init)
{
    2090:	b500      	push	{lr}
    2092:	b085      	sub	sp, #20
    2094:	9001      	str	r0, [sp, #4]
    2096:	9100      	str	r1, [sp, #0]
  uint32_t tmp;

  EFM_ASSERT(ADC_REF_VALID(adc));
    2098:	9a01      	ldr	r2, [sp, #4]
    209a:	4b25      	ldr	r3, [pc, #148]	; (2130 <ADC_InitSingle+0xa0>)
    209c:	429a      	cmp	r2, r3
    209e:	d004      	beq.n	20aa <ADC_InitSingle+0x1a>
    20a0:	4824      	ldr	r0, [pc, #144]	; (2134 <ADC_InitSingle+0xa4>)
    20a2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    20a6:	f7fe f935 	bl	314 <assertEFM>

  /* Make sure single conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP;
    20aa:	9b01      	ldr	r3, [sp, #4]
    20ac:	2202      	movs	r2, #2
    20ae:	605a      	str	r2, [r3, #4]

  /* Load proper calibration data depending on selected reference */
  ADC_CalibrateLoadSingle(adc, init->reference);
    20b0:	9b00      	ldr	r3, [sp, #0]
    20b2:	789b      	ldrb	r3, [r3, #2]
    20b4:	9801      	ldr	r0, [sp, #4]
    20b6:	4619      	mov	r1, r3
    20b8:	f7ff ff14 	bl	1ee4 <ADC_CalibrateLoadSingle>

  tmp = ((uint32_t)(init->prsSel) << _ADC_SINGLECTRL_PRSSEL_SHIFT) |
    20bc:	9b00      	ldr	r3, [sp, #0]
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	071a      	lsls	r2, r3, #28
        ((uint32_t)(init->acqTime) << _ADC_SINGLECTRL_AT_SHIFT) |
    20c2:	9b00      	ldr	r3, [sp, #0]
    20c4:	785b      	ldrb	r3, [r3, #1]
    20c6:	051b      	lsls	r3, r3, #20
  adc->CMD = ADC_CMD_SINGLESTOP;

  /* Load proper calibration data depending on selected reference */
  ADC_CalibrateLoadSingle(adc, init->reference);

  tmp = ((uint32_t)(init->prsSel) << _ADC_SINGLECTRL_PRSSEL_SHIFT) |
    20c8:	431a      	orrs	r2, r3
        ((uint32_t)(init->acqTime) << _ADC_SINGLECTRL_AT_SHIFT) |
        ((uint32_t)(init->reference) << _ADC_SINGLECTRL_REF_SHIFT) |
    20ca:	9b00      	ldr	r3, [sp, #0]
    20cc:	789b      	ldrb	r3, [r3, #2]
    20ce:	041b      	lsls	r3, r3, #16

  /* Load proper calibration data depending on selected reference */
  ADC_CalibrateLoadSingle(adc, init->reference);

  tmp = ((uint32_t)(init->prsSel) << _ADC_SINGLECTRL_PRSSEL_SHIFT) |
        ((uint32_t)(init->acqTime) << _ADC_SINGLECTRL_AT_SHIFT) |
    20d0:	431a      	orrs	r2, r3
        ((uint32_t)(init->reference) << _ADC_SINGLECTRL_REF_SHIFT) |
        ((uint32_t)(init->input) << _ADC_SINGLECTRL_INPUTSEL_SHIFT) |
    20d2:	9b00      	ldr	r3, [sp, #0]
    20d4:	791b      	ldrb	r3, [r3, #4]
    20d6:	021b      	lsls	r3, r3, #8
  /* Load proper calibration data depending on selected reference */
  ADC_CalibrateLoadSingle(adc, init->reference);

  tmp = ((uint32_t)(init->prsSel) << _ADC_SINGLECTRL_PRSSEL_SHIFT) |
        ((uint32_t)(init->acqTime) << _ADC_SINGLECTRL_AT_SHIFT) |
        ((uint32_t)(init->reference) << _ADC_SINGLECTRL_REF_SHIFT) |
    20d8:	431a      	orrs	r2, r3
        ((uint32_t)(init->input) << _ADC_SINGLECTRL_INPUTSEL_SHIFT) |
        ((uint32_t)(init->resolution) << _ADC_SINGLECTRL_RES_SHIFT);
    20da:	9b00      	ldr	r3, [sp, #0]
    20dc:	78db      	ldrb	r3, [r3, #3]
    20de:	011b      	lsls	r3, r3, #4
  adc->CMD = ADC_CMD_SINGLESTOP;

  /* Load proper calibration data depending on selected reference */
  ADC_CalibrateLoadSingle(adc, init->reference);

  tmp = ((uint32_t)(init->prsSel) << _ADC_SINGLECTRL_PRSSEL_SHIFT) |
    20e0:	4313      	orrs	r3, r2
    20e2:	9303      	str	r3, [sp, #12]
        ((uint32_t)(init->acqTime) << _ADC_SINGLECTRL_AT_SHIFT) |
        ((uint32_t)(init->reference) << _ADC_SINGLECTRL_REF_SHIFT) |
        ((uint32_t)(init->input) << _ADC_SINGLECTRL_INPUTSEL_SHIFT) |
        ((uint32_t)(init->resolution) << _ADC_SINGLECTRL_RES_SHIFT);

  if (init->prsEnable)
    20e4:	9b00      	ldr	r3, [sp, #0]
    20e6:	799b      	ldrb	r3, [r3, #6]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d003      	beq.n	20f4 <ADC_InitSingle+0x64>
  {
    tmp |= ADC_SINGLECTRL_PRSEN;
    20ec:	9b03      	ldr	r3, [sp, #12]
    20ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    20f2:	9303      	str	r3, [sp, #12]
  }

  if (init->leftAdjust)
    20f4:	9b00      	ldr	r3, [sp, #0]
    20f6:	79db      	ldrb	r3, [r3, #7]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d003      	beq.n	2104 <ADC_InitSingle+0x74>
  {
    tmp |= ADC_SINGLECTRL_ADJ_LEFT;
    20fc:	9b03      	ldr	r3, [sp, #12]
    20fe:	f043 0304 	orr.w	r3, r3, #4
    2102:	9303      	str	r3, [sp, #12]
  }

  if (init->diff)
    2104:	9b00      	ldr	r3, [sp, #0]
    2106:	795b      	ldrb	r3, [r3, #5]
    2108:	2b00      	cmp	r3, #0
    210a:	d003      	beq.n	2114 <ADC_InitSingle+0x84>
  {
    tmp |= ADC_SINGLECTRL_DIFF;
    210c:	9b03      	ldr	r3, [sp, #12]
    210e:	f043 0302 	orr.w	r3, r3, #2
    2112:	9303      	str	r3, [sp, #12]
  }

  if (init->rep)
    2114:	9b00      	ldr	r3, [sp, #0]
    2116:	7a1b      	ldrb	r3, [r3, #8]
    2118:	2b00      	cmp	r3, #0
    211a:	d003      	beq.n	2124 <ADC_InitSingle+0x94>
  {
    tmp |= ADC_SINGLECTRL_REP;
    211c:	9b03      	ldr	r3, [sp, #12]
    211e:	f043 0301 	orr.w	r3, r3, #1
    2122:	9303      	str	r3, [sp, #12]
  }

  adc->SINGLECTRL = tmp;
    2124:	9b01      	ldr	r3, [sp, #4]
    2126:	9a03      	ldr	r2, [sp, #12]
    2128:	60da      	str	r2, [r3, #12]
}
    212a:	b005      	add	sp, #20
    212c:	f85d fb04 	ldr.w	pc, [sp], #4
    2130:	40002000 	.word	0x40002000
    2134:	0000a2d4 	.word	0x0000a2d4

00002138 <ADC_PrescaleCalc>:
 * @return
 *   Prescaler value to use for ADC in order to achieve a clock value
 *   <= @p adcFreq.
 ******************************************************************************/
uint8_t ADC_PrescaleCalc(uint32_t adcFreq, uint32_t hfperFreq)
{
    2138:	b500      	push	{lr}
    213a:	b085      	sub	sp, #20
    213c:	9001      	str	r0, [sp, #4]
    213e:	9100      	str	r1, [sp, #0]
  uint32_t ret;

  /* Make sure selected ADC clock is within valid range */
  if (adcFreq > ADC_MAX_CLOCK)
    2140:	9a01      	ldr	r2, [sp, #4]
    2142:	4b14      	ldr	r3, [pc, #80]	; (2194 <ADC_PrescaleCalc+0x5c>)
    2144:	429a      	cmp	r2, r3
    2146:	d902      	bls.n	214e <ADC_PrescaleCalc+0x16>
  {
    adcFreq = ADC_MAX_CLOCK;
    2148:	4b12      	ldr	r3, [pc, #72]	; (2194 <ADC_PrescaleCalc+0x5c>)
    214a:	9301      	str	r3, [sp, #4]
    214c:	e006      	b.n	215c <ADC_PrescaleCalc+0x24>
  }
  else if (adcFreq < ADC_MIN_CLOCK)
    214e:	9b01      	ldr	r3, [sp, #4]
    2150:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    2154:	d202      	bcs.n	215c <ADC_PrescaleCalc+0x24>
  {
    adcFreq = ADC_MIN_CLOCK;
    2156:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
    215a:	9301      	str	r3, [sp, #4]
  }

  /* Use current HFPER frequency? */
  if (!hfperFreq)
    215c:	9b00      	ldr	r3, [sp, #0]
    215e:	2b00      	cmp	r3, #0
    2160:	d103      	bne.n	216a <ADC_PrescaleCalc+0x32>
  {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    2162:	480d      	ldr	r0, [pc, #52]	; (2198 <ADC_PrescaleCalc+0x60>)
    2164:	f7fe fb46 	bl	7f4 <CMU_ClockFreqGet>
    2168:	9000      	str	r0, [sp, #0]
  }

  ret = (hfperFreq + adcFreq - 1) / adcFreq;
    216a:	9a00      	ldr	r2, [sp, #0]
    216c:	9b01      	ldr	r3, [sp, #4]
    216e:	4413      	add	r3, r2
    2170:	1e5a      	subs	r2, r3, #1
    2172:	9b01      	ldr	r3, [sp, #4]
    2174:	fbb2 f3f3 	udiv	r3, r2, r3
    2178:	9303      	str	r3, [sp, #12]
  if (ret)
    217a:	9b03      	ldr	r3, [sp, #12]
    217c:	2b00      	cmp	r3, #0
    217e:	d002      	beq.n	2186 <ADC_PrescaleCalc+0x4e>
  {
    ret--;
    2180:	9b03      	ldr	r3, [sp, #12]
    2182:	3b01      	subs	r3, #1
    2184:	9303      	str	r3, [sp, #12]
  }

  return (uint8_t)ret;
    2186:	9b03      	ldr	r3, [sp, #12]
    2188:	b2db      	uxtb	r3, r3
}
    218a:	4618      	mov	r0, r3
    218c:	b005      	add	sp, #20
    218e:	f85d fb04 	ldr.w	pc, [sp], #4
    2192:	bf00      	nop
    2194:	00c65d40 	.word	0x00c65d40
    2198:	00028110 	.word	0x00028110

0000219c <ADC_TimebaseCalc>:
 *
 * @return
 *   Timebase value to use for ADC in order to achieve at least 1 us.
 ******************************************************************************/
uint8_t ADC_TimebaseCalc(uint32_t hfperFreq)
{
    219c:	b500      	push	{lr}
    219e:	b083      	sub	sp, #12
    21a0:	9001      	str	r0, [sp, #4]
  if (!hfperFreq)
    21a2:	9b01      	ldr	r3, [sp, #4]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d108      	bne.n	21ba <ADC_TimebaseCalc+0x1e>
  {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    21a8:	480e      	ldr	r0, [pc, #56]	; (21e4 <ADC_TimebaseCalc+0x48>)
    21aa:	f7fe fb23 	bl	7f4 <CMU_ClockFreqGet>
    21ae:	9001      	str	r0, [sp, #4]

    /* Just in case, make sure we get non-zero freq for below calculation */
    if (!hfperFreq)
    21b0:	9b01      	ldr	r3, [sp, #4]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d101      	bne.n	21ba <ADC_TimebaseCalc+0x1e>
    {
      hfperFreq = 1;
    21b6:	2301      	movs	r3, #1
    21b8:	9301      	str	r3, [sp, #4]
  {
    hfperFreq = 32000000;
  }
#endif
  /* Determine number of HFPERCLK cycle >= 1us */
  hfperFreq += 999999;
    21ba:	9b01      	ldr	r3, [sp, #4]
    21bc:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    21c0:	f203 233f 	addw	r3, r3, #575	; 0x23f
    21c4:	9301      	str	r3, [sp, #4]
  hfperFreq /= 1000000;
    21c6:	9a01      	ldr	r2, [sp, #4]
    21c8:	4b07      	ldr	r3, [pc, #28]	; (21e8 <ADC_TimebaseCalc+0x4c>)
    21ca:	fba3 1302 	umull	r1, r3, r3, r2
    21ce:	0c9b      	lsrs	r3, r3, #18
    21d0:	9301      	str	r3, [sp, #4]

  /* Return timebase value (N+1 format) */
  return (uint8_t)(hfperFreq - 1);
    21d2:	9b01      	ldr	r3, [sp, #4]
    21d4:	b2db      	uxtb	r3, r3
    21d6:	3b01      	subs	r3, #1
    21d8:	b2db      	uxtb	r3, r3
}
    21da:	4618      	mov	r0, r3
    21dc:	b003      	add	sp, #12
    21de:	f85d fb04 	ldr.w	pc, [sp], #4
    21e2:	bf00      	nop
    21e4:	00028110 	.word	0x00028110
    21e8:	431bde83 	.word	0x431bde83

000021ec <SYSTEM_ChipRevisionGet>:
 *
 * @param[out] rev
 *   Location to place chip revision info.
 ******************************************************************************/
void SYSTEM_ChipRevisionGet(SYSTEM_ChipRevision_TypeDef *rev)
{
    21ec:	b500      	push	{lr}
    21ee:	b085      	sub	sp, #20
    21f0:	9001      	str	r0, [sp, #4]
  uint8_t tmp;

  EFM_ASSERT(rev);
    21f2:	9b01      	ldr	r3, [sp, #4]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d103      	bne.n	2200 <SYSTEM_ChipRevisionGet+0x14>
    21f8:	4812      	ldr	r0, [pc, #72]	; (2244 <SYSTEM_ChipRevisionGet+0x58>)
    21fa:	213e      	movs	r1, #62	; 0x3e
    21fc:	f7fe f88a 	bl	314 <assertEFM>

  rev->major = (ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT;
    2200:	4b11      	ldr	r3, [pc, #68]	; (2248 <SYSTEM_ChipRevisionGet+0x5c>)
    2202:	691b      	ldr	r3, [r3, #16]
    2204:	b2db      	uxtb	r3, r3
    2206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    220a:	b2da      	uxtb	r2, r3
    220c:	9b01      	ldr	r3, [sp, #4]
    220e:	701a      	strb	r2, [r3, #0]

  tmp        = (ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK);
    2210:	4b0d      	ldr	r3, [pc, #52]	; (2248 <SYSTEM_ChipRevisionGet+0x5c>)
    2212:	699b      	ldr	r3, [r3, #24]
    2214:	b2db      	uxtb	r3, r3
    2216:	f023 030f 	bic.w	r3, r3, #15
    221a:	f88d 300f 	strb.w	r3, [sp, #15]
  tmp       |= ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
    221e:	4b0a      	ldr	r3, [pc, #40]	; (2248 <SYSTEM_ChipRevisionGet+0x5c>)
    2220:	69db      	ldr	r3, [r3, #28]
    2222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2226:	091b      	lsrs	r3, r3, #4
    2228:	b2da      	uxtb	r2, r3
    222a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    222e:	4313      	orrs	r3, r2
    2230:	f88d 300f 	strb.w	r3, [sp, #15]
  rev->minor = tmp;
    2234:	9b01      	ldr	r3, [sp, #4]
    2236:	f89d 200f 	ldrb.w	r2, [sp, #15]
    223a:	705a      	strb	r2, [r3, #1]
}
    223c:	b005      	add	sp, #20
    223e:	f85d fb04 	ldr.w	pc, [sp], #4
    2242:	bf00      	nop
    2244:	0000a2ec 	.word	0x0000a2ec
    2248:	e00fffd0 	.word	0xe00fffd0

0000224c <CHIP_Init>:
 * This init function will configure the EFM32 device to a state where it is
 * as similar as later revisions as possible, to improve software compatibility
 * with newer parts. See the device specific errata for details.
 *****************************************************************************/
__STATIC_INLINE void CHIP_Init(void)
{
    224c:	b500      	push	{lr}
    224e:	b085      	sub	sp, #20
#if defined(_EFM32_GECKO_FAMILY)
  uint32_t                    rev;
  SYSTEM_ChipRevision_TypeDef chipRev;
  volatile uint32_t           *reg;

  rev = *(volatile uint32_t *)(0x0FE081FC);
    2250:	4b52      	ldr	r3, [pc, #328]	; (239c <CHIP_Init+0x150>)
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	9303      	str	r3, [sp, #12]
  /* Engineering Sample calibration setup */
  if ((rev >> 24) == 0)
    2256:	9b03      	ldr	r3, [sp, #12]
    2258:	0e1b      	lsrs	r3, r3, #24
    225a:	2b00      	cmp	r3, #0
    225c:	d115      	bne.n	228a <CHIP_Init+0x3e>
  {
    reg   = (volatile uint32_t *)0x400CA00C;
    225e:	4b50      	ldr	r3, [pc, #320]	; (23a0 <CHIP_Init+0x154>)
    2260:	9302      	str	r3, [sp, #8]
    *reg &= ~(0x70UL);
    2262:	9b02      	ldr	r3, [sp, #8]
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
    226a:	9b02      	ldr	r3, [sp, #8]
    226c:	601a      	str	r2, [r3, #0]
    /* DREG */
    reg   = (volatile uint32_t *)0x400C6020;
    226e:	4b4d      	ldr	r3, [pc, #308]	; (23a4 <CHIP_Init+0x158>)
    2270:	9302      	str	r3, [sp, #8]
    *reg &= ~(0xE0000000UL);
    2272:	9b02      	ldr	r3, [sp, #8]
    2274:	681b      	ldr	r3, [r3, #0]
    2276:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
    227a:	9b02      	ldr	r3, [sp, #8]
    227c:	601a      	str	r2, [r3, #0]
    *reg |= ~(7UL << 25);
    227e:	9b02      	ldr	r3, [sp, #8]
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	f063 6260 	orn	r2, r3, #234881024	; 0xe000000
    2286:	9b02      	ldr	r3, [sp, #8]
    2288:	601a      	str	r2, [r3, #0]
  }
  if ((rev >> 24) <= 3)
    228a:	9b03      	ldr	r3, [sp, #12]
    228c:	0e1b      	lsrs	r3, r3, #24
    228e:	2b03      	cmp	r3, #3
    2290:	d820      	bhi.n	22d4 <CHIP_Init+0x88>
  {
    /* DREG */
    reg   = (volatile uint32_t *)0x400C6020;
    2292:	4b44      	ldr	r3, [pc, #272]	; (23a4 <CHIP_Init+0x158>)
    2294:	9302      	str	r3, [sp, #8]
    *reg &= ~(0x00001F80UL);
    2296:	9b02      	ldr	r3, [sp, #8]
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
    229e:	9b02      	ldr	r3, [sp, #8]
    22a0:	601a      	str	r2, [r3, #0]
    /* Update CMU reset values */
    reg  = (volatile uint32_t *)0x400C8040;
    22a2:	4b41      	ldr	r3, [pc, #260]	; (23a8 <CHIP_Init+0x15c>)
    22a4:	9302      	str	r3, [sp, #8]
    *reg = 0;
    22a6:	9b02      	ldr	r3, [sp, #8]
    22a8:	2200      	movs	r2, #0
    22aa:	601a      	str	r2, [r3, #0]
    reg  = (volatile uint32_t *)0x400C8044;
    22ac:	4b3f      	ldr	r3, [pc, #252]	; (23ac <CHIP_Init+0x160>)
    22ae:	9302      	str	r3, [sp, #8]
    *reg = 0;
    22b0:	9b02      	ldr	r3, [sp, #8]
    22b2:	2200      	movs	r2, #0
    22b4:	601a      	str	r2, [r3, #0]
    reg  = (volatile uint32_t *)0x400C8058;
    22b6:	4b3e      	ldr	r3, [pc, #248]	; (23b0 <CHIP_Init+0x164>)
    22b8:	9302      	str	r3, [sp, #8]
    *reg = 0;
    22ba:	9b02      	ldr	r3, [sp, #8]
    22bc:	2200      	movs	r2, #0
    22be:	601a      	str	r2, [r3, #0]
    reg  = (volatile uint32_t *)0x400C8060;
    22c0:	4b3c      	ldr	r3, [pc, #240]	; (23b4 <CHIP_Init+0x168>)
    22c2:	9302      	str	r3, [sp, #8]
    *reg = 0;
    22c4:	9b02      	ldr	r3, [sp, #8]
    22c6:	2200      	movs	r2, #0
    22c8:	601a      	str	r2, [r3, #0]
    reg  = (volatile uint32_t *)0x400C8078;
    22ca:	4b3b      	ldr	r3, [pc, #236]	; (23b8 <CHIP_Init+0x16c>)
    22cc:	9302      	str	r3, [sp, #8]
    *reg = 0;
    22ce:	9b02      	ldr	r3, [sp, #8]
    22d0:	2200      	movs	r2, #0
    22d2:	601a      	str	r2, [r3, #0]
  }

  SYSTEM_ChipRevisionGet(&chipRev);
    22d4:	466b      	mov	r3, sp
    22d6:	4618      	mov	r0, r3
    22d8:	f7ff ff88 	bl	21ec <SYSTEM_ChipRevisionGet>
  if (chipRev.major == 0x01)
    22dc:	f89d 3000 	ldrb.w	r3, [sp]
    22e0:	2b01      	cmp	r3, #1
    22e2:	d117      	bne.n	2314 <CHIP_Init+0xc8>
  {
    /* Rev A errata handling for EM2/3. Must enable DMA clock in order for EM2/3 */
    /* to work. This will be fixed in later chip revisions, so only do for rev A. */
    if (chipRev.minor == 00)
    22e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d107      	bne.n	22fc <CHIP_Init+0xb0>
    {
      reg   = (volatile uint32_t *)0x400C8040;
    22ec:	4b2e      	ldr	r3, [pc, #184]	; (23a8 <CHIP_Init+0x15c>)
    22ee:	9302      	str	r3, [sp, #8]
      *reg |= 0x2;
    22f0:	9b02      	ldr	r3, [sp, #8]
    22f2:	681b      	ldr	r3, [r3, #0]
    22f4:	f043 0202 	orr.w	r2, r3, #2
    22f8:	9b02      	ldr	r3, [sp, #8]
    22fa:	601a      	str	r2, [r3, #0]
    }

    /* Rev A+B errata handling for I2C when using EM2/3. USART0 clock must be enabled */
    /* after waking up from EM2/EM3 in order for I2C to work. This will be fixed in */
    /* later chip revisions, so only do for rev A+B. */
    if (chipRev.minor <= 0x01)
    22fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    2300:	2b01      	cmp	r3, #1
    2302:	d807      	bhi.n	2314 <CHIP_Init+0xc8>
    {
      reg   = (volatile uint32_t *)0x400C8044;
    2304:	4b29      	ldr	r3, [pc, #164]	; (23ac <CHIP_Init+0x160>)
    2306:	9302      	str	r3, [sp, #8]
      *reg |= 0x1;
    2308:	9b02      	ldr	r3, [sp, #8]
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	f043 0201 	orr.w	r2, r3, #1
    2310:	9b02      	ldr	r3, [sp, #8]
    2312:	601a      	str	r2, [r3, #0]
    }
  }
  /* Ensure correct ADC/DAC calibration value */
  rev = *(volatile uint32_t *)0x0FE081F0;
    2314:	4b29      	ldr	r3, [pc, #164]	; (23bc <CHIP_Init+0x170>)
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	9303      	str	r3, [sp, #12]
  if (rev < 0x4C8ABA00)
    231a:	9a03      	ldr	r2, [sp, #12]
    231c:	4b28      	ldr	r3, [pc, #160]	; (23c0 <CHIP_Init+0x174>)
    231e:	429a      	cmp	r2, r3
    2320:	d839      	bhi.n	2396 <CHIP_Init+0x14a>
  {
    uint32_t cal;

    /* Enable ADC/DAC clocks */
    reg   = (volatile uint32_t *)0x400C8044UL;
    2322:	4b22      	ldr	r3, [pc, #136]	; (23ac <CHIP_Init+0x160>)
    2324:	9302      	str	r3, [sp, #8]
    *reg |= (1 << 14 | 1 << 11);
    2326:	9b02      	ldr	r3, [sp, #8]
    2328:	681b      	ldr	r3, [r3, #0]
    232a:	f443 4290 	orr.w	r2, r3, #18432	; 0x4800
    232e:	9b02      	ldr	r3, [sp, #8]
    2330:	601a      	str	r2, [r3, #0]

    /* Retrive calibration values */
    cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2332:	4b24      	ldr	r3, [pc, #144]	; (23c4 <CHIP_Init+0x178>)
    2334:	681b      	ldr	r3, [r3, #0]
    2336:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
    233a:	0a1b      	lsrs	r3, r3, #8
    233c:	061b      	lsls	r3, r3, #24
    233e:	9301      	str	r3, [sp, #4]
           8) << 24;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    2340:	4b20      	ldr	r3, [pc, #128]	; (23c4 <CHIP_Init+0x178>)
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            0) << 16;
    2348:	041b      	lsls	r3, r3, #16

    /* Retrive calibration values */
    cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
           8) << 24;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    234a:	9a01      	ldr	r2, [sp, #4]
    234c:	4313      	orrs	r3, r2
    234e:	9301      	str	r3, [sp, #4]
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2350:	4b1c      	ldr	r3, [pc, #112]	; (23c4 <CHIP_Init+0x178>)
    2352:	681b      	ldr	r3, [r3, #0]
            8) << 8;
    2354:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
           8) << 24;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2358:	9a01      	ldr	r2, [sp, #4]
    235a:	4313      	orrs	r3, r2
    235c:	9301      	str	r3, [sp, #4]
            8) << 8;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    235e:	4b19      	ldr	r3, [pc, #100]	; (23c4 <CHIP_Init+0x178>)
    2360:	681b      	ldr	r3, [r3, #0]
            0) << 0;
    2362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
            8) << 8;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    2366:	9a01      	ldr	r2, [sp, #4]
    2368:	4313      	orrs	r3, r2
    236a:	9301      	str	r3, [sp, #4]
            0) << 0;

    /* ADC0->CAL = 1.25 reference */
    reg  = (volatile uint32_t *)0x40002034UL;
    236c:	4b16      	ldr	r3, [pc, #88]	; (23c8 <CHIP_Init+0x17c>)
    236e:	9302      	str	r3, [sp, #8]
    *reg = cal;
    2370:	9b02      	ldr	r3, [sp, #8]
    2372:	9a01      	ldr	r2, [sp, #4]
    2374:	601a      	str	r2, [r3, #0]

    /* DAC0->CAL = 1.25 reference */
    reg  = (volatile uint32_t *)(0x4000402CUL);
    2376:	4b15      	ldr	r3, [pc, #84]	; (23cc <CHIP_Init+0x180>)
    2378:	9302      	str	r3, [sp, #8]
    cal  = *(volatile uint32_t *)0x0FE081C8UL;
    237a:	4b15      	ldr	r3, [pc, #84]	; (23d0 <CHIP_Init+0x184>)
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	9301      	str	r3, [sp, #4]
    *reg = cal;
    2380:	9b02      	ldr	r3, [sp, #8]
    2382:	9a01      	ldr	r2, [sp, #4]
    2384:	601a      	str	r2, [r3, #0]

    /* Turn off ADC/DAC clocks */
    reg   = (volatile uint32_t *)0x400C8044UL;
    2386:	4b09      	ldr	r3, [pc, #36]	; (23ac <CHIP_Init+0x160>)
    2388:	9302      	str	r3, [sp, #8]
    *reg &= ~(1 << 14 | 1 << 11);
    238a:	9b02      	ldr	r3, [sp, #8]
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
    2392:	9b02      	ldr	r3, [sp, #8]
    2394:	601a      	str	r2, [r3, #0]
    /* This fixes an issue with the LFXO on high temperatures. */
    *(volatile uint32_t*)0x400C80C0 =
                      ( *(volatile uint32_t*)0x400C80C0 & ~(1<<6) ) | (1<<4);
  }
#endif
}
    2396:	b005      	add	sp, #20
    2398:	f85d fb04 	ldr.w	pc, [sp], #4
    239c:	0fe081fc 	.word	0x0fe081fc
    23a0:	400ca00c 	.word	0x400ca00c
    23a4:	400c6020 	.word	0x400c6020
    23a8:	400c8040 	.word	0x400c8040
    23ac:	400c8044 	.word	0x400c8044
    23b0:	400c8058 	.word	0x400c8058
    23b4:	400c8060 	.word	0x400c8060
    23b8:	400c8078 	.word	0x400c8078
    23bc:	0fe081f0 	.word	0x0fe081f0
    23c0:	4c8ab9ff 	.word	0x4c8ab9ff
    23c4:	0fe081b4 	.word	0x0fe081b4
    23c8:	40002034 	.word	0x40002034
    23cc:	4000402c 	.word	0x4000402c
    23d0:	0fe081c8 	.word	0x0fe081c8

000023d4 <EMU_EnterEM1>:
 *   Enter energy mode 1 (EM1).
 ******************************************************************************/
__STATIC_INLINE void EMU_EnterEM1(void)
{
  /* Just enter Cortex-M3 sleep mode */
  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    23d4:	4b03      	ldr	r3, [pc, #12]	; (23e4 <EMU_EnterEM1+0x10>)
    23d6:	4a03      	ldr	r2, [pc, #12]	; (23e4 <EMU_EnterEM1+0x10>)
    23d8:	6912      	ldr	r2, [r2, #16]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	611a      	str	r2, [r3, #16]
    23e0:	bf30      	wfi
  __WFI();
}
    23e2:	4770      	bx	lr
    23e4:	e000ed00 	.word	0xe000ed00

000023e8 <main>:

/******************************************************************************
 * @brief  Main function
 *****************************************************************************/
int main( void )
{
    23e8:	b508      	push	{r3, lr}
    /* Initialize chip - handle erratas */
    CHIP_Init();
    23ea:	f7ff ff2f 	bl	224c <CHIP_Init>

    /* Set up clocks */
    cmuSetup();
    23ee:	f000 f865 	bl	24bc <cmuSetup>

    /* Init Low Energy UART with 9600bd (this is the maximum) */
    drvLEUART_Init (9600);
    23f2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
    23f6:	f000 fa47 	bl	2888 <drvLEUART_Init>

#ifdef DEBUG
    dbgInit();
    23fa:	f000 f8b1 	bl	2560 <dbgInit>

    /* Output version string to SWO or LEUART */
    DBG_PUTS("\n***** HRDevice V");
    23fe:	4822      	ldr	r0, [pc, #136]	; (2488 <main+0xa0>)
    2400:	f000 f926 	bl	2650 <ITM_SendStr>
    DBG_PUTS(prjVersion);
    2404:	4821      	ldr	r0, [pc, #132]	; (248c <main+0xa4>)
    2406:	f000 f923 	bl	2650 <ITM_SendStr>
    DBG_PUTS(" ");
    240a:	4821      	ldr	r0, [pc, #132]	; (2490 <main+0xa8>)
    240c:	f000 f920 	bl	2650 <ITM_SendStr>
    DBG_PUTS(prjDate);
    2410:	4820      	ldr	r0, [pc, #128]	; (2494 <main+0xac>)
    2412:	f000 f91d 	bl	2650 <ITM_SendStr>
    DBG_PUTS(" *****\n\n");
    2416:	4820      	ldr	r0, [pc, #128]	; (2498 <main+0xb0>)
    2418:	f000 f91a 	bl	2650 <ITM_SendStr>
     * initialized before calling ExtIntInit() because this enables the
     * interrupts, so IRQ handler may be executed immediately!
     */

    /* Initialize key hardware */
    KeyInit (&l_KeyInit);
    241c:	481f      	ldr	r0, [pc, #124]	; (249c <main+0xb4>)
    241e:	f001 fa2b 	bl	3878 <KeyInit>

    /*
     * Initialize (and enable) External Interrupts
     */
    ExtIntInit (l_ExtIntCfg);
    2422:	481f      	ldr	r0, [pc, #124]	; (24a0 <main+0xb8>)
    2424:	f001 f93a 	bl	369c <ExtIntInit>

    /* Initialize the Alarm Clock module */
    AlarmClockInit();
    2428:	f000 fe70 	bl	310c <AlarmClockInit>

    /* Verify element count */
    EFM_ASSERT(ELEM_CNT(l_LCD_Field) == LCD_FIELD_ID_CNT);

    /* Initialize display - show firmware version */
    DisplayInit (l_LCD_Field, l_Item, ITEM_CNT);
    242c:	481d      	ldr	r0, [pc, #116]	; (24a4 <main+0xbc>)
    242e:	491e      	ldr	r1, [pc, #120]	; (24a8 <main+0xc0>)
    2430:	222d      	movs	r2, #45	; 0x2d
    2432:	f001 faf9 	bl	3a28 <DisplayInit>
    LCD_Printf (LCD_LINE1_TEXT, ">>> HRDevice <<<");
    2436:	2002      	movs	r0, #2
    2438:	491c      	ldr	r1, [pc, #112]	; (24ac <main+0xc4>)
    243a:	f000 fb63 	bl	2b04 <LCD_Printf>
    LCD_Printf (LCD_LINE2_TEXT, "V%s %s", prjVersion, prjDate);
    243e:	2003      	movs	r0, #3
    2440:	491b      	ldr	r1, [pc, #108]	; (24b0 <main+0xc8>)
    2442:	4a12      	ldr	r2, [pc, #72]	; (248c <main+0xa4>)
    2444:	4b13      	ldr	r3, [pc, #76]	; (2494 <main+0xac>)
    2446:	f000 fb5d 	bl	2b04 <LCD_Printf>

    /* Initialize Battery Monitor */
    BatteryMonInit();
    244a:	f001 ff4b 	bl	42e4 <BatteryMonInit>

    /* Enable all other External Interrupts */
    ExtIntEnableAll();
    244e:	f001 f977 	bl	3740 <ExtIntEnableAll>
     * ========== Service Execution Loop ========== *
     * ============================================ */
    while (1)
    {
	/* Update or power-off the LC-Display, update measurements */
	DisplayUpdateCheck();
    2452:	f001 fbfd 	bl	3c50 <DisplayUpdateCheck>
	/*
	 * Check for current power mode:  If a minimum of one active module
	 * requires EM1, i.e. <g_EM1_ModuleMask> is not 0, this will be
	 * entered.  If no one requires EM1 activity, EM2 is entered.
	 */
	if (! g_flgIRQ)		// enter EM only if no IRQ occured
    2456:	4b17      	ldr	r3, [pc, #92]	; (24b4 <main+0xcc>)
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	b2db      	uxtb	r3, r3
    245c:	f083 0301 	eor.w	r3, r3, #1
    2460:	b2db      	uxtb	r3, r3
    2462:	2b00      	cmp	r3, #0
    2464:	d00b      	beq.n	247e <main+0x96>
	{
	    if (g_EM1_ModuleMask)
    2466:	4b14      	ldr	r3, [pc, #80]	; (24b8 <main+0xd0>)
    2468:	881b      	ldrh	r3, [r3, #0]
    246a:	b29b      	uxth	r3, r3
    246c:	2b00      	cmp	r3, #0
    246e:	d002      	beq.n	2476 <main+0x8e>
		EMU_EnterEM1();		// EM1 - Sleep Mode
    2470:	f7ff ffb0 	bl	23d4 <EMU_EnterEM1>
	}
	else
	{
	    g_flgIRQ = false;	// clear flag to enter EM the next time
	}
    }
    2474:	e7ed      	b.n	2452 <main+0x6a>
	if (! g_flgIRQ)		// enter EM only if no IRQ occured
	{
	    if (g_EM1_ModuleMask)
		EMU_EnterEM1();		// EM1 - Sleep Mode
	    else
		EMU_EnterEM2(true);	// EM2 - Deep Sleep Mode
    2476:	2001      	movs	r0, #1
    2478:	f7fe ff04 	bl	1284 <EMU_EnterEM2>
	}
	else
	{
	    g_flgIRQ = false;	// clear flag to enter EM the next time
	}
    }
    247c:	e7e9      	b.n	2452 <main+0x6a>
	    else
		EMU_EnterEM2(true);	// EM2 - Deep Sleep Mode
	}
	else
	{
	    g_flgIRQ = false;	// clear flag to enter EM the next time
    247e:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <main+0xcc>)
    2480:	2200      	movs	r2, #0
    2482:	701a      	strb	r2, [r3, #0]
	}
    }
    2484:	e7e5      	b.n	2452 <main+0x6a>
    2486:	bf00      	nop
    2488:	0000a668 	.word	0x0000a668
    248c:	0000a9ec 	.word	0x0000a9ec
    2490:	0000a67c 	.word	0x0000a67c
    2494:	0000a9f0 	.word	0x0000a9f0
    2498:	0000a680 	.word	0x0000a680
    249c:	0000a318 	.word	0x0000a318
    24a0:	0000a308 	.word	0x0000a308
    24a4:	0000a320 	.word	0x0000a320
    24a8:	0000a694 	.word	0x0000a694
    24ac:	0000a338 	.word	0x0000a338
    24b0:	0000a68c 	.word	0x0000a68c
    24b4:	20001200 	.word	0x20001200
    24b8:	20001000 	.word	0x20001000

000024bc <cmuSetup>:
 * This local routine is called once from main() to configure all required
 * clocks of the EFM32 device.
 *
 *****************************************************************************/
static void cmuSetup(void)
{
    24bc:	b508      	push	{r3, lr}
    /* Start LFXO and wait until it is stable */
    CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
    24be:	2000      	movs	r0, #0
    24c0:	2101      	movs	r1, #1
    24c2:	2201      	movs	r2, #1
    24c4:	f7fe fb74 	bl	bb0 <CMU_OscillatorEnable>
    /* Disable HFRCO */
    CMU_OscillatorEnable(cmuOsc_HFRCO, false, false);
#endif

    /* Route the LFXO clock to the RTC and set the prescaler */
    CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);	// RTC
    24c8:	480e      	ldr	r0, [pc, #56]	; (2504 <cmuSetup+0x48>)
    24ca:	2102      	movs	r1, #2
    24cc:	f7fe fab8 	bl	a40 <CMU_ClockSelectSet>
    CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFXO);	// LEUART0/1
    24d0:	480d      	ldr	r0, [pc, #52]	; (2508 <cmuSetup+0x4c>)
    24d2:	2102      	movs	r1, #2
    24d4:	f7fe fab4 	bl	a40 <CMU_ClockSelectSet>
    CMU_ClockEnable(cmuClock_RTC, true);
    24d8:	480c      	ldr	r0, [pc, #48]	; (250c <cmuSetup+0x50>)
    24da:	2101      	movs	r1, #1
    24dc:	f7fe f92c 	bl	738 <CMU_ClockEnable>

    /* Prescaler of 1 = 30 us of resolution and overflow each 8 min */
    CMU_ClockDivSet(cmuClock_RTC, cmuClkDiv_1);
    24e0:	480a      	ldr	r0, [pc, #40]	; (250c <cmuSetup+0x50>)
    24e2:	2101      	movs	r1, #1
    24e4:	f7fe f840 	bl	568 <CMU_ClockDivSet>

    /* Enable clock to low energy modules */
    CMU_ClockEnable(cmuClock_CORELE, true);
    24e8:	4809      	ldr	r0, [pc, #36]	; (2510 <cmuSetup+0x54>)
    24ea:	2101      	movs	r1, #1
    24ec:	f7fe f924 	bl	738 <CMU_ClockEnable>

    /* Enable clock for HF peripherals (ADC, DAC, I2C, TIMER, and USART) */
    CMU_ClockEnable(cmuClock_HFPER, true);
    24f0:	4808      	ldr	r0, [pc, #32]	; (2514 <cmuSetup+0x58>)
    24f2:	2101      	movs	r1, #1
    24f4:	f7fe f920 	bl	738 <CMU_ClockEnable>

    /* Enable clock to GPIO */
    CMU_ClockEnable(cmuClock_GPIO, true);
    24f8:	4807      	ldr	r0, [pc, #28]	; (2518 <cmuSetup+0x5c>)
    24fa:	2101      	movs	r1, #1
    24fc:	f7fe f91c 	bl	738 <CMU_ClockEnable>
}
    2500:	bd08      	pop	{r3, pc}
    2502:	bf00      	nop
    2504:	00060002 	.word	0x00060002
    2508:	00120003 	.word	0x00120003
    250c:	00080430 	.word	0x00080430
    2510:	00042300 	.word	0x00042300
    2514:	00028110 	.word	0x00028110
    2518:	0002c200 	.word	0x0002c200

0000251c <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
    251c:	b082      	sub	sp, #8
    251e:	9001      	str	r0, [sp, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
    2520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
    2528:	f003 0301 	and.w	r3, r3, #1
    252c:	2b00      	cmp	r3, #0
    252e:	d012      	beq.n	2556 <ITM_SendChar+0x3a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
    2530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    2538:	f003 0301 	and.w	r3, r3, #1

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
    253c:	2b00      	cmp	r3, #0
    253e:	d00a      	beq.n	2556 <ITM_SendChar+0x3a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
    2540:	bf00      	nop
    2542:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2546:	681b      	ldr	r3, [r3, #0]
    2548:	2b00      	cmp	r3, #0
    254a:	d0fa      	beq.n	2542 <ITM_SendChar+0x26>
    ITM->PORT[0].u8 = (uint8_t) ch;
    254c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2550:	9a01      	ldr	r2, [sp, #4]
    2552:	b2d2      	uxtb	r2, r2
    2554:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
    2556:	9b01      	ldr	r3, [sp, #4]
}
    2558:	4618      	mov	r0, r3
    255a:	b002      	add	sp, #8
    255c:	4770      	bx	lr
    255e:	bf00      	nop

00002560 <dbgInit>:

void setupSWOForPrint(void);

/*================RAGE-DEBUG===============*/
void dbgInit(void)
{
    2560:	b508      	push	{r3, lr}
    /* Set up Serial Wire Output */
    setupSWOForPrint();
    2562:	f000 f801 	bl	2568 <setupSWOForPrint>
}
    2566:	bd08      	pop	{r3, pc}

00002568 <setupSWOForPrint>:

void setupSWOForPrint(void)
{
    /* Enable GPIO clock. */
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_GPIO;
    2568:	4b31      	ldr	r3, [pc, #196]	; (2630 <setupSWOForPrint+0xc8>)
    256a:	4a31      	ldr	r2, [pc, #196]	; (2630 <setupSWOForPrint+0xc8>)
    256c:	6c52      	ldr	r2, [r2, #68]	; 0x44
    256e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    2572:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Serial wire output pin */
    GPIO->ROUTE |= GPIO_ROUTE_SWOPEN;
    2574:	4b2f      	ldr	r3, [pc, #188]	; (2634 <setupSWOForPrint+0xcc>)
    2576:	4a2f      	ldr	r2, [pc, #188]	; (2634 <setupSWOForPrint+0xcc>)
    2578:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
    257c:	f042 0204 	orr.w	r2, r2, #4
    2580:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    /* Set location 0 */
    GPIO->ROUTE = (GPIO->ROUTE & ~(_GPIO_ROUTE_SWLOCATION_MASK)) | GPIO_ROUTE_SWLOCATION_LOC0;
    2584:	4b2b      	ldr	r3, [pc, #172]	; (2634 <setupSWOForPrint+0xcc>)
    2586:	4a2b      	ldr	r2, [pc, #172]	; (2634 <setupSWOForPrint+0xcc>)
    2588:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
    258c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2590:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    /* Enable output on pin - GPIO Port F, Pin 2 */
    GPIO->P[5].MODEL &= ~(_GPIO_P_MODEL_MODE2_MASK);
    2594:	4b27      	ldr	r3, [pc, #156]	; (2634 <setupSWOForPrint+0xcc>)
    2596:	4a27      	ldr	r2, [pc, #156]	; (2634 <setupSWOForPrint+0xcc>)
    2598:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    259c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    25a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    GPIO->P[5].MODEL |= GPIO_P_MODEL_MODE2_PUSHPULL;
    25a4:	4b23      	ldr	r3, [pc, #140]	; (2634 <setupSWOForPrint+0xcc>)
    25a6:	4a23      	ldr	r2, [pc, #140]	; (2634 <setupSWOForPrint+0xcc>)
    25a8:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    25ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    25b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* Enable debug clock AUXHFRCO */
    CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    25b4:	4b1e      	ldr	r3, [pc, #120]	; (2630 <setupSWOForPrint+0xc8>)
    25b6:	2210      	movs	r2, #16
    25b8:	621a      	str	r2, [r3, #32]

    /* Wait until clock is ready */
    while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    25ba:	bf00      	nop
    25bc:	4b1c      	ldr	r3, [pc, #112]	; (2630 <setupSWOForPrint+0xc8>)
    25be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25c0:	f003 0320 	and.w	r3, r3, #32
    25c4:	2b00      	cmp	r3, #0
    25c6:	d0f9      	beq.n	25bc <setupSWOForPrint+0x54>

    /* Enable trace in core debug */
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    25c8:	4b1b      	ldr	r3, [pc, #108]	; (2638 <setupSWOForPrint+0xd0>)
    25ca:	4a1b      	ldr	r2, [pc, #108]	; (2638 <setupSWOForPrint+0xd0>)
    25cc:	68d2      	ldr	r2, [r2, #12]
    25ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    25d2:	60da      	str	r2, [r3, #12]
    ITM->LAR  = 0xC5ACCE55;
    25d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    25d8:	4a18      	ldr	r2, [pc, #96]	; (263c <setupSWOForPrint+0xd4>)
    25da:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TER  = 0x0;
    25de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    25e2:	2200      	movs	r2, #0
    25e4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    ITM->TCR  = 0x0;
    25e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    25ec:	2200      	movs	r2, #0
    25ee:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    TPI->SPPR = 2;
    25f2:	4b13      	ldr	r3, [pc, #76]	; (2640 <setupSWOForPrint+0xd8>)
    25f4:	2202      	movs	r2, #2
    25f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    TPI->ACPR = 0xf;
    25fa:	4b11      	ldr	r3, [pc, #68]	; (2640 <setupSWOForPrint+0xd8>)
    25fc:	220f      	movs	r2, #15
    25fe:	611a      	str	r2, [r3, #16]
    ITM->TPR  = 0x0;
    2600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2604:	2200      	movs	r2, #0
    2606:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
    DWT->CTRL = 0x400003FE;
    260a:	4b0e      	ldr	r3, [pc, #56]	; (2644 <setupSWOForPrint+0xdc>)
    260c:	4a0e      	ldr	r2, [pc, #56]	; (2648 <setupSWOForPrint+0xe0>)
    260e:	601a      	str	r2, [r3, #0]
    ITM->TCR  = 0x0001000D;
    2610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2614:	4a0d      	ldr	r2, [pc, #52]	; (264c <setupSWOForPrint+0xe4>)
    2616:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    TPI->FFCR = 0x00000100;
    261a:	4b09      	ldr	r3, [pc, #36]	; (2640 <setupSWOForPrint+0xd8>)
    261c:	f44f 7280 	mov.w	r2, #256	; 0x100
    2620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ITM->TER  = 0x1;
    2624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    2628:	2201      	movs	r2, #1
    262a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
    262e:	4770      	bx	lr
    2630:	400c8000 	.word	0x400c8000
    2634:	40006000 	.word	0x40006000
    2638:	e000edf0 	.word	0xe000edf0
    263c:	c5acce55 	.word	0xc5acce55
    2640:	e0040000 	.word	0xe0040000
    2644:	e0001000 	.word	0xe0001000
    2648:	400003fe 	.word	0x400003fe
    264c:	0001000d 	.word	0x0001000d

00002650 <ITM_SendStr>:

void ITM_SendStr(const char *pStr)
{
    2650:	b500      	push	{lr}
    2652:	b083      	sub	sp, #12
    2654:	9001      	str	r0, [sp, #4]
    while (*pStr != EOS)
    2656:	e007      	b.n	2668 <ITM_SendStr+0x18>
    {
	ITM_SendChar(*pStr);
    2658:	9b01      	ldr	r3, [sp, #4]
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	4618      	mov	r0, r3
    265e:	f7ff ff5d 	bl	251c <ITM_SendChar>
	pStr++;
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	3301      	adds	r3, #1
    2666:	9301      	str	r3, [sp, #4]
    ITM->TER  = 0x1;
}

void ITM_SendStr(const char *pStr)
{
    while (*pStr != EOS)
    2668:	9b01      	ldr	r3, [sp, #4]
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	2b00      	cmp	r3, #0
    266e:	d1f3      	bne.n	2658 <ITM_SendStr+0x8>
    {
	ITM_SendChar(*pStr);
	pStr++;
    }
}
    2670:	b003      	add	sp, #12
    2672:	f85d fb04 	ldr.w	pc, [sp], #4
    2676:	bf00      	nop

00002678 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2678:	b082      	sub	sp, #8
    267a:	4603      	mov	r3, r0
    267c:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2680:	4b07      	ldr	r3, [pc, #28]	; (26a0 <NVIC_EnableIRQ+0x28>)
    2682:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    2686:	0952      	lsrs	r2, r2, #5
    2688:	f89d 1007 	ldrb.w	r1, [sp, #7]
    268c:	f001 011f 	and.w	r1, r1, #31
    2690:	2001      	movs	r0, #1
    2692:	fa00 f101 	lsl.w	r1, r0, r1
    2696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    269a:	b002      	add	sp, #8
    269c:	4770      	bx	lr
    269e:	bf00      	nop
    26a0:	e000e100 	.word	0xe000e100

000026a4 <INT_Disable>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    26a4:	b672      	cpsid	i
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Disable(void)
{
  __disable_irq();
  if (INT_LockCnt < UINT32_MAX)
    26a6:	4b07      	ldr	r3, [pc, #28]	; (26c4 <INT_Disable+0x20>)
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    26ae:	d004      	beq.n	26ba <INT_Disable+0x16>
  {
    INT_LockCnt++;
    26b0:	4b04      	ldr	r3, [pc, #16]	; (26c4 <INT_Disable+0x20>)
    26b2:	681b      	ldr	r3, [r3, #0]
    26b4:	1c5a      	adds	r2, r3, #1
    26b6:	4b03      	ldr	r3, [pc, #12]	; (26c4 <INT_Disable+0x20>)
    26b8:	601a      	str	r2, [r3, #0]
  }

  return INT_LockCnt;
    26ba:	4b02      	ldr	r3, [pc, #8]	; (26c4 <INT_Disable+0x20>)
    26bc:	681b      	ldr	r3, [r3, #0]
}
    26be:	4618      	mov	r0, r3
    26c0:	4770      	bx	lr
    26c2:	bf00      	nop
    26c4:	20000a2c 	.word	0x20000a2c

000026c8 <INT_Enable>:
 *   Decrement interrupt lock level counter and enable interrupts if counter
 *   reached zero.
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Enable(void)
{
    26c8:	b082      	sub	sp, #8
  uint32_t retVal;

  if (INT_LockCnt > 0)
    26ca:	4b0b      	ldr	r3, [pc, #44]	; (26f8 <INT_Enable+0x30>)
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d00d      	beq.n	26ee <INT_Enable+0x26>
  {
    INT_LockCnt--;
    26d2:	4b09      	ldr	r3, [pc, #36]	; (26f8 <INT_Enable+0x30>)
    26d4:	681b      	ldr	r3, [r3, #0]
    26d6:	1e5a      	subs	r2, r3, #1
    26d8:	4b07      	ldr	r3, [pc, #28]	; (26f8 <INT_Enable+0x30>)
    26da:	601a      	str	r2, [r3, #0]
    retVal = INT_LockCnt;
    26dc:	4b06      	ldr	r3, [pc, #24]	; (26f8 <INT_Enable+0x30>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	9301      	str	r3, [sp, #4]
    if (retVal == 0)
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d100      	bne.n	26ea <INT_Enable+0x22>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    26e8:	b662      	cpsie	i
    {
      __enable_irq();
    }
    return retVal;
    26ea:	9b01      	ldr	r3, [sp, #4]
    26ec:	e000      	b.n	26f0 <INT_Enable+0x28>
  }
  else
  {
    return 0;
    26ee:	2300      	movs	r3, #0
  }
}
    26f0:	4618      	mov	r0, r3
    26f2:	b002      	add	sp, #8
    26f4:	4770      	bx	lr
    26f6:	bf00      	nop
    26f8:	20000a2c 	.word	0x20000a2c

000026fc <dmaTransferStart>:
 * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 *
 ******************************************************************************/
void dmaTransferStart (void)
{
    26fc:	b500      	push	{lr}
    26fe:	b085      	sub	sp, #20
uint16_t	idxPut;		// local index variable
int16_t		cnt;		// number of bytes to send


    INT_Disable();
    2700:	f7ff ffd0 	bl	26a4 <INT_Disable>

    if (flgDMArun)
    2704:	4b31      	ldr	r3, [pc, #196]	; (27cc <dmaTransferStart+0xd0>)
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	b2db      	uxtb	r3, r3
    270a:	2b00      	cmp	r3, #0
    270c:	d002      	beq.n	2714 <dmaTransferStart+0x18>
    {
	INT_Enable();
    270e:	f7ff ffdb 	bl	26c8 <INT_Enable>
	return;			// do not disturb a running DMA transfer
    2712:	e057      	b.n	27c4 <dmaTransferStart+0xc8>
    }

    flgDMArun = true;		// set flag for DMA activity
    2714:	4b2d      	ldr	r3, [pc, #180]	; (27cc <dmaTransferStart+0xd0>)
    2716:	2201      	movs	r2, #1
    2718:	701a      	strb	r2, [r3, #0]
    INT_Enable();
    271a:	f7ff ffd5 	bl	26c8 <INT_Enable>

    /* Use local index that will not change */
    idxPut = txIdxPut;
    271e:	4b2c      	ldr	r3, [pc, #176]	; (27d0 <dmaTransferStart+0xd4>)
    2720:	881b      	ldrh	r3, [r3, #0]
    2722:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* Calculate how many bytes to transfer */
    cnt = idxPut - txIdxGet;
    2726:	4b2b      	ldr	r3, [pc, #172]	; (27d4 <dmaTransferStart+0xd8>)
    2728:	881b      	ldrh	r3, [r3, #0]
    272a:	b29b      	uxth	r3, r3
    272c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2730:	1ad3      	subs	r3, r2, r3
    2732:	b29b      	uxth	r3, r3
    2734:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (cnt == 0)
    2738:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    273c:	2b00      	cmp	r3, #0
    273e:	d103      	bne.n	2748 <dmaTransferStart+0x4c>
    {
	flgDMArun = false;	// clear flag again
    2740:	4b22      	ldr	r3, [pc, #136]	; (27cc <dmaTransferStart+0xd0>)
    2742:	2200      	movs	r2, #0
    2744:	701a      	strb	r2, [r3, #0]
	return;
    2746:	e03d      	b.n	27c4 <dmaTransferStart+0xc8>
    }

    if (cnt < 0)
    2748:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    274c:	2b00      	cmp	r3, #0
    274e:	da0c      	bge.n	276a <dmaTransferStart+0x6e>
    {
	/* Limit DMA transfer to end of FIFO buffer */
	idxPut = sizeof(txFIFO);
    2750:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2754:	f8ad 300e 	strh.w	r3, [sp, #14]
	cnt = idxPut - txIdxGet;
    2758:	4b1e      	ldr	r3, [pc, #120]	; (27d4 <dmaTransferStart+0xd8>)
    275a:	881b      	ldrh	r3, [r3, #0]
    275c:	b29b      	uxth	r3, r3
    275e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2762:	1ad3      	subs	r3, r2, r3
    2764:	b29b      	uxth	r3, r3
    2766:	f8ad 300c 	strh.w	r3, [sp, #12]
    }

    /* Calculate next value of the Get Index */
    txIdxGetNext = txIdxGet + cnt;
    276a:	4b1a      	ldr	r3, [pc, #104]	; (27d4 <dmaTransferStart+0xd8>)
    276c:	881b      	ldrh	r3, [r3, #0]
    276e:	b29a      	uxth	r2, r3
    2770:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2774:	4413      	add	r3, r2
    2776:	b29a      	uxth	r2, r3
    2778:	4b17      	ldr	r3, [pc, #92]	; (27d8 <dmaTransferStart+0xdc>)
    277a:	801a      	strh	r2, [r3, #0]
    if (txIdxGetNext >= sizeof(txFIFO))
    277c:	4b16      	ldr	r3, [pc, #88]	; (27d8 <dmaTransferStart+0xdc>)
    277e:	881b      	ldrh	r3, [r3, #0]
    2780:	b29b      	uxth	r3, r3
    2782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2786:	d307      	bcc.n	2798 <dmaTransferStart+0x9c>
	txIdxGetNext -= sizeof(txFIFO);
    2788:	4b13      	ldr	r3, [pc, #76]	; (27d8 <dmaTransferStart+0xdc>)
    278a:	881b      	ldrh	r3, [r3, #0]
    278c:	b29b      	uxth	r3, r3
    278e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    2792:	b29a      	uxth	r2, r3
    2794:	4b10      	ldr	r3, [pc, #64]	; (27d8 <dmaTransferStart+0xdc>)
    2796:	801a      	strh	r2, [r3, #0]

    /* Set new DMA source end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
    2798:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    279c:	1e5a      	subs	r2, r3, #1
    279e:	4b0f      	ldr	r3, [pc, #60]	; (27dc <dmaTransferStart+0xe0>)
    27a0:	441a      	add	r2, r3
    27a2:	4b0f      	ldr	r3, [pc, #60]	; (27e0 <dmaTransferStart+0xe4>)
    27a4:	611a      	str	r2, [r3, #16]

    /* Enable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
    27a6:	4b0f      	ldr	r3, [pc, #60]	; (27e4 <dmaTransferStart+0xe8>)
    27a8:	2201      	movs	r2, #1
    27aa:	601a      	str	r2, [r3, #0]
    DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
    27ac:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    27b0:	3b01      	subs	r3, #1

    /* Enable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;

    /* (Re)starting the transfer. Using Basic Mode */
    DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
    27b2:	2200      	movs	r2, #0
    27b4:	9200      	str	r2, [sp, #0]
    27b6:	9301      	str	r3, [sp, #4]
    27b8:	2001      	movs	r0, #1
    27ba:	2101      	movs	r1, #1
    27bc:	2200      	movs	r2, #0
    27be:	2300      	movs	r3, #0
    27c0:	f7fe fba8 	bl	f14 <DMA_ActivateBasic>
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
}
    27c4:	b005      	add	sp, #20
    27c6:	f85d fb04 	ldr.w	pc, [sp], #4
    27ca:	bf00      	nop
    27cc:	20000e36 	.word	0x20000e36
    27d0:	20000e30 	.word	0x20000e30
    27d4:	20000e32 	.word	0x20000e32
    27d8:	20000e34 	.word	0x20000e34
    27dc:	20000a30 	.word	0x20000a30
    27e0:	20001100 	.word	0x20001100
    27e4:	43080034 	.word	0x43080034

000027e8 <dmaTransferDone>:
 * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 *
 ******************************************************************************/
void dmaTransferDone(unsigned int channel, bool primary, void *user)
{
    27e8:	b500      	push	{lr}
    27ea:	b085      	sub	sp, #20
    27ec:	9003      	str	r0, [sp, #12]
    27ee:	460b      	mov	r3, r1
    27f0:	9201      	str	r2, [sp, #4]
    27f2:	f88d 300b 	strb.w	r3, [sp, #11]
    (void) channel;
    (void) primary;
    (void) user;

    /* Disable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 0;
    27f6:	4b08      	ldr	r3, [pc, #32]	; (2818 <dmaTransferDone+0x30>)
    27f8:	2200      	movs	r2, #0
    27fa:	601a      	str	r2, [r3, #0]

    /* Update Get Index */
    txIdxGet = txIdxGetNext;
    27fc:	4b07      	ldr	r3, [pc, #28]	; (281c <dmaTransferDone+0x34>)
    27fe:	881b      	ldrh	r3, [r3, #0]
    2800:	b29a      	uxth	r2, r3
    2802:	4b07      	ldr	r3, [pc, #28]	; (2820 <dmaTransferDone+0x38>)
    2804:	801a      	strh	r2, [r3, #0]

    /* Clear DMA running flag */
    flgDMArun = false;
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <dmaTransferDone+0x3c>)
    2808:	2200      	movs	r2, #0
    280a:	701a      	strb	r2, [r3, #0]

    /* Check if still data to send */
    dmaTransferStart();
    280c:	f7ff ff76 	bl	26fc <dmaTransferStart>
}
    2810:	b005      	add	sp, #20
    2812:	f85d fb04 	ldr.w	pc, [sp], #4
    2816:	bf00      	nop
    2818:	43080034 	.word	0x43080034
    281c:	20000e34 	.word	0x20000e34
    2820:	20000e32 	.word	0x20000e32
    2824:	20000e36 	.word	0x20000e36

00002828 <setupLeuartDma>:
 * channel is set to be the LEUART TXDATA register, and transfer complete
 * interrupt is enabled.
 *
 *****************************************************************************/
static void setupLeuartDma(void)
{
    2828:	b508      	push	{r3, lr}
    /* Setting call-back function */
    g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
    282a:	4b0f      	ldr	r3, [pc, #60]	; (2868 <setupLeuartDma+0x40>)
    282c:	4a0f      	ldr	r2, [pc, #60]	; (286c <setupLeuartDma+0x44>)
    282e:	60da      	str	r2, [r3, #12]
    g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
    2830:	4b0d      	ldr	r3, [pc, #52]	; (2868 <setupLeuartDma+0x40>)
    2832:	2200      	movs	r2, #0
    2834:	611a      	str	r2, [r3, #16]

    /* Initializing DMA, channel and descriptor for Tx */
    DMA_Init(&dmaInit);
    2836:	480e      	ldr	r0, [pc, #56]	; (2870 <setupLeuartDma+0x48>)
    2838:	f7fe fc42 	bl	10c0 <DMA_Init>
    DMA_CfgChannel(DMA_CHAN_LEUART_TX, &chnlCfgTx);
    283c:	2001      	movs	r0, #1
    283e:	490d      	ldr	r1, [pc, #52]	; (2874 <setupLeuartDma+0x4c>)
    2840:	f7fe fb9e 	bl	f80 <DMA_CfgChannel>
    DMA_CfgDescr(DMA_CHAN_LEUART_TX, true, &descrCfgTx);
    2844:	2001      	movs	r0, #1
    2846:	2101      	movs	r1, #1
    2848:	4a0b      	ldr	r2, [pc, #44]	; (2878 <setupLeuartDma+0x50>)
    284a:	f7fe fbf1 	bl	1030 <DMA_CfgDescr>

    /* Set new DMA destination end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].DSTEND = &LEUART->TXDATA;
    284e:	4b0b      	ldr	r3, [pc, #44]	; (287c <setupLeuartDma+0x54>)
    2850:	4a0b      	ldr	r2, [pc, #44]	; (2880 <setupLeuartDma+0x58>)
    2852:	615a      	str	r2, [r3, #20]

    /* Enable DMA Transfer Complete Interrupt */
    DMA->IEN = (DMA_IEN_CH0DONE << DMA_CHAN_LEUART_TX);
    2854:	4b0b      	ldr	r3, [pc, #44]	; (2884 <setupLeuartDma+0x5c>)
    2856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    285a:	330c      	adds	r3, #12
    285c:	2202      	movs	r2, #2
    285e:	601a      	str	r2, [r3, #0]

    /* Enable DMA interrupt vector */
    NVIC_EnableIRQ(DMA_IRQn);
    2860:	2000      	movs	r0, #0
    2862:	f7ff ff09 	bl	2678 <NVIC_EnableIRQ>
    NVIC_EnableIRQ(LEUART_IRQn);

    /* Make sure the LEUART wakes up the DMA on RX data */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_RXDMAWU_SHIFT) = 1;
#endif
}
    2866:	bd08      	pop	{r3, pc}
    2868:	20001204 	.word	0x20001204
    286c:	000027e9 	.word	0x000027e9
    2870:	2000001c 	.word	0x2000001c
    2874:	20000024 	.word	0x20000024
    2878:	20000030 	.word	0x20000030
    287c:	20001100 	.word	0x20001100
    2880:	40084028 	.word	0x40084028
    2884:	400c2000 	.word	0x400c2000

00002888 <drvLEUART_Init>:
 * @param[in] baud
 *	Baudrate to use (maximum 9600bd).
 *
 *****************************************************************************/
void	drvLEUART_Init (uint32_t baud)
{
    2888:	b500      	push	{lr}
    288a:	b083      	sub	sp, #12
    288c:	9001      	str	r0, [sp, #4]
    /* Enabling clocks, all other remain disabled */
    CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
    288e:	4815      	ldr	r0, [pc, #84]	; (28e4 <drvLEUART_Init+0x5c>)
    2890:	2101      	movs	r1, #1
    2892:	f7fd ff51 	bl	738 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
    2896:	4814      	ldr	r0, [pc, #80]	; (28e8 <drvLEUART_Init+0x60>)
    2898:	2101      	movs	r1, #1
    289a:	f7fd ff4d 	bl	738 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock
    289e:	4813      	ldr	r0, [pc, #76]	; (28ec <drvLEUART_Init+0x64>)
    28a0:	2101      	movs	r1, #1
    28a2:	f7fd ff49 	bl	738 <CMU_ClockEnable>

    /* Reseting and initializing LEUART */
    LEUART_Reset(LEUART);
    28a6:	4812      	ldr	r0, [pc, #72]	; (28f0 <drvLEUART_Init+0x68>)
    28a8:	f7fe ff1e 	bl	16e8 <LEUART_Reset>
    leuartInit.baudrate = baud;
    28ac:	4b11      	ldr	r3, [pc, #68]	; (28f4 <drvLEUART_Init+0x6c>)
    28ae:	9a01      	ldr	r2, [sp, #4]
    28b0:	609a      	str	r2, [r3, #8]
    LEUART_Init(LEUART, &leuartInit);
    28b2:	480f      	ldr	r0, [pc, #60]	; (28f0 <drvLEUART_Init+0x68>)
    28b4:	490f      	ldr	r1, [pc, #60]	; (28f4 <drvLEUART_Init+0x6c>)
    28b6:	f7fe fed1 	bl	165c <LEUART_Init>

    /* Route LEUART Tx (and Rx) Pin to location 0 (PD4/PD5) */
    LEUART->ROUTE = LEUART_ROUTE_TXPEN
    28ba:	4b0d      	ldr	r3, [pc, #52]	; (28f0 <drvLEUART_Init+0x68>)
    28bc:	2202      	movs	r2, #2
    28be:	655a      	str	r2, [r3, #84]	; 0x54
		  | LEUART_ROUTE_RXPEN
#endif
		  | LEUART_ROUTE_LOCATION_LOC0;

    /* Enable GPIO for LEUART. Tx is on D4, Rx on D5 */
    GPIO_PinModeSet(LEUART_PORT,		// GPIO port
    28c0:	2003      	movs	r0, #3
    28c2:	2104      	movs	r1, #4
    28c4:	2204      	movs	r2, #4
    28c6:	2301      	movs	r3, #1
    28c8:	f7fe fd90 	bl	13ec <GPIO_PinModeSet>
		    gpioModeInputPull,		// Pin mode is set to input with
		    1);				// Pull-Up
#endif

    /* Setup LEUART with DMA */
    setupLeuartDma();
    28cc:	f7ff ffac 	bl	2828 <setupLeuartDma>

    /* Set index variables to the beginning of the FIFO */
    txIdxPut = txIdxGet = 0;
    28d0:	2300      	movs	r3, #0
    28d2:	4a09      	ldr	r2, [pc, #36]	; (28f8 <drvLEUART_Init+0x70>)
    28d4:	4619      	mov	r1, r3
    28d6:	8011      	strh	r1, [r2, #0]
    28d8:	4a08      	ldr	r2, [pc, #32]	; (28fc <drvLEUART_Init+0x74>)
    28da:	8013      	strh	r3, [r2, #0]
}
    28dc:	b003      	add	sp, #12
    28de:	f85d fb04 	ldr.w	pc, [sp], #4
    28e2:	bf00      	nop
    28e4:	00041300 	.word	0x00041300
    28e8:	0002c200 	.word	0x0002c200
    28ec:	00140540 	.word	0x00140540
    28f0:	40084000 	.word	0x40084000
    28f4:	2000000c 	.word	0x2000000c
    28f8:	20000e32 	.word	0x20000e32
    28fc:	20000e30 	.word	0x20000e30

00002900 <drvLEUART_puts>:
 * @param[in] pStr
 *	Adress pointer of the string to write into the FIFO.
 *
 ******************************************************************************/
void	 drvLEUART_puts (const char *pStr)
{
    2900:	b500      	push	{lr}
    2902:	b085      	sub	sp, #20
    2904:	9001      	str	r0, [sp, #4]
int16_t	cnt;			// free buffer space in number of bytes
bool	sendCR = false;		// set true to write <CR> to buffer
    2906:	2300      	movs	r3, #0
    2908:	f88d 300d 	strb.w	r3, [sp, #13]


    while (*pStr != EOS)
    290c:	e054      	b.n	29b8 <drvLEUART_puts+0xb8>
    {
	/* Non-blocking: discard string if FIFO is full */
	cnt  = txIdxPut;
    290e:	4b2f      	ldr	r3, [pc, #188]	; (29cc <drvLEUART_puts+0xcc>)
    2910:	881b      	ldrh	r3, [r3, #0]
    2912:	b29b      	uxth	r3, r3
    2914:	f8ad 300e 	strh.w	r3, [sp, #14]
	cnt -= txIdxGet;
    2918:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    291c:	4b2c      	ldr	r3, [pc, #176]	; (29d0 <drvLEUART_puts+0xd0>)
    291e:	881b      	ldrh	r3, [r3, #0]
    2920:	b29b      	uxth	r3, r3
    2922:	1ad3      	subs	r3, r2, r3
    2924:	b29b      	uxth	r3, r3
    2926:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (cnt < 0)
    292a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    292e:	2b00      	cmp	r3, #0
    2930:	da06      	bge.n	2940 <drvLEUART_puts+0x40>
	    cnt += sizeof(txFIFO);
    2932:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    293a:	b29b      	uxth	r3, r3
    293c:	f8ad 300e 	strh.w	r3, [sp, #14]

	if (cnt > (int16_t)(sizeof(txFIFO) - 2))
    2940:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
    2944:	f240 33fe 	movw	r3, #1022	; 0x3fe
    2948:	429a      	cmp	r2, r3
    294a:	dd00      	ble.n	294e <drvLEUART_puts+0x4e>
	    break;
    294c:	e038      	b.n	29c0 <drvLEUART_puts+0xc0>

	/* Check if to translate <LF> to <CR><LF> */
	if (g_flgLEUART_LF2CRLF  &&  (*pStr == '\n')  &&  ! sendCR)
    294e:	4b21      	ldr	r3, [pc, #132]	; (29d4 <drvLEUART_puts+0xd4>)
    2950:	781b      	ldrb	r3, [r3, #0]
    2952:	b2db      	uxtb	r3, r3
    2954:	2b00      	cmp	r3, #0
    2956:	d014      	beq.n	2982 <drvLEUART_puts+0x82>
    2958:	9b01      	ldr	r3, [sp, #4]
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	2b0a      	cmp	r3, #10
    295e:	d110      	bne.n	2982 <drvLEUART_puts+0x82>
    2960:	f89d 300d 	ldrb.w	r3, [sp, #13]
    2964:	f083 0301 	eor.w	r3, r3, #1
    2968:	b2db      	uxtb	r3, r3
    296a:	2b00      	cmp	r3, #0
    296c:	d009      	beq.n	2982 <drvLEUART_puts+0x82>
	{
	    /* Write <CR> to FIFO */
	    txFIFO[txIdxPut] = '\r';
    296e:	4b17      	ldr	r3, [pc, #92]	; (29cc <drvLEUART_puts+0xcc>)
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	4a18      	ldr	r2, [pc, #96]	; (29d8 <drvLEUART_puts+0xd8>)
    2976:	210d      	movs	r1, #13
    2978:	54d1      	strb	r1, [r2, r3]
	    sendCR = true;	// special character <CR>, set flag
    297a:	2301      	movs	r3, #1
    297c:	f88d 300d 	strb.w	r3, [sp, #13]
    2980:	e00c      	b.n	299c <drvLEUART_puts+0x9c>
	}
	else
	{
	    /* Write Byte to FIFO */
	    txFIFO[txIdxPut] = *pStr++;
    2982:	4b12      	ldr	r3, [pc, #72]	; (29cc <drvLEUART_puts+0xcc>)
    2984:	881b      	ldrh	r3, [r3, #0]
    2986:	b29b      	uxth	r3, r3
    2988:	461a      	mov	r2, r3
    298a:	9b01      	ldr	r3, [sp, #4]
    298c:	1c59      	adds	r1, r3, #1
    298e:	9101      	str	r1, [sp, #4]
    2990:	7819      	ldrb	r1, [r3, #0]
    2992:	4b11      	ldr	r3, [pc, #68]	; (29d8 <drvLEUART_puts+0xd8>)
    2994:	5499      	strb	r1, [r3, r2]
	    sendCR = false;	// regular character, be sure to clear flag
    2996:	2300      	movs	r3, #0
    2998:	f88d 300d 	strb.w	r3, [sp, #13]
	}

	/* Increment FIFO index */
	if (++txIdxPut >= sizeof(txFIFO))
    299c:	4b0b      	ldr	r3, [pc, #44]	; (29cc <drvLEUART_puts+0xcc>)
    299e:	881b      	ldrh	r3, [r3, #0]
    29a0:	b29b      	uxth	r3, r3
    29a2:	3301      	adds	r3, #1
    29a4:	b29b      	uxth	r3, r3
    29a6:	4a09      	ldr	r2, [pc, #36]	; (29cc <drvLEUART_puts+0xcc>)
    29a8:	4619      	mov	r1, r3
    29aa:	8011      	strh	r1, [r2, #0]
    29ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    29b0:	d302      	bcc.n	29b8 <drvLEUART_puts+0xb8>
	    txIdxPut = 0;	// wrap around
    29b2:	4b06      	ldr	r3, [pc, #24]	; (29cc <drvLEUART_puts+0xcc>)
    29b4:	2200      	movs	r2, #0
    29b6:	801a      	strh	r2, [r3, #0]
{
int16_t	cnt;			// free buffer space in number of bytes
bool	sendCR = false;		// set true to write <CR> to buffer


    while (*pStr != EOS)
    29b8:	9b01      	ldr	r3, [sp, #4]
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	2b00      	cmp	r3, #0
    29be:	d1a6      	bne.n	290e <drvLEUART_puts+0xe>
	if (++txIdxPut >= sizeof(txFIFO))
	    txIdxPut = 0;	// wrap around
    }

    /* Be sure to enable DMA for data transfer */
    dmaTransferStart();
    29c0:	f7ff fe9c 	bl	26fc <dmaTransferStart>
}
    29c4:	b005      	add	sp, #20
    29c6:	f85d fb04 	ldr.w	pc, [sp], #4
    29ca:	bf00      	nop
    29cc:	20000e30 	.word	0x20000e30
    29d0:	20000e32 	.word	0x20000e32
    29d4:	20000008 	.word	0x20000008
    29d8:	20000a30 	.word	0x20000a30

000029dc <LCD_Init>:
 *	Parameter <b>pField</b> must point to a persistent data structure,
 *	i.e. this must be valid over the whole life time of the program.
 *
 ******************************************************************************/
void LCD_Init (const LCD_FIELD *pField)
{
    29dc:	b500      	push	{lr}
    29de:	b083      	sub	sp, #12
    29e0:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT(pField != NULL);
    29e2:	9b01      	ldr	r3, [sp, #4]
    29e4:	2b00      	cmp	r3, #0
    29e6:	d103      	bne.n	29f0 <LCD_Init+0x14>
    29e8:	4805      	ldr	r0, [pc, #20]	; (2a00 <LCD_Init+0x24>)
    29ea:	21aa      	movs	r1, #170	; 0xaa
    29ec:	f7fd fc92 	bl	314 <assertEFM>

    /* Save configuration */
    l_pField = pField;
    29f0:	4b04      	ldr	r3, [pc, #16]	; (2a04 <LCD_Init+0x28>)
    29f2:	9a01      	ldr	r2, [sp, #4]
    29f4:	601a      	str	r2, [r3, #0]

    /* Power the LCD Module On and initialize it */
    LCD_PowerOn();
    29f6:	f000 f807 	bl	2a08 <LCD_PowerOn>
}
    29fa:	b003      	add	sp, #12
    29fc:	f85d fb04 	ldr.w	pc, [sp], #4
    2a00:	0000a87c 	.word	0x0000a87c
    2a04:	20000e38 	.word	0x20000e38

00002a08 <LCD_PowerOn>:
 *
 * This routine powers the LCD on and initializes the related hardware.
 *
 ******************************************************************************/
void LCD_PowerOn (void)
{
    2a08:	b508      	push	{r3, lr}
    /* Configure control lines E, RW, and RS as output */
    GPIO_PinModeSet (LCD_CTRL_PORT, LCD_CTRL_PIN_E, gpioModePushPull, 0);
    2a0a:	2005      	movs	r0, #5
    2a0c:	2103      	movs	r1, #3
    2a0e:	2204      	movs	r2, #4
    2a10:	2300      	movs	r3, #0
    2a12:	f7fe fceb 	bl	13ec <GPIO_PinModeSet>
    GPIO_PinModeSet (LCD_CTRL_PORT, LCD_CTRL_PIN_RW, gpioModePushPull, 0);
    2a16:	2005      	movs	r0, #5
    2a18:	2104      	movs	r1, #4
    2a1a:	2204      	movs	r2, #4
    2a1c:	2300      	movs	r3, #0
    2a1e:	f7fe fce5 	bl	13ec <GPIO_PinModeSet>
    GPIO_PinModeSet (LCD_CTRL_PORT, LCD_CTRL_PIN_RS, gpioModePushPull, 0);
    2a22:	2005      	movs	r0, #5
    2a24:	2105      	movs	r1, #5
    2a26:	2204      	movs	r2, #4
    2a28:	2300      	movs	r3, #0
    2a2a:	f7fe fcdf 	bl	13ec <GPIO_PinModeSet>

    /* Set data bus to 0 for default */
    GPIO->P[LCD_DATA_PORT].DOUTCLR = LCD_DATA_MASK;
    2a2e:	4b1f      	ldr	r3, [pc, #124]	; (2aac <LCD_PowerOn+0xa4>)
    2a30:	f44f 427f 	mov.w	r2, #65280	; 0xff00
    2a34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Configure Power Enable Pin for LCD Module, switch it ON */
    GPIO_PinModeSet (LCD_POWER_PORT, LCD_POWER_PIN, gpioModePushPull, 1);
    2a38:	2000      	movs	r0, #0
    2a3a:	2108      	movs	r1, #8
    2a3c:	2204      	movs	r2, #4
    2a3e:	2301      	movs	r3, #1
    2a40:	f7fe fcd4 	bl	13ec <GPIO_PinModeSet>

    /* Wait until LCD is powered up and ready */
    msDelay (100);
    2a44:	2064      	movs	r0, #100	; 0x64
    2a46:	f000 fd55 	bl	34f4 <msDelay>

    /* Set 8bit data width, 2 lines, and instruction table 1 */
    CmdWrite (LCD_CMD_FCT_SET_DL|LCD_CMD_FCT_SET_N|LCD_CMD_FCT_SET_IS1);
    2a4a:	2039      	movs	r0, #57	; 0x39
    2a4c:	f000 f9cc 	bl	2de8 <CmdWrite>

    /* Instruction table 1: BIAS Set BS=0: 1/5 bias for a 2 line LCD */
    CmdWrite (LCD_CMD_IS1_BIAS_SET);
    2a50:	2014      	movs	r0, #20
    2a52:	f000 f9c9 	bl	2de8 <CmdWrite>

    /* Instruction table 1: booster ON, contrast bit C5:4 */
    CmdWrite (LCD_CMD_IS1_IBC_BON |(l_Contrast >> 4));
    2a56:	4b16      	ldr	r3, [pc, #88]	; (2ab0 <LCD_PowerOn+0xa8>)
    2a58:	681b      	ldr	r3, [r3, #0]
    2a5a:	111b      	asrs	r3, r3, #4
    2a5c:	b2db      	uxtb	r3, r3
    2a5e:	f043 0354 	orr.w	r3, r3, #84	; 0x54
    2a62:	b2db      	uxtb	r3, r3
    2a64:	b2db      	uxtb	r3, r3
    2a66:	4618      	mov	r0, r3
    2a68:	f000 f9be 	bl	2de8 <CmdWrite>

    /* Instruction table 1: Follower Ctrl FON=1, Amplifier Ratio = 5 */
    CmdWrite (LCD_CMD_IS1_FOLLOW_FON|LCD_CMD_IS1_FOLLOW_RAB2
    2a6c:	206d      	movs	r0, #109	; 0x6d
    2a6e:	f000 f9bb 	bl	2de8 <CmdWrite>
				    |LCD_CMD_IS1_FOLLOW_RAB0);

    /* Set LCD Contrast bit C3:0 */
    CmdWrite (LCD_CMD_IS1_CONTR |(l_Contrast & 0x0F));
    2a72:	4b0f      	ldr	r3, [pc, #60]	; (2ab0 <LCD_PowerOn+0xa8>)
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	b2db      	uxtb	r3, r3
    2a78:	f003 030f 	and.w	r3, r3, #15
    2a7c:	b2db      	uxtb	r3, r3
    2a7e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    2a82:	b2db      	uxtb	r3, r3
    2a84:	b2db      	uxtb	r3, r3
    2a86:	4618      	mov	r0, r3
    2a88:	f000 f9ae 	bl	2de8 <CmdWrite>

    /* Select instruction table 0 */
    CmdWrite (LCD_CMD_FCT_SET_DL|LCD_CMD_FCT_SET_N|LCD_CMD_FCT_SET_IS0);
    2a8c:	2038      	movs	r0, #56	; 0x38
    2a8e:	f000 f9ab 	bl	2de8 <CmdWrite>

    /* Switch display ON, cursor OFF and no blinking */
    CmdWrite (LCD_CMD_DISPLAY_ON_D);
    2a92:	200c      	movs	r0, #12
    2a94:	f000 f9a8 	bl	2de8 <CmdWrite>

    /* Clear display, set cursor home */
    CmdWrite (LCD_CMD_CLEAR_DISPLAY);
    2a98:	2001      	movs	r0, #1
    2a9a:	f000 f9a5 	bl	2de8 <CmdWrite>

    /* Set cursor to autoincrement mode */
    CmdWrite (LCD_CMD_ENTRY_MODE_ID);
    2a9e:	2006      	movs	r0, #6
    2aa0:	f000 f9a2 	bl	2de8 <CmdWrite>

    /* LCD is now ON */
    l_flgLCD_IsOn = true;
    2aa4:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <LCD_PowerOn+0xac>)
    2aa6:	2201      	movs	r2, #1
    2aa8:	701a      	strb	r2, [r3, #0]
}
    2aaa:	bd08      	pop	{r3, pc}
    2aac:	40006000 	.word	0x40006000
    2ab0:	20000038 	.word	0x20000038
    2ab4:	20000e3c 	.word	0x20000e3c

00002ab8 <LCD_PowerOff>:
 *
 ******************************************************************************/
void LCD_PowerOff (void)
{
    /* LCD will be switched OFF */
    l_flgLCD_IsOn = false;
    2ab8:	4b0c      	ldr	r3, [pc, #48]	; (2aec <LCD_PowerOff+0x34>)
    2aba:	2200      	movs	r2, #0
    2abc:	701a      	strb	r2, [r3, #0]

    /* Set LCD Power Enable Pin to OFF */
    SET_LCD_POWER_PIN(0);
    2abe:	4b0c      	ldr	r3, [pc, #48]	; (2af0 <LCD_PowerOff+0x38>)
    2ac0:	2200      	movs	r2, #0
    2ac2:	601a      	str	r2, [r3, #0]

    /*
     * Set all other signals also to GND, otherwise these will provide enough
     * power for the LCD to be still active!
     */
    SET_LCD_DATA_MODE_OUT;	// data bus output mode
    2ac4:	4b0b      	ldr	r3, [pc, #44]	; (2af4 <LCD_PowerOff+0x3c>)
    2ac6:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
    2aca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    SET_LCD_CTRL_PIN_RW(0);	// set RW pin to 0
    2ace:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <LCD_PowerOff+0x40>)
    2ad0:	2200      	movs	r2, #0
    2ad2:	601a      	str	r2, [r3, #0]
    SET_LCD_CTRL_PIN_RS(0);	// set RS pin to 0
    2ad4:	4b09      	ldr	r3, [pc, #36]	; (2afc <LCD_PowerOff+0x44>)
    2ad6:	2200      	movs	r2, #0
    2ad8:	601a      	str	r2, [r3, #0]
    WRITE_LCD_DATA (0x00);	// set data bus to 0x00
    2ada:	4b06      	ldr	r3, [pc, #24]	; (2af4 <LCD_PowerOff+0x3c>)
    2adc:	2200      	movs	r2, #0
    2ade:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    SET_LCD_CTRL_PIN_E (0);	// set E pin to 0
    2ae2:	4b07      	ldr	r3, [pc, #28]	; (2b00 <LCD_PowerOff+0x48>)
    2ae4:	2200      	movs	r2, #0
    2ae6:	601a      	str	r2, [r3, #0]
}
    2ae8:	4770      	bx	lr
    2aea:	bf00      	nop
    2aec:	20000e3c 	.word	0x20000e3c
    2af0:	420c01a0 	.word	0x420c01a0
    2af4:	40006000 	.word	0x40006000
    2af8:	420c1810 	.word	0x420c1810
    2afc:	420c1814 	.word	0x420c1814
    2b00:	420c180c 	.word	0x420c180c

00002b04 <LCD_Printf>:
 * @param[in] frmt
 *	Format string of the text to print - same as for printf().
 *
 ******************************************************************************/
void LCD_Printf (LCD_FIELD_ID id, const char *frmt, ...)
{
    2b04:	b40e      	push	{r1, r2, r3}
    2b06:	b500      	push	{lr}
    2b08:	b084      	sub	sp, #16
    2b0a:	4603      	mov	r3, r0
    2b0c:	f88d 3007 	strb.w	r3, [sp, #7]
va_list	 args;


    va_start (args, frmt);
    2b10:	ab06      	add	r3, sp, #24
    2b12:	9303      	str	r3, [sp, #12]
    LCD_vPrintf (id, frmt, args);
    2b14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2b18:	4618      	mov	r0, r3
    2b1a:	9905      	ldr	r1, [sp, #20]
    2b1c:	9a03      	ldr	r2, [sp, #12]
    2b1e:	f000 f805 	bl	2b2c <LCD_vPrintf>
    va_end (args);
}
    2b22:	b004      	add	sp, #16
    2b24:	f85d eb04 	ldr.w	lr, [sp], #4
    2b28:	b003      	add	sp, #12
    2b2a:	4770      	bx	lr

00002b2c <LCD_vPrintf>:
 * @param[in] args
 *	Variable argument list.
 *
 ******************************************************************************/
void LCD_vPrintf (LCD_FIELD_ID id, const char *frmt, va_list args)
{
    2b2c:	b500      	push	{lr}
    2b2e:	b091      	sub	sp, #68	; 0x44
    2b30:	4603      	mov	r3, r0
    2b32:	9102      	str	r1, [sp, #8]
    2b34:	9201      	str	r2, [sp, #4]
    2b36:	f88d 300f 	strb.w	r3, [sp, #15]
char	 buffer[40];
int	 len, fieldWidth;


    /* Immediately return if LCD is OFF */
    if (! l_flgLCD_IsOn)
    2b3a:	4b54      	ldr	r3, [pc, #336]	; (2c8c <LCD_vPrintf+0x160>)
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	b2db      	uxtb	r3, r3
    2b40:	f083 0301 	eor.w	r3, r3, #1
    2b44:	b2db      	uxtb	r3, r3
    2b46:	2b00      	cmp	r3, #0
    2b48:	d000      	beq.n	2b4c <LCD_vPrintf+0x20>
	return;
    2b4a:	e09b      	b.n	2c84 <LCD_vPrintf+0x158>

    /* Parameter check */
    if (id >= LCD_FIELD_ID_CNT)
    2b4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2b50:	2b07      	cmp	r3, #7
    2b52:	d905      	bls.n	2b60 <LCD_vPrintf+0x34>
    {
	EFM_ASSERT(0);
    2b54:	484e      	ldr	r0, [pc, #312]	; (2c90 <LCD_vPrintf+0x164>)
    2b56:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    2b5a:	f7fd fbdb 	bl	314 <assertEFM>
	return;
    2b5e:	e091      	b.n	2c84 <LCD_vPrintf+0x158>
    }
    if (strlen(frmt) > (sizeof(buffer) - 10))
    2b60:	9802      	ldr	r0, [sp, #8]
    2b62:	f002 fd5b 	bl	561c <strlen>
    2b66:	4603      	mov	r3, r0
    2b68:	2b1e      	cmp	r3, #30
    2b6a:	d905      	bls.n	2b78 <LCD_vPrintf+0x4c>
    {
	EFM_ASSERT(0);
    2b6c:	4848      	ldr	r0, [pc, #288]	; (2c90 <LCD_vPrintf+0x164>)
    2b6e:	f240 1153 	movw	r1, #339	; 0x153
    2b72:	f7fd fbcf 	bl	314 <assertEFM>
	return;
    2b76:	e085      	b.n	2c84 <LCD_vPrintf+0x158>
    }

    vsprintf (buffer, frmt, args);
    2b78:	ab04      	add	r3, sp, #16
    2b7a:	4618      	mov	r0, r3
    2b7c:	9902      	ldr	r1, [sp, #8]
    2b7e:	9a01      	ldr	r2, [sp, #4]
    2b80:	f004 f83c 	bl	6bfc <vsprintf>

    /* Set LCD cursor to the beginning of the field */
    LCD_GotoXY (l_pField[id].X, l_pField[id].Y);
    2b84:	4b43      	ldr	r3, [pc, #268]	; (2c94 <LCD_vPrintf+0x168>)
    2b86:	6819      	ldr	r1, [r3, #0]
    2b88:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2b8c:	4613      	mov	r3, r2
    2b8e:	005b      	lsls	r3, r3, #1
    2b90:	4413      	add	r3, r2
    2b92:	440b      	add	r3, r1
    2b94:	7819      	ldrb	r1, [r3, #0]
    2b96:	4b3f      	ldr	r3, [pc, #252]	; (2c94 <LCD_vPrintf+0x168>)
    2b98:	6818      	ldr	r0, [r3, #0]
    2b9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2b9e:	4613      	mov	r3, r2
    2ba0:	005b      	lsls	r3, r3, #1
    2ba2:	4413      	add	r3, r2
    2ba4:	4403      	add	r3, r0
    2ba6:	785b      	ldrb	r3, [r3, #1]
    2ba8:	4608      	mov	r0, r1
    2baa:	4619      	mov	r1, r3
    2bac:	f000 f8a0 	bl	2cf0 <LCD_GotoXY>

    /* Get field width and string length */
    fieldWidth = l_pField[id].Width;
    2bb0:	4b38      	ldr	r3, [pc, #224]	; (2c94 <LCD_vPrintf+0x168>)
    2bb2:	6819      	ldr	r1, [r3, #0]
    2bb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2bb8:	4613      	mov	r3, r2
    2bba:	005b      	lsls	r3, r3, #1
    2bbc:	4413      	add	r3, r2
    2bbe:	440b      	add	r3, r1
    2bc0:	789b      	ldrb	r3, [r3, #2]
    2bc2:	930e      	str	r3, [sp, #56]	; 0x38
    len = strlen (buffer);
    2bc4:	ab04      	add	r3, sp, #16
    2bc6:	4618      	mov	r0, r3
    2bc8:	f002 fd28 	bl	561c <strlen>
    2bcc:	4603      	mov	r3, r0
    2bce:	930f      	str	r3, [sp, #60]	; 0x3c

    /* If string is too long, truncate it */
    if (len > fieldWidth)
    2bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2bd4:	429a      	cmp	r2, r3
    2bd6:	dd05      	ble.n	2be4 <LCD_vPrintf+0xb8>
	buffer[fieldWidth] = EOS;
    2bd8:	aa04      	add	r2, sp, #16
    2bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2bdc:	4413      	add	r3, r2
    2bde:	2200      	movs	r2, #0
    2be0:	701a      	strb	r2, [r3, #0]

    /* If string is shorter than field width, add spaces */
    while (len < fieldWidth)
    2be2:	e008      	b.n	2bf6 <LCD_vPrintf+0xca>
    2be4:	e007      	b.n	2bf6 <LCD_vPrintf+0xca>
	buffer[len++] = ' ';
    2be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2be8:	1c5a      	adds	r2, r3, #1
    2bea:	920f      	str	r2, [sp, #60]	; 0x3c
    2bec:	aa10      	add	r2, sp, #64	; 0x40
    2bee:	4413      	add	r3, r2
    2bf0:	2220      	movs	r2, #32
    2bf2:	f803 2c30 	strb.w	r2, [r3, #-48]
    /* If string is too long, truncate it */
    if (len > fieldWidth)
	buffer[fieldWidth] = EOS;

    /* If string is shorter than field width, add spaces */
    while (len < fieldWidth)
    2bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2bfa:	429a      	cmp	r2, r3
    2bfc:	dbf3      	blt.n	2be6 <LCD_vPrintf+0xba>
	buffer[len++] = ' ';

    buffer[fieldWidth] = EOS;
    2bfe:	aa04      	add	r2, sp, #16
    2c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2c02:	4413      	add	r3, r2
    2c04:	2200      	movs	r2, #0
    2c06:	701a      	strb	r2, [r3, #0]

    /* Update the respective part of the serial output string */
    strncpy(currSerBuf+(l_pField[id].Y * (LCD_DIMENSION_X+1) + l_pField[id].X),
    2c08:	4b22      	ldr	r3, [pc, #136]	; (2c94 <LCD_vPrintf+0x168>)
    2c0a:	6819      	ldr	r1, [r3, #0]
    2c0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c10:	4613      	mov	r3, r2
    2c12:	005b      	lsls	r3, r3, #1
    2c14:	4413      	add	r3, r2
    2c16:	440b      	add	r3, r1
    2c18:	785b      	ldrb	r3, [r3, #1]
    2c1a:	461a      	mov	r2, r3
    2c1c:	4613      	mov	r3, r2
    2c1e:	011b      	lsls	r3, r3, #4
    2c20:	1899      	adds	r1, r3, r2
    2c22:	4b1c      	ldr	r3, [pc, #112]	; (2c94 <LCD_vPrintf+0x168>)
    2c24:	6818      	ldr	r0, [r3, #0]
    2c26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c2a:	4613      	mov	r3, r2
    2c2c:	005b      	lsls	r3, r3, #1
    2c2e:	4413      	add	r3, r2
    2c30:	4403      	add	r3, r0
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	440b      	add	r3, r1
    2c36:	461a      	mov	r2, r3
    2c38:	4b17      	ldr	r3, [pc, #92]	; (2c98 <LCD_vPrintf+0x16c>)
    2c3a:	18d1      	adds	r1, r2, r3
    2c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2c3e:	aa04      	add	r2, sp, #16
    2c40:	4608      	mov	r0, r1
    2c42:	4611      	mov	r1, r2
    2c44:	461a      	mov	r2, r3
    2c46:	f002 fd19 	bl	567c <strncpy>
	    buffer, len);

    /* At the end of the update sequence write string to LEUART */
    if ((id == LCD_ITEM_DATA  ||  id == LCD_LINE2_TEXT)
    2c4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c4e:	2b06      	cmp	r3, #6
    2c50:	d003      	beq.n	2c5a <LCD_vPrintf+0x12e>
    2c52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c56:	2b03      	cmp	r3, #3
    2c58:	d110      	bne.n	2c7c <LCD_vPrintf+0x150>
    &&  strcmp(currSerBuf, prevSerBuf) != 0)
    2c5a:	480f      	ldr	r0, [pc, #60]	; (2c98 <LCD_vPrintf+0x16c>)
    2c5c:	490f      	ldr	r1, [pc, #60]	; (2c9c <LCD_vPrintf+0x170>)
    2c5e:	f002 fb61 	bl	5324 <strcmp>
    2c62:	4603      	mov	r3, r0
    2c64:	2b00      	cmp	r3, #0
    2c66:	d009      	beq.n	2c7c <LCD_vPrintf+0x150>
    {
	strcpy(prevSerBuf, currSerBuf);
    2c68:	480c      	ldr	r0, [pc, #48]	; (2c9c <LCD_vPrintf+0x170>)
    2c6a:	490b      	ldr	r1, [pc, #44]	; (2c98 <LCD_vPrintf+0x16c>)
    2c6c:	f002 fc78 	bl	5560 <strcpy>

	drvLEUART_puts(currSerBuf);
    2c70:	4809      	ldr	r0, [pc, #36]	; (2c98 <LCD_vPrintf+0x16c>)
    2c72:	f7ff fe45 	bl	2900 <drvLEUART_puts>
	drvLEUART_puts("\n");
    2c76:	480a      	ldr	r0, [pc, #40]	; (2ca0 <LCD_vPrintf+0x174>)
    2c78:	f7ff fe42 	bl	2900 <drvLEUART_puts>
    }

    /* Write string to LCD */
    LCD_Puts (buffer);
    2c7c:	ab04      	add	r3, sp, #16
    2c7e:	4618      	mov	r0, r3
    2c80:	f000 f810 	bl	2ca4 <LCD_Puts>
}
    2c84:	b011      	add	sp, #68	; 0x44
    2c86:	f85d fb04 	ldr.w	pc, [sp], #4
    2c8a:	bf00      	nop
    2c8c:	20000e3c 	.word	0x20000e3c
    2c90:	0000a87c 	.word	0x0000a87c
    2c94:	20000e38 	.word	0x20000e38
    2c98:	2000003c 	.word	0x2000003c
    2c9c:	20000e40 	.word	0x20000e40
    2ca0:	0000a898 	.word	0x0000a898

00002ca4 <LCD_Puts>:
 * @param[in] pStr
 *	String to output on the LCD at the actual cursor position.
 *
 ******************************************************************************/
void LCD_Puts (char *pStr)
{
    2ca4:	b500      	push	{lr}
    2ca6:	b083      	sub	sp, #12
    2ca8:	9001      	str	r0, [sp, #4]
    while (*pStr != EOS)
    2caa:	e006      	b.n	2cba <LCD_Puts+0x16>
	LCD_Putc (*pStr++);
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	1c5a      	adds	r2, r3, #1
    2cb0:	9201      	str	r2, [sp, #4]
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	4618      	mov	r0, r3
    2cb6:	f000 f807 	bl	2cc8 <LCD_Putc>
 *	String to output on the LCD at the actual cursor position.
 *
 ******************************************************************************/
void LCD_Puts (char *pStr)
{
    while (*pStr != EOS)
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d1f4      	bne.n	2cac <LCD_Puts+0x8>
	LCD_Putc (*pStr++);
}
    2cc2:	b003      	add	sp, #12
    2cc4:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc8 <LCD_Putc>:
 * @param[in] c
 *	Character to output on the LCD at the actual cursor position.
 *
 ******************************************************************************/
void LCD_Putc (char c)
{
    2cc8:	b500      	push	{lr}
    2cca:	b083      	sub	sp, #12
    2ccc:	4603      	mov	r3, r0
    2cce:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Write character to LCD data bus */
    if (l_flgLCD_IsOn)
    2cd2:	4b06      	ldr	r3, [pc, #24]	; (2cec <LCD_Putc+0x24>)
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	b2db      	uxtb	r3, r3
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d004      	beq.n	2ce6 <LCD_Putc+0x1e>
	DataWrite (c);
    2cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ce0:	4618      	mov	r0, r3
    2ce2:	f000 f8b1 	bl	2e48 <DataWrite>
}
    2ce6:	b003      	add	sp, #12
    2ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    2cec:	20000e3c 	.word	0x20000e3c

00002cf0 <LCD_GotoXY>:
 * @param[in] y
 *	Y-Position to move cursor to.
 *
 ******************************************************************************/
void LCD_GotoXY (uint8_t x, uint8_t y)
{
    2cf0:	b500      	push	{lr}
    2cf2:	b085      	sub	sp, #20
    2cf4:	4602      	mov	r2, r0
    2cf6:	460b      	mov	r3, r1
    2cf8:	f88d 2007 	strb.w	r2, [sp, #7]
    2cfc:	f88d 3006 	strb.w	r3, [sp, #6]
uint8_t addr;


    /* Immediately return if LCD is OFF */
    if (! l_flgLCD_IsOn)
    2d00:	4b14      	ldr	r3, [pc, #80]	; (2d54 <LCD_GotoXY+0x64>)
    2d02:	781b      	ldrb	r3, [r3, #0]
    2d04:	b2db      	uxtb	r3, r3
    2d06:	f083 0301 	eor.w	r3, r3, #1
    2d0a:	b2db      	uxtb	r3, r3
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d000      	beq.n	2d12 <LCD_GotoXY+0x22>
	return;
    2d10:	e01d      	b.n	2d4e <LCD_GotoXY+0x5e>

    EFM_ASSERT (x < LCD_DIMENSION_X  &&  y < LCD_DIMENSION_Y);
    2d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2d16:	2b0f      	cmp	r3, #15
    2d18:	d803      	bhi.n	2d22 <LCD_GotoXY+0x32>
    2d1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2d1e:	2b01      	cmp	r3, #1
    2d20:	d904      	bls.n	2d2c <LCD_GotoXY+0x3c>
    2d22:	480d      	ldr	r0, [pc, #52]	; (2d58 <LCD_GotoXY+0x68>)
    2d24:	f240 11b7 	movw	r1, #439	; 0x1b7
    2d28:	f7fd faf4 	bl	314 <assertEFM>

    addr = (y * 0x40) + x;
    2d2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2d30:	019b      	lsls	r3, r3, #6
    2d32:	b2da      	uxtb	r2, r3
    2d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2d38:	4413      	add	r3, r2
    2d3a:	f88d 300f 	strb.w	r3, [sp, #15]

    CmdWrite (LCD_CMD_SET_DDRAM_ADDR | addr);
    2d3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d46:	b2db      	uxtb	r3, r3
    2d48:	4618      	mov	r0, r3
    2d4a:	f000 f84d 	bl	2de8 <CmdWrite>
}
    2d4e:	b005      	add	sp, #20
    2d50:	f85d fb04 	ldr.w	pc, [sp], #4
    2d54:	20000e3c 	.word	0x20000e3c
    2d58:	0000a87c 	.word	0x0000a87c

00002d5c <BusyRead>:
 * @return
 *	Current status: busy flag in bit [7] and address counter in bits [6:0].
 *
 ******************************************************************************/
static uint8_t BusyRead (void)
{
    2d5c:	b500      	push	{lr}
    2d5e:	b083      	sub	sp, #12
uint8_t status;

    SET_LCD_DATA_MODE_IN;	// input
    2d60:	4b0f      	ldr	r3, [pc, #60]	; (2da0 <BusyRead+0x44>)
    2d62:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
    2d66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    SET_LCD_CTRL_PIN_RW(1);	// read
    2d6a:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <BusyRead+0x48>)
    2d6c:	2201      	movs	r2, #1
    2d6e:	601a      	str	r2, [r3, #0]
    SET_LCD_CTRL_PIN_RS(0);	// register
    2d70:	4b0d      	ldr	r3, [pc, #52]	; (2da8 <BusyRead+0x4c>)
    2d72:	2200      	movs	r2, #0
    2d74:	601a      	str	r2, [r3, #0]
    SET_LCD_CTRL_PIN_E (1);	// enable LCD output
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <BusyRead+0x50>)
    2d78:	2201      	movs	r2, #1
    2d7a:	601a      	str	r2, [r3, #0]

    DelayTick();
    2d7c:	f000 fc06 	bl	358c <DelayTick>
    status = READ_LCD_DATA();	// read busy flag
    2d80:	4b07      	ldr	r3, [pc, #28]	; (2da0 <BusyRead+0x44>)
    2d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    2d86:	0a1b      	lsrs	r3, r3, #8
    2d88:	f88d 3007 	strb.w	r3, [sp, #7]

    SET_LCD_CTRL_PIN_E (0);	// disable LCD output
    2d8c:	4b07      	ldr	r3, [pc, #28]	; (2dac <BusyRead+0x50>)
    2d8e:	2200      	movs	r2, #0
    2d90:	601a      	str	r2, [r3, #0]

    return status;
    2d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    2d96:	4618      	mov	r0, r3
    2d98:	b003      	add	sp, #12
    2d9a:	f85d fb04 	ldr.w	pc, [sp], #4
    2d9e:	bf00      	nop
    2da0:	40006000 	.word	0x40006000
    2da4:	420c1810 	.word	0x420c1810
    2da8:	420c1814 	.word	0x420c1814
    2dac:	420c180c 	.word	0x420c180c

00002db0 <WaitCtrlReady>:
 * @return
 *	Status: false if LCD is ready now, true in case of timeout
 *
 ******************************************************************************/
static bool WaitCtrlReady (void)
{
    2db0:	b500      	push	{lr}
    2db2:	b083      	sub	sp, #12
int	i;

    for (i = 0;  i < LCD_WAIT_READY_TIMEOUT;  i++)
    2db4:	2300      	movs	r3, #0
    2db6:	9301      	str	r3, [sp, #4]
    2db8:	e00d      	b.n	2dd6 <WaitCtrlReady+0x26>
    {
	if ((BusyRead() & (1 << 7)) == false)
    2dba:	f7ff ffcf 	bl	2d5c <BusyRead>
    2dbe:	4603      	mov	r3, r0
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	b25b      	sxtb	r3, r3
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	db01      	blt.n	2dcc <WaitCtrlReady+0x1c>
	    return false;
    2dc8:	2300      	movs	r3, #0
    2dca:	e008      	b.n	2dde <WaitCtrlReady+0x2e>

	DelayTick();	// delay for 30us
    2dcc:	f000 fbde 	bl	358c <DelayTick>
 ******************************************************************************/
static bool WaitCtrlReady (void)
{
int	i;

    for (i = 0;  i < LCD_WAIT_READY_TIMEOUT;  i++)
    2dd0:	9b01      	ldr	r3, [sp, #4]
    2dd2:	3301      	adds	r3, #1
    2dd4:	9301      	str	r3, [sp, #4]
    2dd6:	9b01      	ldr	r3, [sp, #4]
    2dd8:	2b1f      	cmp	r3, #31
    2dda:	ddee      	ble.n	2dba <WaitCtrlReady+0xa>
	    return false;

	DelayTick();	// delay for 30us
    }

    return true;	// timeout
    2ddc:	2301      	movs	r3, #1
}
    2dde:	4618      	mov	r0, r3
    2de0:	b003      	add	sp, #12
    2de2:	f85d fb04 	ldr.w	pc, [sp], #4
    2de6:	bf00      	nop

00002de8 <CmdWrite>:
 * @param[in] cmd
 *	Command to write to the LCD controller.
 *
 ******************************************************************************/
static void CmdWrite (uint8_t cmd)
{
    2de8:	b500      	push	{lr}
    2dea:	b083      	sub	sp, #12
    2dec:	4603      	mov	r3, r0
    2dee:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if LCD controller is ready to receive a new command */
    if (WaitCtrlReady())
    2df2:	f7ff ffdd 	bl	2db0 <WaitCtrlReady>
    2df6:	4603      	mov	r3, r0
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d000      	beq.n	2dfe <CmdWrite+0x16>
	return;			// timeout - abort
    2dfc:	e018      	b.n	2e30 <CmdWrite+0x48>

    SET_LCD_DATA_MODE_OUT;	// output
    2dfe:	4b0e      	ldr	r3, [pc, #56]	; (2e38 <CmdWrite+0x50>)
    2e00:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
    2e04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    SET_LCD_CTRL_PIN_RW(0);	// write
    2e08:	4b0c      	ldr	r3, [pc, #48]	; (2e3c <CmdWrite+0x54>)
    2e0a:	2200      	movs	r2, #0
    2e0c:	601a      	str	r2, [r3, #0]
    SET_LCD_CTRL_PIN_RS(0);	// register
    2e0e:	4b0c      	ldr	r3, [pc, #48]	; (2e40 <CmdWrite+0x58>)
    2e10:	2200      	movs	r2, #0
    2e12:	601a      	str	r2, [r3, #0]

    WRITE_LCD_DATA (cmd);
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <CmdWrite+0x50>)
    2e16:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2e1a:	0212      	lsls	r2, r2, #8
    2e1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    SET_LCD_CTRL_PIN_E (1);	// enable data valid
    2e20:	4b08      	ldr	r3, [pc, #32]	; (2e44 <CmdWrite+0x5c>)
    2e22:	2201      	movs	r2, #1
    2e24:	601a      	str	r2, [r3, #0]
    DelayTick();
    2e26:	f000 fbb1 	bl	358c <DelayTick>
    SET_LCD_CTRL_PIN_E (0);	// disable data valid
    2e2a:	4b06      	ldr	r3, [pc, #24]	; (2e44 <CmdWrite+0x5c>)
    2e2c:	2200      	movs	r2, #0
    2e2e:	601a      	str	r2, [r3, #0]
}
    2e30:	b003      	add	sp, #12
    2e32:	f85d fb04 	ldr.w	pc, [sp], #4
    2e36:	bf00      	nop
    2e38:	40006000 	.word	0x40006000
    2e3c:	420c1810 	.word	0x420c1810
    2e40:	420c1814 	.word	0x420c1814
    2e44:	420c180c 	.word	0x420c180c

00002e48 <DataWrite>:
 * @param[in] data
 *	Data to write to the internal memory of the LCD controller.
 *
 ******************************************************************************/
static void DataWrite (uint8_t data)
{
    2e48:	b500      	push	{lr}
    2e4a:	b083      	sub	sp, #12
    2e4c:	4603      	mov	r3, r0
    2e4e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if LCD controller is ready to receive new data */
    if (WaitCtrlReady())
    2e52:	f7ff ffad 	bl	2db0 <WaitCtrlReady>
    2e56:	4603      	mov	r3, r0
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d000      	beq.n	2e5e <DataWrite+0x16>
	return;			// timeout - abort
    2e5c:	e018      	b.n	2e90 <DataWrite+0x48>

    SET_LCD_DATA_MODE_OUT;	// output
    2e5e:	4b0e      	ldr	r3, [pc, #56]	; (2e98 <DataWrite+0x50>)
    2e60:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
    2e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    SET_LCD_CTRL_PIN_RW(0);	// write
    2e68:	4b0c      	ldr	r3, [pc, #48]	; (2e9c <DataWrite+0x54>)
    2e6a:	2200      	movs	r2, #0
    2e6c:	601a      	str	r2, [r3, #0]
    SET_LCD_CTRL_PIN_RS(1);	// data bus
    2e6e:	4b0c      	ldr	r3, [pc, #48]	; (2ea0 <DataWrite+0x58>)
    2e70:	2201      	movs	r2, #1
    2e72:	601a      	str	r2, [r3, #0]

    WRITE_LCD_DATA (data);
    2e74:	4b08      	ldr	r3, [pc, #32]	; (2e98 <DataWrite+0x50>)
    2e76:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2e7a:	0212      	lsls	r2, r2, #8
    2e7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    SET_LCD_CTRL_PIN_E (1);	// enable data valid
    2e80:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <DataWrite+0x5c>)
    2e82:	2201      	movs	r2, #1
    2e84:	601a      	str	r2, [r3, #0]
    DelayTick();
    2e86:	f000 fb81 	bl	358c <DelayTick>
    SET_LCD_CTRL_PIN_E (0);	// disable data valid
    2e8a:	4b06      	ldr	r3, [pc, #24]	; (2ea4 <DataWrite+0x5c>)
    2e8c:	2200      	movs	r2, #0
    2e8e:	601a      	str	r2, [r3, #0]
}
    2e90:	b003      	add	sp, #12
    2e92:	f85d fb04 	ldr.w	pc, [sp], #4
    2e96:	bf00      	nop
    2e98:	40006000 	.word	0x40006000
    2e9c:	420c1810 	.word	0x420c1810
    2ea0:	420c1814 	.word	0x420c1814
    2ea4:	420c180c 	.word	0x420c180c

00002ea8 <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
    2ea8:	b086      	sub	sp, #24
    2eaa:	9003      	str	r0, [sp, #12]
    2eac:	9102      	str	r1, [sp, #8]
    2eae:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    2eb0:	9b03      	ldr	r3, [sp, #12]
    2eb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    2eb6:	00da      	lsls	r2, r3, #3
    2eb8:	9b02      	ldr	r3, [sp, #8]
    2eba:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    2ebc:	009b      	lsls	r3, r3, #2
    2ebe:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
    2ec0:	9b05      	ldr	r3, [sp, #20]
    2ec2:	9a01      	ldr	r2, [sp, #4]
    2ec4:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
    2ec6:	b006      	add	sp, #24
    2ec8:	4770      	bx	lr
    2eca:	bf00      	nop

00002ecc <time>:
#elif defined (__GNUC__)
time_t time( time_t * timer )
#else
#error Undefined toolkit, need to define alignment
#endif
{
    2ecc:	b500      	push	{lr}
    2ece:	b085      	sub	sp, #20
    2ed0:	9001      	str	r0, [sp, #4]
  time_t t;

  /* Add the time offset */
  t = g_rtcStartTime;
    2ed2:	4b1d      	ldr	r3, [pc, #116]	; (2f48 <time+0x7c>)
    2ed4:	681b      	ldr	r3, [r3, #0]
    2ed6:	9303      	str	r3, [sp, #12]

  /* RAGE: Disable overflow interrupt */
  BITBAND_Peripheral (&(RTC->IEN), _RTC_IEN_OF_SHIFT, 0);
    2ed8:	481c      	ldr	r0, [pc, #112]	; (2f4c <time+0x80>)
    2eda:	2100      	movs	r1, #0
    2edc:	2200      	movs	r2, #0
    2ede:	f7ff ffe3 	bl	2ea8 <BITBAND_Peripheral>

  /* Add time based on number of counter overflows*/
  t += rtcOverflowCounter * rtcOverflowInterval;
    2ee2:	4b1b      	ldr	r3, [pc, #108]	; (2f50 <time+0x84>)
    2ee4:	681b      	ldr	r3, [r3, #0]
    2ee6:	4a1b      	ldr	r2, [pc, #108]	; (2f54 <time+0x88>)
    2ee8:	6812      	ldr	r2, [r2, #0]
    2eea:	fb02 f203 	mul.w	r2, r2, r3
    2eee:	9b03      	ldr	r3, [sp, #12]
    2ef0:	4413      	add	r3, r2
    2ef2:	9303      	str	r3, [sp, #12]

  /* Add remainder if the overflow interval is not an integer */
  if ( rtcOverflowIntervalR != 0 )
    2ef4:	4b18      	ldr	r3, [pc, #96]	; (2f58 <time+0x8c>)
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d00c      	beq.n	2f16 <time+0x4a>
  {
    t += (rtcOverflowCounter * rtcOverflowIntervalR) / rtcCountsPerSec;
    2efc:	4b14      	ldr	r3, [pc, #80]	; (2f50 <time+0x84>)
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	4a15      	ldr	r2, [pc, #84]	; (2f58 <time+0x8c>)
    2f02:	6812      	ldr	r2, [r2, #0]
    2f04:	fb02 f203 	mul.w	r2, r2, r3
    2f08:	4b14      	ldr	r3, [pc, #80]	; (2f5c <time+0x90>)
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	fbb2 f2f3 	udiv	r2, r2, r3
    2f10:	9b03      	ldr	r3, [sp, #12]
    2f12:	4413      	add	r3, r2
    2f14:	9303      	str	r3, [sp, #12]
  }

  /* Add the number of seconds for RTC */
  t += ( RTC->CNT / rtcCountsPerSec );
    2f16:	4b12      	ldr	r3, [pc, #72]	; (2f60 <time+0x94>)
    2f18:	685a      	ldr	r2, [r3, #4]
    2f1a:	4b10      	ldr	r3, [pc, #64]	; (2f5c <time+0x90>)
    2f1c:	881b      	ldrh	r3, [r3, #0]
    2f1e:	fbb2 f2f3 	udiv	r2, r2, r3
    2f22:	9b03      	ldr	r3, [sp, #12]
    2f24:	4413      	add	r3, r2
    2f26:	9303      	str	r3, [sp, #12]

  /* RAGE: Enable overflow interrupt again */
  BITBAND_Peripheral (&(RTC->IEN), _RTC_IEN_OF_SHIFT, 1);
    2f28:	4808      	ldr	r0, [pc, #32]	; (2f4c <time+0x80>)
    2f2a:	2100      	movs	r1, #0
    2f2c:	2201      	movs	r2, #1
    2f2e:	f7ff ffbb 	bl	2ea8 <BITBAND_Peripheral>

  /* Copy system time to timer if not NULL*/
  if ( timer != NULL )
    2f32:	9b01      	ldr	r3, [sp, #4]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d002      	beq.n	2f3e <time+0x72>
  {
    *timer = t;
    2f38:	9b01      	ldr	r3, [sp, #4]
    2f3a:	9a03      	ldr	r2, [sp, #12]
    2f3c:	601a      	str	r2, [r3, #0]
  }

  return t;
    2f3e:	9b03      	ldr	r3, [sp, #12]
}
    2f40:	4618      	mov	r0, r3
    2f42:	b005      	add	sp, #20
    2f44:	f85d fb04 	ldr.w	pc, [sp], #4
    2f48:	20000e6c 	.word	0x20000e6c
    2f4c:	4008001c 	.word	0x4008001c
    2f50:	20000e70 	.word	0x20000e70
    2f54:	20000e74 	.word	0x20000e74
    2f58:	20000e78 	.word	0x20000e78
    2f5c:	20000e68 	.word	0x20000e68
    2f60:	40080000 	.word	0x40080000

00002f64 <clockInit>:
 * @param[in] init
 *   CLOCK initialization structure with start date and RTC frequency.
 *
 ******************************************************************************/
void clockInit(Clock_Init_TypeDef *init)
{
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
    2f68:	9001      	str	r0, [sp, #4]
  /* Store configuration variables */
  rtcCountsPerSec = init->rtcCountsPerSec;
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f6e:	b29a      	uxth	r2, r3
    2f70:	4b10      	ldr	r3, [pc, #64]	; (2fb4 <clockInit+0x50>)
    2f72:	801a      	strh	r2, [r3, #0]

  /* Reset overflow counter */
  rtcOverflowCounter = 0;
    2f74:	4b10      	ldr	r3, [pc, #64]	; (2fb8 <clockInit+0x54>)
    2f76:	2200      	movs	r2, #0
    2f78:	601a      	str	r2, [r3, #0]

  /* Calculate overflow interval based on RTC counter width and frequency */
  rtcOverflowInterval   = ((0x00FFFFFF+1) / rtcCountsPerSec);
    2f7a:	4b0e      	ldr	r3, [pc, #56]	; (2fb4 <clockInit+0x50>)
    2f7c:	881b      	ldrh	r3, [r3, #0]
    2f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2f82:	fb92 f3f3 	sdiv	r3, r2, r3
    2f86:	461a      	mov	r2, r3
    2f88:	4b0c      	ldr	r3, [pc, #48]	; (2fbc <clockInit+0x58>)
    2f8a:	601a      	str	r2, [r3, #0]
  rtcOverflowIntervalR  = ((0x00FFFFFF+1) % rtcCountsPerSec); /* remainder */
    2f8c:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <clockInit+0x50>)
    2f8e:	881b      	ldrh	r3, [r3, #0]
    2f90:	461a      	mov	r2, r3
    2f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f96:	fb93 f1f2 	sdiv	r1, r3, r2
    2f9a:	fb02 f201 	mul.w	r2, r2, r1
    2f9e:	1a9b      	subs	r3, r3, r2
    2fa0:	461a      	mov	r2, r3
    2fa2:	4b07      	ldr	r3, [pc, #28]	; (2fc0 <clockInit+0x5c>)
    2fa4:	601a      	str	r2, [r3, #0]

  /* Set epoch offset */
  clockSetStartCalendar(&init->startDate);
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	4618      	mov	r0, r3
    2faa:	f000 f80b 	bl	2fc4 <clockSetStartCalendar>
}
    2fae:	b003      	add	sp, #12
    2fb0:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb4:	20000e68 	.word	0x20000e68
    2fb8:	20000e70 	.word	0x20000e70
    2fbc:	20000e74 	.word	0x20000e74
    2fc0:	20000e78 	.word	0x20000e78

00002fc4 <clockSetStartCalendar>:
 *   Calendar struct which is converted to unix time and used as new epoch
 *   offset
 *
 ******************************************************************************/
void clockSetStartCalendar(struct tm * timeptr)
{
    2fc4:	b500      	push	{lr}
    2fc6:	b083      	sub	sp, #12
    2fc8:	9001      	str	r0, [sp, #4]
  timeptr->tm_isdst = 0;		// always 0 for mktime()
    2fca:	9b01      	ldr	r3, [sp, #4]
    2fcc:	2200      	movs	r2, #0
    2fce:	621a      	str	r2, [r3, #32]
  g_rtcStartTime = mktime(timeptr);
    2fd0:	9801      	ldr	r0, [sp, #4]
    2fd2:	f001 fd53 	bl	4a7c <mktime>
    2fd6:	4602      	mov	r2, r0
    2fd8:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <clockSetStartCalendar+0x20>)
    2fda:	601a      	str	r2, [r3, #0]
}
    2fdc:	b003      	add	sp, #12
    2fde:	f85d fb04 	ldr.w	pc, [sp], #4
    2fe2:	bf00      	nop
    2fe4:	20000e6c 	.word	0x20000e6c

00002fe8 <clockOverflow>:
 *        overflows has occurred since start time
 *
 ******************************************************************************/
uint32_t clockOverflow(void)
{
  rtcOverflowCounter++;
    2fe8:	4b04      	ldr	r3, [pc, #16]	; (2ffc <clockOverflow+0x14>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	1c5a      	adds	r2, r3, #1
    2fee:	4b03      	ldr	r3, [pc, #12]	; (2ffc <clockOverflow+0x14>)
    2ff0:	601a      	str	r2, [r3, #0]
  return rtcOverflowCounter;
    2ff2:	4b02      	ldr	r3, [pc, #8]	; (2ffc <clockOverflow+0x14>)
    2ff4:	681b      	ldr	r3, [r3, #0]
}
    2ff6:	4618      	mov	r0, r3
    2ff8:	4770      	bx	lr
    2ffa:	bf00      	nop
    2ffc:	20000e70 	.word	0x20000e70

00003000 <clockGetOverflowCounter>:
 * @brief Get current value of the overflow counter.
 *
 ******************************************************************************/
uint32_t clockGetOverflowCounter(void)
{
  return rtcOverflowCounter;
    3000:	4b01      	ldr	r3, [pc, #4]	; (3008 <clockGetOverflowCounter+0x8>)
    3002:	681b      	ldr	r3, [r3, #0]
}
    3004:	4618      	mov	r0, r3
    3006:	4770      	bx	lr
    3008:	20000e70 	.word	0x20000e70

0000300c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    300c:	b082      	sub	sp, #8
    300e:	4603      	mov	r3, r0
    3010:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3014:	4b07      	ldr	r3, [pc, #28]	; (3034 <NVIC_EnableIRQ+0x28>)
    3016:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    301a:	0952      	lsrs	r2, r2, #5
    301c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    3020:	f001 011f 	and.w	r1, r1, #31
    3024:	2001      	movs	r0, #1
    3026:	fa00 f101 	lsl.w	r1, r0, r1
    302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    302e:	b002      	add	sp, #8
    3030:	4770      	bx	lr
    3032:	bf00      	nop
    3034:	e000e100 	.word	0xe000e100

00003038 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3038:	b082      	sub	sp, #8
    303a:	4603      	mov	r3, r0
    303c:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3040:	4b07      	ldr	r3, [pc, #28]	; (3060 <NVIC_ClearPendingIRQ+0x28>)
    3042:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    3046:	0952      	lsrs	r2, r2, #5
    3048:	f89d 1007 	ldrb.w	r1, [sp, #7]
    304c:	f001 011f 	and.w	r1, r1, #31
    3050:	2001      	movs	r0, #1
    3052:	fa00 f101 	lsl.w	r1, r0, r1
    3056:	3260      	adds	r2, #96	; 0x60
    3058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    305c:	b002      	add	sp, #8
    305e:	4770      	bx	lr
    3060:	e000e100 	.word	0xe000e100

00003064 <BITBAND_Peripheral>:
 * @param[in] val Value to set bit to, 0 or 1.
 ******************************************************************************/
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
    3064:	b086      	sub	sp, #24
    3066:	9003      	str	r0, [sp, #12]
    3068:	9102      	str	r1, [sp, #8]
    306a:	9201      	str	r2, [sp, #4]
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    306c:	9b03      	ldr	r3, [sp, #12]
    306e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3072:	00da      	lsls	r2, r3, #3
    3074:	9b02      	ldr	r3, [sp, #8]
    3076:	4413      	add	r3, r2
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    3078:	009b      	lsls	r3, r3, #2
    307a:	9305      	str	r3, [sp, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
    307c:	9b05      	ldr	r3, [sp, #20]
    307e:	9a01      	ldr	r2, [sp, #4]
    3080:	601a      	str	r2, [r3, #0]
  uint32_t tmp = *addr;
  /* Make sure val is not more than 1, because we only want to set one bit. */
  val &= 0x1;
  *addr = (tmp & ~(1 << bit)) | (val << bit);
#endif /* defined(BITBAND_PER_BASE) */
}
    3082:	b006      	add	sp, #24
    3084:	4770      	bx	lr
    3086:	bf00      	nop

00003088 <INT_Disable>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3088:	b672      	cpsid	i
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Disable(void)
{
  __disable_irq();
  if (INT_LockCnt < UINT32_MAX)
    308a:	4b07      	ldr	r3, [pc, #28]	; (30a8 <INT_Disable+0x20>)
    308c:	681b      	ldr	r3, [r3, #0]
    308e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3092:	d004      	beq.n	309e <INT_Disable+0x16>
  {
    INT_LockCnt++;
    3094:	4b04      	ldr	r3, [pc, #16]	; (30a8 <INT_Disable+0x20>)
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	1c5a      	adds	r2, r3, #1
    309a:	4b03      	ldr	r3, [pc, #12]	; (30a8 <INT_Disable+0x20>)
    309c:	601a      	str	r2, [r3, #0]
  }

  return INT_LockCnt;
    309e:	4b02      	ldr	r3, [pc, #8]	; (30a8 <INT_Disable+0x20>)
    30a0:	681b      	ldr	r3, [r3, #0]
}
    30a2:	4618      	mov	r0, r3
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	20000a2c 	.word	0x20000a2c

000030ac <INT_Enable>:
 *   Decrement interrupt lock level counter and enable interrupts if counter
 *   reached zero.
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Enable(void)
{
    30ac:	b082      	sub	sp, #8
  uint32_t retVal;

  if (INT_LockCnt > 0)
    30ae:	4b0b      	ldr	r3, [pc, #44]	; (30dc <INT_Enable+0x30>)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	2b00      	cmp	r3, #0
    30b4:	d00d      	beq.n	30d2 <INT_Enable+0x26>
  {
    INT_LockCnt--;
    30b6:	4b09      	ldr	r3, [pc, #36]	; (30dc <INT_Enable+0x30>)
    30b8:	681b      	ldr	r3, [r3, #0]
    30ba:	1e5a      	subs	r2, r3, #1
    30bc:	4b07      	ldr	r3, [pc, #28]	; (30dc <INT_Enable+0x30>)
    30be:	601a      	str	r2, [r3, #0]
    retVal = INT_LockCnt;
    30c0:	4b06      	ldr	r3, [pc, #24]	; (30dc <INT_Enable+0x30>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	9301      	str	r3, [sp, #4]
    if (retVal == 0)
    30c6:	9b01      	ldr	r3, [sp, #4]
    30c8:	2b00      	cmp	r3, #0
    30ca:	d100      	bne.n	30ce <INT_Enable+0x22>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    30cc:	b662      	cpsie	i
    {
      __enable_irq();
    }
    return retVal;
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	e000      	b.n	30d4 <INT_Enable+0x28>
  }
  else
  {
    return 0;
    30d2:	2300      	movs	r3, #0
  }
}
    30d4:	4618      	mov	r0, r3
    30d6:	b002      	add	sp, #8
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	20000a2c 	.word	0x20000a2c

000030e0 <RTC_IntClear>:
 *   RTC interrupt sources to clear. Use a set of interrupt flags OR-ed
 *   together to clear multiple interrupt sources for the RTC module
 *   (RTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void RTC_IntClear(uint32_t flags)
{
    30e0:	b082      	sub	sp, #8
    30e2:	9001      	str	r0, [sp, #4]
  RTC->IFC = flags;
    30e4:	4b02      	ldr	r3, [pc, #8]	; (30f0 <RTC_IntClear+0x10>)
    30e6:	9a01      	ldr	r2, [sp, #4]
    30e8:	619a      	str	r2, [r3, #24]
}
    30ea:	b002      	add	sp, #8
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop
    30f0:	40080000 	.word	0x40080000

000030f4 <RTC_IntEnable>:
 *   RTC interrupt sources to enable. Use a set of interrupt flags OR-ed
 *   together to set multiple interrupt sources for the RTC module
 *   (RTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void RTC_IntEnable(uint32_t flags)
{
    30f4:	b082      	sub	sp, #8
    30f6:	9001      	str	r0, [sp, #4]
  RTC->IEN |= flags;
    30f8:	4b03      	ldr	r3, [pc, #12]	; (3108 <RTC_IntEnable+0x14>)
    30fa:	4a03      	ldr	r2, [pc, #12]	; (3108 <RTC_IntEnable+0x14>)
    30fc:	69d1      	ldr	r1, [r2, #28]
    30fe:	9a01      	ldr	r2, [sp, #4]
    3100:	430a      	orrs	r2, r1
    3102:	61da      	str	r2, [r3, #28]
}
    3104:	b002      	add	sp, #8
    3106:	4770      	bx	lr
    3108:	40080000 	.word	0x40080000

0000310c <AlarmClockInit>:
 * The Low Frequency (LF) clock and RTC prescaler must be configured before
 * calling this function.
 *
 ******************************************************************************/
void	AlarmClockInit (void)
{
    310c:	b530      	push	{r4, r5, lr}
    310e:	b08d      	sub	sp, #52	; 0x34
    /* Initialize the POSIX time() module (see clock.c) */
    Clock_Init_TypeDef initialCalendar = CLOCK_INIT_DEFAULT;
    3110:	4b17      	ldr	r3, [pc, #92]	; (3170 <AlarmClockInit+0x64>)
    3112:	ac02      	add	r4, sp, #8
    3114:	461d      	mov	r5, r3
    3116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    311a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    311c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    311e:	e895 0003 	ldmia.w	r5, {r0, r1}
    3122:	e884 0003 	stmia.w	r4, {r0, r1}
#if Y2K38_WORKAROUND
    /* Year 2038 Workaround: shift 2014 to 1914 */
    initialCalendar.startDate.tm_year = 14;
    3126:	230e      	movs	r3, #14
    3128:	9307      	str	r3, [sp, #28]
#endif
    initialCalendar.rtcCountsPerSec = RTC_COUNTS_PER_SEC;
    312a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    312e:	930b      	str	r3, [sp, #44]	; 0x2c
    clockInit (&initialCalendar);
    3130:	ab02      	add	r3, sp, #8
    3132:	4618      	mov	r0, r3
    3134:	f7ff ff16 	bl	2f64 <clockInit>

    /* Configure the RTC */
    RTC_Init_TypeDef rtcInit;
    rtcInit.debugRun = false;
    3138:	2300      	movs	r3, #0
    313a:	f88d 3005 	strb.w	r3, [sp, #5]
    rtcInit.comp0Top = false;
    313e:	2300      	movs	r3, #0
    3140:	f88d 3006 	strb.w	r3, [sp, #6]
    rtcInit.enable = false;
    3144:	2300      	movs	r3, #0
    3146:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Initialize the RTC */
    RTC_Init (&rtcInit);
    314a:	ab01      	add	r3, sp, #4
    314c:	4618      	mov	r0, r3
    314e:	f7fe fea1 	bl	1e94 <RTC_Init>
     * We use all 3 interrupts:
     *   Overflow - to count above 24bit
     *   COMP0    - for the 1s base clock and the software timers
     *   COMP1    - for the high-resolution timer (will be enabled on request)
     */
    RTC_IntEnable (RTC_IEN_COMP0 | RTC_IEN_OF);
    3152:	2003      	movs	r0, #3
    3154:	f7ff ffce 	bl	30f4 <RTC_IntEnable>

    /* Enable RTC */
    RTC_Enable (true);
    3158:	2001      	movs	r0, #1
    315a:	f7fe fe87 	bl	1e6c <RTC_Enable>

    /* Enable RTC interrupts */
    NVIC_ClearPendingIRQ(RTC_IRQn);
    315e:	2018      	movs	r0, #24
    3160:	f7ff ff6a 	bl	3038 <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(RTC_IRQn);
    3164:	2018      	movs	r0, #24
    3166:	f7ff ff51 	bl	300c <NVIC_EnableIRQ>
}
    316a:	b00d      	add	sp, #52	; 0x34
    316c:	bd30      	pop	{r4, r5, pc}
    316e:	bf00      	nop
    3170:	0000a89c 	.word	0x0000a89c

00003174 <RTC_IRQHandler>:
 * - <b>COMP1</b> is used as a high-resolution timer, see @ref msTimerStart().
 *   It may be used as autorepeat timer for the keys, for example.
 *
 ******************************************************************************/
void	RTC_IRQHandler (void)
{
    3174:	b500      	push	{lr}
    3176:	b083      	sub	sp, #12
     * - 150us for COMP0 interrupt (1s) without sTimer, but checking
     *   all MAX_ALARMS (no execution of any alarm functions).
     */

    /* get interrupt status and mask out disabled IRQs */
    status  = RTC->IF;
    3178:	4b59      	ldr	r3, [pc, #356]	; (32e0 <RTC_IRQHandler+0x16c>)
    317a:	691b      	ldr	r3, [r3, #16]
    317c:	9300      	str	r3, [sp, #0]
    status &= RTC->IEN;
    317e:	4b58      	ldr	r3, [pc, #352]	; (32e0 <RTC_IRQHandler+0x16c>)
    3180:	69db      	ldr	r3, [r3, #28]
    3182:	9a00      	ldr	r2, [sp, #0]
    3184:	4013      	ands	r3, r2
    3186:	9300      	str	r3, [sp, #0]

    /* First of all check for OverFlow interrupt and increase high counter */
    if (status & RTC_IF_OF)
    3188:	9b00      	ldr	r3, [sp, #0]
    318a:	f003 0301 	and.w	r3, r3, #1
    318e:	2b00      	cmp	r3, #0
    3190:	d004      	beq.n	319c <RTC_IRQHandler+0x28>
    {
	clockOverflow();		// see clock.c
    3192:	f7ff ff29 	bl	2fe8 <clockOverflow>
	RTC->IFC = RTC_IFC_OF;
    3196:	4b52      	ldr	r3, [pc, #328]	; (32e0 <RTC_IRQHandler+0x16c>)
    3198:	2201      	movs	r2, #1
    319a:	619a      	str	r2, [r3, #24]
    }

    /* Check for COMP0 interrupt which occurs every second */
    if (status & RTC_IF_COMP0)
    319c:	9b00      	ldr	r3, [sp, #0]
    319e:	f003 0302 	and.w	r3, r3, #2
    31a2:	2b00      	cmp	r3, #0
    31a4:	f000 8084 	beq.w	32b0 <RTC_IRQHandler+0x13c>
    {
	/* Generate next COMP0 interrupt after another second */
	RTC_CompareSet (0, (RTC->COMP0 + RTC_COUNTS_PER_SEC) & 0xFFFFFF);
    31a8:	4b4d      	ldr	r3, [pc, #308]	; (32e0 <RTC_IRQHandler+0x16c>)
    31aa:	689b      	ldr	r3, [r3, #8]
    31ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    31b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    31b4:	2000      	movs	r0, #0
    31b6:	4619      	mov	r1, r3
    31b8:	f7fe fe28 	bl	1e0c <RTC_CompareSet>
	RTC->IFC = RTC_IFC_COMP0;
    31bc:	4b48      	ldr	r3, [pc, #288]	; (32e0 <RTC_IRQHandler+0x16c>)
    31be:	2202      	movs	r2, #2
    31c0:	619a      	str	r2, [r3, #24]
	 * Get current UNIX time, convert to <tm>, and store in global struct
	 * <g_CurrDateTime>.  This requires about 100us which is quite long
	 * for an interrupt routine.  Nevertheless we need this information
	 * for comparing the alarm times below.
	 */
	ClockUpdate (true);
    31c2:	2001      	movs	r0, #1
    31c4:	f000 fa10 	bl	35e8 <ClockUpdate>

	/* decrement software timers and call functions if reaching 0 */
	for (i = 0;  i <= l_MaxHdl;  i++)
    31c8:	2300      	movs	r3, #0
    31ca:	9301      	str	r3, [sp, #4]
    31cc:	e021      	b.n	3212 <RTC_IRQHandler+0x9e>
	{
	    if (l_sTimer[i].Counter)
    31ce:	4b45      	ldr	r3, [pc, #276]	; (32e4 <RTC_IRQHandler+0x170>)
    31d0:	9a01      	ldr	r2, [sp, #4]
    31d2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d018      	beq.n	320c <RTC_IRQHandler+0x98>
	    {
		/* only decrement if not already 0 */
		if (--(l_sTimer[i].Counter) == 0)
    31da:	4b42      	ldr	r3, [pc, #264]	; (32e4 <RTC_IRQHandler+0x170>)
    31dc:	9a01      	ldr	r2, [sp, #4]
    31de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    31e2:	3b01      	subs	r3, #1
    31e4:	4a3f      	ldr	r2, [pc, #252]	; (32e4 <RTC_IRQHandler+0x170>)
    31e6:	9901      	ldr	r1, [sp, #4]
    31e8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d10d      	bne.n	320c <RTC_IRQHandler+0x98>
		{
		    /* if reaching 0, call the specified function */
		    if (l_sTimer[i].Function)
    31f0:	4a3c      	ldr	r2, [pc, #240]	; (32e4 <RTC_IRQHandler+0x170>)
    31f2:	9b01      	ldr	r3, [sp, #4]
    31f4:	00db      	lsls	r3, r3, #3
    31f6:	4413      	add	r3, r2
    31f8:	685b      	ldr	r3, [r3, #4]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d006      	beq.n	320c <RTC_IRQHandler+0x98>
			l_sTimer[i].Function (i);
    31fe:	4a39      	ldr	r2, [pc, #228]	; (32e4 <RTC_IRQHandler+0x170>)
    3200:	9b01      	ldr	r3, [sp, #4]
    3202:	00db      	lsls	r3, r3, #3
    3204:	4413      	add	r3, r2
    3206:	685b      	ldr	r3, [r3, #4]
    3208:	9801      	ldr	r0, [sp, #4]
    320a:	4798      	blx	r3
	 * for comparing the alarm times below.
	 */
	ClockUpdate (true);

	/* decrement software timers and call functions if reaching 0 */
	for (i = 0;  i <= l_MaxHdl;  i++)
    320c:	9b01      	ldr	r3, [sp, #4]
    320e:	3301      	adds	r3, #1
    3210:	9301      	str	r3, [sp, #4]
    3212:	4b35      	ldr	r3, [pc, #212]	; (32e8 <RTC_IRQHandler+0x174>)
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	9a01      	ldr	r2, [sp, #4]
    3218:	429a      	cmp	r2, r3
    321a:	ddd8      	ble.n	31ce <RTC_IRQHandler+0x5a>
		}
	    }
	}

	/* compare all alarm times for every minute */
	if (processed_min != g_CurrDateTime.tm_min)
    321c:	4b33      	ldr	r3, [pc, #204]	; (32ec <RTC_IRQHandler+0x178>)
    321e:	781b      	ldrb	r3, [r3, #0]
    3220:	b25a      	sxtb	r2, r3
    3222:	4b33      	ldr	r3, [pc, #204]	; (32f0 <RTC_IRQHandler+0x17c>)
    3224:	685b      	ldr	r3, [r3, #4]
    3226:	429a      	cmp	r2, r3
    3228:	d042      	beq.n	32b0 <RTC_IRQHandler+0x13c>
	{
	    processed_min = g_CurrDateTime.tm_min;
    322a:	4b31      	ldr	r3, [pc, #196]	; (32f0 <RTC_IRQHandler+0x17c>)
    322c:	685b      	ldr	r3, [r3, #4]
    322e:	b2da      	uxtb	r2, r3
    3230:	4b2e      	ldr	r3, [pc, #184]	; (32ec <RTC_IRQHandler+0x178>)
    3232:	701a      	strb	r2, [r3, #0]

	    for (i = 0;  i < MAX_ALARMS;  i++)
    3234:	2300      	movs	r3, #0
    3236:	9301      	str	r3, [sp, #4]
    3238:	e037      	b.n	32aa <RTC_IRQHandler+0x136>
	    {
		/* we compare hours and minutes only */
		if (l_Alarm[i].Enabled
    323a:	4b2e      	ldr	r3, [pc, #184]	; (32f4 <RTC_IRQHandler+0x180>)
    323c:	9a01      	ldr	r2, [sp, #4]
    323e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
    3242:	b2db      	uxtb	r3, r3
    3244:	2b00      	cmp	r3, #0
    3246:	d02d      	beq.n	32a4 <RTC_IRQHandler+0x130>
		&&  l_Alarm[i].Minute == g_CurrDateTime.tm_min
    3248:	4a2a      	ldr	r2, [pc, #168]	; (32f4 <RTC_IRQHandler+0x180>)
    324a:	9b01      	ldr	r3, [sp, #4]
    324c:	00db      	lsls	r3, r3, #3
    324e:	4413      	add	r3, r2
    3250:	789b      	ldrb	r3, [r3, #2]
    3252:	b2db      	uxtb	r3, r3
    3254:	b25a      	sxtb	r2, r3
    3256:	4b26      	ldr	r3, [pc, #152]	; (32f0 <RTC_IRQHandler+0x17c>)
    3258:	685b      	ldr	r3, [r3, #4]
    325a:	429a      	cmp	r2, r3
    325c:	d122      	bne.n	32a4 <RTC_IRQHandler+0x130>
		&&  (l_Alarm[i].Hour  == NONE	// repeat every hour
    325e:	4a25      	ldr	r2, [pc, #148]	; (32f4 <RTC_IRQHandler+0x180>)
    3260:	9b01      	ldr	r3, [sp, #4]
    3262:	00db      	lsls	r3, r3, #3
    3264:	4413      	add	r3, r2
    3266:	785b      	ldrb	r3, [r3, #1]
    3268:	b2db      	uxtb	r3, r3
    326a:	b25b      	sxtb	r3, r3
    326c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3270:	d00a      	beq.n	3288 <RTC_IRQHandler+0x114>
		  || l_Alarm[i].Hour  == g_CurrDateTime.tm_hour))
    3272:	4a20      	ldr	r2, [pc, #128]	; (32f4 <RTC_IRQHandler+0x180>)
    3274:	9b01      	ldr	r3, [sp, #4]
    3276:	00db      	lsls	r3, r3, #3
    3278:	4413      	add	r3, r2
    327a:	785b      	ldrb	r3, [r3, #1]
    327c:	b2db      	uxtb	r3, r3
    327e:	b25a      	sxtb	r2, r3
    3280:	4b1b      	ldr	r3, [pc, #108]	; (32f0 <RTC_IRQHandler+0x17c>)
    3282:	689b      	ldr	r3, [r3, #8]
    3284:	429a      	cmp	r2, r3
    3286:	d10d      	bne.n	32a4 <RTC_IRQHandler+0x130>
		{
		    /* reached alarm time, call the specified function */
		    if (l_Alarm[i].Function)
    3288:	4a1a      	ldr	r2, [pc, #104]	; (32f4 <RTC_IRQHandler+0x180>)
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	00db      	lsls	r3, r3, #3
    328e:	4413      	add	r3, r2
    3290:	685b      	ldr	r3, [r3, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	d006      	beq.n	32a4 <RTC_IRQHandler+0x130>
			l_Alarm[i].Function (i);
    3296:	4a17      	ldr	r2, [pc, #92]	; (32f4 <RTC_IRQHandler+0x180>)
    3298:	9b01      	ldr	r3, [sp, #4]
    329a:	00db      	lsls	r3, r3, #3
    329c:	4413      	add	r3, r2
    329e:	685b      	ldr	r3, [r3, #4]
    32a0:	9801      	ldr	r0, [sp, #4]
    32a2:	4798      	blx	r3
	/* compare all alarm times for every minute */
	if (processed_min != g_CurrDateTime.tm_min)
	{
	    processed_min = g_CurrDateTime.tm_min;

	    for (i = 0;  i < MAX_ALARMS;  i++)
    32a4:	9b01      	ldr	r3, [sp, #4]
    32a6:	3301      	adds	r3, #1
    32a8:	9301      	str	r3, [sp, #4]
    32aa:	9b01      	ldr	r3, [sp, #4]
    32ac:	2b09      	cmp	r3, #9
    32ae:	ddc4      	ble.n	323a <RTC_IRQHandler+0xc6>
	    }
	}
    }	// if (status & RTC_IF_COMP0)

    /* Check for COMP1 interrupt (high-resolution timer) */
    if (status & RTC_IF_COMP1)
    32b0:	9b00      	ldr	r3, [sp, #0]
    32b2:	f003 0304 	and.w	r3, r3, #4
    32b6:	2b00      	cmp	r3, #0
    32b8:	d00e      	beq.n	32d8 <RTC_IRQHandler+0x164>
    {
	/* disable and clear COMP1 interrupt */
	BITBAND_Peripheral (&(RTC->IEN), _RTC_IEN_COMP1_SHIFT, 0);
    32ba:	480f      	ldr	r0, [pc, #60]	; (32f8 <RTC_IRQHandler+0x184>)
    32bc:	2102      	movs	r1, #2
    32be:	2200      	movs	r2, #0
    32c0:	f7ff fed0 	bl	3064 <BITBAND_Peripheral>
	RTC->IFC = RTC_IFC_COMP1;
    32c4:	4b06      	ldr	r3, [pc, #24]	; (32e0 <RTC_IRQHandler+0x16c>)
    32c6:	2204      	movs	r2, #4
    32c8:	619a      	str	r2, [r3, #24]

	/* call the specified function */
	if (l_msTimerFunction)
    32ca:	4b0c      	ldr	r3, [pc, #48]	; (32fc <RTC_IRQHandler+0x188>)
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d002      	beq.n	32d8 <RTC_IRQHandler+0x164>
	    l_msTimerFunction();
    32d2:	4b0a      	ldr	r3, [pc, #40]	; (32fc <RTC_IRQHandler+0x188>)
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	4798      	blx	r3
    }
}
    32d8:	b003      	add	sp, #12
    32da:	f85d fb04 	ldr.w	pc, [sp], #4
    32de:	bf00      	nop
    32e0:	40080000 	.word	0x40080000
    32e4:	20000ecc 	.word	0x20000ecc
    32e8:	20000f1c 	.word	0x20000f1c
    32ec:	20000064 	.word	0x20000064
    32f0:	20001268 	.word	0x20001268
    32f4:	20000e7c 	.word	0x20000e7c
    32f8:	4008001c 	.word	0x4008001c
    32fc:	20000f20 	.word	0x20000f20

00003300 <sTimerCreate>:
 *
 * @see sTimerDelete().
 *
 ******************************************************************************/
TIM_HDL	sTimerCreate   (TIMER_FCT function)
{
    3300:	b500      	push	{lr}
    3302:	b085      	sub	sp, #20
    3304:	9001      	str	r0, [sp, #4]
int	i;	// index variable


    /* Parameter check */
    EFM_ASSERT (function != NULL);
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	2b00      	cmp	r3, #0
    330a:	d104      	bne.n	3316 <sTimerCreate+0x16>
    330c:	4821      	ldr	r0, [pc, #132]	; (3394 <sTimerCreate+0x94>)
    330e:	f240 11d9 	movw	r1, #473	; 0x1d9
    3312:	f7fc ffff 	bl	314 <assertEFM>

    /* Search the next available entry in the list */
    for (i = 0;  i <= l_MaxHdl;  i++)
    3316:	2300      	movs	r3, #0
    3318:	9303      	str	r3, [sp, #12]
    331a:	e016      	b.n	334a <sTimerCreate+0x4a>
    {
	/* see if this entry is free */
	if (l_sTimer[i].Function == NULL)
    331c:	4a1e      	ldr	r2, [pc, #120]	; (3398 <sTimerCreate+0x98>)
    331e:	9b03      	ldr	r3, [sp, #12]
    3320:	00db      	lsls	r3, r3, #3
    3322:	4413      	add	r3, r2
    3324:	685b      	ldr	r3, [r3, #4]
    3326:	2b00      	cmp	r3, #0
    3328:	d10c      	bne.n	3344 <sTimerCreate+0x44>
	{
	    /* yes, allocate it and return handle */
	    l_sTimer[i].Counter  = 0;
    332a:	4b1b      	ldr	r3, [pc, #108]	; (3398 <sTimerCreate+0x98>)
    332c:	9a03      	ldr	r2, [sp, #12]
    332e:	2100      	movs	r1, #0
    3330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	    l_sTimer[i].Function = function;
    3334:	4a18      	ldr	r2, [pc, #96]	; (3398 <sTimerCreate+0x98>)
    3336:	9b03      	ldr	r3, [sp, #12]
    3338:	00db      	lsls	r3, r3, #3
    333a:	4413      	add	r3, r2
    333c:	9a01      	ldr	r2, [sp, #4]
    333e:	605a      	str	r2, [r3, #4]
	    return i;	// return handle for the newly created timer
    3340:	9b03      	ldr	r3, [sp, #12]
    3342:	e023      	b.n	338c <sTimerCreate+0x8c>

    /* Parameter check */
    EFM_ASSERT (function != NULL);

    /* Search the next available entry in the list */
    for (i = 0;  i <= l_MaxHdl;  i++)
    3344:	9b03      	ldr	r3, [sp, #12]
    3346:	3301      	adds	r3, #1
    3348:	9303      	str	r3, [sp, #12]
    334a:	4b14      	ldr	r3, [pc, #80]	; (339c <sTimerCreate+0x9c>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	9a03      	ldr	r2, [sp, #12]
    3350:	429a      	cmp	r2, r3
    3352:	dde3      	ble.n	331c <sTimerCreate+0x1c>
	    return i;	// return handle for the newly created timer
	}
    }

    /* no free entry found - try to extend the current handle count */
    EFM_ASSERT (l_MaxHdl < (MAX_SEC_TIMERS - 1));
    3354:	4b11      	ldr	r3, [pc, #68]	; (339c <sTimerCreate+0x9c>)
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2b08      	cmp	r3, #8
    335a:	dd04      	ble.n	3366 <sTimerCreate+0x66>
    335c:	480d      	ldr	r0, [pc, #52]	; (3394 <sTimerCreate+0x94>)
    335e:	f240 11e9 	movw	r1, #489	; 0x1e9
    3362:	f7fc ffd7 	bl	314 <assertEFM>

    /* increase the current handle count and allocate the new entry */
    i = l_MaxHdl + 1;
    3366:	4b0d      	ldr	r3, [pc, #52]	; (339c <sTimerCreate+0x9c>)
    3368:	681b      	ldr	r3, [r3, #0]
    336a:	3301      	adds	r3, #1
    336c:	9303      	str	r3, [sp, #12]
    l_sTimer[i].Counter  = 0;
    336e:	4b0a      	ldr	r3, [pc, #40]	; (3398 <sTimerCreate+0x98>)
    3370:	9a03      	ldr	r2, [sp, #12]
    3372:	2100      	movs	r1, #0
    3374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    l_sTimer[i].Function = function;
    3378:	4a07      	ldr	r2, [pc, #28]	; (3398 <sTimerCreate+0x98>)
    337a:	9b03      	ldr	r3, [sp, #12]
    337c:	00db      	lsls	r3, r3, #3
    337e:	4413      	add	r3, r2
    3380:	9a01      	ldr	r2, [sp, #4]
    3382:	605a      	str	r2, [r3, #4]

    l_MaxHdl = i;
    3384:	4b05      	ldr	r3, [pc, #20]	; (339c <sTimerCreate+0x9c>)
    3386:	9a03      	ldr	r2, [sp, #12]
    3388:	601a      	str	r2, [r3, #0]

    return i;
    338a:	9b03      	ldr	r3, [sp, #12]
}
    338c:	4618      	mov	r0, r3
    338e:	b005      	add	sp, #20
    3390:	f85d fb04 	ldr.w	pc, [sp], #4
    3394:	0000a8c4 	.word	0x0000a8c4
    3398:	20000ecc 	.word	0x20000ecc
    339c:	20000f1c 	.word	0x20000f1c

000033a0 <sTimerStart>:
 *
 * @see sTimerCancel().
 *
 ******************************************************************************/
void	sTimerStart (TIM_HDL hdl, uint32_t seconds)
{
    33a0:	b500      	push	{lr}
    33a2:	b083      	sub	sp, #12
    33a4:	9001      	str	r0, [sp, #4]
    33a6:	9100      	str	r1, [sp, #0]
    /* Parameter check */
    EFM_ASSERT (0 <= hdl  &&  hdl <= l_MaxHdl  &&  0 < seconds);
    33a8:	9b01      	ldr	r3, [sp, #4]
    33aa:	2b00      	cmp	r3, #0
    33ac:	db07      	blt.n	33be <sTimerStart+0x1e>
    33ae:	4b10      	ldr	r3, [pc, #64]	; (33f0 <sTimerStart+0x50>)
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	9a01      	ldr	r2, [sp, #4]
    33b4:	429a      	cmp	r2, r3
    33b6:	dc02      	bgt.n	33be <sTimerStart+0x1e>
    33b8:	9b00      	ldr	r3, [sp, #0]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d104      	bne.n	33c8 <sTimerStart+0x28>
    33be:	480d      	ldr	r0, [pc, #52]	; (33f4 <sTimerStart+0x54>)
    33c0:	f240 211f 	movw	r1, #543	; 0x21f
    33c4:	f7fc ffa6 	bl	314 <assertEFM>

    /* Check specified entry */
    EFM_ASSERT (l_sTimer[hdl].Function != NULL);
    33c8:	4a0b      	ldr	r2, [pc, #44]	; (33f8 <sTimerStart+0x58>)
    33ca:	9b01      	ldr	r3, [sp, #4]
    33cc:	00db      	lsls	r3, r3, #3
    33ce:	4413      	add	r3, r2
    33d0:	685b      	ldr	r3, [r3, #4]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d104      	bne.n	33e0 <sTimerStart+0x40>
    33d6:	4807      	ldr	r0, [pc, #28]	; (33f4 <sTimerStart+0x54>)
    33d8:	f240 2122 	movw	r1, #546	; 0x222
    33dc:	f7fc ff9a 	bl	314 <assertEFM>

    /* Load counter */
    l_sTimer[hdl].Counter = seconds;
    33e0:	4b05      	ldr	r3, [pc, #20]	; (33f8 <sTimerStart+0x58>)
    33e2:	9a01      	ldr	r2, [sp, #4]
    33e4:	9900      	ldr	r1, [sp, #0]
    33e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
}
    33ea:	b003      	add	sp, #12
    33ec:	f85d fb04 	ldr.w	pc, [sp], #4
    33f0:	20000f1c 	.word	0x20000f1c
    33f4:	0000a8c4 	.word	0x0000a8c4
    33f8:	20000ecc 	.word	0x20000ecc

000033fc <sTimerCancel>:
 *
 * @see sTimerStart().
 *
 ******************************************************************************/
void	sTimerCancel (TIM_HDL hdl)
{
    33fc:	b500      	push	{lr}
    33fe:	b083      	sub	sp, #12
    3400:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT (0 <= hdl  &&  hdl <= l_MaxHdl);
    3402:	9b01      	ldr	r3, [sp, #4]
    3404:	2b00      	cmp	r3, #0
    3406:	db04      	blt.n	3412 <sTimerCancel+0x16>
    3408:	4b08      	ldr	r3, [pc, #32]	; (342c <sTimerCancel+0x30>)
    340a:	681b      	ldr	r3, [r3, #0]
    340c:	9a01      	ldr	r2, [sp, #4]
    340e:	429a      	cmp	r2, r3
    3410:	dd04      	ble.n	341c <sTimerCancel+0x20>
    3412:	4807      	ldr	r0, [pc, #28]	; (3430 <sTimerCancel+0x34>)
    3414:	f44f 710e 	mov.w	r1, #568	; 0x238
    3418:	f7fc ff7c 	bl	314 <assertEFM>

    /* Set the counter to 0 to disable further decrements */
    l_sTimer[hdl].Counter = 0;
    341c:	4b05      	ldr	r3, [pc, #20]	; (3434 <sTimerCancel+0x38>)
    341e:	9a01      	ldr	r2, [sp, #4]
    3420:	2100      	movs	r1, #0
    3422:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
}
    3426:	b003      	add	sp, #12
    3428:	f85d fb04 	ldr.w	pc, [sp], #4
    342c:	20000f1c 	.word	0x20000f1c
    3430:	0000a8c4 	.word	0x0000a8c4
    3434:	20000ecc 	.word	0x20000ecc

00003438 <msTimerAction>:
 * @param[in] function
 *	Function to be called when the timer expires.
 *
 ******************************************************************************/
void	msTimerAction	(void (*function)(void))
{
    3438:	b500      	push	{lr}
    343a:	b083      	sub	sp, #12
    343c:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT (function != NULL);
    343e:	9b01      	ldr	r3, [sp, #4]
    3440:	2b00      	cmp	r3, #0
    3442:	d104      	bne.n	344e <msTimerAction+0x16>
    3444:	4805      	ldr	r0, [pc, #20]	; (345c <msTimerAction+0x24>)
    3446:	f44f 7113 	mov.w	r1, #588	; 0x24c
    344a:	f7fc ff63 	bl	314 <assertEFM>

    /* Set function pointer */
    l_msTimerFunction = function;
    344e:	4b04      	ldr	r3, [pc, #16]	; (3460 <msTimerAction+0x28>)
    3450:	9a01      	ldr	r2, [sp, #4]
    3452:	601a      	str	r2, [r3, #0]
}
    3454:	b003      	add	sp, #12
    3456:	f85d fb04 	ldr.w	pc, [sp], #4
    345a:	bf00      	nop
    345c:	0000a8c4 	.word	0x0000a8c4
    3460:	20000f20 	.word	0x20000f20

00003464 <msTimerStart>:
 *
 * @see msTimerCancel().
 *
 ******************************************************************************/
void	msTimerStart (uint32_t ms)
{
    3464:	b500      	push	{lr}
    3466:	b083      	sub	sp, #12
    3468:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);
    346a:	9b01      	ldr	r3, [sp, #4]
    346c:	2b00      	cmp	r3, #0
    346e:	d003      	beq.n	3478 <msTimerStart+0x14>
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3476:	d304      	bcc.n	3482 <msTimerStart+0x1e>
    3478:	4813      	ldr	r0, [pc, #76]	; (34c8 <msTimerStart+0x64>)
    347a:	f44f 7119 	mov.w	r1, #612	; 0x264
    347e:	f7fc ff49 	bl	314 <assertEFM>

    /* Verify that a function has been defined for the timer */
    EFM_ASSERT (l_msTimerFunction != NULL);
    3482:	4b12      	ldr	r3, [pc, #72]	; (34cc <msTimerStart+0x68>)
    3484:	681b      	ldr	r3, [r3, #0]
    3486:	2b00      	cmp	r3, #0
    3488:	d104      	bne.n	3494 <msTimerStart+0x30>
    348a:	480f      	ldr	r0, [pc, #60]	; (34c8 <msTimerStart+0x64>)
    348c:	f240 2167 	movw	r1, #615	; 0x267
    3490:	f7fc ff40 	bl	314 <assertEFM>

    /* Convert the [ms] value in number of ticks and set COMP1 */
    RTC_CompareSet (1, (RTC->CNT + (ms * RTC_COUNTS_PER_SEC) / 1000) & 0xFFFFFF);
    3494:	4b0e      	ldr	r3, [pc, #56]	; (34d0 <msTimerStart+0x6c>)
    3496:	685a      	ldr	r2, [r3, #4]
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	03d9      	lsls	r1, r3, #15
    349c:	4b0d      	ldr	r3, [pc, #52]	; (34d4 <msTimerStart+0x70>)
    349e:	fba3 0301 	umull	r0, r3, r3, r1
    34a2:	099b      	lsrs	r3, r3, #6
    34a4:	4413      	add	r3, r2
    34a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    34aa:	2001      	movs	r0, #1
    34ac:	4619      	mov	r1, r3
    34ae:	f7fe fcad 	bl	1e0c <RTC_CompareSet>

    /* Be sure to clear IRQ flag, then enable the COMP1 interrupt */
    RTC_IntClear (RTC_IFC_COMP1);
    34b2:	2004      	movs	r0, #4
    34b4:	f7ff fe14 	bl	30e0 <RTC_IntClear>
    BITBAND_Peripheral (&(RTC->IEN), _RTC_IEN_COMP1_SHIFT, 1);
    34b8:	4807      	ldr	r0, [pc, #28]	; (34d8 <msTimerStart+0x74>)
    34ba:	2102      	movs	r1, #2
    34bc:	2201      	movs	r2, #1
    34be:	f7ff fdd1 	bl	3064 <BITBAND_Peripheral>
}
    34c2:	b003      	add	sp, #12
    34c4:	f85d fb04 	ldr.w	pc, [sp], #4
    34c8:	0000a8c4 	.word	0x0000a8c4
    34cc:	20000f20 	.word	0x20000f20
    34d0:	40080000 	.word	0x40080000
    34d4:	10624dd3 	.word	0x10624dd3
    34d8:	4008001c 	.word	0x4008001c

000034dc <msTimerCancel>:
 *
 * @see msTimerStart().
 *
 ******************************************************************************/
void	msTimerCancel (void)
{
    34dc:	b508      	push	{r3, lr}
    /* Disable COMP1 interrupt */
    BITBAND_Peripheral (&(RTC->IEN), _RTC_IEN_COMP1_SHIFT, 0);
    34de:	4804      	ldr	r0, [pc, #16]	; (34f0 <msTimerCancel+0x14>)
    34e0:	2102      	movs	r1, #2
    34e2:	2200      	movs	r2, #0
    34e4:	f7ff fdbe 	bl	3064 <BITBAND_Peripheral>
    RTC_IntClear (RTC_IFC_COMP1);
    34e8:	2004      	movs	r0, #4
    34ea:	f7ff fdf9 	bl	30e0 <RTC_IntClear>
}
    34ee:	bd08      	pop	{r3, pc}
    34f0:	4008001c 	.word	0x4008001c

000034f4 <msDelay>:
 * @param[in] ms
 *	Duration in milliseconds to wait before returning to the caller.
 *
 ******************************************************************************/
void	msDelay (uint32_t ms)
{
    34f4:	b500      	push	{lr}
    34f6:	b087      	sub	sp, #28
    34f8:	9001      	str	r0, [sp, #4]
uint32_t ovflCnt, currCnt, destCnt;

    /* Parameter check */
    EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	2b00      	cmp	r3, #0
    34fe:	d003      	beq.n	3508 <msDelay+0x14>
    3500:	9b01      	ldr	r3, [sp, #4]
    3502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3506:	d304      	bcc.n	3512 <msDelay+0x1e>
    3508:	481d      	ldr	r0, [pc, #116]	; (3580 <msDelay+0x8c>)
    350a:	f44f 7126 	mov.w	r1, #664	; 0x298
    350e:	f7fc ff01 	bl	314 <assertEFM>

    /* Disable interrupts */
    INT_Disable();
    3512:	f7ff fdb9 	bl	3088 <INT_Disable>

    /* Get current time counter values */
    currCnt = RTC->CNT;
    3516:	4b1b      	ldr	r3, [pc, #108]	; (3584 <msDelay+0x90>)
    3518:	685b      	ldr	r3, [r3, #4]
    351a:	9305      	str	r3, [sp, #20]
    ovflCnt = clockGetOverflowCounter();
    351c:	f7ff fd70 	bl	3000 <clockGetOverflowCounter>
    3520:	9004      	str	r0, [sp, #16]

    /* Enable interrupts again */
    INT_Enable();
    3522:	f7ff fdc3 	bl	30ac <INT_Enable>

    /* Convert the [ms] value in number of ticks */
    destCnt = (currCnt + (ms * RTC_COUNTS_PER_SEC) / 1000) & 0xFFFFFF;
    3526:	9b01      	ldr	r3, [sp, #4]
    3528:	03da      	lsls	r2, r3, #15
    352a:	4b17      	ldr	r3, [pc, #92]	; (3588 <msDelay+0x94>)
    352c:	fba3 1302 	umull	r1, r3, r3, r2
    3530:	099a      	lsrs	r2, r3, #6
    3532:	9b05      	ldr	r3, [sp, #20]
    3534:	4413      	add	r3, r2
    3536:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    353a:	9303      	str	r3, [sp, #12]

    /* Check if RTC will overflow before reaching destination time */
    if (destCnt > currCnt)
    353c:	9a03      	ldr	r2, [sp, #12]
    353e:	9b05      	ldr	r3, [sp, #20]
    3540:	429a      	cmp	r2, r3
    3542:	d90c      	bls.n	355e <msDelay+0x6a>
    {
	/* Value remains within current 24bit range */
	while ((RTC->CNT < destCnt)  &&  (clockGetOverflowCounter() == ovflCnt))
    3544:	bf00      	nop
    3546:	4b0f      	ldr	r3, [pc, #60]	; (3584 <msDelay+0x90>)
    3548:	685a      	ldr	r2, [r3, #4]
    354a:	9b03      	ldr	r3, [sp, #12]
    354c:	429a      	cmp	r2, r3
    354e:	d213      	bcs.n	3578 <msDelay+0x84>
    3550:	f7ff fd56 	bl	3000 <clockGetOverflowCounter>
    3554:	4602      	mov	r2, r0
    3556:	9b04      	ldr	r3, [sp, #16]
    3558:	429a      	cmp	r2, r3
    355a:	d0f4      	beq.n	3546 <msDelay+0x52>
    355c:	e00c      	b.n	3578 <msDelay+0x84>
	    ;
    }
    else
    {
	/* RTC must wrap-around before reaching destination time */
	while (clockGetOverflowCounter() == ovflCnt)
    355e:	bf00      	nop
    3560:	f7ff fd4e 	bl	3000 <clockGetOverflowCounter>
    3564:	4602      	mov	r2, r0
    3566:	9b04      	ldr	r3, [sp, #16]
    3568:	429a      	cmp	r2, r3
    356a:	d0f9      	beq.n	3560 <msDelay+0x6c>
	    ;

	while (RTC->CNT < destCnt)
    356c:	bf00      	nop
    356e:	4b05      	ldr	r3, [pc, #20]	; (3584 <msDelay+0x90>)
    3570:	685a      	ldr	r2, [r3, #4]
    3572:	9b03      	ldr	r3, [sp, #12]
    3574:	429a      	cmp	r2, r3
    3576:	d3fa      	bcc.n	356e <msDelay+0x7a>
	    ;
    }
}
    3578:	b007      	add	sp, #28
    357a:	f85d fb04 	ldr.w	pc, [sp], #4
    357e:	bf00      	nop
    3580:	0000a8c4 	.word	0x0000a8c4
    3584:	40080000 	.word	0x40080000
    3588:	10624dd3 	.word	0x10624dd3

0000358c <DelayTick>:
 * after one tick, i.e. with a 32kHz XTAL about 30 microseconds (may be up to
 * 59 microseconds).
 *
 ******************************************************************************/
void	DelayTick (void)
{
    358c:	b082      	sub	sp, #8
uint32_t currCnt;

    /* Get current time counter value */
    currCnt = RTC->CNT;
    358e:	4b0a      	ldr	r3, [pc, #40]	; (35b8 <DelayTick+0x2c>)
    3590:	685b      	ldr	r3, [r3, #4]
    3592:	9301      	str	r3, [sp, #4]

    /* First synchronize with next counter change */
    while (RTC->CNT == currCnt)
    3594:	bf00      	nop
    3596:	4b08      	ldr	r3, [pc, #32]	; (35b8 <DelayTick+0x2c>)
    3598:	685a      	ldr	r2, [r3, #4]
    359a:	9b01      	ldr	r3, [sp, #4]
    359c:	429a      	cmp	r2, r3
    359e:	d0fa      	beq.n	3596 <DelayTick+0xa>
	;

    /* Wait another tick change */
    currCnt = RTC->CNT;
    35a0:	4b05      	ldr	r3, [pc, #20]	; (35b8 <DelayTick+0x2c>)
    35a2:	685b      	ldr	r3, [r3, #4]
    35a4:	9301      	str	r3, [sp, #4]
    while (RTC->CNT == currCnt)
    35a6:	bf00      	nop
    35a8:	4b03      	ldr	r3, [pc, #12]	; (35b8 <DelayTick+0x2c>)
    35aa:	685a      	ldr	r2, [r3, #4]
    35ac:	9b01      	ldr	r3, [sp, #4]
    35ae:	429a      	cmp	r2, r3
    35b0:	d0fa      	beq.n	35a8 <DelayTick+0x1c>
	;
}
    35b2:	b002      	add	sp, #8
    35b4:	4770      	bx	lr
    35b6:	bf00      	nop
    35b8:	40080000 	.word	0x40080000

000035bc <DisplayUpdateFctInstall>:
 *
 * @see ClockUpdate().
 *
 ******************************************************************************/
void	DisplayUpdateFctInstall	(void (*function)(void))
{
    35bc:	b500      	push	{lr}
    35be:	b083      	sub	sp, #12
    35c0:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT (function != NULL);
    35c2:	9b01      	ldr	r3, [sp, #4]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d104      	bne.n	35d2 <DisplayUpdateFctInstall+0x16>
    35c8:	4805      	ldr	r0, [pc, #20]	; (35e0 <DisplayUpdateFctInstall+0x24>)
    35ca:	f240 21e3 	movw	r1, #739	; 0x2e3
    35ce:	f7fc fea1 	bl	314 <assertEFM>

    /* Set function pointer */
    l_DisplayUpdateFct = function;
    35d2:	4b04      	ldr	r3, [pc, #16]	; (35e4 <DisplayUpdateFctInstall+0x28>)
    35d4:	9a01      	ldr	r2, [sp, #4]
    35d6:	601a      	str	r2, [r3, #0]
}
    35d8:	b003      	add	sp, #12
    35da:	f85d fb04 	ldr.w	pc, [sp], #4
    35de:	bf00      	nop
    35e0:	0000a8c4 	.word	0x0000a8c4
    35e4:	20000f24 	.word	0x20000f24

000035e8 <ClockUpdate>:
 *
 * @see DisplayUpdateFctInstall().
 *
 ******************************************************************************/
void	ClockUpdate (bool readTime)
{
    35e8:	b530      	push	{r4, r5, lr}
    35ea:	b085      	sub	sp, #20
    35ec:	4603      	mov	r3, r0
    35ee:	f88d 3007 	strb.w	r3, [sp, #7]
     *
     * THIS IS NOT MULTI-THREADING SAVE AND ONLY WORKS BECAUSE localtime() IS
     * CALLED FROM INTERRUPT SERVICE ROUTINES WHICH HAVE THE SAME PRIORITY
     * LEVEL, SO THEY DO NOT INTERFERE.
     */
    if (readTime)
    35f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d016      	beq.n	3628 <ClockUpdate+0x40>
    {
	/* Disable interrupts */
	INT_Disable();
    35fa:	f7ff fd45 	bl	3088 <INT_Disable>

	now = time (NULL);
    35fe:	2000      	movs	r0, #0
    3600:	f7ff fc64 	bl	2ecc <time>
    3604:	4603      	mov	r3, r0
    3606:	9303      	str	r3, [sp, #12]
	g_CurrDateTime = *localtime(&now);
    3608:	ab03      	add	r3, sp, #12
    360a:	4618      	mov	r0, r3
    360c:	f001 f8d0 	bl	47b0 <localtime>
    3610:	4603      	mov	r3, r0
    3612:	4a0a      	ldr	r2, [pc, #40]	; (363c <ClockUpdate+0x54>)
    3614:	4614      	mov	r4, r2
    3616:	461d      	mov	r5, r3
    3618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    361a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    361c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    361e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3620:	682b      	ldr	r3, [r5, #0]
    3622:	6023      	str	r3, [r4, #0]

	/* Enable interrupts again */
	INT_Enable();
    3624:	f7ff fd42 	bl	30ac <INT_Enable>
    }

    /* Also update display, if a function has been defined for that purpose */
    if (l_DisplayUpdateFct)
    3628:	4b05      	ldr	r3, [pc, #20]	; (3640 <ClockUpdate+0x58>)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	2b00      	cmp	r3, #0
    362e:	d002      	beq.n	3636 <ClockUpdate+0x4e>
	l_DisplayUpdateFct();
    3630:	4b03      	ldr	r3, [pc, #12]	; (3640 <ClockUpdate+0x58>)
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	4798      	blx	r3
}
    3636:	b005      	add	sp, #20
    3638:	bd30      	pop	{r4, r5, pc}
    363a:	bf00      	nop
    363c:	20001268 	.word	0x20001268
    3640:	20000f24 	.word	0x20000f24

00003644 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3644:	b082      	sub	sp, #8
    3646:	4603      	mov	r3, r0
    3648:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    364c:	4b07      	ldr	r3, [pc, #28]	; (366c <NVIC_EnableIRQ+0x28>)
    364e:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    3652:	0952      	lsrs	r2, r2, #5
    3654:	f89d 1007 	ldrb.w	r1, [sp, #7]
    3658:	f001 011f 	and.w	r1, r1, #31
    365c:	2001      	movs	r0, #1
    365e:	fa00 f101 	lsl.w	r1, r0, r1
    3662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    3666:	b002      	add	sp, #8
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	e000e100 	.word	0xe000e100

00003670 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3670:	b082      	sub	sp, #8
    3672:	4603      	mov	r3, r0
    3674:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3678:	4b07      	ldr	r3, [pc, #28]	; (3698 <NVIC_ClearPendingIRQ+0x28>)
    367a:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    367e:	0952      	lsrs	r2, r2, #5
    3680:	f89d 1007 	ldrb.w	r1, [sp, #7]
    3684:	f001 011f 	and.w	r1, r1, #31
    3688:	2001      	movs	r0, #1
    368a:	fa00 f101 	lsl.w	r1, r0, r1
    368e:	3260      	adds	r2, #96	; 0x60
    3690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    3694:	b002      	add	sp, #8
    3696:	4770      	bx	lr
    3698:	e000e100 	.word	0xe000e100

0000369c <ExtIntInit>:
 *	This routine does not enable the interrupts, call ExtIntEnableAll()
 *	for that purpose, or enable individual interrupt via ExtIntEnable().
 *
 ******************************************************************************/
void	ExtIntInit (const EXTI_INIT *pInitStruct)
{
    369c:	b500      	push	{lr}
    369e:	b083      	sub	sp, #12
    36a0:	9001      	str	r0, [sp, #4]
    /* Parameter check */
    EFM_ASSERT(pInitStruct != NULL);
    36a2:	9b01      	ldr	r3, [sp, #4]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d103      	bne.n	36b0 <ExtIntInit+0x14>
    36a8:	4821      	ldr	r0, [pc, #132]	; (3730 <ExtIntInit+0x94>)
    36aa:	215e      	movs	r1, #94	; 0x5e
    36ac:	f7fc fe32 	bl	314 <assertEFM>

    /* Save configuration */
    l_pExtIntCfg = pInitStruct;
    36b0:	4b20      	ldr	r3, [pc, #128]	; (3734 <ExtIntInit+0x98>)
    36b2:	9a01      	ldr	r2, [sp, #4]
    36b4:	601a      	str	r2, [r3, #0]

    /* Disable and clear all EXTIs */
    GPIO->IEN = 0;
    36b6:	4b20      	ldr	r3, [pc, #128]	; (3738 <ExtIntInit+0x9c>)
    36b8:	2200      	movs	r2, #0
    36ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    GPIO->EXTIRISE = 0;
    36be:	4b1e      	ldr	r3, [pc, #120]	; (3738 <ExtIntInit+0x9c>)
    36c0:	2200      	movs	r2, #0
    36c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    GPIO->EXTIFALL = 0;
    36c6:	4b1c      	ldr	r3, [pc, #112]	; (3738 <ExtIntInit+0x9c>)
    36c8:	2200      	movs	r2, #0
    36ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    GPIO->IFC = 0xFFFF;
    36ce:	4b1a      	ldr	r3, [pc, #104]	; (3738 <ExtIntInit+0x9c>)
    36d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    /*
     * Initialize falling and rising edge triggers.
     * WARNING: This part of code is NOT multi-threading save!
     */
    l_extiBitMask = 0;
    36d8:	4b18      	ldr	r3, [pc, #96]	; (373c <ExtIntInit+0xa0>)
    36da:	2200      	movs	r2, #0
    36dc:	601a      	str	r2, [r3, #0]

    while (pInitStruct->IntBitMask != 0)
    36de:	e00a      	b.n	36f6 <ExtIntInit+0x5a>
    {
	l_extiBitMask |= pInitStruct->IntBitMask;	// add to bit mask
    36e0:	9b01      	ldr	r3, [sp, #4]
    36e2:	881b      	ldrh	r3, [r3, #0]
    36e4:	461a      	mov	r2, r3
    36e6:	4b15      	ldr	r3, [pc, #84]	; (373c <ExtIntInit+0xa0>)
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	431a      	orrs	r2, r3
    36ec:	4b13      	ldr	r3, [pc, #76]	; (373c <ExtIntInit+0xa0>)
    36ee:	601a      	str	r2, [r3, #0]

	pInitStruct++;
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	3308      	adds	r3, #8
    36f4:	9301      	str	r3, [sp, #4]
     * Initialize falling and rising edge triggers.
     * WARNING: This part of code is NOT multi-threading save!
     */
    l_extiBitMask = 0;

    while (pInitStruct->IntBitMask != 0)
    36f6:	9b01      	ldr	r3, [sp, #4]
    36f8:	881b      	ldrh	r3, [r3, #0]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d1f0      	bne.n	36e0 <ExtIntInit+0x44>

	pInitStruct++;
    }

    /* Always detect rising and falling edge */
    GPIO->EXTIRISE = l_extiBitMask;
    36fe:	4b0e      	ldr	r3, [pc, #56]	; (3738 <ExtIntInit+0x9c>)
    3700:	4a0e      	ldr	r2, [pc, #56]	; (373c <ExtIntInit+0xa0>)
    3702:	6812      	ldr	r2, [r2, #0]
    3704:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    GPIO->EXTIFALL = l_extiBitMask;
    3708:	4b0b      	ldr	r3, [pc, #44]	; (3738 <ExtIntInit+0x9c>)
    370a:	4a0c      	ldr	r2, [pc, #48]	; (373c <ExtIntInit+0xa0>)
    370c:	6812      	ldr	r2, [r2, #0]
    370e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /* Clear and enable NVIC interrupts */
    NVIC_ClearPendingIRQ (GPIO_EVEN_IRQn);
    3712:	2001      	movs	r0, #1
    3714:	f7ff ffac 	bl	3670 <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ (GPIO_EVEN_IRQn);
    3718:	2001      	movs	r0, #1
    371a:	f7ff ff93 	bl	3644 <NVIC_EnableIRQ>
    NVIC_ClearPendingIRQ (GPIO_ODD_IRQn);
    371e:	2009      	movs	r0, #9
    3720:	f7ff ffa6 	bl	3670 <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ (GPIO_ODD_IRQn);
    3724:	2009      	movs	r0, #9
    3726:	f7ff ff8d 	bl	3644 <NVIC_EnableIRQ>
}
    372a:	b003      	add	sp, #12
    372c:	f85d fb04 	ldr.w	pc, [sp], #4
    3730:	0000a8dc 	.word	0x0000a8dc
    3734:	20000f28 	.word	0x20000f28
    3738:	40006000 	.word	0x40006000
    373c:	20000f2c 	.word	0x20000f2c

00003740 <ExtIntEnableAll>:
 *
 ******************************************************************************/
void	ExtIntEnableAll (void)
{
    /* Clear any pending interrupt */
    GPIO->IFC = 0xFFFF;
    3740:	4b05      	ldr	r3, [pc, #20]	; (3758 <ExtIntEnableAll+0x18>)
    3742:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3746:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    /* Enable all configured interrupts */
    GPIO->IEN = l_extiBitMask;
    374a:	4b03      	ldr	r3, [pc, #12]	; (3758 <ExtIntEnableAll+0x18>)
    374c:	4a03      	ldr	r2, [pc, #12]	; (375c <ExtIntEnableAll+0x1c>)
    374e:	6812      	ldr	r2, [r2, #0]
    3750:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	40006000 	.word	0x40006000
    375c:	20000f2c 	.word	0x20000f2c

00003760 <GPIO_EVEN_IRQHandler>:
 * This Interrupt Service Routine (ISR) gets called for even GPIO interrupts.
 * It simply leads to the generic EXTI_Handler.
 *
 ******************************************************************************/
void	GPIO_EVEN_IRQHandler (void)
{
    3760:	b508      	push	{r3, lr}
    EXTI_Handler();
    3762:	f000 f805 	bl	3770 <EXTI_Handler>
}
    3766:	bd08      	pop	{r3, pc}

00003768 <GPIO_ODD_IRQHandler>:
 * This Interrupt Service Routine (ISR) gets called for odd GPIO interrupts.
 * It simply leads to the generic EXTI_Handler.
 *
 ******************************************************************************/
void	GPIO_ODD_IRQHandler (void)
{
    3768:	b508      	push	{r3, lr}
    EXTI_Handler();
    376a:	f000 f801 	bl	3770 <EXTI_Handler>
}
    376e:	bd08      	pop	{r3, pc}

00003770 <EXTI_Handler>:
 * The time stamp is read from the Real Time Counter (RTC), so its resolution
 * depends on the RTC.
 *
 ******************************************************************************/
void	EXTI_Handler (void)
{
    3770:	b500      	push	{lr}
    3772:	b08b      	sub	sp, #44	; 0x2c
int	  portNum;		// GPIO port number of an EXTI
bool	  extiLvl;		// current level of EXTI
const EXTI_INIT *pExtIntCfg;	// pointer to EXTI configuration data

    /* get time stamp from RTC */
    timeStamp = RTC->CNT;
    3774:	4b3c      	ldr	r3, [pc, #240]	; (3868 <EXTI_Handler+0xf8>)
    3776:	685b      	ldr	r3, [r3, #4]
    3778:	9306      	str	r3, [sp, #24]

    /* get EXTI status and mask out all disabled interrupts */
    status  = GPIO->IF;
    377a:	4b3c      	ldr	r3, [pc, #240]	; (386c <EXTI_Handler+0xfc>)
    377c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    3780:	9305      	str	r3, [sp, #20]
    status &= GPIO->IEN;
    3782:	4b3a      	ldr	r3, [pc, #232]	; (386c <EXTI_Handler+0xfc>)
    3784:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    3788:	9a05      	ldr	r2, [sp, #20]
    378a:	4013      	ands	r3, r2
    378c:	9305      	str	r3, [sp, #20]

    /* immediately return if there is nothing to do */
    if (status == 0)
    378e:	9b05      	ldr	r3, [sp, #20]
    3790:	2b00      	cmp	r3, #0
    3792:	d100      	bne.n	3796 <EXTI_Handler+0x26>
	return;
    3794:	e065      	b.n	3862 <EXTI_Handler+0xf2>

    /* clear interrupt status bits early to be able to receive new interrupts */
    GPIO->IFC = status;
    3796:	4b35      	ldr	r3, [pc, #212]	; (386c <EXTI_Handler+0xfc>)
    3798:	9a05      	ldr	r2, [sp, #20]
    379a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    /* get all EXTIs in use (rising and falling edge) */
    irqMask = status & l_extiBitMask;
    379e:	4b34      	ldr	r3, [pc, #208]	; (3870 <EXTI_Handler+0x100>)
    37a0:	681b      	ldr	r3, [r3, #0]
    37a2:	9a05      	ldr	r2, [sp, #20]
    37a4:	4013      	ands	r3, r2
    37a6:	9309      	str	r3, [sp, #36]	; 0x24

    /* now process all asserted EXTIs */
    while (irqMask)
    37a8:	e058      	b.n	385c <EXTI_Handler+0xec>
    37aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37ac:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
    37ae:	9b01      	ldr	r3, [sp, #4]
    37b0:	fab3 f383 	clz	r3, r3
    37b4:	9300      	str	r3, [sp, #0]
  return(result);
    37b6:	9b00      	ldr	r3, [sp, #0]
    37b8:	b2db      	uxtb	r3, r3
    {
	/* get bit number of the highest EXTI from the bit mask */
	extiNum = 31 - __CLZ (irqMask);
    37ba:	f1c3 031f 	rsb	r3, r3, #31
    37be:	9304      	str	r3, [sp, #16]
	extiBitMask = (0x1 << extiNum);
    37c0:	2201      	movs	r2, #1
    37c2:	9b04      	ldr	r3, [sp, #16]
    37c4:	fa02 f303 	lsl.w	r3, r2, r3
    37c8:	9303      	str	r3, [sp, #12]

	/* remove this interrupt from the bit mask */
	irqMask &= ~extiBitMask;
    37ca:	9b03      	ldr	r3, [sp, #12]
    37cc:	43db      	mvns	r3, r3
    37ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    37d0:	4013      	ands	r3, r2
    37d2:	9309      	str	r3, [sp, #36]	; 0x24

	/* get associated port number */
	if (extiNum < 8)
    37d4:	9b04      	ldr	r3, [sp, #16]
    37d6:	2b07      	cmp	r3, #7
    37d8:	dc0a      	bgt.n	37f0 <EXTI_Handler+0x80>
	    portNum = (GPIO->EXTIPSELL >> (extiNum * 4)) & 0x7;
    37da:	4b24      	ldr	r3, [pc, #144]	; (386c <EXTI_Handler+0xfc>)
    37dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    37e0:	9b04      	ldr	r3, [sp, #16]
    37e2:	009b      	lsls	r3, r3, #2
    37e4:	fa22 f303 	lsr.w	r3, r2, r3
    37e8:	f003 0307 	and.w	r3, r3, #7
    37ec:	9308      	str	r3, [sp, #32]
    37ee:	e00a      	b.n	3806 <EXTI_Handler+0x96>
	else
	    portNum = (GPIO->EXTIPSELH >> ((extiNum-8) * 4)) & 0x7;
    37f0:	4b1e      	ldr	r3, [pc, #120]	; (386c <EXTI_Handler+0xfc>)
    37f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    37f6:	9b04      	ldr	r3, [sp, #16]
    37f8:	3b08      	subs	r3, #8
    37fa:	009b      	lsls	r3, r3, #2
    37fc:	fa22 f303 	lsr.w	r3, r2, r3
    3800:	f003 0307 	and.w	r3, r3, #7
    3804:	9308      	str	r3, [sp, #32]

	/* determine whether rising or falling edge */
	extiLvl = GPIO->P[portNum].DIN & extiBitMask ? true : false;
    3806:	4919      	ldr	r1, [pc, #100]	; (386c <EXTI_Handler+0xfc>)
    3808:	9a08      	ldr	r2, [sp, #32]
    380a:	4613      	mov	r3, r2
    380c:	00db      	lsls	r3, r3, #3
    380e:	4413      	add	r3, r2
    3810:	009b      	lsls	r3, r3, #2
    3812:	440b      	add	r3, r1
    3814:	3318      	adds	r3, #24
    3816:	685a      	ldr	r2, [r3, #4]
    3818:	9b03      	ldr	r3, [sp, #12]
    381a:	4013      	ands	r3, r2
    381c:	2b00      	cmp	r3, #0
    381e:	bf0c      	ite	eq
    3820:	2300      	moveq	r3, #0
    3822:	2301      	movne	r3, #1
    3824:	f88d 300b 	strb.w	r3, [sp, #11]

	/* see which functions to be called for this EXTI */
	for (pExtIntCfg = l_pExtIntCfg;
    3828:	4b12      	ldr	r3, [pc, #72]	; (3874 <EXTI_Handler+0x104>)
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	9307      	str	r3, [sp, #28]
    382e:	e011      	b.n	3854 <EXTI_Handler+0xe4>
	     pExtIntCfg->IntBitMask != 0;  pExtIntCfg++)
	{
	    if (pExtIntCfg->IntBitMask & extiBitMask)
    3830:	9b07      	ldr	r3, [sp, #28]
    3832:	881b      	ldrh	r3, [r3, #0]
    3834:	461a      	mov	r2, r3
    3836:	9b03      	ldr	r3, [sp, #12]
    3838:	4013      	ands	r3, r2
    383a:	2b00      	cmp	r3, #0
    383c:	d007      	beq.n	384e <EXTI_Handler+0xde>
	    {
		/* call all handlers that request this EXTI */
		pExtIntCfg->IntFct(extiNum, extiLvl, timeStamp);
    383e:	9b07      	ldr	r3, [sp, #28]
    3840:	685b      	ldr	r3, [r3, #4]
    3842:	f89d 200b 	ldrb.w	r2, [sp, #11]
    3846:	9804      	ldr	r0, [sp, #16]
    3848:	4611      	mov	r1, r2
    384a:	9a06      	ldr	r2, [sp, #24]
    384c:	4798      	blx	r3
	/* determine whether rising or falling edge */
	extiLvl = GPIO->P[portNum].DIN & extiBitMask ? true : false;

	/* see which functions to be called for this EXTI */
	for (pExtIntCfg = l_pExtIntCfg;
	     pExtIntCfg->IntBitMask != 0;  pExtIntCfg++)
    384e:	9b07      	ldr	r3, [sp, #28]
    3850:	3308      	adds	r3, #8
    3852:	9307      	str	r3, [sp, #28]
    3854:	9b07      	ldr	r3, [sp, #28]
    3856:	881b      	ldrh	r3, [r3, #0]

	/* determine whether rising or falling edge */
	extiLvl = GPIO->P[portNum].DIN & extiBitMask ? true : false;

	/* see which functions to be called for this EXTI */
	for (pExtIntCfg = l_pExtIntCfg;
    3858:	2b00      	cmp	r3, #0
    385a:	d1e9      	bne.n	3830 <EXTI_Handler+0xc0>

    /* get all EXTIs in use (rising and falling edge) */
    irqMask = status & l_extiBitMask;

    /* now process all asserted EXTIs */
    while (irqMask)
    385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    385e:	2b00      	cmp	r3, #0
    3860:	d1a3      	bne.n	37aa <EXTI_Handler+0x3a>
		/* call all handlers that request this EXTI */
		pExtIntCfg->IntFct(extiNum, extiLvl, timeStamp);
	    }
	}
    }
}
    3862:	b00b      	add	sp, #44	; 0x2c
    3864:	f85d fb04 	ldr.w	pc, [sp], #4
    3868:	40080000 	.word	0x40080000
    386c:	40006000 	.word	0x40006000
    3870:	20000f2c 	.word	0x20000f2c
    3874:	20000f28 	.word	0x20000f28

00003878 <KeyInit>:
 *	Parameter <b>pInitStruct</b> must point to a persistent data structure,
 *	i.e. this must be valid over the whole life time of the program.
 *
 ******************************************************************************/
void	KeyInit (const KEY_INIT *pInitStruct)
{
    3878:	b500      	push	{lr}
    387a:	b085      	sub	sp, #20
    387c:	9003      	str	r0, [sp, #12]
    /* Parameter check */
    EFM_ASSERT(pInitStruct != NULL);
    387e:	9b03      	ldr	r3, [sp, #12]
    3880:	2b00      	cmp	r3, #0
    3882:	d103      	bne.n	388c <KeyInit+0x14>
    3884:	4821      	ldr	r0, [pc, #132]	; (390c <KeyInit+0x94>)
    3886:	2163      	movs	r1, #99	; 0x63
    3888:	f7fc fd44 	bl	314 <assertEFM>
    EFM_ASSERT(pInitStruct->KeyFct != NULL);
    388c:	9b03      	ldr	r3, [sp, #12]
    388e:	685b      	ldr	r3, [r3, #4]
    3890:	2b00      	cmp	r3, #0
    3892:	d103      	bne.n	389c <KeyInit+0x24>
    3894:	481d      	ldr	r0, [pc, #116]	; (390c <KeyInit+0x94>)
    3896:	2164      	movs	r1, #100	; 0x64
    3898:	f7fc fd3c 	bl	314 <assertEFM>

    /* Save configuration */
    l_pKeyInit = pInitStruct;
    389c:	4b1c      	ldr	r3, [pc, #112]	; (3910 <KeyInit+0x98>)
    389e:	9a03      	ldr	r2, [sp, #12]
    38a0:	601a      	str	r2, [r3, #0]

    /* Be sure to enable clock to GPIO (should already be done) */
    CMU_ClockEnable (cmuClock_GPIO, true);
    38a2:	481c      	ldr	r0, [pc, #112]	; (3914 <KeyInit+0x9c>)
    38a4:	2101      	movs	r1, #1
    38a6:	f7fc ff47 	bl	738 <CMU_ClockEnable>
     * Initialize GPIOs for all keys.  The port pins must be configured for
     * input, and connected to the external interrupt (EXTI) facility.  At
     * this stage, the interrupts are not enabled, this is done later by
     * calling ExtIntInit().
     */
    GPIO_PinModeSet (KEY_POWER_PORT, KEY_POWER_PIN, gpioModeInput, 0);
    38aa:	2000      	movs	r0, #0
    38ac:	2105      	movs	r1, #5
    38ae:	2201      	movs	r2, #1
    38b0:	2300      	movs	r3, #0
    38b2:	f7fd fd9b 	bl	13ec <GPIO_PinModeSet>
    GPIO_IntConfig  (KEY_POWER_PORT, KEY_POWER_PIN, false, false, false);
    38b6:	2300      	movs	r3, #0
    38b8:	9300      	str	r3, [sp, #0]
    38ba:	2000      	movs	r0, #0
    38bc:	2105      	movs	r1, #5
    38be:	2200      	movs	r2, #0
    38c0:	2300      	movs	r3, #0
    38c2:	f7fd fd25 	bl	1310 <GPIO_IntConfig>

    GPIO_PinModeSet (KEY_NEXT_PORT, KEY_NEXT_PIN, gpioModeInput, 0);
    38c6:	2000      	movs	r0, #0
    38c8:	2104      	movs	r1, #4
    38ca:	2201      	movs	r2, #1
    38cc:	2300      	movs	r3, #0
    38ce:	f7fd fd8d 	bl	13ec <GPIO_PinModeSet>
    GPIO_IntConfig  (KEY_NEXT_PORT, KEY_NEXT_PIN, false, false, false);
    38d2:	2300      	movs	r3, #0
    38d4:	9300      	str	r3, [sp, #0]
    38d6:	2000      	movs	r0, #0
    38d8:	2104      	movs	r1, #4
    38da:	2200      	movs	r2, #0
    38dc:	2300      	movs	r3, #0
    38de:	f7fd fd17 	bl	1310 <GPIO_IntConfig>

    GPIO_PinModeSet (KEY_PREV_PORT, KEY_PREV_PIN, gpioModeInput, 0);
    38e2:	2000      	movs	r0, #0
    38e4:	2103      	movs	r1, #3
    38e6:	2201      	movs	r2, #1
    38e8:	2300      	movs	r3, #0
    38ea:	f7fd fd7f 	bl	13ec <GPIO_PinModeSet>
    GPIO_IntConfig  (KEY_PREV_PORT, KEY_PREV_PIN, false, false, false);
    38ee:	2300      	movs	r3, #0
    38f0:	9300      	str	r3, [sp, #0]
    38f2:	2000      	movs	r0, #0
    38f4:	2103      	movs	r1, #3
    38f6:	2200      	movs	r2, #0
    38f8:	2300      	movs	r3, #0
    38fa:	f7fd fd09 	bl	1310 <GPIO_IntConfig>

#if KEY_AUTOREPEAT
    /* Install high-resolution timer routine for autorepeat */
    msTimerAction (KeyTimerFct);
    38fe:	4806      	ldr	r0, [pc, #24]	; (3918 <KeyInit+0xa0>)
    3900:	f7ff fd9a 	bl	3438 <msTimerAction>
#endif
}
    3904:	b005      	add	sp, #20
    3906:	f85d fb04 	ldr.w	pc, [sp], #4
    390a:	bf00      	nop
    390c:	0000a8f0 	.word	0x0000a8f0
    3910:	20000f30 	.word	0x20000f30
    3914:	0002c200 	.word	0x0002c200
    3918:	00003a01 	.word	0x00003a01

0000391c <KeyHandler>:
 * depends on the RTC.  Use the define @ref RTC_COUNTS_PER_SEC to convert the
 * RTC value into a duration.
 *
 ******************************************************************************/
void	KeyHandler (int extiNum, bool extiLvl, uint32_t timeStamp)
{
    391c:	b500      	push	{lr}
    391e:	b087      	sub	sp, #28
    3920:	9003      	str	r0, [sp, #12]
    3922:	460b      	mov	r3, r1
    3924:	9201      	str	r2, [sp, #4]
    3926:	f88d 300b 	strb.w	r3, [sp, #11]


    (void) timeStamp;		// suppress compiler warning "unused parameter"

    /* map the EXTI (pin) number to a key ID */
    switch (extiNum)
    392a:	9b03      	ldr	r3, [sp, #12]
    392c:	2b04      	cmp	r3, #4
    392e:	d01d      	beq.n	396c <KeyHandler+0x50>
    3930:	2b05      	cmp	r3, #5
    3932:	d002      	beq.n	393a <KeyHandler+0x1e>
    3934:	2b03      	cmp	r3, #3
    3936:	d020      	beq.n	397a <KeyHandler+0x5e>
	    keyState = KEY_PREV;
	    keyCode  = KEYCODE_PREV_ASSERT;
	    break;

	default:		// unknown pin number - ignore
	    return;
    3938:	e058      	b.n	39ec <KeyHandler+0xd0>

    /* map the EXTI (pin) number to a key ID */
    switch (extiNum)
    {
	case KEY_POWER_PIN:	// POWER is high-active button!
	    keyState = KEY_POWER;
    393a:	2301      	movs	r3, #1
    393c:	f88d 3017 	strb.w	r3, [sp, #23]
	    keyCode  = KEYCODE_POWER_ASSERT;
    3940:	2301      	movs	r3, #1
    3942:	f88d 3016 	strb.w	r3, [sp, #22]
	    extiLvl = !extiLvl;	// convert from high to low-active
    3946:	f89d 300b 	ldrb.w	r3, [sp, #11]
    394a:	2b00      	cmp	r3, #0
    394c:	bf0c      	ite	eq
    394e:	2300      	moveq	r3, #0
    3950:	2301      	movne	r3, #1
    3952:	b2db      	uxtb	r3, r3
    3954:	f083 0301 	eor.w	r3, r3, #1
    3958:	b2db      	uxtb	r3, r3
    395a:	f88d 300b 	strb.w	r3, [sp, #11]
    395e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3962:	f003 0301 	and.w	r3, r3, #1
    3966:	f88d 300b 	strb.w	r3, [sp, #11]
	    break;
    396a:	e00d      	b.n	3988 <KeyHandler+0x6c>

	case KEY_NEXT_PIN:	// NEXT
	    keyState = KEY_NEXT;
    396c:	2302      	movs	r3, #2
    396e:	f88d 3017 	strb.w	r3, [sp, #23]
	    keyCode  = KEYCODE_NEXT_ASSERT;
    3972:	2304      	movs	r3, #4
    3974:	f88d 3016 	strb.w	r3, [sp, #22]
	    break;
    3978:	e006      	b.n	3988 <KeyHandler+0x6c>

	case KEY_PREV_PIN:	// PREV
	    keyState = KEY_PREV;
    397a:	2303      	movs	r3, #3
    397c:	f88d 3017 	strb.w	r3, [sp, #23]
	    keyCode  = KEYCODE_PREV_ASSERT;
    3980:	2307      	movs	r3, #7
    3982:	f88d 3016 	strb.w	r3, [sp, #22]
	    break;
    3986:	bf00      	nop
     * Check if a key has been asserted or released.  Since the keys are
     * connected to ground, we have a negative logic, i.e. 0 means asserted!
     * An exception is the power button which is high-active.  Therefore the
     * level has been inverted by the logic above.
     */
    if (extiLvl)
    3988:	f89d 300b 	ldrb.w	r3, [sp, #11]
    398c:	2b00      	cmp	r3, #0
    398e:	d011      	beq.n	39b4 <KeyHandler+0x98>
    {
	/* Level is 1, key has been RELEASED */

	if (keyState != l_KeyState)
    3990:	4b18      	ldr	r3, [pc, #96]	; (39f4 <KeyHandler+0xd8>)
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3998:	429a      	cmp	r2, r3
    399a:	d000      	beq.n	399e <KeyHandler+0x82>
	    return;	// only release active key - ignore all others
    399c:	e026      	b.n	39ec <KeyHandler+0xd0>

#if KEY_AUTOREPEAT
	/* be sure to cancel a running timer */
	msTimerCancel();
    399e:	f7ff fd9d 	bl	34dc <msTimerCancel>
#endif

	/* pass a KEYCODE_XXX_RELEASE code to the KEY_FCT */
	keyCode += KEYOFFS_RELEASE;
    39a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    39a6:	3302      	adds	r3, #2
    39a8:	f88d 3016 	strb.w	r3, [sp, #22]

	/* set key state to IDLE again */
	l_KeyState = KEY_IDLE;
    39ac:	4b11      	ldr	r3, [pc, #68]	; (39f4 <KeyHandler+0xd8>)
    39ae:	2200      	movs	r2, #0
    39b0:	701a      	strb	r2, [r3, #0]
    39b2:	e014      	b.n	39de <KeyHandler+0xc2>
    }
    else
    {
	/* Level is 0, key has been ASSERTED */

	if (l_KeyState != KEY_IDLE)
    39b4:	4b0f      	ldr	r3, [pc, #60]	; (39f4 <KeyHandler+0xd8>)
    39b6:	781b      	ldrb	r3, [r3, #0]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d000      	beq.n	39be <KeyHandler+0xa2>
	    return;	// a key is already asserted - ignore all further keys
    39bc:	e016      	b.n	39ec <KeyHandler+0xd0>

	/* set new key state and code */
	l_KeyState = keyState;
    39be:	4b0d      	ldr	r3, [pc, #52]	; (39f4 <KeyHandler+0xd8>)
    39c0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    39c4:	701a      	strb	r2, [r3, #0]
	l_KeyCode  = (KEYCODE)(keyCode + KEYOFFS_REPEAT);
    39c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    39ca:	3301      	adds	r3, #1
    39cc:	b2da      	uxtb	r2, r3
    39ce:	4b0a      	ldr	r3, [pc, #40]	; (39f8 <KeyHandler+0xdc>)
    39d0:	701a      	strb	r2, [r3, #0]

#if KEY_AUTOREPEAT
	/* start timer with autorepeat threshold */
	msTimerStart (l_pKeyInit->AR_Threshold);
    39d2:	4b0a      	ldr	r3, [pc, #40]	; (39fc <KeyHandler+0xe0>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	881b      	ldrh	r3, [r3, #0]
    39d8:	4618      	mov	r0, r3
    39da:	f7ff fd43 	bl	3464 <msTimerStart>
#endif
    }

    /* call the specified KEY_FCT */
    l_pKeyInit->KeyFct (keyCode);
    39de:	4b07      	ldr	r3, [pc, #28]	; (39fc <KeyHandler+0xe0>)
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	685b      	ldr	r3, [r3, #4]
    39e4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    39e8:	4610      	mov	r0, r2
    39ea:	4798      	blx	r3
}
    39ec:	b007      	add	sp, #28
    39ee:	f85d fb04 	ldr.w	pc, [sp], #4
    39f2:	bf00      	nop
    39f4:	20000f34 	.word	0x20000f34
    39f8:	20000f35 	.word	0x20000f35
    39fc:	20000f30 	.word	0x20000f30

00003a00 <KeyTimerFct>:
 * - When the autorepeat function is already active, the timer generates the
 *   key rate, i.e. the currently asserted key has to be repeated.
 *
 ******************************************************************************/
static void  KeyTimerFct (void)
{
    3a00:	b508      	push	{r3, lr}
    /* re-start timer with autorepeat rate */
    msTimerStart (l_pKeyInit->AR_Rate);
    3a02:	4b07      	ldr	r3, [pc, #28]	; (3a20 <KeyTimerFct+0x20>)
    3a04:	681b      	ldr	r3, [r3, #0]
    3a06:	885b      	ldrh	r3, [r3, #2]
    3a08:	4618      	mov	r0, r3
    3a0a:	f7ff fd2b 	bl	3464 <msTimerStart>

    /* call the specified KEY_FCT with the REPEAT code */
    l_pKeyInit->KeyFct (l_KeyCode);
    3a0e:	4b04      	ldr	r3, [pc, #16]	; (3a20 <KeyTimerFct+0x20>)
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	4a03      	ldr	r2, [pc, #12]	; (3a24 <KeyTimerFct+0x24>)
    3a16:	7812      	ldrb	r2, [r2, #0]
    3a18:	4610      	mov	r0, r2
    3a1a:	4798      	blx	r3
}
    3a1c:	bd08      	pop	{r3, pc}
    3a1e:	bf00      	nop
    3a20:	20000f30 	.word	0x20000f30
    3a24:	20000f35 	.word	0x20000f35

00003a28 <DisplayInit>:
 * This routine initializes the LC-Display and all the required functionality
 * around it, e.g. a timer to switch off the display when it is not in use.
 *
 ******************************************************************************/
void  DisplayInit (const LCD_FIELD *pField, const ITEM *pItemList, int itemCnt)
{
    3a28:	b500      	push	{lr}
    3a2a:	b085      	sub	sp, #20
    3a2c:	9003      	str	r0, [sp, #12]
    3a2e:	9102      	str	r1, [sp, #8]
    3a30:	9201      	str	r2, [sp, #4]
    /* Parameter check */
    EFM_ASSERT(pField != NULL);
    3a32:	9b03      	ldr	r3, [sp, #12]
    3a34:	2b00      	cmp	r3, #0
    3a36:	d103      	bne.n	3a40 <DisplayInit+0x18>
    3a38:	4826      	ldr	r0, [pc, #152]	; (3ad4 <DisplayInit+0xac>)
    3a3a:	2178      	movs	r1, #120	; 0x78
    3a3c:	f7fc fc6a 	bl	314 <assertEFM>
    EFM_ASSERT(pItemList != NULL);
    3a40:	9b02      	ldr	r3, [sp, #8]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d103      	bne.n	3a4e <DisplayInit+0x26>
    3a46:	4823      	ldr	r0, [pc, #140]	; (3ad4 <DisplayInit+0xac>)
    3a48:	2179      	movs	r1, #121	; 0x79
    3a4a:	f7fc fc63 	bl	314 <assertEFM>

    /* Save configuration */
    l_pItemList = pItemList;
    3a4e:	4b22      	ldr	r3, [pc, #136]	; (3ad8 <DisplayInit+0xb0>)
    3a50:	9a02      	ldr	r2, [sp, #8]
    3a52:	601a      	str	r2, [r3, #0]
    l_ItemCnt   = itemCnt;
    3a54:	4b21      	ldr	r3, [pc, #132]	; (3adc <DisplayInit+0xb4>)
    3a56:	9a01      	ldr	r2, [sp, #4]
    3a58:	601a      	str	r2, [r3, #0]

    /* Configure PD0 to hold power, set FET input to HIGH */
    GPIO_PinModeSet (HOLD_POWER_PORT, HOLD_POWER_PIN, gpioModePushPull, 1);
    3a5a:	2003      	movs	r0, #3
    3a5c:	2100      	movs	r1, #0
    3a5e:	2204      	movs	r2, #4
    3a60:	2301      	movs	r3, #1
    3a62:	f7fd fcc3 	bl	13ec <GPIO_PinModeSet>

    /* Get a timer handle to switch the display off after a time */
    if (l_hdlLCD_Off == NONE)
    3a66:	4b1e      	ldr	r3, [pc, #120]	; (3ae0 <DisplayInit+0xb8>)
    3a68:	681b      	ldr	r3, [r3, #0]
    3a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a6e:	d105      	bne.n	3a7c <DisplayInit+0x54>
	l_hdlLCD_Off = sTimerCreate (SwitchLCD_Off);
    3a70:	481c      	ldr	r0, [pc, #112]	; (3ae4 <DisplayInit+0xbc>)
    3a72:	f7ff fc45 	bl	3300 <sTimerCreate>
    3a76:	4602      	mov	r2, r0
    3a78:	4b19      	ldr	r3, [pc, #100]	; (3ae0 <DisplayInit+0xb8>)
    3a7a:	601a      	str	r2, [r3, #0]

    /* Get a timer handle to switch the device off after a time */
    if (l_hdlPowerOff == NONE)
    3a7c:	4b1a      	ldr	r3, [pc, #104]	; (3ae8 <DisplayInit+0xc0>)
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a84:	d10b      	bne.n	3a9e <DisplayInit+0x76>
    {
	l_hdlPowerOff = sTimerCreate (SwitchDeviceOff);
    3a86:	4819      	ldr	r0, [pc, #100]	; (3aec <DisplayInit+0xc4>)
    3a88:	f7ff fc3a 	bl	3300 <sTimerCreate>
    3a8c:	4602      	mov	r2, r0
    3a8e:	4b16      	ldr	r3, [pc, #88]	; (3ae8 <DisplayInit+0xc0>)
    3a90:	601a      	str	r2, [r3, #0]
	sTimerStart (l_hdlPowerOff, POWER_OFF_TIMEOUT);	// initial timer start
    3a92:	4b15      	ldr	r3, [pc, #84]	; (3ae8 <DisplayInit+0xc0>)
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	4618      	mov	r0, r3
    3a98:	2178      	movs	r1, #120	; 0x78
    3a9a:	f7ff fc81 	bl	33a0 <sTimerStart>
    }

    /* Create timer to trigger a callback routine after duration is over */
    if (l_hdlDispNext == NONE)
    3a9e:	4b14      	ldr	r3, [pc, #80]	; (3af0 <DisplayInit+0xc8>)
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3aa6:	d105      	bne.n	3ab4 <DisplayInit+0x8c>
	l_hdlDispNext = sTimerCreate (DispNextTrigger);
    3aa8:	4812      	ldr	r0, [pc, #72]	; (3af4 <DisplayInit+0xcc>)
    3aaa:	f7ff fc29 	bl	3300 <sTimerCreate>
    3aae:	4602      	mov	r2, r0
    3ab0:	4b0f      	ldr	r3, [pc, #60]	; (3af0 <DisplayInit+0xc8>)
    3ab2:	601a      	str	r2, [r3, #0]

    /* Connect the update function */
    DisplayUpdateFctInstall (DisplayUpdateClock);
    3ab4:	4810      	ldr	r0, [pc, #64]	; (3af8 <DisplayInit+0xd0>)
    3ab6:	f7ff fd81 	bl	35bc <DisplayUpdateFctInstall>

    /* Set flags to active state */
    l_bitMaskFieldActive = LCD_FIELD_ID_BIT(LCD_LINE1_BLANK);	// pseudo field
    3aba:	4b10      	ldr	r3, [pc, #64]	; (3afc <DisplayInit+0xd4>)
    3abc:	2201      	movs	r2, #1
    3abe:	801a      	strh	r2, [r3, #0]
    l_flgDisplayIsOn = true;
    3ac0:	4b0f      	ldr	r3, [pc, #60]	; (3b00 <DisplayInit+0xd8>)
    3ac2:	2201      	movs	r2, #1
    3ac4:	701a      	strb	r2, [r3, #0]

    /* Initialize the LCD module specific parts */
    LCD_Init (pField);
    3ac6:	9803      	ldr	r0, [sp, #12]
    3ac8:	f7fe ff88 	bl	29dc <LCD_Init>
}
    3acc:	b005      	add	sp, #20
    3ace:	f85d fb04 	ldr.w	pc, [sp], #4
    3ad2:	bf00      	nop
    3ad4:	0000a904 	.word	0x0000a904
    3ad8:	20000f38 	.word	0x20000f38
    3adc:	20000f3c 	.word	0x20000f3c
    3ae0:	20000068 	.word	0x20000068
    3ae4:	000041dd 	.word	0x000041dd
    3ae8:	2000006c 	.word	0x2000006c
    3aec:	00004209 	.word	0x00004209
    3af0:	20000070 	.word	0x20000070
    3af4:	0000421d 	.word	0x0000421d
    3af8:	00004189 	.word	0x00004189
    3afc:	20001290 	.word	0x20001290
    3b00:	20000f44 	.word	0x20000f44

00003b04 <DisplayKeyHandler>:
 * @param[in] keycode
 *	Translated key code of type KEYCODE.
 *
 ******************************************************************************/
void	DisplayKeyHandler (KEYCODE keycode)
{
    3b04:	b500      	push	{lr}
    3b06:	b083      	sub	sp, #12
    3b08:	4603      	mov	r3, r0
    3b0a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (keycode)
    3b0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3b12:	3b01      	subs	r3, #1
    3b14:	2b08      	cmp	r3, #8
    3b16:	f200 8088 	bhi.w	3c2a <DisplayKeyHandler+0x126>
    3b1a:	a201      	add	r2, pc, #4	; (adr r2, 3b20 <DisplayKeyHandler+0x1c>)
    3b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b20:	00003b45 	.word	0x00003b45
    3b24:	00003b57 	.word	0x00003b57
    3b28:	00003bc3 	.word	0x00003bc3
    3b2c:	00003b5f 	.word	0x00003b5f
    3b30:	00003b71 	.word	0x00003b71
    3b34:	00003bc3 	.word	0x00003bc3
    3b38:	00003b91 	.word	0x00003b91
    3b3c:	00003ba3 	.word	0x00003ba3
    3b40:	00003bc3 	.word	0x00003bc3
    {
	case KEYCODE_POWER_ASSERT:	// POWER was asserted
	    if (! l_flgDisplayIsOn)
    3b44:	4b3b      	ldr	r3, [pc, #236]	; (3c34 <DisplayKeyHandler+0x130>)
    3b46:	781b      	ldrb	r3, [r3, #0]
    3b48:	b2db      	uxtb	r3, r3
    3b4a:	f083 0301 	eor.w	r3, r3, #1
    3b4e:	b2db      	uxtb	r3, r3
    3b50:	2b00      	cmp	r3, #0
    3b52:	d000      	beq.n	3b56 <DisplayKeyHandler+0x52>
		break;			// just use as wake-up if LCD is OFF
    3b54:	e04d      	b.n	3bf2 <DisplayKeyHandler+0xee>

	    /* no break */

	case KEYCODE_POWER_REPEAT:	// repeated POWER was asserted
	    l_ItemIdx = 0;		// select item number 0
    3b56:	4b38      	ldr	r3, [pc, #224]	; (3c38 <DisplayKeyHandler+0x134>)
    3b58:	2200      	movs	r2, #0
    3b5a:	601a      	str	r2, [r3, #0]
	    break;
    3b5c:	e049      	b.n	3bf2 <DisplayKeyHandler+0xee>

	case KEYCODE_NEXT_ASSERT:	// NEXT was asserted
	    if (! l_flgDisplayIsOn)
    3b5e:	4b35      	ldr	r3, [pc, #212]	; (3c34 <DisplayKeyHandler+0x130>)
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	b2db      	uxtb	r3, r3
    3b64:	f083 0301 	eor.w	r3, r3, #1
    3b68:	b2db      	uxtb	r3, r3
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d000      	beq.n	3b70 <DisplayKeyHandler+0x6c>
		break;			// just use as wake-up if LCD is OFF
    3b6e:	e040      	b.n	3bf2 <DisplayKeyHandler+0xee>

	    /* no break */

	case KEYCODE_NEXT_REPEAT:	// repeated NEXT was asserted
	    if (++l_ItemIdx >= l_ItemCnt)
    3b70:	4b31      	ldr	r3, [pc, #196]	; (3c38 <DisplayKeyHandler+0x134>)
    3b72:	681b      	ldr	r3, [r3, #0]
    3b74:	1c5a      	adds	r2, r3, #1
    3b76:	4b30      	ldr	r3, [pc, #192]	; (3c38 <DisplayKeyHandler+0x134>)
    3b78:	601a      	str	r2, [r3, #0]
    3b7a:	4b2f      	ldr	r3, [pc, #188]	; (3c38 <DisplayKeyHandler+0x134>)
    3b7c:	681a      	ldr	r2, [r3, #0]
    3b7e:	4b2f      	ldr	r3, [pc, #188]	; (3c3c <DisplayKeyHandler+0x138>)
    3b80:	681b      	ldr	r3, [r3, #0]
    3b82:	429a      	cmp	r2, r3
    3b84:	db03      	blt.n	3b8e <DisplayKeyHandler+0x8a>
		l_ItemIdx = 0;		// wrap around
    3b86:	4b2c      	ldr	r3, [pc, #176]	; (3c38 <DisplayKeyHandler+0x134>)
    3b88:	2200      	movs	r2, #0
    3b8a:	601a      	str	r2, [r3, #0]

	    break;
    3b8c:	e031      	b.n	3bf2 <DisplayKeyHandler+0xee>
    3b8e:	e030      	b.n	3bf2 <DisplayKeyHandler+0xee>

	case KEYCODE_PREV_ASSERT:	// PREV was asserted
	    if (! l_flgDisplayIsOn)
    3b90:	4b28      	ldr	r3, [pc, #160]	; (3c34 <DisplayKeyHandler+0x130>)
    3b92:	781b      	ldrb	r3, [r3, #0]
    3b94:	b2db      	uxtb	r3, r3
    3b96:	f083 0301 	eor.w	r3, r3, #1
    3b9a:	b2db      	uxtb	r3, r3
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d000      	beq.n	3ba2 <DisplayKeyHandler+0x9e>
		break;			// just use as wake-up if LCD is OFF
    3ba0:	e027      	b.n	3bf2 <DisplayKeyHandler+0xee>

	    /* no break */

	case KEYCODE_PREV_REPEAT:	// repeated PREV was asserted
	    if (--l_ItemIdx < 0)
    3ba2:	4b25      	ldr	r3, [pc, #148]	; (3c38 <DisplayKeyHandler+0x134>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	1e5a      	subs	r2, r3, #1
    3ba8:	4b23      	ldr	r3, [pc, #140]	; (3c38 <DisplayKeyHandler+0x134>)
    3baa:	601a      	str	r2, [r3, #0]
    3bac:	4b22      	ldr	r3, [pc, #136]	; (3c38 <DisplayKeyHandler+0x134>)
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	da05      	bge.n	3bc0 <DisplayKeyHandler+0xbc>
		l_ItemIdx = l_ItemCnt-1; // wrap around
    3bb4:	4b21      	ldr	r3, [pc, #132]	; (3c3c <DisplayKeyHandler+0x138>)
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	1e5a      	subs	r2, r3, #1
    3bba:	4b1f      	ldr	r3, [pc, #124]	; (3c38 <DisplayKeyHandler+0x134>)
    3bbc:	601a      	str	r2, [r3, #0]

	    break;
    3bbe:	e018      	b.n	3bf2 <DisplayKeyHandler+0xee>
    3bc0:	e017      	b.n	3bf2 <DisplayKeyHandler+0xee>

	case KEYCODE_POWER_RELEASE:	// POWER was released
	case KEYCODE_PREV_RELEASE:	// PREV was released
	case KEYCODE_NEXT_RELEASE:	// NEXT was released
	    /* (re-)start timers to switch display/device OFF after time */
	    if (l_hdlLCD_Off != NONE)
    3bc2:	4b1f      	ldr	r3, [pc, #124]	; (3c40 <DisplayKeyHandler+0x13c>)
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bca:	d005      	beq.n	3bd8 <DisplayKeyHandler+0xd4>
		sTimerStart (l_hdlLCD_Off, LCD_POWER_OFF_TIMEOUT);
    3bcc:	4b1c      	ldr	r3, [pc, #112]	; (3c40 <DisplayKeyHandler+0x13c>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	4618      	mov	r0, r3
    3bd2:	213c      	movs	r1, #60	; 0x3c
    3bd4:	f7ff fbe4 	bl	33a0 <sTimerStart>

	    if (l_hdlPowerOff != NONE)
    3bd8:	4b1a      	ldr	r3, [pc, #104]	; (3c44 <DisplayKeyHandler+0x140>)
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    3be0:	d006      	beq.n	3bf0 <DisplayKeyHandler+0xec>
		sTimerStart (l_hdlPowerOff, POWER_OFF_TIMEOUT);
    3be2:	4b18      	ldr	r3, [pc, #96]	; (3c44 <DisplayKeyHandler+0x140>)
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	4618      	mov	r0, r3
    3be8:	2178      	movs	r1, #120	; 0x78
    3bea:	f7ff fbd9 	bl	33a0 <sTimerStart>

	    return;
    3bee:	e01d      	b.n	3c2c <DisplayKeyHandler+0x128>
    3bf0:	e01c      	b.n	3c2c <DisplayKeyHandler+0x128>
	default:	// ignore all other key codes
	    return;
    }

    /* Common part of KEYCODE_Sx_ASSERT */
    l_bitMaskFieldActive = LCD_FIELD_ID_MASK_ITEM;  // activate item
    3bf2:	4b15      	ldr	r3, [pc, #84]	; (3c48 <DisplayKeyHandler+0x144>)
    3bf4:	2270      	movs	r2, #112	; 0x70
    3bf6:	801a      	strh	r2, [r3, #0]

    if (l_hdlLCD_Off != NONE)
    3bf8:	4b11      	ldr	r3, [pc, #68]	; (3c40 <DisplayKeyHandler+0x13c>)
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c00:	d004      	beq.n	3c0c <DisplayKeyHandler+0x108>
	sTimerCancel (l_hdlLCD_Off);	// inhibit power-off of LCD
    3c02:	4b0f      	ldr	r3, [pc, #60]	; (3c40 <DisplayKeyHandler+0x13c>)
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	4618      	mov	r0, r3
    3c08:	f7ff fbf8 	bl	33fc <sTimerCancel>

    if (l_hdlPowerOff != NONE)
    3c0c:	4b0d      	ldr	r3, [pc, #52]	; (3c44 <DisplayKeyHandler+0x140>)
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c14:	d004      	beq.n	3c20 <DisplayKeyHandler+0x11c>
	sTimerCancel (l_hdlPowerOff);	// inhibit device power-off
    3c16:	4b0b      	ldr	r3, [pc, #44]	; (3c44 <DisplayKeyHandler+0x140>)
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	4618      	mov	r0, r3
    3c1c:	f7ff fbee 	bl	33fc <sTimerCancel>

    /* Initiate first update for all selected fields */
    l_bitMaskFieldUpd = l_bitMaskFieldActive;
    3c20:	4b09      	ldr	r3, [pc, #36]	; (3c48 <DisplayKeyHandler+0x144>)
    3c22:	881a      	ldrh	r2, [r3, #0]
    3c24:	4b09      	ldr	r3, [pc, #36]	; (3c4c <DisplayKeyHandler+0x148>)
    3c26:	801a      	strh	r2, [r3, #0]
    3c28:	e000      	b.n	3c2c <DisplayKeyHandler+0x128>
		sTimerStart (l_hdlPowerOff, POWER_OFF_TIMEOUT);

	    return;

	default:	// ignore all other key codes
	    return;
    3c2a:	bf00      	nop
    if (l_hdlPowerOff != NONE)
	sTimerCancel (l_hdlPowerOff);	// inhibit device power-off

    /* Initiate first update for all selected fields */
    l_bitMaskFieldUpd = l_bitMaskFieldActive;
}
    3c2c:	b003      	add	sp, #12
    3c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    3c32:	bf00      	nop
    3c34:	20000f44 	.word	0x20000f44
    3c38:	20000f40 	.word	0x20000f40
    3c3c:	20000f3c 	.word	0x20000f3c
    3c40:	20000068 	.word	0x20000068
    3c44:	2000006c 	.word	0x2000006c
    3c48:	20001290 	.word	0x20001290
    3c4c:	20001292 	.word	0x20001292

00003c50 <DisplayUpdateCheck>:
 * 	In this application it is called every second, triggered from the
 * 	one second interrupt of the RTC.
 *
 ******************************************************************************/
void	DisplayUpdateCheck (void)
{
    3c50:	b500      	push	{lr}
    3c52:	b083      	sub	sp, #12
static int prevSeconds;


    /* If one second is over, we need to update measurements */
    if (prevSeconds != g_CurrDateTime.tm_sec)
    3c54:	4b27      	ldr	r3, [pc, #156]	; (3cf4 <DisplayUpdateCheck+0xa4>)
    3c56:	681a      	ldr	r2, [r3, #0]
    3c58:	4b27      	ldr	r3, [pc, #156]	; (3cf8 <DisplayUpdateCheck+0xa8>)
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	429a      	cmp	r2, r3
    3c5e:	d006      	beq.n	3c6e <DisplayUpdateCheck+0x1e>
    {
	prevSeconds = g_CurrDateTime.tm_sec;
    3c60:	4b24      	ldr	r3, [pc, #144]	; (3cf4 <DisplayUpdateCheck+0xa4>)
    3c62:	681a      	ldr	r2, [r3, #0]
    3c64:	4b24      	ldr	r3, [pc, #144]	; (3cf8 <DisplayUpdateCheck+0xa8>)
    3c66:	601a      	str	r2, [r3, #0]

	DisplayUpdateTrigger (LCD_ITEM_DATA);
    3c68:	2006      	movs	r0, #6
    3c6a:	f000 fa9f 	bl	41ac <DisplayUpdateTrigger>
    }

    /*
     * Check for callback trigger
     */
    if (l_DispNextFctTrigger)
    3c6e:	4b23      	ldr	r3, [pc, #140]	; (3cfc <DisplayUpdateCheck+0xac>)
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	b2db      	uxtb	r3, r3
    3c74:	2b00      	cmp	r3, #0
    3c76:	d014      	beq.n	3ca2 <DisplayUpdateCheck+0x52>
    {
	DISP_NEXT_FCT fct = l_DispNextFct;
    3c78:	4b21      	ldr	r3, [pc, #132]	; (3d00 <DisplayUpdateCheck+0xb0>)
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	9301      	str	r3, [sp, #4]

	/* Clear trigger flag */
	l_DispNextFctTrigger = false;
    3c7e:	4b1f      	ldr	r3, [pc, #124]	; (3cfc <DisplayUpdateCheck+0xac>)
    3c80:	2200      	movs	r2, #0
    3c82:	701a      	strb	r2, [r3, #0]

	/* See if a callback routine has been defined and call it */
	if (fct)
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d008      	beq.n	3c9c <DisplayUpdateCheck+0x4c>
	{
	    l_DispNextFct = NULL;	// no NEW callback for default
    3c8a:	4b1d      	ldr	r3, [pc, #116]	; (3d00 <DisplayUpdateCheck+0xb0>)
    3c8c:	2200      	movs	r2, #0
    3c8e:	601a      	str	r2, [r3, #0]

	    fct (l_DispNextUserParm);	// call user routine
    3c90:	4b1c      	ldr	r3, [pc, #112]	; (3d04 <DisplayUpdateCheck+0xb4>)
    3c92:	681a      	ldr	r2, [r3, #0]
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	4610      	mov	r0, r2
    3c98:	4798      	blx	r3
    3c9a:	e002      	b.n	3ca2 <DisplayUpdateCheck+0x52>
	}
	else
	{
	    /* No callback - switch LCD off */
	    SwitchLCD_Off((TIM_HDL)0);
    3c9c:	2000      	movs	r0, #0
    3c9e:	f000 fa9d 	bl	41dc <SwitchLCD_Off>
     * Check if LC-Display should be powered-on or off.  This is executed
     * in this main loop since it must not happen in any interrupt service
     * routine (ISR) due to calling delay functions and other issues.
     * However, the reason when to do it is triggered via ISRs.
     */
    if (l_bitMaskFieldActive)
    3ca2:	4b19      	ldr	r3, [pc, #100]	; (3d08 <DisplayUpdateCheck+0xb8>)
    3ca4:	881b      	ldrh	r3, [r3, #0]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d017      	beq.n	3cda <DisplayUpdateCheck+0x8a>
    {
	/* LCD should be powered ON */
	if (! l_flgDisplayIsOn)
    3caa:	4b18      	ldr	r3, [pc, #96]	; (3d0c <DisplayUpdateCheck+0xbc>)
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	b2db      	uxtb	r3, r3
    3cb0:	f083 0301 	eor.w	r3, r3, #1
    3cb4:	b2db      	uxtb	r3, r3
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d004      	beq.n	3cc4 <DisplayUpdateCheck+0x74>
	{
	    LCD_PowerOn();
    3cba:	f7fe fea5 	bl	2a08 <LCD_PowerOn>
	    l_flgDisplayIsOn = true;
    3cbe:	4b13      	ldr	r3, [pc, #76]	; (3d0c <DisplayUpdateCheck+0xbc>)
    3cc0:	2201      	movs	r2, #1
    3cc2:	701a      	strb	r2, [r3, #0]
	}

	/* LCD is ON - check if fields need to be updated */
	if (l_bitMaskFieldUpd & l_bitMaskFieldActive)
    3cc4:	4b12      	ldr	r3, [pc, #72]	; (3d10 <DisplayUpdateCheck+0xc0>)
    3cc6:	881a      	ldrh	r2, [r3, #0]
    3cc8:	4b0f      	ldr	r3, [pc, #60]	; (3d08 <DisplayUpdateCheck+0xb8>)
    3cca:	881b      	ldrh	r3, [r3, #0]
    3ccc:	4013      	ands	r3, r2
    3cce:	b29b      	uxth	r3, r3
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d00c      	beq.n	3cee <DisplayUpdateCheck+0x9e>
	    DisplayUpdate();
    3cd4:	f000 f81e 	bl	3d14 <DisplayUpdate>
    3cd8:	e009      	b.n	3cee <DisplayUpdateCheck+0x9e>
    }
    else
    {
	/* LCD should be powered OFF */
	if (l_flgDisplayIsOn)
    3cda:	4b0c      	ldr	r3, [pc, #48]	; (3d0c <DisplayUpdateCheck+0xbc>)
    3cdc:	781b      	ldrb	r3, [r3, #0]
    3cde:	b2db      	uxtb	r3, r3
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d004      	beq.n	3cee <DisplayUpdateCheck+0x9e>
	{
	    LCD_PowerOff();
    3ce4:	f7fe fee8 	bl	2ab8 <LCD_PowerOff>
	    l_flgDisplayIsOn = false;
    3ce8:	4b08      	ldr	r3, [pc, #32]	; (3d0c <DisplayUpdateCheck+0xbc>)
    3cea:	2200      	movs	r2, #0
    3cec:	701a      	strb	r2, [r3, #0]
	}
    }
}
    3cee:	b003      	add	sp, #12
    3cf0:	f85d fb04 	ldr.w	pc, [sp], #4
    3cf4:	20001268 	.word	0x20001268
    3cf8:	20000f50 	.word	0x20000f50
    3cfc:	20000f45 	.word	0x20000f45
    3d00:	20000f48 	.word	0x20000f48
    3d04:	20000f4c 	.word	0x20000f4c
    3d08:	20001290 	.word	0x20001290
    3d0c:	20000f44 	.word	0x20000f44
    3d10:	20001292 	.word	0x20001292

00003d14 <DisplayUpdate>:
 * need to be updated, i.e. when bits in @ref l_bitMaskFieldUpd are set.
 * It displays the respective data on the LCD and clears the associated bit.
 *
 ******************************************************************************/
static void DisplayUpdate (void)
{
    3d14:	b570      	push	{r4, r5, r6, lr}
    3d16:	b086      	sub	sp, #24
LCD_FIELD_ID	 id;
const char	*pStr;


    for (id = LCD_LINE1_BLANK;  id < LCD_FIELD_ID_CNT;  id++)
    3d18:	2300      	movs	r3, #0
    3d1a:	f88d 3017 	strb.w	r3, [sp, #23]
    3d1e:	e0b8      	b.n	3e92 <DisplayUpdate+0x17e>
    {
	if ((LCD_FIELD_ID_BIT_VAR(l_bitMaskFieldUpd,    id) == 0)
    3d20:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3d24:	009b      	lsls	r3, r3, #2
    3d26:	461a      	mov	r2, r3
    3d28:	4b5d      	ldr	r3, [pc, #372]	; (3ea0 <DisplayUpdate+0x18c>)
    3d2a:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
    3d2e:	015b      	lsls	r3, r3, #5
    3d30:	4413      	add	r3, r2
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00b      	beq.n	3d50 <DisplayUpdate+0x3c>
	||  (LCD_FIELD_ID_BIT_VAR(l_bitMaskFieldActive, id) == 0))
    3d38:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3d3c:	009b      	lsls	r3, r3, #2
    3d3e:	461a      	mov	r2, r3
    3d40:	4b58      	ldr	r3, [pc, #352]	; (3ea4 <DisplayUpdate+0x190>)
    3d42:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
    3d46:	015b      	lsls	r3, r3, #5
    3d48:	4413      	add	r3, r2
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d100      	bne.n	3d52 <DisplayUpdate+0x3e>
	    continue;		// nothing to be done for this field
    3d50:	e09a      	b.n	3e88 <DisplayUpdate+0x174>

	/* clear this bit */
	LCD_FIELD_ID_BIT_VAR(l_bitMaskFieldUpd, id) = 0;
    3d52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3d56:	009b      	lsls	r3, r3, #2
    3d58:	461a      	mov	r2, r3
    3d5a:	4b51      	ldr	r3, [pc, #324]	; (3ea0 <DisplayUpdate+0x18c>)
    3d5c:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
    3d60:	015b      	lsls	r3, r3, #5
    3d62:	4413      	add	r3, r2
    3d64:	2200      	movs	r2, #0
    3d66:	601a      	str	r2, [r3, #0]

	/* update the respective field */
	switch (id)
    3d68:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3d6c:	2b07      	cmp	r3, #7
    3d6e:	f200 808a 	bhi.w	3e86 <DisplayUpdate+0x172>
    3d72:	a201      	add	r2, pc, #4	; (adr r2, 3d78 <DisplayUpdate+0x64>)
    3d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d78:	00003d99 	.word	0x00003d99
    3d7c:	00003d99 	.word	0x00003d99
    3d80:	00003e87 	.word	0x00003e87
    3d84:	00003e87 	.word	0x00003e87
    3d88:	00003da7 	.word	0x00003da7
    3d8c:	00003dc3 	.word	0x00003dc3
    3d90:	00003dfd 	.word	0x00003dfd
    3d94:	00003e57 	.word	0x00003e57
	{
	    case LCD_LINE1_BLANK:
	    case LCD_LINE2_BLANK:	// print empty line
		LCD_Printf (id, "");
    3d98:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3d9c:	4618      	mov	r0, r3
    3d9e:	4942      	ldr	r1, [pc, #264]	; (3ea8 <DisplayUpdate+0x194>)
    3da0:	f7fe feb0 	bl	2b04 <LCD_Printf>
		break;
    3da4:	e070      	b.n	3e88 <DisplayUpdate+0x174>

	    case LCD_ITEM_DESC:		// display item description
		LCD_Printf (id, "%s", l_pItemList[l_ItemIdx]);
    3da6:	4b41      	ldr	r3, [pc, #260]	; (3eac <DisplayUpdate+0x198>)
    3da8:	681a      	ldr	r2, [r3, #0]
    3daa:	4b41      	ldr	r3, [pc, #260]	; (3eb0 <DisplayUpdate+0x19c>)
    3dac:	681b      	ldr	r3, [r3, #0]
    3dae:	00db      	lsls	r3, r3, #3
    3db0:	4413      	add	r3, r2
    3db2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3db6:	4610      	mov	r0, r2
    3db8:	493e      	ldr	r1, [pc, #248]	; (3eb4 <DisplayUpdate+0x1a0>)
    3dba:	cb0c      	ldmia	r3, {r2, r3}
    3dbc:	f7fe fea2 	bl	2b04 <LCD_Printf>
		break;
    3dc0:	e062      	b.n	3e88 <DisplayUpdate+0x174>

	    case LCD_ITEM_ADDR:		// display item register address
		if (l_pItemList[l_ItemIdx].Cmd != SBS_NONE)
    3dc2:	4b3a      	ldr	r3, [pc, #232]	; (3eac <DisplayUpdate+0x198>)
    3dc4:	681a      	ldr	r2, [r3, #0]
    3dc6:	4b3a      	ldr	r3, [pc, #232]	; (3eb0 <DisplayUpdate+0x19c>)
    3dc8:	681b      	ldr	r3, [r3, #0]
    3dca:	00db      	lsls	r3, r3, #3
    3dcc:	4413      	add	r3, r2
    3dce:	889b      	ldrh	r3, [r3, #4]
    3dd0:	b21b      	sxth	r3, r3
    3dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dd6:	d010      	beq.n	3dfa <DisplayUpdate+0xe6>
		    LCD_Printf (id, "[%02X]", l_pItemList[l_ItemIdx].Cmd & 0xFF);
    3dd8:	4b34      	ldr	r3, [pc, #208]	; (3eac <DisplayUpdate+0x198>)
    3dda:	681a      	ldr	r2, [r3, #0]
    3ddc:	4b34      	ldr	r3, [pc, #208]	; (3eb0 <DisplayUpdate+0x19c>)
    3dde:	681b      	ldr	r3, [r3, #0]
    3de0:	00db      	lsls	r3, r3, #3
    3de2:	4413      	add	r3, r2
    3de4:	889b      	ldrh	r3, [r3, #4]
    3de6:	b29b      	uxth	r3, r3
    3de8:	b2db      	uxtb	r3, r3
    3dea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3dee:	4610      	mov	r0, r2
    3df0:	4931      	ldr	r1, [pc, #196]	; (3eb8 <DisplayUpdate+0x1a4>)
    3df2:	461a      	mov	r2, r3
    3df4:	f7fe fe86 	bl	2b04 <LCD_Printf>
		break;
    3df8:	e046      	b.n	3e88 <DisplayUpdate+0x174>
    3dfa:	e045      	b.n	3e88 <DisplayUpdate+0x174>

	    case LCD_ITEM_DATA:		// display item register data
		pStr = ItemDataString(&l_pItemList[l_ItemIdx]);
    3dfc:	4b2b      	ldr	r3, [pc, #172]	; (3eac <DisplayUpdate+0x198>)
    3dfe:	681a      	ldr	r2, [r3, #0]
    3e00:	4b2b      	ldr	r3, [pc, #172]	; (3eb0 <DisplayUpdate+0x19c>)
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	00db      	lsls	r3, r3, #3
    3e06:	4413      	add	r3, r2
    3e08:	4618      	mov	r0, r3
    3e0a:	f000 f85d 	bl	3ec8 <ItemDataString>
    3e0e:	9004      	str	r0, [sp, #16]
		if (pStr != NULL)
    3e10:	9b04      	ldr	r3, [sp, #16]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d018      	beq.n	3e48 <DisplayUpdate+0x134>
		{
		    if (l_pItemList[l_ItemIdx].Cmd != SBS_NONE)
    3e16:	4b25      	ldr	r3, [pc, #148]	; (3eac <DisplayUpdate+0x198>)
    3e18:	681a      	ldr	r2, [r3, #0]
    3e1a:	4b25      	ldr	r3, [pc, #148]	; (3eb0 <DisplayUpdate+0x19c>)
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	00db      	lsls	r3, r3, #3
    3e20:	4413      	add	r3, r2
    3e22:	889b      	ldrh	r3, [r3, #4]
    3e24:	b21b      	sxth	r3, r3
    3e26:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e2a:	d007      	beq.n	3e3c <DisplayUpdate+0x128>
			LCD_Printf (id, "%s", pStr);
    3e2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3e30:	4618      	mov	r0, r3
    3e32:	4920      	ldr	r1, [pc, #128]	; (3eb4 <DisplayUpdate+0x1a0>)
    3e34:	9a04      	ldr	r2, [sp, #16]
    3e36:	f7fe fe65 	bl	2b04 <LCD_Printf>
		else
		{
		    LCD_Printf (id, "READ ERROR");
		    //TODO: flash LED to indicate ERROR ???
		}
		break;
    3e3a:	e025      	b.n	3e88 <DisplayUpdate+0x174>
		if (pStr != NULL)
		{
		    if (l_pItemList[l_ItemIdx].Cmd != SBS_NONE)
			LCD_Printf (id, "%s", pStr);
		    else // use the whole line to display special information
			LCD_Printf (LCD_LINE2_TEXT, "%s", pStr);
    3e3c:	2003      	movs	r0, #3
    3e3e:	491d      	ldr	r1, [pc, #116]	; (3eb4 <DisplayUpdate+0x1a0>)
    3e40:	9a04      	ldr	r2, [sp, #16]
    3e42:	f7fe fe5f 	bl	2b04 <LCD_Printf>
		else
		{
		    LCD_Printf (id, "READ ERROR");
		    //TODO: flash LED to indicate ERROR ???
		}
		break;
    3e46:	e01f      	b.n	3e88 <DisplayUpdate+0x174>
		    else // use the whole line to display special information
			LCD_Printf (LCD_LINE2_TEXT, "%s", pStr);
		}
		else
		{
		    LCD_Printf (id, "READ ERROR");
    3e48:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3e4c:	4618      	mov	r0, r3
    3e4e:	491b      	ldr	r1, [pc, #108]	; (3ebc <DisplayUpdate+0x1a8>)
    3e50:	f7fe fe58 	bl	2b04 <LCD_Printf>
		    //TODO: flash LED to indicate ERROR ???
		}
		break;
    3e54:	e018      	b.n	3e88 <DisplayUpdate+0x174>

	    case LCD_CLOCK:		// current date and time
		LCD_Printf (id, "%02d%02d%02d %02d:%02d:%02d",
    3e56:	4b1a      	ldr	r3, [pc, #104]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e58:	695a      	ldr	r2, [r3, #20]
			    g_CurrDateTime.tm_year,
			    g_CurrDateTime.tm_mon + 1,
    3e5a:	4b19      	ldr	r3, [pc, #100]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e5c:	691b      	ldr	r3, [r3, #16]
		    //TODO: flash LED to indicate ERROR ???
		}
		break;

	    case LCD_CLOCK:		// current date and time
		LCD_Printf (id, "%02d%02d%02d %02d:%02d:%02d",
    3e5e:	3301      	adds	r3, #1
    3e60:	4917      	ldr	r1, [pc, #92]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e62:	68ce      	ldr	r6, [r1, #12]
    3e64:	4916      	ldr	r1, [pc, #88]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e66:	688d      	ldr	r5, [r1, #8]
    3e68:	4915      	ldr	r1, [pc, #84]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e6a:	684c      	ldr	r4, [r1, #4]
    3e6c:	4914      	ldr	r1, [pc, #80]	; (3ec0 <DisplayUpdate+0x1ac>)
    3e6e:	6808      	ldr	r0, [r1, #0]
    3e70:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3e74:	9600      	str	r6, [sp, #0]
    3e76:	9501      	str	r5, [sp, #4]
    3e78:	9402      	str	r4, [sp, #8]
    3e7a:	9003      	str	r0, [sp, #12]
    3e7c:	4608      	mov	r0, r1
    3e7e:	4911      	ldr	r1, [pc, #68]	; (3ec4 <DisplayUpdate+0x1b0>)
    3e80:	f7fe fe40 	bl	2b04 <LCD_Printf>
			    g_CurrDateTime.tm_mon + 1,
			    g_CurrDateTime.tm_mday,
			    g_CurrDateTime.tm_hour,
			    g_CurrDateTime.tm_min,
			    g_CurrDateTime.tm_sec);
		break;
    3e84:	e000      	b.n	3e88 <DisplayUpdate+0x174>

	    default:		// LCD_LINE1_TEXT, LCD_LINE2_TEXT, or unknown ID
		break;		// nothing to be done
    3e86:	bf00      	nop
{
LCD_FIELD_ID	 id;
const char	*pStr;


    for (id = LCD_LINE1_BLANK;  id < LCD_FIELD_ID_CNT;  id++)
    3e88:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3e8c:	3301      	adds	r3, #1
    3e8e:	f88d 3017 	strb.w	r3, [sp, #23]
    3e92:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3e96:	2b07      	cmp	r3, #7
    3e98:	f67f af42 	bls.w	3d20 <DisplayUpdate+0xc>

	    default:		// LCD_LINE1_TEXT, LCD_LINE2_TEXT, or unknown ID
		break;		// nothing to be done
	}
    }
}
    3e9c:	b006      	add	sp, #24
    3e9e:	bd70      	pop	{r4, r5, r6, pc}
    3ea0:	20001292 	.word	0x20001292
    3ea4:	20001290 	.word	0x20001290
    3ea8:	0000a91c 	.word	0x0000a91c
    3eac:	20000f38 	.word	0x20000f38
    3eb0:	20000f40 	.word	0x20000f40
    3eb4:	0000a920 	.word	0x0000a920
    3eb8:	0000a924 	.word	0x0000a924
    3ebc:	0000a92c 	.word	0x0000a92c
    3ec0:	20001268 	.word	0x20001268
    3ec4:	0000a938 	.word	0x0000a938

00003ec8 <ItemDataString>:
 *	This routine is not MT-save (which should not be a problem for this
 *	application)!
 *
 ******************************************************************************/
static char	*ItemDataString (const ITEM *pItem)
{
    3ec8:	b510      	push	{r4, lr}
    3eca:	b08c      	sub	sp, #48	; 0x30
    3ecc:	9003      	str	r0, [sp, #12]
static char	 strBuf[20];	// static buffer to return string into
uint8_t		 dataBuf[20];	// buffer for I2C data, read from the controller
int		 data = NONE;	// generic data variable
    3ece:	f04f 33ff 	mov.w	r3, #4294967295
    3ed2:	930b      	str	r3, [sp, #44]	; 0x2c
SBS_CMD		 regAddr;	// command, i.e. the register address to read


    /* Parameter check */
    EFM_ASSERT(pItem != NULL);
    3ed4:	9b03      	ldr	r3, [sp, #12]
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d104      	bne.n	3ee4 <ItemDataString+0x1c>
    3eda:	4896      	ldr	r0, [pc, #600]	; (4134 <ItemDataString+0x26c>)
    3edc:	f44f 71da 	mov.w	r1, #436	; 0x1b4
    3ee0:	f7fc fa18 	bl	314 <assertEFM>
    if (pItem == NULL)
    3ee4:	9b03      	ldr	r3, [sp, #12]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d101      	bne.n	3eee <ItemDataString+0x26>
	return NULL;		// error
    3eea:	2300      	movs	r3, #0
    3eec:	e11f      	b.n	412e <ItemDataString+0x266>

    /* Check if item needs any data (that should be the standard) */
    regAddr = pItem->Cmd;
    3eee:	9b03      	ldr	r3, [sp, #12]
    3ef0:	889b      	ldrh	r3, [r3, #4]
    3ef2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    if (regAddr != SBS_NONE)
    3ef6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    3efa:	f1b3 3fff 	cmp.w	r3, #4294967295
    3efe:	d048      	beq.n	3f92 <ItemDataString+0xca>
    {
	/* See how many bytes we need to read */
	data = SBS_CMD_SIZE(regAddr);	// get object size
    3f00:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    3f04:	121b      	asrs	r3, r3, #8
    3f06:	b29b      	uxth	r3, r3
    3f08:	b29b      	uxth	r3, r3
    3f0a:	b2db      	uxtb	r3, r3
    3f0c:	930b      	str	r3, [sp, #44]	; 0x2c
	if (data != 0)
    3f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f10:	2b00      	cmp	r3, #0
    3f12:	d033      	beq.n	3f7c <ItemDataString+0xb4>
	{
	    /* More than one byte - must be a block, i.e. a string */
	    EFM_ASSERT(data < (int)sizeof(dataBuf));
    3f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f16:	2b13      	cmp	r3, #19
    3f18:	dd04      	ble.n	3f24 <ItemDataString+0x5c>
    3f1a:	4886      	ldr	r0, [pc, #536]	; (4134 <ItemDataString+0x26c>)
    3f1c:	f240 11c1 	movw	r1, #449	; 0x1c1
    3f20:	f7fc f9f8 	bl	314 <assertEFM>

	    if (BatteryRegReadBlock (regAddr, dataBuf, sizeof(dataBuf)) < 0)
    3f24:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
    3f28:	ab04      	add	r3, sp, #16
    3f2a:	4610      	mov	r0, r2
    3f2c:	4619      	mov	r1, r3
    3f2e:	2214      	movs	r2, #20
    3f30:	f000 fabe 	bl	44b0 <BatteryRegReadBlock>
    3f34:	4603      	mov	r3, r0
    3f36:	2b00      	cmp	r3, #0
    3f38:	da01      	bge.n	3f3e <ItemDataString+0x76>
		return NULL;	// READ ERROR
    3f3a:	2300      	movs	r3, #0
    3f3c:	e0f7      	b.n	412e <ItemDataString+0x266>

	    /*
	     * The buggy battery controller firmware delivers strings with
	     * leading spaces.  We check for this and remove them.
	     */
	    data = 0;		// used as index
    3f3e:	2300      	movs	r3, #0
    3f40:	930b      	str	r3, [sp, #44]	; 0x2c
	    while (isspace((int)dataBuf[data])  &&  data < (int)sizeof(dataBuf))
    3f42:	e002      	b.n	3f4a <ItemDataString+0x82>
		data++;
    3f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f46:	3301      	adds	r3, #1
    3f48:	930b      	str	r3, [sp, #44]	; 0x2c
	    /*
	     * The buggy battery controller firmware delivers strings with
	     * leading spaces.  We check for this and remove them.
	     */
	    data = 0;		// used as index
	    while (isspace((int)dataBuf[data])  &&  data < (int)sizeof(dataBuf))
    3f4a:	4b7b      	ldr	r3, [pc, #492]	; (4138 <ItemDataString+0x270>)
    3f4c:	681a      	ldr	r2, [r3, #0]
    3f4e:	a904      	add	r1, sp, #16
    3f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f52:	440b      	add	r3, r1
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	3301      	adds	r3, #1
    3f58:	4413      	add	r3, r2
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	f003 0308 	and.w	r3, r3, #8
    3f60:	2b00      	cmp	r3, #0
    3f62:	d002      	beq.n	3f6a <ItemDataString+0xa2>
    3f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f66:	2b13      	cmp	r3, #19
    3f68:	ddec      	ble.n	3f44 <ItemDataString+0x7c>
		data++;

	    /* copy string */
	    return strcpy (strBuf, (char *)dataBuf+data);
    3f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f6c:	aa04      	add	r2, sp, #16
    3f6e:	4413      	add	r3, r2
    3f70:	4872      	ldr	r0, [pc, #456]	; (413c <ItemDataString+0x274>)
    3f72:	4619      	mov	r1, r3
    3f74:	f001 faf4 	bl	5560 <strcpy>
    3f78:	4603      	mov	r3, r0
    3f7a:	e0d8      	b.n	412e <ItemDataString+0x266>
	}
	else
	{
	    /* Just one byte to read */
	    data = BatteryRegReadWord (regAddr);
    3f7c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    3f80:	4618      	mov	r0, r3
    3f82:	f000 fa25 	bl	43d0 <BatteryRegReadWord>
    3f86:	900b      	str	r0, [sp, #44]	; 0x2c
	    if (data < 0)
    3f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	da01      	bge.n	3f92 <ItemDataString+0xca>
		return NULL;	// READ ERROR
    3f8e:	2300      	movs	r3, #0
    3f90:	e0cd      	b.n	412e <ItemDataString+0x266>
	}
    }

    /* Variable <data> contains 16bit raw value, build formatted string */
    switch (pItem->Frmt)
    3f92:	9b03      	ldr	r3, [sp, #12]
    3f94:	799b      	ldrb	r3, [r3, #6]
    3f96:	2b0f      	cmp	r3, #15
    3f98:	f200 80c6 	bhi.w	4128 <ItemDataString+0x260>
    3f9c:	a101      	add	r1, pc, #4	; (adr r1, 3fa4 <ItemDataString+0xdc>)
    3f9e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3fa2:	bf00      	nop
    3fa4:	00003fe5 	.word	0x00003fe5
    3fa8:	00003ff3 	.word	0x00003ff3
    3fac:	00004129 	.word	0x00004129
    3fb0:	0000402d 	.word	0x0000402d
    3fb4:	00004039 	.word	0x00004039
    3fb8:	00004045 	.word	0x00004045
    3fbc:	00004051 	.word	0x00004051
    3fc0:	0000405d 	.word	0x0000405d
    3fc4:	00004069 	.word	0x00004069
    3fc8:	0000407d 	.word	0x0000407d
    3fcc:	0000408d 	.word	0x0000408d
    3fd0:	00004099 	.word	0x00004099
    3fd4:	000040a5 	.word	0x000040a5
    3fd8:	000040b1 	.word	0x000040b1
    3fdc:	000040bd 	.word	0x000040bd
    3fe0:	000040df 	.word	0x000040df
    {
	case FRMT_FW_VERSION:	// Firmware Version
	    sprintf (strBuf, "V%s %s", prjVersion, prjDate);
    3fe4:	4855      	ldr	r0, [pc, #340]	; (413c <ItemDataString+0x274>)
    3fe6:	4956      	ldr	r1, [pc, #344]	; (4140 <ItemDataString+0x278>)
    3fe8:	4a56      	ldr	r2, [pc, #344]	; (4144 <ItemDataString+0x27c>)
    3fea:	4b57      	ldr	r3, [pc, #348]	; (4148 <ItemDataString+0x280>)
    3fec:	f001 f974 	bl	52d8 <sprintf>
	    break;
    3ff0:	e09c      	b.n	412c <ItemDataString+0x264>

	case FRMT_CR2032_BAT:	// Voltage of local CR2032 supply battery
	    data = ReadVdd();
    3ff2:	f000 fb43 	bl	467c <ReadVdd>
    3ff6:	4603      	mov	r3, r0
    3ff8:	930b      	str	r3, [sp, #44]	; 0x2c
	    sprintf (strBuf, "CR2032: %d.%03dV", data / 1000, data % 1000);
    3ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3ffc:	4a53      	ldr	r2, [pc, #332]	; (414c <ItemDataString+0x284>)
    3ffe:	fb82 1203 	smull	r1, r2, r2, r3
    4002:	1192      	asrs	r2, r2, #6
    4004:	17db      	asrs	r3, r3, #31
    4006:	1ad4      	subs	r4, r2, r3
    4008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    400a:	4b50      	ldr	r3, [pc, #320]	; (414c <ItemDataString+0x284>)
    400c:	fb83 1302 	smull	r1, r3, r3, r2
    4010:	1199      	asrs	r1, r3, #6
    4012:	17d3      	asrs	r3, r2, #31
    4014:	1acb      	subs	r3, r1, r3
    4016:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    401a:	fb01 f303 	mul.w	r3, r1, r3
    401e:	1ad3      	subs	r3, r2, r3
    4020:	4846      	ldr	r0, [pc, #280]	; (413c <ItemDataString+0x274>)
    4022:	494b      	ldr	r1, [pc, #300]	; (4150 <ItemDataString+0x288>)
    4024:	4622      	mov	r2, r4
    4026:	f001 f957 	bl	52d8 <sprintf>
	    break;
    402a:	e07f      	b.n	412c <ItemDataString+0x264>

	case FRMT_HEX:		// HEX Digits
	    sprintf (strBuf, "0x%04X", data);
    402c:	4843      	ldr	r0, [pc, #268]	; (413c <ItemDataString+0x274>)
    402e:	4949      	ldr	r1, [pc, #292]	; (4154 <ItemDataString+0x28c>)
    4030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4032:	f001 f951 	bl	52d8 <sprintf>
	    break;
    4036:	e079      	b.n	412c <ItemDataString+0x264>

	case FRMT_INTEGER:	// Integer Value
	    sprintf (strBuf, "%5d", data);
    4038:	4840      	ldr	r0, [pc, #256]	; (413c <ItemDataString+0x274>)
    403a:	4947      	ldr	r1, [pc, #284]	; (4158 <ItemDataString+0x290>)
    403c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    403e:	f001 f94b 	bl	52d8 <sprintf>
	    break;
    4042:	e073      	b.n	412c <ItemDataString+0x264>

	case FRMT_SERNUM:	// 5-Digit Integer Value
	    sprintf (strBuf, "%05d", data);
    4044:	483d      	ldr	r0, [pc, #244]	; (413c <ItemDataString+0x274>)
    4046:	4945      	ldr	r1, [pc, #276]	; (415c <ItemDataString+0x294>)
    4048:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    404a:	f001 f945 	bl	52d8 <sprintf>
	    break;
    404e:	e06d      	b.n	412c <ItemDataString+0x264>

	case FRMT_PERCENT:	// Amount in percent
	    sprintf (strBuf, "%5d%%", data);
    4050:	483a      	ldr	r0, [pc, #232]	; (413c <ItemDataString+0x274>)
    4052:	4943      	ldr	r1, [pc, #268]	; (4160 <ItemDataString+0x298>)
    4054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4056:	f001 f93f 	bl	52d8 <sprintf>
	    break;
    405a:	e067      	b.n	412c <ItemDataString+0x264>

	case FRMT_DURATION:	// Duration in [min]
	    sprintf (strBuf, "%5dmin", data);
    405c:	4837      	ldr	r0, [pc, #220]	; (413c <ItemDataString+0x274>)
    405e:	4941      	ldr	r1, [pc, #260]	; (4164 <ItemDataString+0x29c>)
    4060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4062:	f001 f939 	bl	52d8 <sprintf>
	    break;
    4066:	e061      	b.n	412c <ItemDataString+0x264>

	case FRMT_OC_REATIME:	// Overcurrent Reaction Time in 1/2[ms] units
	    sprintf (strBuf, "%5dms", data/2);
    4068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    406a:	0fda      	lsrs	r2, r3, #31
    406c:	4413      	add	r3, r2
    406e:	105b      	asrs	r3, r3, #1
    4070:	4832      	ldr	r0, [pc, #200]	; (413c <ItemDataString+0x274>)
    4072:	493d      	ldr	r1, [pc, #244]	; (4168 <ItemDataString+0x2a0>)
    4074:	461a      	mov	r2, r3
    4076:	f001 f92f 	bl	52d8 <sprintf>
	    break;
    407a:	e057      	b.n	412c <ItemDataString+0x264>

	case FRMT_HC_REATIME:	// Highcurrent Reaction Time in 2[ms] units
	    sprintf (strBuf, "%5dms", data*2);
    407c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    407e:	005b      	lsls	r3, r3, #1
    4080:	482e      	ldr	r0, [pc, #184]	; (413c <ItemDataString+0x274>)
    4082:	4939      	ldr	r1, [pc, #228]	; (4168 <ItemDataString+0x2a0>)
    4084:	461a      	mov	r2, r3
    4086:	f001 f927 	bl	52d8 <sprintf>
	    break;
    408a:	e04f      	b.n	412c <ItemDataString+0x264>

	case FRMT_MILLIVOLT:	// Voltage in [mV]
	    sprintf (strBuf, "%5dmV", data);
    408c:	482b      	ldr	r0, [pc, #172]	; (413c <ItemDataString+0x274>)
    408e:	4937      	ldr	r1, [pc, #220]	; (416c <ItemDataString+0x2a4>)
    4090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4092:	f001 f921 	bl	52d8 <sprintf>
	    break;
    4096:	e049      	b.n	412c <ItemDataString+0x264>

	case FRMT_MILLIAMP:	// Current in [mA]
	    sprintf (strBuf, "%5dmA", data);
    4098:	4828      	ldr	r0, [pc, #160]	; (413c <ItemDataString+0x274>)
    409a:	4935      	ldr	r1, [pc, #212]	; (4170 <ItemDataString+0x2a8>)
    409c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    409e:	f001 f91b 	bl	52d8 <sprintf>
	    break;
    40a2:	e043      	b.n	412c <ItemDataString+0x264>

	case FRMT_MILLIAMPH:	// Capacity in [mAh]
	    sprintf (strBuf, "%5dmAh", data);
    40a4:	4825      	ldr	r0, [pc, #148]	; (413c <ItemDataString+0x274>)
    40a6:	4933      	ldr	r1, [pc, #204]	; (4174 <ItemDataString+0x2ac>)
    40a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    40aa:	f001 f915 	bl	52d8 <sprintf>
	    break;
    40ae:	e03d      	b.n	412c <ItemDataString+0x264>

	case FRMT_MICROOHM:	// Resistance in [uOhm]
	    sprintf (strBuf, "%5duOhm", data);
    40b0:	4822      	ldr	r0, [pc, #136]	; (413c <ItemDataString+0x274>)
    40b2:	4931      	ldr	r1, [pc, #196]	; (4178 <ItemDataString+0x2b0>)
    40b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    40b6:	f001 f90f 	bl	52d8 <sprintf>
	    break;
    40ba:	e037      	b.n	412c <ItemDataString+0x264>

	case FRMT_DATE:		// Date [15:9=Year|8:5=Month|4:0=Day]
	    sprintf (strBuf, "%04d-%02d-%02d", 1980 + (data >> 9),
    40bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40be:	125b      	asrs	r3, r3, #9
    40c0:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
		     (data >> 5) & 0xF, data & 0x1F);
    40c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40c6:	115b      	asrs	r3, r3, #5
	case FRMT_MICROOHM:	// Resistance in [uOhm]
	    sprintf (strBuf, "%5duOhm", data);
	    break;

	case FRMT_DATE:		// Date [15:9=Year|8:5=Month|4:0=Day]
	    sprintf (strBuf, "%04d-%02d-%02d", 1980 + (data >> 9),
    40c8:	f003 030f 	and.w	r3, r3, #15
    40cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    40ce:	f001 011f 	and.w	r1, r1, #31
    40d2:	9100      	str	r1, [sp, #0]
    40d4:	4819      	ldr	r0, [pc, #100]	; (413c <ItemDataString+0x274>)
    40d6:	4929      	ldr	r1, [pc, #164]	; (417c <ItemDataString+0x2b4>)
    40d8:	f001 f8fe 	bl	52d8 <sprintf>
		     (data >> 5) & 0xF, data & 0x1F);
	    break;
    40dc:	e026      	b.n	412c <ItemDataString+0x264>

	case FRMT_TEMP:		// Temperature in 1/10[K], convert to [°C]
	    data -= 2732;	// subtract base of 273.16K
    40de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40e0:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
    40e4:	930b      	str	r3, [sp, #44]	; 0x2c
	    int degC = data / 10;
    40e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40e8:	4a25      	ldr	r2, [pc, #148]	; (4180 <ItemDataString+0x2b8>)
    40ea:	fb82 1203 	smull	r1, r2, r2, r3
    40ee:	1092      	asrs	r2, r2, #2
    40f0:	17db      	asrs	r3, r3, #31
    40f2:	1ad3      	subs	r3, r2, r3
    40f4:	9309      	str	r3, [sp, #36]	; 0x24
	    if (data < 0)
    40f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40f8:	2b00      	cmp	r3, #0
    40fa:	da02      	bge.n	4102 <ItemDataString+0x23a>
		data = -data;
    40fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40fe:	425b      	negs	r3, r3
    4100:	930b      	str	r3, [sp, #44]	; 0x2c
	    sprintf (strBuf, "%d.%d C", degC, data % 10);
    4102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4104:	4b1e      	ldr	r3, [pc, #120]	; (4180 <ItemDataString+0x2b8>)
    4106:	fb83 1302 	smull	r1, r3, r3, r2
    410a:	1099      	asrs	r1, r3, #2
    410c:	17d3      	asrs	r3, r2, #31
    410e:	1acc      	subs	r4, r1, r3
    4110:	4623      	mov	r3, r4
    4112:	009b      	lsls	r3, r3, #2
    4114:	4423      	add	r3, r4
    4116:	005b      	lsls	r3, r3, #1
    4118:	1ad4      	subs	r4, r2, r3
    411a:	4808      	ldr	r0, [pc, #32]	; (413c <ItemDataString+0x274>)
    411c:	4919      	ldr	r1, [pc, #100]	; (4184 <ItemDataString+0x2bc>)
    411e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4120:	4623      	mov	r3, r4
    4122:	f001 f8d9 	bl	52d8 <sprintf>
	    break;
    4126:	e001      	b.n	412c <ItemDataString+0x264>

	default:		// unsupported format
	    return NULL;
    4128:	2300      	movs	r3, #0
    412a:	e000      	b.n	412e <ItemDataString+0x266>

    }	// switch (pItem->Frmt)

    return strBuf;
    412c:	4b03      	ldr	r3, [pc, #12]	; (413c <ItemDataString+0x274>)
}
    412e:	4618      	mov	r0, r3
    4130:	b00c      	add	sp, #48	; 0x30
    4132:	bd10      	pop	{r4, pc}
    4134:	0000a904 	.word	0x0000a904
    4138:	20000088 	.word	0x20000088
    413c:	20000f54 	.word	0x20000f54
    4140:	0000a954 	.word	0x0000a954
    4144:	0000a9ec 	.word	0x0000a9ec
    4148:	0000a9f0 	.word	0x0000a9f0
    414c:	10624dd3 	.word	0x10624dd3
    4150:	0000a95c 	.word	0x0000a95c
    4154:	0000a970 	.word	0x0000a970
    4158:	0000a978 	.word	0x0000a978
    415c:	0000a97c 	.word	0x0000a97c
    4160:	0000a984 	.word	0x0000a984
    4164:	0000a98c 	.word	0x0000a98c
    4168:	0000a994 	.word	0x0000a994
    416c:	0000a99c 	.word	0x0000a99c
    4170:	0000a9a4 	.word	0x0000a9a4
    4174:	0000a9ac 	.word	0x0000a9ac
    4178:	0000a9b4 	.word	0x0000a9b4
    417c:	0000a9bc 	.word	0x0000a9bc
    4180:	66666667 	.word	0x66666667
    4184:	0000a9cc 	.word	0x0000a9cc

00004188 <DisplayUpdateClock>:
 * module via DisplayUpdateFctInstall().
 *
 ******************************************************************************/
static void DisplayUpdateClock (void)
{
    if (l_flgDisplayIsOn)
    4188:	4b06      	ldr	r3, [pc, #24]	; (41a4 <DisplayUpdateClock+0x1c>)
    418a:	781b      	ldrb	r3, [r3, #0]
    418c:	b2db      	uxtb	r3, r3
    418e:	2b00      	cmp	r3, #0
    4190:	d006      	beq.n	41a0 <DisplayUpdateClock+0x18>
    {
	LCD_FIELD_ID_BIT_VAR(l_bitMaskFieldUpd, LCD_CLOCK) = 1;
    4192:	4b05      	ldr	r3, [pc, #20]	; (41a8 <DisplayUpdateClock+0x20>)
    4194:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
    4198:	015b      	lsls	r3, r3, #5
    419a:	331c      	adds	r3, #28
    419c:	2201      	movs	r2, #1
    419e:	601a      	str	r2, [r3, #0]
    }
}
    41a0:	4770      	bx	lr
    41a2:	bf00      	nop
    41a4:	20000f44 	.word	0x20000f44
    41a8:	20001292 	.word	0x20001292

000041ac <DisplayUpdateTrigger>:
 * @param[in] fieldID
 *	The LCD field to be updated.
 *
 ******************************************************************************/
void DisplayUpdateTrigger (LCD_FIELD_ID fieldID)
{
    41ac:	b082      	sub	sp, #8
    41ae:	4603      	mov	r3, r0
    41b0:	f88d 3007 	strb.w	r3, [sp, #7]
    LCD_FIELD_ID_BIT_VAR(l_bitMaskFieldUpd, fieldID) = 1;
    41b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    41b8:	009b      	lsls	r3, r3, #2
    41ba:	461a      	mov	r2, r3
    41bc:	4b05      	ldr	r3, [pc, #20]	; (41d4 <DisplayUpdateTrigger+0x28>)
    41be:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
    41c2:	015b      	lsls	r3, r3, #5
    41c4:	4413      	add	r3, r2
    41c6:	2201      	movs	r2, #1
    41c8:	601a      	str	r2, [r3, #0]

    g_flgIRQ = true;	// keep on running
    41ca:	4b03      	ldr	r3, [pc, #12]	; (41d8 <DisplayUpdateTrigger+0x2c>)
    41cc:	2201      	movs	r2, #1
    41ce:	701a      	strb	r2, [r3, #0]
}
    41d0:	b002      	add	sp, #8
    41d2:	4770      	bx	lr
    41d4:	20001292 	.word	0x20001292
    41d8:	20001200 	.word	0x20001200

000041dc <SwitchLCD_Off>:
 * power-off of the LC-Display, after @ref LCD_POWER_OFF_TIME seconds have
 * elapsed.
 *
 ******************************************************************************/
static void SwitchLCD_Off(TIM_HDL hdl)
{
    41dc:	b082      	sub	sp, #8
    41de:	9001      	str	r0, [sp, #4]
    (void) hdl;		// suppress compiler warning "unused parameter"

    if (l_flgDisplayUpdEnabled)		// NOT in the very beginning
    41e0:	4b06      	ldr	r3, [pc, #24]	; (41fc <SwitchLCD_Off+0x20>)
    41e2:	781b      	ldrb	r3, [r3, #0]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	2b00      	cmp	r3, #0
    41e8:	d002      	beq.n	41f0 <SwitchLCD_Off+0x14>
	l_bitMaskFieldActive = 0;
    41ea:	4b05      	ldr	r3, [pc, #20]	; (4200 <SwitchLCD_Off+0x24>)
    41ec:	2200      	movs	r2, #0
    41ee:	801a      	strh	r2, [r3, #0]

    g_flgIRQ = true;	// keep on running
    41f0:	4b04      	ldr	r3, [pc, #16]	; (4204 <SwitchLCD_Off+0x28>)
    41f2:	2201      	movs	r2, #1
    41f4:	701a      	strb	r2, [r3, #0]
}
    41f6:	b002      	add	sp, #8
    41f8:	4770      	bx	lr
    41fa:	bf00      	nop
    41fc:	20000074 	.word	0x20000074
    4200:	20001290 	.word	0x20001290
    4204:	20001200 	.word	0x20001200

00004208 <SwitchDeviceOff>:
 * power-off of the whole device, after @ref POWER_OFF_TIMEOUT seconds are
 * over without any keq assertion.
 *
 ******************************************************************************/
static void SwitchDeviceOff(TIM_HDL hdl)
{
    4208:	b082      	sub	sp, #8
    420a:	9001      	str	r0, [sp, #4]
    (void) hdl;		// suppress compiler warning "unused parameter"

    SET_POWER_PIN(0);	// set FET input to LOW
    420c:	4b02      	ldr	r3, [pc, #8]	; (4218 <SwitchDeviceOff+0x10>)
    420e:	2200      	movs	r2, #0
    4210:	601a      	str	r2, [r3, #0]
}
    4212:	b002      	add	sp, #8
    4214:	4770      	bx	lr
    4216:	bf00      	nop
    4218:	420c0f00 	.word	0x420c0f00

0000421c <DispNextTrigger>:
 * @see
 * 	DisplayNext(), DisplayText()
 *
 ******************************************************************************/
static void DispNextTrigger(TIM_HDL hdl)
{
    421c:	b500      	push	{lr}
    421e:	b083      	sub	sp, #12
    4220:	9001      	str	r0, [sp, #4]
    (void) hdl;		// suppress compiler warning "unused parameter"

    /* See if callback routine has been specified */
    if (l_DispNextFct)
    4222:	4b08      	ldr	r3, [pc, #32]	; (4244 <DispNextTrigger+0x28>)
    4224:	681b      	ldr	r3, [r3, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d003      	beq.n	4232 <DispNextTrigger+0x16>
	l_DispNextFctTrigger = true;
    422a:	4b07      	ldr	r3, [pc, #28]	; (4248 <DispNextTrigger+0x2c>)
    422c:	2201      	movs	r2, #1
    422e:	701a      	strb	r2, [r3, #0]
    4230:	e002      	b.n	4238 <DispNextTrigger+0x1c>
    else
	SwitchLCD_Off((TIM_HDL)0);	// no further fct, switch LCD off
    4232:	2000      	movs	r0, #0
    4234:	f7ff ffd2 	bl	41dc <SwitchLCD_Off>

    g_flgIRQ = true;	// keep on running
    4238:	4b04      	ldr	r3, [pc, #16]	; (424c <DispNextTrigger+0x30>)
    423a:	2201      	movs	r2, #1
    423c:	701a      	strb	r2, [r3, #0]
}
    423e:	b003      	add	sp, #12
    4240:	f85d fb04 	ldr.w	pc, [sp], #4
    4244:	20000f48 	.word	0x20000f48
    4248:	20000f45 	.word	0x20000f45
    424c:	20001200 	.word	0x20001200

00004250 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4250:	b082      	sub	sp, #8
    4252:	4603      	mov	r3, r0
    4254:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4258:	4b07      	ldr	r3, [pc, #28]	; (4278 <NVIC_EnableIRQ+0x28>)
    425a:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    425e:	0952      	lsrs	r2, r2, #5
    4260:	f89d 1007 	ldrb.w	r1, [sp, #7]
    4264:	f001 011f 	and.w	r1, r1, #31
    4268:	2001      	movs	r0, #1
    426a:	fa00 f101 	lsl.w	r1, r0, r1
    426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4272:	b002      	add	sp, #8
    4274:	4770      	bx	lr
    4276:	bf00      	nop
    4278:	e000e100 	.word	0xe000e100

0000427c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    427c:	b082      	sub	sp, #8
    427e:	4603      	mov	r3, r0
    4280:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    4284:	4b07      	ldr	r3, [pc, #28]	; (42a4 <NVIC_ClearPendingIRQ+0x28>)
    4286:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    428a:	0952      	lsrs	r2, r2, #5
    428c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    4290:	f001 011f 	and.w	r1, r1, #31
    4294:	2001      	movs	r0, #1
    4296:	fa00 f101 	lsl.w	r1, r0, r1
    429a:	3260      	adds	r2, #96	; 0x60
    429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    42a0:	b002      	add	sp, #8
    42a2:	4770      	bx	lr
    42a4:	e000e100 	.word	0xe000e100

000042a8 <EMU_EnterEM1>:
 *   Enter energy mode 1 (EM1).
 ******************************************************************************/
__STATIC_INLINE void EMU_EnterEM1(void)
{
  /* Just enter Cortex-M3 sleep mode */
  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    42a8:	4b03      	ldr	r3, [pc, #12]	; (42b8 <EMU_EnterEM1+0x10>)
    42aa:	4a03      	ldr	r2, [pc, #12]	; (42b8 <EMU_EnterEM1+0x10>)
    42ac:	6912      	ldr	r2, [r2, #16]
    42ae:	f022 0204 	bic.w	r2, r2, #4
    42b2:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    42b4:	bf30      	wfi
  __WFI();
}
    42b6:	4770      	bx	lr
    42b8:	e000ed00 	.word	0xe000ed00

000042bc <ADC_DataSingleGet>:
 *
 * @return
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t ADC_DataSingleGet(ADC_TypeDef *adc)
{
    42bc:	b082      	sub	sp, #8
    42be:	9001      	str	r0, [sp, #4]
  return(adc->SINGLEDATA);
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    42c4:	4618      	mov	r0, r3
    42c6:	b002      	add	sp, #8
    42c8:	4770      	bx	lr
    42ca:	bf00      	nop

000042cc <ADC_Start>:
 *
 * @param[in] cmd
 *   Command indicating which type of sampling to start.
 ******************************************************************************/
__STATIC_INLINE void ADC_Start(ADC_TypeDef *adc, ADC_Start_TypeDef cmd)
{
    42cc:	b082      	sub	sp, #8
    42ce:	9001      	str	r0, [sp, #4]
    42d0:	460b      	mov	r3, r1
    42d2:	f88d 3003 	strb.w	r3, [sp, #3]
  adc->CMD = (uint32_t)cmd;
    42d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    42da:	9b01      	ldr	r3, [sp, #4]
    42dc:	605a      	str	r2, [r3, #4]
}
    42de:	b002      	add	sp, #8
    42e0:	4770      	bx	lr
    42e2:	bf00      	nop

000042e4 <BatteryMonInit>:
 * This routine initializes the board-specific SMBus (I2C) interface, which
 * is connected to the battery pack.
 *
 ******************************************************************************/
void	 BatteryMonInit (void)
{
    42e4:	b508      	push	{r3, lr}
    /* Be sure to enable clock to GPIO (should already be done) */
    CMU_ClockEnable (cmuClock_GPIO, true);
    42e6:	4814      	ldr	r0, [pc, #80]	; (4338 <BatteryMonInit+0x54>)
    42e8:	2101      	movs	r1, #1
    42ea:	f7fc fa25 	bl	738 <CMU_ClockEnable>

    /* Enable clock for I2C controller and ADC */
    CMU_ClockEnable(SMB_I2C_CMUCLOCK, true);
    42ee:	4813      	ldr	r0, [pc, #76]	; (433c <BatteryMonInit+0x58>)
    42f0:	2101      	movs	r1, #1
    42f2:	f7fc fa21 	bl	738 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_ADC0, true);
    42f6:	4812      	ldr	r0, [pc, #72]	; (4340 <BatteryMonInit+0x5c>)
    42f8:	2101      	movs	r1, #1
    42fa:	f7fc fa1d 	bl	738 <CMU_ClockEnable>
    /* Configure GPIO as analog input for local 3V measurements */
    GPIO_PinModeSet (MEASURE_ADC_PORT, MEASURE_ADC_PIN, gpioModePushPull, 0);
#endif

    /* Configure GPIOs for SMBus (I2C) functionality with Pull-Ups */
    GPIO_PinModeSet (SMB_GPIOPORT, SMB_SCL_PIN, gpioModeWiredAndPullUp, 1);
    42fe:	2000      	movs	r0, #0
    4300:	2101      	movs	r1, #1
    4302:	220a      	movs	r2, #10
    4304:	2301      	movs	r3, #1
    4306:	f7fd f871 	bl	13ec <GPIO_PinModeSet>
    GPIO_PinModeSet (SMB_GPIOPORT, SMB_SDA_PIN, gpioModeWiredAndPullUp, 1);
    430a:	2000      	movs	r0, #0
    430c:	2100      	movs	r1, #0
    430e:	220a      	movs	r2, #10
    4310:	2301      	movs	r3, #1
    4312:	f7fd f86b 	bl	13ec <GPIO_PinModeSet>

    /* Route SMB signals to the respective pins */
    SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | I2C_ROUTE_SDAPEN | SMB_LOC;
    4316:	4b0b      	ldr	r3, [pc, #44]	; (4344 <BatteryMonInit+0x60>)
    4318:	2203      	movs	r2, #3
    431a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Initialize SMBus (I2C) controller */
    I2C_Init (SMB_I2C_CTRL, &smbInit);
    431c:	4809      	ldr	r0, [pc, #36]	; (4344 <BatteryMonInit+0x60>)
    431e:	490a      	ldr	r1, [pc, #40]	; (4348 <BatteryMonInit+0x64>)
    4320:	f7fd fa88 	bl	1834 <I2C_Init>

    /* Clear and enable SMBus interrupt */
    NVIC_ClearPendingIRQ (SMB_IRQn);
    4324:	2008      	movs	r0, #8
    4326:	f7ff ffa9 	bl	427c <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ (SMB_IRQn);
    432a:	2008      	movs	r0, #8
    432c:	f7ff ff90 	bl	4250 <NVIC_EnableIRQ>

    /* Initialize ADC to measure local voltage VDD/3 */
    ADC_Config();
    4330:	f000 f94a 	bl	45c8 <ADC_Config>
}
    4334:	bd08      	pop	{r3, pc}
    4336:	bf00      	nop
    4338:	0002c200 	.word	0x0002c200
    433c:	0002f200 	.word	0x0002f200
    4340:	0002e200 	.word	0x0002e200
    4344:	4000a000 	.word	0x4000a000
    4348:	20000078 	.word	0x20000078

0000434c <I2C0_IRQHandler>:
 * It calls the driver function I2C_Transfer() to prepare the next data byte,
 * or generate a STOP condition at the end of a transfer.
 *
 ******************************************************************************/
void	 SMB_IRQHandler (void)
{
    434c:	b508      	push	{r3, lr}
    /* Update <SMB_Status> */
    SMB_Status = I2C_Transfer (SMB_I2C_CTRL);
    434e:	4804      	ldr	r0, [pc, #16]	; (4360 <I2C0_IRQHandler+0x14>)
    4350:	f7fd faaa 	bl	18a8 <I2C_Transfer>
    4354:	4603      	mov	r3, r0
    4356:	461a      	mov	r2, r3
    4358:	4b02      	ldr	r3, [pc, #8]	; (4364 <I2C0_IRQHandler+0x18>)
    435a:	701a      	strb	r2, [r3, #0]
}
    435c:	bd08      	pop	{r3, pc}
    435e:	bf00      	nop
    4360:	4000a000 	.word	0x4000a000
    4364:	20000f68 	.word	0x20000f68

00004368 <SMB_Reset>:
 * recover from a state where SCL is driven low by the battery controller.
 * It should be called if there occurs a timeout of a transfer.
 *
 ******************************************************************************/
static void  SMB_Reset (void)
{
    4368:	b500      	push	{lr}
    436a:	b083      	sub	sp, #12
    LogError("SMB_Reset: Try to recover from invalid state");

    /* abort the current transfer */
    SMB_I2C_CTRL->CMD = I2C_CMD_ABORT;
    436c:	4b15      	ldr	r3, [pc, #84]	; (43c4 <SMB_Reset+0x5c>)
    436e:	2220      	movs	r2, #32
    4370:	605a      	str	r2, [r3, #4]
    msDelay(100);
    4372:	2064      	movs	r0, #100	; 0x64
    4374:	f7ff f8be 	bl	34f4 <msDelay>

    /* check if SCL is still low */
    if ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
    4378:	4b13      	ldr	r3, [pc, #76]	; (43c8 <SMB_Reset+0x60>)
    437a:	69db      	ldr	r3, [r3, #28]
    437c:	f003 0302 	and.w	r3, r3, #2
    4380:	2b00      	cmp	r3, #0
    4382:	d11c      	bne.n	43be <SMB_Reset+0x56>
    {
	/* drive SDA low */
	GPIO->P[SMB_GPIOPORT].DOUTCLR = (1 << SMB_SDA_PIN);
    4384:	4b10      	ldr	r3, [pc, #64]	; (43c8 <SMB_Reset+0x60>)
    4386:	2201      	movs	r2, #1
    4388:	615a      	str	r2, [r3, #20]
	SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | SMB_LOC;
    438a:	4b0e      	ldr	r3, [pc, #56]	; (43c4 <SMB_Reset+0x5c>)
    438c:	2202      	movs	r2, #2
    438e:	639a      	str	r2, [r3, #56]	; 0x38

	/* wait until SCL returns to high */
	uint32_t start = RTC->CNT;
    4390:	4b0e      	ldr	r3, [pc, #56]	; (43cc <SMB_Reset+0x64>)
    4392:	685b      	ldr	r3, [r3, #4]
    4394:	9301      	str	r3, [sp, #4]
	while ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
    4396:	e009      	b.n	43ac <SMB_Reset+0x44>
	{
	    /* check for timeout */
	    if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_RECOVERY_TIMEOUT)
    4398:	4b0c      	ldr	r3, [pc, #48]	; (43cc <SMB_Reset+0x64>)
    439a:	685a      	ldr	r2, [r3, #4]
    439c:	9b01      	ldr	r3, [sp, #4]
    439e:	1ad3      	subs	r3, r2, r3
    43a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    43a4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
    43a8:	d900      	bls.n	43ac <SMB_Reset+0x44>
	    {
		LogError("SMB_Reset: Recovery failed, giving up");
		break;
    43aa:	e005      	b.n	43b8 <SMB_Reset+0x50>
	GPIO->P[SMB_GPIOPORT].DOUTCLR = (1 << SMB_SDA_PIN);
	SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | SMB_LOC;

	/* wait until SCL returns to high */
	uint32_t start = RTC->CNT;
	while ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
    43ac:	4b06      	ldr	r3, [pc, #24]	; (43c8 <SMB_Reset+0x60>)
    43ae:	69db      	ldr	r3, [r3, #28]
    43b0:	f003 0302 	and.w	r3, r3, #2
    43b4:	2b00      	cmp	r3, #0
    43b6:	d0ef      	beq.n	4398 <SMB_Reset+0x30>
		break;
	    }
	}

	/* re-configure GPIO as SDA signal */
	SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | I2C_ROUTE_SDAPEN | SMB_LOC;
    43b8:	4b02      	ldr	r3, [pc, #8]	; (43c4 <SMB_Reset+0x5c>)
    43ba:	2203      	movs	r2, #3
    43bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
    43be:	b003      	add	sp, #12
    43c0:	f85d fb04 	ldr.w	pc, [sp], #4
    43c4:	4000a000 	.word	0x4000a000
    43c8:	40006000 	.word	0x40006000
    43cc:	40080000 	.word	0x40080000

000043d0 <BatteryRegReadWord>:
 * @see
 *	BatteryRegReadBlock()
 *
 ******************************************************************************/
int	 BatteryRegReadWord (SBS_CMD cmd)
{
    43d0:	b500      	push	{lr}
    43d2:	b08b      	sub	sp, #44	; 0x2c
    43d4:	4603      	mov	r3, r0
    43d6:	f8ad 3006 	strh.w	r3, [sp, #6]
uint8_t addrBuf[1];			// buffer for device address (0x0A)
uint8_t dataBuf[2];			// buffer for data read from the device


    /* Check parameter */
    EFM_ASSERT ((cmd & ~0xFF) == 0);	// size field must be 0
    43da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    43de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    43e2:	b29b      	uxth	r3, r3
    43e4:	2b00      	cmp	r3, #0
    43e6:	d004      	beq.n	43f2 <BatteryRegReadWord+0x22>
    43e8:	482d      	ldr	r0, [pc, #180]	; (44a0 <BatteryRegReadWord+0xd0>)
    43ea:	f44f 718d 	mov.w	r1, #282	; 0x11a
    43ee:	f7fb ff91 	bl	314 <assertEFM>

    /* Set up SMBus transfer */
    smbXfer.addr  = 0x0A;		// I2C address of the Battery Controller
    43f2:	230a      	movs	r3, #10
    43f4:	f8ad 3010 	strh.w	r3, [sp, #16]
    smbXfer.flags = I2C_FLAG_WRITE_READ; // need write and read
    43f8:	2304      	movs	r3, #4
    43fa:	f8ad 3012 	strh.w	r3, [sp, #18]
    smbXfer.buf[0].data = addrBuf;	// first write device I2C address
    43fe:	ab03      	add	r3, sp, #12
    4400:	9305      	str	r3, [sp, #20]
    addrBuf[0] = cmd;
    4402:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4406:	b2db      	uxtb	r3, r3
    4408:	f88d 300c 	strb.w	r3, [sp, #12]
    smbXfer.buf[0].len  = 1;		// 1 byte for I2C address
    440c:	2301      	movs	r3, #1
    440e:	f8ad 3018 	strh.w	r3, [sp, #24]
    smbXfer.buf[1].data = dataBuf;	// where to store read data
    4412:	ab02      	add	r3, sp, #8
    4414:	9307      	str	r3, [sp, #28]
    smbXfer.buf[1].len  = 2;		// read 2 bytes from register
    4416:	2302      	movs	r3, #2
    4418:	f8ad 3020 	strh.w	r3, [sp, #32]

    /* Start I2C Transfer */
    SMB_Status = I2C_TransferInit (SMB_I2C_CTRL, &smbXfer);
    441c:	ab04      	add	r3, sp, #16
    441e:	4821      	ldr	r0, [pc, #132]	; (44a4 <BatteryRegReadWord+0xd4>)
    4420:	4619      	mov	r1, r3
    4422:	f7fd fc5d 	bl	1ce0 <I2C_TransferInit>
    4426:	4603      	mov	r3, r0
    4428:	461a      	mov	r2, r3
    442a:	4b1f      	ldr	r3, [pc, #124]	; (44a8 <BatteryRegReadWord+0xd8>)
    442c:	701a      	strb	r2, [r3, #0]

    /* Check early status */
    if (SMB_Status < 0)
    442e:	4b1e      	ldr	r3, [pc, #120]	; (44a8 <BatteryRegReadWord+0xd8>)
    4430:	781b      	ldrb	r3, [r3, #0]
    4432:	b2db      	uxtb	r3, r3
    4434:	b25b      	sxtb	r3, r3
    4436:	2b00      	cmp	r3, #0
    4438:	da04      	bge.n	4444 <BatteryRegReadWord+0x74>
	return SMB_Status;		// return error code
    443a:	4b1b      	ldr	r3, [pc, #108]	; (44a8 <BatteryRegReadWord+0xd8>)
    443c:	781b      	ldrb	r3, [r3, #0]
    443e:	b2db      	uxtb	r3, r3
    4440:	b25b      	sxtb	r3, r3
    4442:	e029      	b.n	4498 <BatteryRegReadWord+0xc8>

    /* Wait until data is complete or time out */
    uint32_t start = RTC->CNT;
    4444:	4b19      	ldr	r3, [pc, #100]	; (44ac <BatteryRegReadWord+0xdc>)
    4446:	685b      	ldr	r3, [r3, #4]
    4448:	9309      	str	r3, [sp, #36]	; 0x24
    while (SMB_Status == i2cTransferInProgress)
    444a:	e00f      	b.n	446c <BatteryRegReadWord+0x9c>
    {
	/* Enter EM1 while waiting for I2C interrupt */
	EMU_EnterEM1();
    444c:	f7ff ff2c 	bl	42a8 <EMU_EnterEM1>

	/* check for timeout */
	if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_XFER_TIMEOUT)
    4450:	4b16      	ldr	r3, [pc, #88]	; (44ac <BatteryRegReadWord+0xdc>)
    4452:	685a      	ldr	r2, [r3, #4]
    4454:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4456:	1ad3      	subs	r3, r2, r3
    4458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    445c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    4460:	d904      	bls.n	446c <BatteryRegReadWord+0x9c>
	{
	    SMB_Reset();
    4462:	f7ff ff81 	bl	4368 <SMB_Reset>
	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
    4466:	4b10      	ldr	r3, [pc, #64]	; (44a8 <BatteryRegReadWord+0xd8>)
    4468:	22f6      	movs	r2, #246	; 0xf6
    446a:	701a      	strb	r2, [r3, #0]
    if (SMB_Status < 0)
	return SMB_Status;		// return error code

    /* Wait until data is complete or time out */
    uint32_t start = RTC->CNT;
    while (SMB_Status == i2cTransferInProgress)
    446c:	4b0e      	ldr	r3, [pc, #56]	; (44a8 <BatteryRegReadWord+0xd8>)
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	b2db      	uxtb	r3, r3
    4472:	b25b      	sxtb	r3, r3
    4474:	2b01      	cmp	r3, #1
    4476:	d0e9      	beq.n	444c <BatteryRegReadWord+0x7c>
	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
	}
    }

    /* Check final status */
    if (SMB_Status != i2cTransferDone)
    4478:	4b0b      	ldr	r3, [pc, #44]	; (44a8 <BatteryRegReadWord+0xd8>)
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	b2db      	uxtb	r3, r3
    447e:	2b00      	cmp	r3, #0
    4480:	d004      	beq.n	448c <BatteryRegReadWord+0xbc>
    {
	return SMB_Status;
    4482:	4b09      	ldr	r3, [pc, #36]	; (44a8 <BatteryRegReadWord+0xd8>)
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	b2db      	uxtb	r3, r3
    4488:	b25b      	sxtb	r3, r3
    448a:	e005      	b.n	4498 <BatteryRegReadWord+0xc8>
    }

    /* Assign data for return value in LSB/MSB manner */
    return (dataBuf[1] << 8) | dataBuf[0];	// return 16 bit data
    448c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    4490:	021a      	lsls	r2, r3, #8
    4492:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4496:	4313      	orrs	r3, r2
}
    4498:	4618      	mov	r0, r3
    449a:	b00b      	add	sp, #44	; 0x2c
    449c:	f85d fb04 	ldr.w	pc, [sp], #4
    44a0:	0000a9d4 	.word	0x0000a9d4
    44a4:	4000a000 	.word	0x4000a000
    44a8:	20000f68 	.word	0x20000f68
    44ac:	40080000 	.word	0x40080000

000044b0 <BatteryRegReadBlock>:
 * @see
 *	BatteryRegReadWord()
 *
 ******************************************************************************/
int	BatteryRegReadBlock (SBS_CMD cmd, uint8_t *pBuf, size_t bufSize)
{
    44b0:	b500      	push	{lr}
    44b2:	b08d      	sub	sp, #52	; 0x34
    44b4:	4603      	mov	r3, r0
    44b6:	9102      	str	r1, [sp, #8]
    44b8:	9201      	str	r2, [sp, #4]
    44ba:	f8ad 300e 	strh.w	r3, [sp, #14]
I2C_TransferSeq_TypeDef smbXfer;	// SMBus transfer data
uint8_t addrBuf[1];			// buffer for device address (0x0A)


    /* Check parameters */
    EFM_ASSERT ((cmd & ~0xFF) != 0);	// size field must not be 0
    44be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    44c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    44c6:	b29b      	uxth	r3, r3
    44c8:	2b00      	cmp	r3, #0
    44ca:	d104      	bne.n	44d6 <BatteryRegReadBlock+0x26>
    44cc:	483a      	ldr	r0, [pc, #232]	; (45b8 <BatteryRegReadBlock+0x108>)
    44ce:	f240 1167 	movw	r1, #359	; 0x167
    44d2:	f7fb ff1f 	bl	314 <assertEFM>
    EFM_ASSERT (pBuf != NULL);		// buffer address
    44d6:	9b02      	ldr	r3, [sp, #8]
    44d8:	2b00      	cmp	r3, #0
    44da:	d104      	bne.n	44e6 <BatteryRegReadBlock+0x36>
    44dc:	4836      	ldr	r0, [pc, #216]	; (45b8 <BatteryRegReadBlock+0x108>)
    44de:	f44f 71b4 	mov.w	r1, #360	; 0x168
    44e2:	f7fb ff17 	bl	314 <assertEFM>
    EFM_ASSERT (bufSize >= SBS_CMD_SIZE(cmd));	// buffer size
    44e6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    44ea:	121b      	asrs	r3, r3, #8
    44ec:	b29b      	uxth	r3, r3
    44ee:	b29b      	uxth	r3, r3
    44f0:	b2da      	uxtb	r2, r3
    44f2:	9b01      	ldr	r3, [sp, #4]
    44f4:	429a      	cmp	r2, r3
    44f6:	d904      	bls.n	4502 <BatteryRegReadBlock+0x52>
    44f8:	482f      	ldr	r0, [pc, #188]	; (45b8 <BatteryRegReadBlock+0x108>)
    44fa:	f240 1169 	movw	r1, #361	; 0x169
    44fe:	f7fb ff09 	bl	314 <assertEFM>

    if (bufSize < SBS_CMD_SIZE(cmd))	// if EFM_ASSERT() is empty
    4502:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    4506:	121b      	asrs	r3, r3, #8
    4508:	b29b      	uxth	r3, r3
    450a:	b29b      	uxth	r3, r3
    450c:	b2da      	uxtb	r2, r3
    450e:	9b01      	ldr	r3, [sp, #4]
    4510:	429a      	cmp	r2, r3
    4512:	d902      	bls.n	451a <BatteryRegReadBlock+0x6a>
	return i2cInvalidParameter;
    4514:	f06f 030a 	mvn.w	r3, #10
    4518:	e049      	b.n	45ae <BatteryRegReadBlock+0xfe>

    /* Set up SMBus transfer */
    smbXfer.addr  = 0x0A;		// I2C address of the Battery Controller
    451a:	230a      	movs	r3, #10
    451c:	f8ad 3018 	strh.w	r3, [sp, #24]
    smbXfer.flags = I2C_FLAG_WRITE_READ; // need write and read
    4520:	2304      	movs	r3, #4
    4522:	f8ad 301a 	strh.w	r3, [sp, #26]
    smbXfer.buf[0].data = addrBuf;	// first write device I2C address
    4526:	ab05      	add	r3, sp, #20
    4528:	9307      	str	r3, [sp, #28]
    addrBuf[0] = cmd;
    452a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    452e:	b2db      	uxtb	r3, r3
    4530:	f88d 3014 	strb.w	r3, [sp, #20]
    smbXfer.buf[0].len  = 1;		// 1 byte for I2C address
    4534:	2301      	movs	r3, #1
    4536:	f8ad 3020 	strh.w	r3, [sp, #32]
    smbXfer.buf[1].data = pBuf;		// where to store read data
    453a:	9b02      	ldr	r3, [sp, #8]
    453c:	9309      	str	r3, [sp, #36]	; 0x24
    smbXfer.buf[1].len  = SBS_CMD_SIZE(cmd);	// number of bytes to read
    453e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4542:	0a1b      	lsrs	r3, r3, #8
    4544:	b29b      	uxth	r3, r3
    4546:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28

    /* Start I2C Transfer */
    SMB_Status = I2C_TransferInit (SMB_I2C_CTRL, &smbXfer);
    454a:	ab06      	add	r3, sp, #24
    454c:	481b      	ldr	r0, [pc, #108]	; (45bc <BatteryRegReadBlock+0x10c>)
    454e:	4619      	mov	r1, r3
    4550:	f7fd fbc6 	bl	1ce0 <I2C_TransferInit>
    4554:	4603      	mov	r3, r0
    4556:	461a      	mov	r2, r3
    4558:	4b19      	ldr	r3, [pc, #100]	; (45c0 <BatteryRegReadBlock+0x110>)
    455a:	701a      	strb	r2, [r3, #0]

    /* Check early status */
    if (SMB_Status < 0)
    455c:	4b18      	ldr	r3, [pc, #96]	; (45c0 <BatteryRegReadBlock+0x110>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	b2db      	uxtb	r3, r3
    4562:	b25b      	sxtb	r3, r3
    4564:	2b00      	cmp	r3, #0
    4566:	da04      	bge.n	4572 <BatteryRegReadBlock+0xc2>
	return SMB_Status;		// return error code
    4568:	4b15      	ldr	r3, [pc, #84]	; (45c0 <BatteryRegReadBlock+0x110>)
    456a:	781b      	ldrb	r3, [r3, #0]
    456c:	b2db      	uxtb	r3, r3
    456e:	b25b      	sxtb	r3, r3
    4570:	e01d      	b.n	45ae <BatteryRegReadBlock+0xfe>

    /* Wait until data is complete or time out */
    uint32_t start = RTC->CNT;
    4572:	4b14      	ldr	r3, [pc, #80]	; (45c4 <BatteryRegReadBlock+0x114>)
    4574:	685b      	ldr	r3, [r3, #4]
    4576:	930b      	str	r3, [sp, #44]	; 0x2c
    while (SMB_Status == i2cTransferInProgress)
    4578:	e00f      	b.n	459a <BatteryRegReadBlock+0xea>
    {
	/* Enter EM1 while waiting for I2C interrupt */
	EMU_EnterEM1();
    457a:	f7ff fe95 	bl	42a8 <EMU_EnterEM1>

	/* check for timeout */
	if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_XFER_TIMEOUT)
    457e:	4b11      	ldr	r3, [pc, #68]	; (45c4 <BatteryRegReadBlock+0x114>)
    4580:	685a      	ldr	r2, [r3, #4]
    4582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4584:	1ad3      	subs	r3, r2, r3
    4586:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    458a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    458e:	d904      	bls.n	459a <BatteryRegReadBlock+0xea>
	{
	    SMB_Reset();
    4590:	f7ff feea 	bl	4368 <SMB_Reset>
	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
    4594:	4b0a      	ldr	r3, [pc, #40]	; (45c0 <BatteryRegReadBlock+0x110>)
    4596:	22f6      	movs	r2, #246	; 0xf6
    4598:	701a      	strb	r2, [r3, #0]
    if (SMB_Status < 0)
	return SMB_Status;		// return error code

    /* Wait until data is complete or time out */
    uint32_t start = RTC->CNT;
    while (SMB_Status == i2cTransferInProgress)
    459a:	4b09      	ldr	r3, [pc, #36]	; (45c0 <BatteryRegReadBlock+0x110>)
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	b2db      	uxtb	r3, r3
    45a0:	b25b      	sxtb	r3, r3
    45a2:	2b01      	cmp	r3, #1
    45a4:	d0e9      	beq.n	457a <BatteryRegReadBlock+0xca>
	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
	}
    }

    /* Return final status */
    return SMB_Status;
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <BatteryRegReadBlock+0x110>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	b2db      	uxtb	r3, r3
    45ac:	b25b      	sxtb	r3, r3
}
    45ae:	4618      	mov	r0, r3
    45b0:	b00d      	add	sp, #52	; 0x34
    45b2:	f85d fb04 	ldr.w	pc, [sp], #4
    45b6:	bf00      	nop
    45b8:	0000a9d4 	.word	0x0000a9d4
    45bc:	4000a000 	.word	0x4000a000
    45c0:	20000f68 	.word	0x20000f68
    45c4:	40080000 	.word	0x40080000

000045c8 <ADC_Config>:
 * This routine configures the ADC to measure the internal VDD/3 voltage,
 * see AN0021 for more information.
 *
 ******************************************************************************/
static void ADC_Config(void)
{
    45c8:	b500      	push	{lr}
    45ca:	b087      	sub	sp, #28
ADC_Init_TypeDef       init       = ADC_INIT_DEFAULT;
    45cc:	2300      	movs	r3, #0
    45ce:	f88d 3010 	strb.w	r3, [sp, #16]
    45d2:	2300      	movs	r3, #0
    45d4:	f88d 3011 	strb.w	r3, [sp, #17]
    45d8:	2300      	movs	r3, #0
    45da:	f88d 3012 	strb.w	r3, [sp, #18]
    45de:	231f      	movs	r3, #31
    45e0:	f88d 3013 	strb.w	r3, [sp, #19]
    45e4:	2300      	movs	r3, #0
    45e6:	f88d 3014 	strb.w	r3, [sp, #20]
    45ea:	2300      	movs	r3, #0
    45ec:	f88d 3015 	strb.w	r3, [sp, #21]
ADC_InitSingle_TypeDef singleInit = ADC_INITSINGLE_DEFAULT;
    45f0:	2300      	movs	r3, #0
    45f2:	f88d 3004 	strb.w	r3, [sp, #4]
    45f6:	2300      	movs	r3, #0
    45f8:	f88d 3005 	strb.w	r3, [sp, #5]
    45fc:	2300      	movs	r3, #0
    45fe:	f88d 3006 	strb.w	r3, [sp, #6]
    4602:	2300      	movs	r3, #0
    4604:	f88d 3007 	strb.w	r3, [sp, #7]
    4608:	2300      	movs	r3, #0
    460a:	f88d 3008 	strb.w	r3, [sp, #8]
    460e:	2300      	movs	r3, #0
    4610:	f88d 3009 	strb.w	r3, [sp, #9]
    4614:	2300      	movs	r3, #0
    4616:	f88d 300a 	strb.w	r3, [sp, #10]
    461a:	2300      	movs	r3, #0
    461c:	f88d 300b 	strb.w	r3, [sp, #11]
    4620:	2300      	movs	r3, #0
    4622:	f88d 300c 	strb.w	r3, [sp, #12]


    /* Init common settings for both single conversion and scan mode */
    init.timebase = ADC_TimebaseCalc(0);
    4626:	2000      	movs	r0, #0
    4628:	f7fd fdb8 	bl	219c <ADC_TimebaseCalc>
    462c:	4603      	mov	r3, r0
    462e:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Might as well finish conversion as quickly as possibly since polling */
    /* for completion. */
    /* Set ADC clock to 7 MHz, use default HFPERCLK */
    init.prescale = ADC_PrescaleCalc(7000000, 0);
    4632:	4810      	ldr	r0, [pc, #64]	; (4674 <ADC_Config+0xac>)
    4634:	2100      	movs	r1, #0
    4636:	f7fd fd7f 	bl	2138 <ADC_PrescaleCalc>
    463a:	4603      	mov	r3, r0
    463c:	f88d 3014 	strb.w	r3, [sp, #20]

    /* WARMUPMODE must be set to Normal according to ref manual before */
    /* entering EM2. In this example, the warmup time is not a big problem */
    /* due to relatively infrequent polling. Leave at default NORMAL, */

    ADC_Init(ADC0, &init);
    4640:	ab04      	add	r3, sp, #16
    4642:	480d      	ldr	r0, [pc, #52]	; (4678 <ADC_Config+0xb0>)
    4644:	4619      	mov	r1, r3
    4646:	f7fd fce9 	bl	201c <ADC_Init>

    /* Init for single conversion use, measure VDD/3 with 1.25 reference. */
    singleInit.reference  = adcRef1V25;
    464a:	2300      	movs	r3, #0
    464c:	f88d 3006 	strb.w	r3, [sp, #6]
    singleInit.input      = adcSingleInpVDDDiv3;
    4650:	2309      	movs	r3, #9
    4652:	f88d 3008 	strb.w	r3, [sp, #8]
    singleInit.resolution = adcRes12Bit;
    4656:	2300      	movs	r3, #0
    4658:	f88d 3007 	strb.w	r3, [sp, #7]

    /* The datasheet specifies a minimum aquisition time when sampling vdd/3 */
    /* 32 cycles should be safe for all ADC clock frequencies */
    singleInit.acqTime = adcAcqTime32;
    465c:	2305      	movs	r3, #5
    465e:	f88d 3005 	strb.w	r3, [sp, #5]

    ADC_InitSingle(ADC0, &singleInit);
    4662:	ab01      	add	r3, sp, #4
    4664:	4804      	ldr	r0, [pc, #16]	; (4678 <ADC_Config+0xb0>)
    4666:	4619      	mov	r1, r3
    4668:	f7fd fd12 	bl	2090 <ADC_InitSingle>
}
    466c:	b007      	add	sp, #28
    466e:	f85d fb04 	ldr.w	pc, [sp], #4
    4672:	bf00      	nop
    4674:	006acfc0 	.word	0x006acfc0
    4678:	40002000 	.word	0x40002000

0000467c <ReadVdd>:
 * @return
 *	VDD value in [mV].
 *
 ******************************************************************************/
uint32_t ReadVdd (void)
{
    467c:	b500      	push	{lr}
    467e:	b083      	sub	sp, #12
uint32_t    value;


    ADC_Start(ADC0, adcStartSingle);
    4680:	480d      	ldr	r0, [pc, #52]	; (46b8 <ReadVdd+0x3c>)
    4682:	2101      	movs	r1, #1
    4684:	f7ff fe22 	bl	42cc <ADC_Start>

    /* Wait while conversion is active */
    while (ADC0->STATUS & ADC_STATUS_SINGLEACT) ;
    4688:	bf00      	nop
    468a:	4b0b      	ldr	r3, [pc, #44]	; (46b8 <ReadVdd+0x3c>)
    468c:	689b      	ldr	r3, [r3, #8]
    468e:	f003 0301 	and.w	r3, r3, #1
    4692:	2b00      	cmp	r3, #0
    4694:	d1f9      	bne.n	468a <ReadVdd+0xe>

    /* Get ADC result */
    value = ADC_DataSingleGet(ADC0);
    4696:	4808      	ldr	r0, [pc, #32]	; (46b8 <ReadVdd+0x3c>)
    4698:	f7ff fe10 	bl	42bc <ADC_DataSingleGet>
    469c:	9001      	str	r0, [sp, #4]

    /* Calculate supply voltage relative to 1.25V reference */
    value = (value * 1250 * 3) / 4096;
    469e:	9b01      	ldr	r3, [sp, #4]
    46a0:	f640 62a6 	movw	r2, #3750	; 0xea6
    46a4:	fb02 f303 	mul.w	r3, r2, r3
    46a8:	0b1b      	lsrs	r3, r3, #12
    46aa:	9301      	str	r3, [sp, #4]

    return value;
    46ac:	9b01      	ldr	r3, [sp, #4]
}
    46ae:	4618      	mov	r0, r3
    46b0:	b003      	add	sp, #12
    46b2:	f85d fb04 	ldr.w	pc, [sp], #4
    46b6:	bf00      	nop
    46b8:	40002000 	.word	0x40002000

000046bc <Reset_Handler>:
    46bc:	4807      	ldr	r0, [pc, #28]	; (46dc <.flash_to_ram_loop_end+0x6>)
    46be:	4780      	blx	r0
    46c0:	4907      	ldr	r1, [pc, #28]	; (46e0 <.flash_to_ram_loop_end+0xa>)
    46c2:	4a08      	ldr	r2, [pc, #32]	; (46e4 <.flash_to_ram_loop_end+0xe>)
    46c4:	4b08      	ldr	r3, [pc, #32]	; (46e8 <.flash_to_ram_loop_end+0x12>)
    46c6:	1a9b      	subs	r3, r3, r2
    46c8:	f340 8005 	ble.w	46d6 <.flash_to_ram_loop_end>

000046cc <.flash_to_ram_loop>:
    46cc:	3b04      	subs	r3, #4
    46ce:	58c8      	ldr	r0, [r1, r3]
    46d0:	50d0      	str	r0, [r2, r3]
    46d2:	f73f affb 	bgt.w	46cc <.flash_to_ram_loop>

000046d6 <.flash_to_ram_loop_end>:
    46d6:	4805      	ldr	r0, [pc, #20]	; (46ec <.flash_to_ram_loop_end+0x16>)
    46d8:	4700      	bx	r0
    46da:	0000      	.short	0x0000
    46dc:	000002fd 	.word	0x000002fd
    46e0:	0000adb0 	.word	0x0000adb0
    46e4:	20000000 	.word	0x20000000
    46e8:	20000950 	.word	0x20000950
    46ec:	00000155 	.word	0x00000155

000046f0 <Default_Handler>:
    46f0:	e7fe      	b.n	46f0 <Default_Handler>

000046f2 <NMI_Handler>:
    46f2:	e7fe      	b.n	46f2 <NMI_Handler>

000046f4 <HardFault_Handler>:
    46f4:	e7fe      	b.n	46f4 <HardFault_Handler>

000046f6 <MemManage_Handler>:
    46f6:	e7fe      	b.n	46f6 <MemManage_Handler>

000046f8 <BusFault_Handler>:
    46f8:	e7fe      	b.n	46f8 <BusFault_Handler>

000046fa <UsageFault_Handler>:
    46fa:	e7fe      	b.n	46fa <UsageFault_Handler>

000046fc <SVC_Handler>:
    46fc:	e7fe      	b.n	46fc <SVC_Handler>

000046fe <DebugMon_Handler>:
    46fe:	e7fe      	b.n	46fe <DebugMon_Handler>

00004700 <PendSV_Handler>:
    4700:	e7fe      	b.n	4700 <PendSV_Handler>

00004702 <SysTick_Handler>:
    4702:	e7fe      	b.n	4702 <SysTick_Handler>
    4704:	e7fe      	b.n	4704 <SysTick_Handler+0x2>
    4706:	e7fe      	b.n	4706 <SysTick_Handler+0x4>

00004708 <TIMER0_IRQHandler>:
    4708:	e7fe      	b.n	4708 <TIMER0_IRQHandler>

0000470a <USART0_RX_IRQHandler>:
    470a:	e7fe      	b.n	470a <USART0_RX_IRQHandler>

0000470c <USART0_TX_IRQHandler>:
    470c:	e7fe      	b.n	470c <USART0_TX_IRQHandler>

0000470e <ACMP0_IRQHandler>:
    470e:	e7fe      	b.n	470e <ACMP0_IRQHandler>

00004710 <ADC0_IRQHandler>:
    4710:	e7fe      	b.n	4710 <ADC0_IRQHandler>

00004712 <DAC0_IRQHandler>:
    4712:	e7fe      	b.n	4712 <DAC0_IRQHandler>
    4714:	e7fe      	b.n	4714 <DAC0_IRQHandler+0x2>
    4716:	e7fe      	b.n	4716 <DAC0_IRQHandler+0x4>

00004718 <TIMER1_IRQHandler>:
    4718:	e7fe      	b.n	4718 <TIMER1_IRQHandler>

0000471a <TIMER2_IRQHandler>:
    471a:	e7fe      	b.n	471a <TIMER2_IRQHandler>

0000471c <USART1_RX_IRQHandler>:
    471c:	e7fe      	b.n	471c <USART1_RX_IRQHandler>

0000471e <USART1_TX_IRQHandler>:
    471e:	e7fe      	b.n	471e <USART1_TX_IRQHandler>

00004720 <USART2_RX_IRQHandler>:
    4720:	e7fe      	b.n	4720 <USART2_RX_IRQHandler>

00004722 <USART2_TX_IRQHandler>:
    4722:	e7fe      	b.n	4722 <USART2_TX_IRQHandler>

00004724 <UART0_RX_IRQHandler>:
    4724:	e7fe      	b.n	4724 <UART0_RX_IRQHandler>

00004726 <UART0_TX_IRQHandler>:
    4726:	e7fe      	b.n	4726 <UART0_TX_IRQHandler>

00004728 <LEUART0_IRQHandler>:
    4728:	e7fe      	b.n	4728 <LEUART0_IRQHandler>

0000472a <LEUART1_IRQHandler>:
    472a:	e7fe      	b.n	472a <LEUART1_IRQHandler>

0000472c <LETIMER0_IRQHandler>:
    472c:	e7fe      	b.n	472c <LETIMER0_IRQHandler>

0000472e <PCNT0_IRQHandler>:
    472e:	e7fe      	b.n	472e <PCNT0_IRQHandler>

00004730 <PCNT1_IRQHandler>:
    4730:	e7fe      	b.n	4730 <PCNT1_IRQHandler>

00004732 <PCNT2_IRQHandler>:
    4732:	e7fe      	b.n	4732 <PCNT2_IRQHandler>
    4734:	e7fe      	b.n	4734 <PCNT2_IRQHandler+0x2>

00004736 <CMU_IRQHandler>:
    4736:	e7fe      	b.n	4736 <CMU_IRQHandler>

00004738 <VCMP_IRQHandler>:
    4738:	e7fe      	b.n	4738 <VCMP_IRQHandler>

0000473a <LCD_IRQHandler>:
    473a:	e7fe      	b.n	473a <LCD_IRQHandler>

0000473c <MSC_IRQHandler>:
    473c:	e7fe      	b.n	473c <MSC_IRQHandler>

0000473e <AES_IRQHandler>:
    473e:	e7fe      	b.n	473e <AES_IRQHandler>

00004740 <exit>:
    4740:	b508      	push	{r3, lr}
    4742:	2100      	movs	r1, #0
    4744:	4604      	mov	r4, r0
    4746:	f002 fa6f 	bl	6c28 <__call_exitprocs>
    474a:	4b04      	ldr	r3, [pc, #16]	; (475c <exit+0x1c>)
    474c:	6818      	ldr	r0, [r3, #0]
    474e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4750:	b103      	cbz	r3, 4754 <exit+0x14>
    4752:	4798      	blx	r3
    4754:	4620      	mov	r0, r4
    4756:	f004 fdfd 	bl	9354 <_exit>
    475a:	bf00      	nop
    475c:	0000ab10 	.word	0x0000ab10

00004760 <__libc_init_array>:
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	4e0f      	ldr	r6, [pc, #60]	; (47a0 <__libc_init_array+0x40>)
    4764:	4d0f      	ldr	r5, [pc, #60]	; (47a4 <__libc_init_array+0x44>)
    4766:	1b76      	subs	r6, r6, r5
    4768:	10b6      	asrs	r6, r6, #2
    476a:	d007      	beq.n	477c <__libc_init_array+0x1c>
    476c:	3d04      	subs	r5, #4
    476e:	2400      	movs	r4, #0
    4770:	3401      	adds	r4, #1
    4772:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4776:	4798      	blx	r3
    4778:	42a6      	cmp	r6, r4
    477a:	d1f9      	bne.n	4770 <__libc_init_array+0x10>
    477c:	4e0a      	ldr	r6, [pc, #40]	; (47a8 <__libc_init_array+0x48>)
    477e:	4d0b      	ldr	r5, [pc, #44]	; (47ac <__libc_init_array+0x4c>)
    4780:	f005 fd44 	bl	a20c <_init>
    4784:	1b76      	subs	r6, r6, r5
    4786:	10b6      	asrs	r6, r6, #2
    4788:	d008      	beq.n	479c <__libc_init_array+0x3c>
    478a:	3d04      	subs	r5, #4
    478c:	2400      	movs	r4, #0
    478e:	3401      	adds	r4, #1
    4790:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4794:	4798      	blx	r3
    4796:	42a6      	cmp	r6, r4
    4798:	d1f9      	bne.n	478e <__libc_init_array+0x2e>
    479a:	bd70      	pop	{r4, r5, r6, pc}
    479c:	bd70      	pop	{r4, r5, r6, pc}
    479e:	bf00      	nop
    47a0:	20000944 	.word	0x20000944
    47a4:	20000944 	.word	0x20000944
    47a8:	2000094c 	.word	0x2000094c
    47ac:	20000944 	.word	0x20000944

000047b0 <localtime>:
    47b0:	4b02      	ldr	r3, [pc, #8]	; (47bc <localtime+0xc>)
    47b2:	6819      	ldr	r1, [r3, #0]
    47b4:	317c      	adds	r1, #124	; 0x7c
    47b6:	f000 b803 	b.w	47c0 <localtime_r>
    47ba:	bf00      	nop
    47bc:	200004b8 	.word	0x200004b8

000047c0 <localtime_r>:
    47c0:	2200      	movs	r2, #0
    47c2:	f000 bbd5 	b.w	4f70 <_mktm_r>
    47c6:	bf00      	nop

000047c8 <memset>:
    47c8:	b4f0      	push	{r4, r5, r6, r7}
    47ca:	0784      	lsls	r4, r0, #30
    47cc:	d043      	beq.n	4856 <memset+0x8e>
    47ce:	1e54      	subs	r4, r2, #1
    47d0:	2a00      	cmp	r2, #0
    47d2:	d03e      	beq.n	4852 <memset+0x8a>
    47d4:	b2cd      	uxtb	r5, r1
    47d6:	4603      	mov	r3, r0
    47d8:	e003      	b.n	47e2 <memset+0x1a>
    47da:	1e62      	subs	r2, r4, #1
    47dc:	2c00      	cmp	r4, #0
    47de:	d038      	beq.n	4852 <memset+0x8a>
    47e0:	4614      	mov	r4, r2
    47e2:	f803 5b01 	strb.w	r5, [r3], #1
    47e6:	079a      	lsls	r2, r3, #30
    47e8:	d1f7      	bne.n	47da <memset+0x12>
    47ea:	2c03      	cmp	r4, #3
    47ec:	d92a      	bls.n	4844 <memset+0x7c>
    47ee:	b2cd      	uxtb	r5, r1
    47f0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    47f4:	2c0f      	cmp	r4, #15
    47f6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    47fa:	d915      	bls.n	4828 <memset+0x60>
    47fc:	f1a4 0710 	sub.w	r7, r4, #16
    4800:	093f      	lsrs	r7, r7, #4
    4802:	f103 0610 	add.w	r6, r3, #16
    4806:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    480a:	461a      	mov	r2, r3
    480c:	6015      	str	r5, [r2, #0]
    480e:	6055      	str	r5, [r2, #4]
    4810:	6095      	str	r5, [r2, #8]
    4812:	60d5      	str	r5, [r2, #12]
    4814:	3210      	adds	r2, #16
    4816:	42b2      	cmp	r2, r6
    4818:	d1f8      	bne.n	480c <memset+0x44>
    481a:	f004 040f 	and.w	r4, r4, #15
    481e:	3701      	adds	r7, #1
    4820:	2c03      	cmp	r4, #3
    4822:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4826:	d90d      	bls.n	4844 <memset+0x7c>
    4828:	461e      	mov	r6, r3
    482a:	4622      	mov	r2, r4
    482c:	3a04      	subs	r2, #4
    482e:	2a03      	cmp	r2, #3
    4830:	f846 5b04 	str.w	r5, [r6], #4
    4834:	d8fa      	bhi.n	482c <memset+0x64>
    4836:	1f22      	subs	r2, r4, #4
    4838:	f022 0203 	bic.w	r2, r2, #3
    483c:	3204      	adds	r2, #4
    483e:	4413      	add	r3, r2
    4840:	f004 0403 	and.w	r4, r4, #3
    4844:	b12c      	cbz	r4, 4852 <memset+0x8a>
    4846:	b2c9      	uxtb	r1, r1
    4848:	441c      	add	r4, r3
    484a:	f803 1b01 	strb.w	r1, [r3], #1
    484e:	42a3      	cmp	r3, r4
    4850:	d1fb      	bne.n	484a <memset+0x82>
    4852:	bcf0      	pop	{r4, r5, r6, r7}
    4854:	4770      	bx	lr
    4856:	4614      	mov	r4, r2
    4858:	4603      	mov	r3, r0
    485a:	e7c6      	b.n	47ea <memset+0x22>

0000485c <validate_structure>:
    485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4860:	6801      	ldr	r1, [r0, #0]
    4862:	b082      	sub	sp, #8
    4864:	293b      	cmp	r1, #59	; 0x3b
    4866:	4604      	mov	r4, r0
    4868:	f200 80c0 	bhi.w	49ec <validate_structure+0x190>
    486c:	6841      	ldr	r1, [r0, #4]
    486e:	293b      	cmp	r1, #59	; 0x3b
    4870:	f200 808f 	bhi.w	4992 <validate_structure+0x136>
    4874:	68a1      	ldr	r1, [r4, #8]
    4876:	2917      	cmp	r1, #23
    4878:	f200 809a 	bhi.w	49b0 <validate_structure+0x154>
    487c:	6925      	ldr	r5, [r4, #16]
    487e:	2d0b      	cmp	r5, #11
    4880:	f200 80a6 	bhi.w	49d0 <validate_structure+0x174>
    4884:	6963      	ldr	r3, [r4, #20]
    4886:	079f      	lsls	r7, r3, #30
    4888:	d134      	bne.n	48f4 <validate_structure+0x98>
    488a:	4a7a      	ldr	r2, [pc, #488]	; (4a74 <validate_structure+0x218>)
    488c:	17d9      	asrs	r1, r3, #31
    488e:	fb82 0603 	smull	r0, r6, r2, r3
    4892:	2064      	movs	r0, #100	; 0x64
    4894:	ebc1 1166 	rsb	r1, r1, r6, asr #5
    4898:	fb00 3111 	mls	r1, r0, r1, r3
    489c:	2900      	cmp	r1, #0
    489e:	d068      	beq.n	4972 <validate_structure+0x116>
    48a0:	68e2      	ldr	r2, [r4, #12]
    48a2:	261d      	movs	r6, #29
    48a4:	2a00      	cmp	r2, #0
    48a6:	4f74      	ldr	r7, [pc, #464]	; (4a78 <validate_structure+0x21c>)
    48a8:	dc29      	bgt.n	48fe <validate_structure+0xa2>
    48aa:	4629      	mov	r1, r5
    48ac:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 4a74 <validate_structure+0x218>
    48b0:	2564      	movs	r5, #100	; 0x64
    48b2:	f44f 78c8 	mov.w	r8, #400	; 0x190
    48b6:	e008      	b.n	48ca <validate_structure+0x6e>
    48b8:	2b01      	cmp	r3, #1
    48ba:	f000 80a4 	beq.w	4a06 <validate_structure+0x1aa>
    48be:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
    48c2:	4619      	mov	r1, r3
    48c4:	4402      	add	r2, r0
    48c6:	2a00      	cmp	r2, #0
    48c8:	dc39      	bgt.n	493e <validate_structure+0xe2>
    48ca:	1e4b      	subs	r3, r1, #1
    48cc:	2900      	cmp	r1, #0
    48ce:	d1f3      	bne.n	48b8 <validate_structure+0x5c>
    48d0:	6961      	ldr	r1, [r4, #20]
    48d2:	1e4b      	subs	r3, r1, #1
    48d4:	079e      	lsls	r6, r3, #30
    48d6:	6163      	str	r3, [r4, #20]
    48d8:	f040 8098 	bne.w	4a0c <validate_structure+0x1b0>
    48dc:	fb8c 0603 	smull	r0, r6, ip, r3
    48e0:	17d8      	asrs	r0, r3, #31
    48e2:	ebc0 1066 	rsb	r0, r0, r6, asr #5
    48e6:	fb05 3310 	mls	r3, r5, r0, r3
    48ea:	2b00      	cmp	r3, #0
    48ec:	f000 8091 	beq.w	4a12 <validate_structure+0x1b6>
    48f0:	261d      	movs	r6, #29
    48f2:	e08c      	b.n	4a0e <validate_structure+0x1b2>
    48f4:	261c      	movs	r6, #28
    48f6:	68e2      	ldr	r2, [r4, #12]
    48f8:	4f5f      	ldr	r7, [pc, #380]	; (4a78 <validate_structure+0x21c>)
    48fa:	2a00      	cmp	r2, #0
    48fc:	ddd5      	ble.n	48aa <validate_structure+0x4e>
    48fe:	f8df 8174 	ldr.w	r8, [pc, #372]	; 4a74 <validate_structure+0x218>
    4902:	f04f 0c00 	mov.w	ip, #0
    4906:	f04f 0964 	mov.w	r9, #100	; 0x64
    490a:	f44f 7ac8 	mov.w	sl, #400	; 0x190
    490e:	1c6b      	adds	r3, r5, #1
    4910:	2100      	movs	r1, #0
    4912:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    4916:	e00a      	b.n	492e <validate_structure+0xd2>
    4918:	5868      	ldr	r0, [r5, r1]
    491a:	4290      	cmp	r0, r2
    491c:	ebc0 0202 	rsb	r2, r0, r2
    4920:	da0f      	bge.n	4942 <validate_structure+0xe6>
    4922:	2b0c      	cmp	r3, #12
    4924:	60e2      	str	r2, [r4, #12]
    4926:	6123      	str	r3, [r4, #16]
    4928:	d00e      	beq.n	4948 <validate_structure+0xec>
    492a:	3301      	adds	r3, #1
    492c:	3104      	adds	r1, #4
    492e:	2b02      	cmp	r3, #2
    4930:	d1f2      	bne.n	4918 <validate_structure+0xbc>
    4932:	4296      	cmp	r6, r2
    4934:	da05      	bge.n	4942 <validate_structure+0xe6>
    4936:	1b92      	subs	r2, r2, r6
    4938:	60e2      	str	r2, [r4, #12]
    493a:	6123      	str	r3, [r4, #16]
    493c:	e7f5      	b.n	492a <validate_structure+0xce>
    493e:	6123      	str	r3, [r4, #16]
    4940:	60e2      	str	r2, [r4, #12]
    4942:	b002      	add	sp, #8
    4944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4948:	6961      	ldr	r1, [r4, #20]
    494a:	f8c4 c010 	str.w	ip, [r4, #16]
    494e:	1c4b      	adds	r3, r1, #1
    4950:	0798      	lsls	r0, r3, #30
    4952:	6163      	str	r3, [r4, #20]
    4954:	d002      	beq.n	495c <validate_structure+0x100>
    4956:	261c      	movs	r6, #28
    4958:	2500      	movs	r5, #0
    495a:	e7d8      	b.n	490e <validate_structure+0xb2>
    495c:	fb88 0503 	smull	r0, r5, r8, r3
    4960:	17d8      	asrs	r0, r3, #31
    4962:	ebc0 1065 	rsb	r0, r0, r5, asr #5
    4966:	fb09 3310 	mls	r3, r9, r0, r3
    496a:	2b00      	cmp	r3, #0
    496c:	d05f      	beq.n	4a2e <validate_structure+0x1d2>
    496e:	261d      	movs	r6, #29
    4970:	e7f2      	b.n	4958 <validate_structure+0xfc>
    4972:	f203 736c 	addw	r3, r3, #1900	; 0x76c
    4976:	fb82 1203 	smull	r1, r2, r2, r3
    497a:	17d9      	asrs	r1, r3, #31
    497c:	ebc1 12e2 	rsb	r2, r1, r2, asr #7
    4980:	f44f 71c8 	mov.w	r1, #400	; 0x190
    4984:	fb01 3312 	mls	r3, r1, r2, r3
    4988:	2b00      	cmp	r3, #0
    498a:	bf0c      	ite	eq
    498c:	261d      	moveq	r6, #29
    498e:	261c      	movne	r6, #28
    4990:	e7b1      	b.n	48f6 <validate_structure+0x9a>
    4992:	223c      	movs	r2, #60	; 0x3c
    4994:	4668      	mov	r0, sp
    4996:	f002 f9c5 	bl	6d24 <div>
    499a:	68a2      	ldr	r2, [r4, #8]
    499c:	9900      	ldr	r1, [sp, #0]
    499e:	9b01      	ldr	r3, [sp, #4]
    49a0:	4411      	add	r1, r2
    49a2:	2b00      	cmp	r3, #0
    49a4:	60a1      	str	r1, [r4, #8]
    49a6:	db5f      	blt.n	4a68 <validate_structure+0x20c>
    49a8:	2917      	cmp	r1, #23
    49aa:	6063      	str	r3, [r4, #4]
    49ac:	f67f af66 	bls.w	487c <validate_structure+0x20>
    49b0:	2218      	movs	r2, #24
    49b2:	4668      	mov	r0, sp
    49b4:	f002 f9b6 	bl	6d24 <div>
    49b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
    49bc:	68e1      	ldr	r1, [r4, #12]
    49be:	2b00      	cmp	r3, #0
    49c0:	440a      	add	r2, r1
    49c2:	60e2      	str	r2, [r4, #12]
    49c4:	db41      	blt.n	4a4a <validate_structure+0x1ee>
    49c6:	6925      	ldr	r5, [r4, #16]
    49c8:	60a3      	str	r3, [r4, #8]
    49ca:	2d0b      	cmp	r5, #11
    49cc:	f67f af5a 	bls.w	4884 <validate_structure+0x28>
    49d0:	4629      	mov	r1, r5
    49d2:	220c      	movs	r2, #12
    49d4:	4668      	mov	r0, sp
    49d6:	f002 f9a5 	bl	6d24 <div>
    49da:	e89d 0028 	ldmia.w	sp, {r3, r5}
    49de:	6962      	ldr	r2, [r4, #20]
    49e0:	2d00      	cmp	r5, #0
    49e2:	4413      	add	r3, r2
    49e4:	6163      	str	r3, [r4, #20]
    49e6:	db35      	blt.n	4a54 <validate_structure+0x1f8>
    49e8:	6125      	str	r5, [r4, #16]
    49ea:	e74c      	b.n	4886 <validate_structure+0x2a>
    49ec:	223c      	movs	r2, #60	; 0x3c
    49ee:	4668      	mov	r0, sp
    49f0:	f002 f998 	bl	6d24 <div>
    49f4:	e89d 000c 	ldmia.w	sp, {r2, r3}
    49f8:	6861      	ldr	r1, [r4, #4]
    49fa:	2b00      	cmp	r3, #0
    49fc:	4411      	add	r1, r2
    49fe:	6061      	str	r1, [r4, #4]
    4a00:	db2d      	blt.n	4a5e <validate_structure+0x202>
    4a02:	6023      	str	r3, [r4, #0]
    4a04:	e733      	b.n	486e <validate_structure+0x12>
    4a06:	4630      	mov	r0, r6
    4a08:	4619      	mov	r1, r3
    4a0a:	e75b      	b.n	48c4 <validate_structure+0x68>
    4a0c:	261c      	movs	r6, #28
    4a0e:	230b      	movs	r3, #11
    4a10:	e755      	b.n	48be <validate_structure+0x62>
    4a12:	f201 716b 	addw	r1, r1, #1899	; 0x76b
    4a16:	fb8c 3001 	smull	r3, r0, ip, r1
    4a1a:	17cb      	asrs	r3, r1, #31
    4a1c:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
    4a20:	fb08 1113 	mls	r1, r8, r3, r1
    4a24:	2900      	cmp	r1, #0
    4a26:	bf0c      	ite	eq
    4a28:	261d      	moveq	r6, #29
    4a2a:	261c      	movne	r6, #28
    4a2c:	e7ef      	b.n	4a0e <validate_structure+0x1b2>
    4a2e:	f201 716d 	addw	r1, r1, #1901	; 0x76d
    4a32:	fb88 3001 	smull	r3, r0, r8, r1
    4a36:	17cb      	asrs	r3, r1, #31
    4a38:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
    4a3c:	fb0a 1113 	mls	r1, sl, r3, r1
    4a40:	2900      	cmp	r1, #0
    4a42:	bf0c      	ite	eq
    4a44:	261d      	moveq	r6, #29
    4a46:	261c      	movne	r6, #28
    4a48:	e786      	b.n	4958 <validate_structure+0xfc>
    4a4a:	3318      	adds	r3, #24
    4a4c:	3a01      	subs	r2, #1
    4a4e:	60a3      	str	r3, [r4, #8]
    4a50:	60e2      	str	r2, [r4, #12]
    4a52:	e713      	b.n	487c <validate_structure+0x20>
    4a54:	350c      	adds	r5, #12
    4a56:	3b01      	subs	r3, #1
    4a58:	6125      	str	r5, [r4, #16]
    4a5a:	6163      	str	r3, [r4, #20]
    4a5c:	e713      	b.n	4886 <validate_structure+0x2a>
    4a5e:	333c      	adds	r3, #60	; 0x3c
    4a60:	3901      	subs	r1, #1
    4a62:	6023      	str	r3, [r4, #0]
    4a64:	6061      	str	r1, [r4, #4]
    4a66:	e702      	b.n	486e <validate_structure+0x12>
    4a68:	333c      	adds	r3, #60	; 0x3c
    4a6a:	3901      	subs	r1, #1
    4a6c:	6063      	str	r3, [r4, #4]
    4a6e:	60a1      	str	r1, [r4, #8]
    4a70:	e701      	b.n	4876 <validate_structure+0x1a>
    4a72:	bf00      	nop
    4a74:	51eb851f 	.word	0x51eb851f
    4a78:	0000ab44 	.word	0x0000ab44

00004a7c <mktime>:
    4a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a80:	4606      	mov	r6, r0
    4a82:	f003 f93d 	bl	7d00 <__gettzinfo>
    4a86:	4607      	mov	r7, r0
    4a88:	4630      	mov	r0, r6
    4a8a:	f7ff fee7 	bl	485c <validate_structure>
    4a8e:	4cc6      	ldr	r4, [pc, #792]	; (4da8 <mktime+0x32c>)
    4a90:	6933      	ldr	r3, [r6, #16]
    4a92:	6872      	ldr	r2, [r6, #4]
    4a94:	6835      	ldr	r5, [r6, #0]
    4a96:	68f0      	ldr	r0, [r6, #12]
    4a98:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4a9c:	68b1      	ldr	r1, [r6, #8]
    4a9e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
    4aa2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4aa6:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    4aaa:	3801      	subs	r0, #1
    4aac:	2b01      	cmp	r3, #1
    4aae:	fb0c 5c01 	mla	ip, ip, r1, r5
    4ab2:	4404      	add	r4, r0
    4ab4:	6975      	ldr	r5, [r6, #20]
    4ab6:	dd02      	ble.n	4abe <mktime+0x42>
    4ab8:	07a8      	lsls	r0, r5, #30
    4aba:	f000 80bf 	beq.w	4c3c <mktime+0x1c0>
    4abe:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
    4ac2:	3310      	adds	r3, #16
    4ac4:	f644 6220 	movw	r2, #20000	; 0x4e20
    4ac8:	4293      	cmp	r3, r2
    4aca:	61f4      	str	r4, [r6, #28]
    4acc:	f200 8146 	bhi.w	4d5c <mktime+0x2e0>
    4ad0:	2d46      	cmp	r5, #70	; 0x46
    4ad2:	f300 8089 	bgt.w	4be8 <mktime+0x16c>
    4ad6:	d051      	beq.n	4b7c <mktime+0x100>
    4ad8:	2d45      	cmp	r5, #69	; 0x45
    4ada:	d04c      	beq.n	4b76 <mktime+0xfa>
    4adc:	48b3      	ldr	r0, [pc, #716]	; (4dac <mktime+0x330>)
    4ade:	2345      	movs	r3, #69	; 0x45
    4ae0:	f240 196d 	movw	r9, #365	; 0x16d
    4ae4:	f04f 0e64 	mov.w	lr, #100	; 0x64
    4ae8:	f44f 78c8 	mov.w	r8, #400	; 0x190
    4aec:	e01e      	b.n	4b2c <mktime+0xb0>
    4aee:	fb80 a103 	smull	sl, r1, r0, r3
    4af2:	ea4f 7be3 	mov.w	fp, r3, asr #31
    4af6:	ebcb 1161 	rsb	r1, fp, r1, asr #5
    4afa:	fb0e 3111 	mls	r1, lr, r1, r3
    4afe:	f203 726c 	addw	r2, r3, #1900	; 0x76c
    4b02:	ea4f 7ae2 	mov.w	sl, r2, asr #31
    4b06:	2900      	cmp	r1, #0
    4b08:	f040 8107 	bne.w	4d1a <mktime+0x29e>
    4b0c:	fb80 b102 	smull	fp, r1, r0, r2
    4b10:	ebca 1ae1 	rsb	sl, sl, r1, asr #7
    4b14:	fb08 221a 	mls	r2, r8, sl, r2
    4b18:	2a00      	cmp	r2, #0
    4b1a:	bf0c      	ite	eq
    4b1c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
    4b20:	464a      	movne	r2, r9
    4b22:	3b01      	subs	r3, #1
    4b24:	42ab      	cmp	r3, r5
    4b26:	ebc2 0404 	rsb	r4, r2, r4
    4b2a:	d008      	beq.n	4b3e <mktime+0xc2>
    4b2c:	079a      	lsls	r2, r3, #30
    4b2e:	d0de      	beq.n	4aee <mktime+0x72>
    4b30:	3b01      	subs	r3, #1
    4b32:	f240 126d 	movw	r2, #365	; 0x16d
    4b36:	42ab      	cmp	r3, r5
    4b38:	ebc2 0404 	rsb	r4, r2, r4
    4b3c:	d1f6      	bne.n	4b2c <mktime+0xb0>
    4b3e:	07ab      	lsls	r3, r5, #30
    4b40:	d119      	bne.n	4b76 <mktime+0xfa>
    4b42:	4b9a      	ldr	r3, [pc, #616]	; (4dac <mktime+0x330>)
    4b44:	17ea      	asrs	r2, r5, #31
    4b46:	fb83 1005 	smull	r1, r0, r3, r5
    4b4a:	2164      	movs	r1, #100	; 0x64
    4b4c:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    4b50:	fb01 5212 	mls	r2, r1, r2, r5
    4b54:	2a00      	cmp	r2, #0
    4b56:	f040 80f7 	bne.w	4d48 <mktime+0x2cc>
    4b5a:	f205 726c 	addw	r2, r5, #1900	; 0x76c
    4b5e:	fb83 a302 	smull	sl, r3, r3, r2
    4b62:	17d1      	asrs	r1, r2, #31
    4b64:	ebc1 13e3 	rsb	r3, r1, r3, asr #7
    4b68:	f44f 71c8 	mov.w	r1, #400	; 0x190
    4b6c:	fb01 2213 	mls	r2, r1, r3, r2
    4b70:	2a00      	cmp	r2, #0
    4b72:	f000 80e9 	beq.w	4d48 <mktime+0x2cc>
    4b76:	f240 136d 	movw	r3, #365	; 0x16d
    4b7a:	1ae4      	subs	r4, r4, r3
    4b7c:	4b8c      	ldr	r3, [pc, #560]	; (4db0 <mktime+0x334>)
    4b7e:	fb03 c804 	mla	r8, r3, r4, ip
    4b82:	f002 f81d 	bl	6bc0 <__tz_lock>
    4b86:	4b8b      	ldr	r3, [pc, #556]	; (4db4 <mktime+0x338>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	f000 80c1 	beq.w	4d12 <mktime+0x296>
    4b90:	6970      	ldr	r0, [r6, #20]
    4b92:	6a32      	ldr	r2, [r6, #32]
    4b94:	687b      	ldr	r3, [r7, #4]
    4b96:	f200 706c 	addw	r0, r0, #1900	; 0x76c
    4b9a:	2a01      	cmp	r2, #1
    4b9c:	bfb4      	ite	lt
    4b9e:	4692      	movlt	sl, r2
    4ba0:	f04f 0a01 	movge.w	sl, #1
    4ba4:	4283      	cmp	r3, r0
    4ba6:	d059      	beq.n	4c5c <mktime+0x1e0>
    4ba8:	f000 f916 	bl	4dd8 <__tzcalc_limits>
    4bac:	2800      	cmp	r0, #0
    4bae:	d155      	bne.n	4c5c <mktime+0x1e0>
    4bb0:	46d1      	mov	r9, sl
    4bb2:	f1b9 0f01 	cmp.w	r9, #1
    4bb6:	f040 80ad 	bne.w	4d14 <mktime+0x298>
    4bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bbc:	4498      	add	r8, r3
    4bbe:	f002 f801 	bl	6bc4 <__tz_unlock>
    4bc2:	4a7d      	ldr	r2, [pc, #500]	; (4db8 <mktime+0x33c>)
    4bc4:	3404      	adds	r4, #4
    4bc6:	fb84 2302 	smull	r2, r3, r4, r2
    4bca:	17e2      	asrs	r2, r4, #31
    4bcc:	4423      	add	r3, r4
    4bce:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
    4bd2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4bd6:	1ae3      	subs	r3, r4, r3
    4bd8:	bf48      	it	mi
    4bda:	3307      	addmi	r3, #7
    4bdc:	f8c6 9020 	str.w	r9, [r6, #32]
    4be0:	61b3      	str	r3, [r6, #24]
    4be2:	4640      	mov	r0, r8
    4be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4be8:	4870      	ldr	r0, [pc, #448]	; (4dac <mktime+0x330>)
    4bea:	2346      	movs	r3, #70	; 0x46
    4bec:	f240 196d 	movw	r9, #365	; 0x16d
    4bf0:	f04f 0e64 	mov.w	lr, #100	; 0x64
    4bf4:	f44f 78c8 	mov.w	r8, #400	; 0x190
    4bf8:	e01b      	b.n	4c32 <mktime+0x1b6>
    4bfa:	fb80 b103 	smull	fp, r1, r0, r3
    4bfe:	ea4f 7be3 	mov.w	fp, r3, asr #31
    4c02:	ebcb 1161 	rsb	r1, fp, r1, asr #5
    4c06:	fb0e 3111 	mls	r1, lr, r1, r3
    4c0a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
    4c0e:	ea4f 7ae2 	mov.w	sl, r2, asr #31
    4c12:	bb01      	cbnz	r1, 4c56 <mktime+0x1da>
    4c14:	fb80 b102 	smull	fp, r1, r0, r2
    4c18:	ebca 1ae1 	rsb	sl, sl, r1, asr #7
    4c1c:	fb08 221a 	mls	r2, r8, sl, r2
    4c20:	2a00      	cmp	r2, #0
    4c22:	bf0c      	ite	eq
    4c24:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
    4c28:	464a      	movne	r2, r9
    4c2a:	3301      	adds	r3, #1
    4c2c:	42ab      	cmp	r3, r5
    4c2e:	4414      	add	r4, r2
    4c30:	d0a4      	beq.n	4b7c <mktime+0x100>
    4c32:	0799      	lsls	r1, r3, #30
    4c34:	d0e1      	beq.n	4bfa <mktime+0x17e>
    4c36:	f240 126d 	movw	r2, #365	; 0x16d
    4c3a:	e7f6      	b.n	4c2a <mktime+0x1ae>
    4c3c:	4b5b      	ldr	r3, [pc, #364]	; (4dac <mktime+0x330>)
    4c3e:	17ea      	asrs	r2, r5, #31
    4c40:	fb83 1005 	smull	r1, r0, r3, r5
    4c44:	2164      	movs	r1, #100	; 0x64
    4c46:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    4c4a:	fb01 5212 	mls	r2, r1, r2, r5
    4c4e:	2a00      	cmp	r2, #0
    4c50:	d066      	beq.n	4d20 <mktime+0x2a4>
    4c52:	3401      	adds	r4, #1
    4c54:	e733      	b.n	4abe <mktime+0x42>
    4c56:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    4c5a:	e7e6      	b.n	4c2a <mktime+0x1ae>
    4c5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    4c5e:	6a38      	ldr	r0, [r7, #32]
    4c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c62:	69fa      	ldr	r2, [r7, #28]
    4c64:	ebc0 0901 	rsb	r9, r0, r1
    4c68:	45c8      	cmp	r8, r9
    4c6a:	ebc3 0202 	rsb	r2, r3, r2
    4c6e:	db02      	blt.n	4c76 <mktime+0x1fa>
    4c70:	1ac9      	subs	r1, r1, r3
    4c72:	4588      	cmp	r8, r1
    4c74:	db9c      	blt.n	4bb0 <mktime+0x134>
    4c76:	6839      	ldr	r1, [r7, #0]
    4c78:	2900      	cmp	r1, #0
    4c7a:	d060      	beq.n	4d3e <mktime+0x2c2>
    4c7c:	4590      	cmp	r8, r2
    4c7e:	da66      	bge.n	4d4e <mktime+0x2d2>
    4c80:	f04f 0900 	mov.w	r9, #0
    4c84:	f1ba 0f00 	cmp.w	sl, #0
    4c88:	db93      	blt.n	4bb2 <mktime+0x136>
    4c8a:	ea89 0a0a 	eor.w	sl, r9, sl
    4c8e:	f1ba 0f01 	cmp.w	sl, #1
    4c92:	d18e      	bne.n	4bb2 <mktime+0x136>
    4c94:	1ac3      	subs	r3, r0, r3
    4c96:	f1b9 0f00 	cmp.w	r9, #0
    4c9a:	d100      	bne.n	4c9e <mktime+0x222>
    4c9c:	425b      	negs	r3, r3
    4c9e:	6832      	ldr	r2, [r6, #0]
    4ca0:	4630      	mov	r0, r6
    4ca2:	441a      	add	r2, r3
    4ca4:	6032      	str	r2, [r6, #0]
    4ca6:	4498      	add	r8, r3
    4ca8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
    4cac:	f7ff fdd6 	bl	485c <validate_structure>
    4cb0:	68f3      	ldr	r3, [r6, #12]
    4cb2:	ebb3 030a 	subs.w	r3, r3, sl
    4cb6:	f43f af7c 	beq.w	4bb2 <mktime+0x136>
    4cba:	2b01      	cmp	r3, #1
    4cbc:	dd7e      	ble.n	4dbc <mktime+0x340>
    4cbe:	f04f 33ff 	mov.w	r3, #4294967295
    4cc2:	69f2      	ldr	r2, [r6, #28]
    4cc4:	441c      	add	r4, r3
    4cc6:	189b      	adds	r3, r3, r2
    4cc8:	d44f      	bmi.n	4d6a <mktime+0x2ee>
    4cca:	07aa      	lsls	r2, r5, #30
    4ccc:	d14a      	bne.n	4d64 <mktime+0x2e8>
    4cce:	4a37      	ldr	r2, [pc, #220]	; (4dac <mktime+0x330>)
    4cd0:	17e9      	asrs	r1, r5, #31
    4cd2:	fb82 ae05 	smull	sl, lr, r2, r5
    4cd6:	2064      	movs	r0, #100	; 0x64
    4cd8:	ebc1 116e 	rsb	r1, r1, lr, asr #5
    4cdc:	fb00 5111 	mls	r1, r0, r1, r5
    4ce0:	2900      	cmp	r1, #0
    4ce2:	d16f      	bne.n	4dc4 <mktime+0x348>
    4ce4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
    4ce8:	fb82 b205 	smull	fp, r2, r2, r5
    4cec:	17e9      	asrs	r1, r5, #31
    4cee:	ebc1 12e2 	rsb	r2, r1, r2, asr #7
    4cf2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    4cf6:	fb01 5512 	mls	r5, r1, r2, r5
    4cfa:	f240 126d 	movw	r2, #365	; 0x16d
    4cfe:	2d00      	cmp	r5, #0
    4d00:	bf08      	it	eq
    4d02:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
    4d06:	429a      	cmp	r2, r3
    4d08:	bfd8      	it	le
    4d0a:	ebc2 0303 	rsble	r3, r2, r3
    4d0e:	61f3      	str	r3, [r6, #28]
    4d10:	e74f      	b.n	4bb2 <mktime+0x136>
    4d12:	4699      	mov	r9, r3
    4d14:	6a3b      	ldr	r3, [r7, #32]
    4d16:	4498      	add	r8, r3
    4d18:	e751      	b.n	4bbe <mktime+0x142>
    4d1a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    4d1e:	e700      	b.n	4b22 <mktime+0xa6>
    4d20:	f205 726c 	addw	r2, r5, #1900	; 0x76c
    4d24:	fb83 a302 	smull	sl, r3, r3, r2
    4d28:	17d1      	asrs	r1, r2, #31
    4d2a:	ebc1 13e3 	rsb	r3, r1, r3, asr #7
    4d2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
    4d32:	fb01 2213 	mls	r2, r1, r3, r2
    4d36:	2a00      	cmp	r2, #0
    4d38:	f47f aec1 	bne.w	4abe <mktime+0x42>
    4d3c:	e789      	b.n	4c52 <mktime+0x1d6>
    4d3e:	4590      	cmp	r8, r2
    4d40:	db05      	blt.n	4d4e <mktime+0x2d2>
    4d42:	f04f 0901 	mov.w	r9, #1
    4d46:	e79d      	b.n	4c84 <mktime+0x208>
    4d48:	f44f 73b7 	mov.w	r3, #366	; 0x16e
    4d4c:	e715      	b.n	4b7a <mktime+0xfe>
    4d4e:	45c8      	cmp	r8, r9
    4d50:	bfac      	ite	ge
    4d52:	f04f 0900 	movge.w	r9, #0
    4d56:	f04f 0901 	movlt.w	r9, #1
    4d5a:	e793      	b.n	4c84 <mktime+0x208>
    4d5c:	f04f 30ff 	mov.w	r0, #4294967295
    4d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d64:	f240 126d 	movw	r2, #365	; 0x16d
    4d68:	e7cd      	b.n	4d06 <mktime+0x28a>
    4d6a:	1e6b      	subs	r3, r5, #1
    4d6c:	0799      	lsls	r1, r3, #30
    4d6e:	d12c      	bne.n	4dca <mktime+0x34e>
    4d70:	4a0e      	ldr	r2, [pc, #56]	; (4dac <mktime+0x330>)
    4d72:	17d9      	asrs	r1, r3, #31
    4d74:	fb82 be03 	smull	fp, lr, r2, r3
    4d78:	2064      	movs	r0, #100	; 0x64
    4d7a:	ebc1 116e 	rsb	r1, r1, lr, asr #5
    4d7e:	fb00 3311 	mls	r3, r0, r1, r3
    4d82:	bb2b      	cbnz	r3, 4dd0 <mktime+0x354>
    4d84:	f205 756b 	addw	r5, r5, #1899	; 0x76b
    4d88:	fb82 0205 	smull	r0, r2, r2, r5
    4d8c:	17eb      	asrs	r3, r5, #31
    4d8e:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
    4d92:	f44f 72c8 	mov.w	r2, #400	; 0x190
    4d96:	fb02 5513 	mls	r5, r2, r3, r5
    4d9a:	f240 136d 	movw	r3, #365	; 0x16d
    4d9e:	2d00      	cmp	r5, #0
    4da0:	bf18      	it	ne
    4da2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
    4da6:	e7b2      	b.n	4d0e <mktime+0x292>
    4da8:	0000ab14 	.word	0x0000ab14
    4dac:	51eb851f 	.word	0x51eb851f
    4db0:	00015180 	.word	0x00015180
    4db4:	20000f6c 	.word	0x20000f6c
    4db8:	92492493 	.word	0x92492493
    4dbc:	1c98      	adds	r0, r3, #2
    4dbe:	bfd8      	it	le
    4dc0:	2301      	movle	r3, #1
    4dc2:	e77e      	b.n	4cc2 <mktime+0x246>
    4dc4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    4dc8:	e79d      	b.n	4d06 <mktime+0x28a>
    4dca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    4dce:	e79e      	b.n	4d0e <mktime+0x292>
    4dd0:	f240 136d 	movw	r3, #365	; 0x16d
    4dd4:	e79b      	b.n	4d0e <mktime+0x292>
    4dd6:	bf00      	nop

00004dd8 <__tzcalc_limits>:
    4dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ddc:	b083      	sub	sp, #12
    4dde:	4604      	mov	r4, r0
    4de0:	f002 ff8e 	bl	7d00 <__gettzinfo>
    4de4:	f240 73b1 	movw	r3, #1969	; 0x7b1
    4de8:	429c      	cmp	r4, r3
    4dea:	4606      	mov	r6, r0
    4dec:	f340 8098 	ble.w	4f20 <__tzcalc_limits+0x148>
    4df0:	4b5b      	ldr	r3, [pc, #364]	; (4f60 <__tzcalc_limits+0x188>)
    4df2:	17e0      	asrs	r0, r4, #31
    4df4:	fb83 2704 	smull	r2, r7, r3, r4
    4df8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
    4dfc:	eb04 0902 	add.w	r9, r4, r2
    4e00:	f2a4 716d 	subw	r1, r4, #1901	; 0x76d
    4e04:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
    4e08:	fb83 2501 	smull	r2, r5, r3, r1
    4e0c:	ea4f 09a9 	mov.w	r9, r9, asr #2
    4e10:	eb04 020c 	add.w	r2, r4, ip
    4e14:	f2a4 78b2 	subw	r8, r4, #1970	; 0x7b2
    4e18:	ebc0 1ce7 	rsb	ip, r0, r7, asr #7
    4e1c:	f240 1a6d 	movw	sl, #365	; 0x16d
    4e20:	f44f 7bc8 	mov.w	fp, #400	; 0x190
    4e24:	fb0a 9808 	mla	r8, sl, r8, r9
    4e28:	fb0b 4b1c 	mls	fp, fp, ip, r4
    4e2c:	fb83 9302 	smull	r9, r3, r3, r2
    4e30:	ebc0 1767 	rsb	r7, r0, r7, asr #5
    4e34:	2064      	movs	r0, #100	; 0x64
    4e36:	fb00 4717 	mls	r7, r0, r7, r4
    4e3a:	17c9      	asrs	r1, r1, #31
    4e3c:	eba1 1165 	sub.w	r1, r1, r5, asr #5
    4e40:	17d2      	asrs	r2, r2, #31
    4e42:	4488      	add	r8, r1
    4e44:	ebc2 13e3 	rsb	r3, r2, r3, asr #7
    4e48:	6074      	str	r4, [r6, #4]
    4e4a:	f1db 0b01 	rsbs	fp, fp, #1
    4e4e:	f004 0403 	and.w	r4, r4, #3
    4e52:	f8df c118 	ldr.w	ip, [pc, #280]	; 4f6c <__tzcalc_limits+0x194>
    4e56:	9401      	str	r4, [sp, #4]
    4e58:	bf38      	it	cc
    4e5a:	f04f 0b00 	movcc.w	fp, #0
    4e5e:	4498      	add	r8, r3
    4e60:	4634      	mov	r4, r6
    4e62:	2500      	movs	r5, #0
    4e64:	46ba      	mov	sl, r7
    4e66:	7a23      	ldrb	r3, [r4, #8]
    4e68:	2b4a      	cmp	r3, #74	; 0x4a
    4e6a:	d05d      	beq.n	4f28 <__tzcalc_limits+0x150>
    4e6c:	2b44      	cmp	r3, #68	; 0x44
    4e6e:	d06f      	beq.n	4f50 <__tzcalc_limits+0x178>
    4e70:	9a01      	ldr	r2, [sp, #4]
    4e72:	2a00      	cmp	r2, #0
    4e74:	d04e      	beq.n	4f14 <__tzcalc_limits+0x13c>
    4e76:	465b      	mov	r3, fp
    4e78:	0058      	lsls	r0, r3, #1
    4e7a:	68e7      	ldr	r7, [r4, #12]
    4e7c:	4418      	add	r0, r3
    4e7e:	4b39      	ldr	r3, [pc, #228]	; (4f64 <__tzcalc_limits+0x18c>)
    4e80:	2f01      	cmp	r7, #1
    4e82:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4e86:	dd66      	ble.n	4f56 <__tzcalc_limits+0x17e>
    4e88:	00bf      	lsls	r7, r7, #2
    4e8a:	f1a0 0908 	sub.w	r9, r0, #8
    4e8e:	44b9      	add	r9, r7
    4e90:	1f03      	subs	r3, r0, #4
    4e92:	4641      	mov	r1, r8
    4e94:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4e98:	454b      	cmp	r3, r9
    4e9a:	4411      	add	r1, r2
    4e9c:	d1fa      	bne.n	4e94 <__tzcalc_limits+0xbc>
    4e9e:	3f04      	subs	r7, #4
    4ea0:	9700      	str	r7, [sp, #0]
    4ea2:	4f31      	ldr	r7, [pc, #196]	; (4f68 <__tzcalc_limits+0x190>)
    4ea4:	f101 0904 	add.w	r9, r1, #4
    4ea8:	fb89 2307 	smull	r2, r3, r9, r7
    4eac:	eb09 0203 	add.w	r2, r9, r3
    4eb0:	ea4f 73e9 	mov.w	r3, r9, asr #31
    4eb4:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
    4eb8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4ebc:	6963      	ldr	r3, [r4, #20]
    4ebe:	ebc2 0909 	rsb	r9, r2, r9
    4ec2:	6922      	ldr	r2, [r4, #16]
    4ec4:	ebb3 0309 	subs.w	r3, r3, r9
    4ec8:	f8dd 9000 	ldr.w	r9, [sp]
    4ecc:	f102 32ff 	add.w	r2, r2, #4294967295
    4ed0:	bf48      	it	mi
    4ed2:	3307      	addmi	r3, #7
    4ed4:	f850 0009 	ldr.w	r0, [r0, r9]
    4ed8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4edc:	4413      	add	r3, r2
    4ede:	4283      	cmp	r3, r0
    4ee0:	db02      	blt.n	4ee8 <__tzcalc_limits+0x110>
    4ee2:	3b07      	subs	r3, #7
    4ee4:	4283      	cmp	r3, r0
    4ee6:	dafc      	bge.n	4ee2 <__tzcalc_limits+0x10a>
    4ee8:	440b      	add	r3, r1
    4eea:	69a0      	ldr	r0, [r4, #24]
    4eec:	6a22      	ldr	r2, [r4, #32]
    4eee:	fb0c 0003 	mla	r0, ip, r3, r0
    4ef2:	3501      	adds	r5, #1
    4ef4:	4402      	add	r2, r0
    4ef6:	2d02      	cmp	r5, #2
    4ef8:	f844 2f1c 	str.w	r2, [r4, #28]!
    4efc:	d1b3      	bne.n	4e66 <__tzcalc_limits+0x8e>
    4efe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4f00:	69f2      	ldr	r2, [r6, #28]
    4f02:	2001      	movs	r0, #1
    4f04:	429a      	cmp	r2, r3
    4f06:	bfac      	ite	ge
    4f08:	2300      	movge	r3, #0
    4f0a:	2301      	movlt	r3, #1
    4f0c:	6033      	str	r3, [r6, #0]
    4f0e:	b003      	add	sp, #12
    4f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f14:	f1ba 0f00 	cmp.w	sl, #0
    4f18:	bf0c      	ite	eq
    4f1a:	465b      	moveq	r3, fp
    4f1c:	2301      	movne	r3, #1
    4f1e:	e7ab      	b.n	4e78 <__tzcalc_limits+0xa0>
    4f20:	2000      	movs	r0, #0
    4f22:	b003      	add	sp, #12
    4f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f28:	6962      	ldr	r2, [r4, #20]
    4f2a:	9901      	ldr	r1, [sp, #4]
    4f2c:	eb02 0308 	add.w	r3, r2, r8
    4f30:	b949      	cbnz	r1, 4f46 <__tzcalc_limits+0x16e>
    4f32:	f1ba 0f00 	cmp.w	sl, #0
    4f36:	d006      	beq.n	4f46 <__tzcalc_limits+0x16e>
    4f38:	2a3b      	cmp	r2, #59	; 0x3b
    4f3a:	bfd4      	ite	le
    4f3c:	2200      	movle	r2, #0
    4f3e:	2201      	movgt	r2, #1
    4f40:	4413      	add	r3, r2
    4f42:	3b01      	subs	r3, #1
    4f44:	e7d1      	b.n	4eea <__tzcalc_limits+0x112>
    4f46:	f1bb 0f00 	cmp.w	fp, #0
    4f4a:	d1f5      	bne.n	4f38 <__tzcalc_limits+0x160>
    4f4c:	465a      	mov	r2, fp
    4f4e:	e7f7      	b.n	4f40 <__tzcalc_limits+0x168>
    4f50:	6963      	ldr	r3, [r4, #20]
    4f52:	4443      	add	r3, r8
    4f54:	e7c9      	b.n	4eea <__tzcalc_limits+0x112>
    4f56:	2700      	movs	r7, #0
    4f58:	4641      	mov	r1, r8
    4f5a:	9700      	str	r7, [sp, #0]
    4f5c:	e7a1      	b.n	4ea2 <__tzcalc_limits+0xca>
    4f5e:	bf00      	nop
    4f60:	51eb851f 	.word	0x51eb851f
    4f64:	0000ab74 	.word	0x0000ab74
    4f68:	92492493 	.word	0x92492493
    4f6c:	00015180 	.word	0x00015180

00004f70 <_mktm_r>:
    4f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f74:	4680      	mov	r8, r0
    4f76:	460e      	mov	r6, r1
    4f78:	4617      	mov	r7, r2
    4f7a:	f002 fec1 	bl	7d00 <__gettzinfo>
    4f7e:	f8d8 2000 	ldr.w	r2, [r8]
    4f82:	4bb5      	ldr	r3, [pc, #724]	; (5258 <_mktm_r+0x2e8>)
    4f84:	4682      	mov	sl, r0
    4f86:	fb83 0302 	smull	r0, r3, r3, r2
    4f8a:	17d1      	asrs	r1, r2, #31
    4f8c:	4cb3      	ldr	r4, [pc, #716]	; (525c <_mktm_r+0x2ec>)
    4f8e:	4413      	add	r3, r2
    4f90:	ebc1 4323 	rsb	r3, r1, r3, asr #16
    4f94:	fb04 2413 	mls	r4, r4, r3, r2
    4f98:	2c00      	cmp	r4, #0
    4f9a:	da04      	bge.n	4fa6 <_mktm_r+0x36>
    4f9c:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
    4fa0:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    4fa4:	3b01      	subs	r3, #1
    4fa6:	49ae      	ldr	r1, [pc, #696]	; (5260 <_mktm_r+0x2f0>)
    4fa8:	17e2      	asrs	r2, r4, #31
    4faa:	fb81 9c04 	smull	r9, ip, r1, r4
    4fae:	44a4      	add	ip, r4
    4fb0:	ebc2 2cec 	rsb	ip, r2, ip, asr #11
    4fb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    4fb8:	fb01 411c 	mls	r1, r1, ip, r4
    4fbc:	48a9      	ldr	r0, [pc, #676]	; (5264 <_mktm_r+0x2f4>)
    4fbe:	4caa      	ldr	r4, [pc, #680]	; (5268 <_mktm_r+0x2f8>)
    4fc0:	1d1a      	adds	r2, r3, #4
    4fc2:	fb80 b001 	smull	fp, r0, r0, r1
    4fc6:	fb82 4504 	smull	r4, r5, r2, r4
    4fca:	1844      	adds	r4, r0, r1
    4fcc:	17c8      	asrs	r0, r1, #31
    4fce:	ebc0 1464 	rsb	r4, r0, r4, asr #5
    4fd2:	eb02 0905 	add.w	r9, r2, r5
    4fd6:	17d0      	asrs	r0, r2, #31
    4fd8:	ebc0 00a9 	rsb	r0, r0, r9, asr #2
    4fdc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4fe0:	1a10      	subs	r0, r2, r0
    4fe2:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
    4fe6:	bf48      	it	mi
    4fe8:	3007      	addmi	r0, #7
    4fea:	eba1 0185 	sub.w	r1, r1, r5, lsl #2
    4fee:	2b00      	cmp	r3, #0
    4ff0:	e886 1012 	stmia.w	r6, {r1, r4, ip}
    4ff4:	61b0      	str	r0, [r6, #24]
    4ff6:	4d9d      	ldr	r5, [pc, #628]	; (526c <_mktm_r+0x2fc>)
    4ff8:	489d      	ldr	r0, [pc, #628]	; (5270 <_mktm_r+0x300>)
    4ffa:	f240 74b2 	movw	r4, #1970	; 0x7b2
    4ffe:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    5002:	f2c0 80a5 	blt.w	5150 <_mktm_r+0x1e0>
    5006:	f04f 0b64 	mov.w	fp, #100	; 0x64
    500a:	e010      	b.n	502e <_mktm_r+0xbe>
    500c:	17e2      	asrs	r2, r4, #31
    500e:	fb85 9104 	smull	r9, r1, r5, r4
    5012:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
    5016:	fb0c 4212 	mls	r2, ip, r2, r4
    501a:	f1d2 0201 	rsbs	r2, r2, #1
    501e:	bf38      	it	cc
    5020:	2200      	movcc	r2, #0
    5022:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    5026:	428b      	cmp	r3, r1
    5028:	db11      	blt.n	504e <_mktm_r+0xde>
    502a:	3401      	adds	r4, #1
    502c:	1a5b      	subs	r3, r3, r1
    502e:	07a2      	lsls	r2, r4, #30
    5030:	d1ec      	bne.n	500c <_mktm_r+0x9c>
    5032:	fb85 2104 	smull	r2, r1, r5, r4
    5036:	17e2      	asrs	r2, r4, #31
    5038:	ebc2 1161 	rsb	r1, r2, r1, asr #5
    503c:	fb0b 4111 	mls	r1, fp, r1, r4
    5040:	2900      	cmp	r1, #0
    5042:	d0e4      	beq.n	500e <_mktm_r+0x9e>
    5044:	2201      	movs	r2, #1
    5046:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    504a:	428b      	cmp	r3, r1
    504c:	daed      	bge.n	502a <_mktm_r+0xba>
    504e:	ea4f 0942 	mov.w	r9, r2, lsl #1
    5052:	444a      	add	r2, r9
    5054:	f2a4 756c 	subw	r5, r4, #1900	; 0x76c
    5058:	4986      	ldr	r1, [pc, #536]	; (5274 <_mktm_r+0x304>)
    505a:	2000      	movs	r0, #0
    505c:	0112      	lsls	r2, r2, #4
    505e:	61f3      	str	r3, [r6, #28]
    5060:	6175      	str	r5, [r6, #20]
    5062:	6130      	str	r0, [r6, #16]
    5064:	588d      	ldr	r5, [r1, r2]
    5066:	eb01 0902 	add.w	r9, r1, r2
    506a:	42ab      	cmp	r3, r5
    506c:	db08      	blt.n	5080 <_mktm_r+0x110>
    506e:	4649      	mov	r1, r9
    5070:	2201      	movs	r2, #1
    5072:	6132      	str	r2, [r6, #16]
    5074:	1b5b      	subs	r3, r3, r5
    5076:	f851 5f04 	ldr.w	r5, [r1, #4]!
    507a:	3201      	adds	r2, #1
    507c:	429d      	cmp	r5, r3
    507e:	ddf8      	ble.n	5072 <_mktm_r+0x102>
    5080:	3301      	adds	r3, #1
    5082:	60f3      	str	r3, [r6, #12]
    5084:	b127      	cbz	r7, 5090 <_mktm_r+0x120>
    5086:	2300      	movs	r3, #0
    5088:	6233      	str	r3, [r6, #32]
    508a:	4630      	mov	r0, r6
    508c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5090:	f001 fd96 	bl	6bc0 <__tz_lock>
    5094:	4b78      	ldr	r3, [pc, #480]	; (5278 <_mktm_r+0x308>)
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	2b00      	cmp	r3, #0
    509a:	d17a      	bne.n	5192 <_mktm_r+0x222>
    509c:	6237      	str	r7, [r6, #32]
    509e:	f8da 0020 	ldr.w	r0, [sl, #32]
    50a2:	4f6f      	ldr	r7, [pc, #444]	; (5260 <_mktm_r+0x2f0>)
    50a4:	17c5      	asrs	r5, r0, #31
    50a6:	fb80 2307 	smull	r2, r3, r0, r7
    50aa:	18c1      	adds	r1, r0, r3
    50ac:	ebc5 21e1 	rsb	r1, r5, r1, asr #11
    50b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    50b4:	fb03 0111 	mls	r1, r3, r1, r0
    50b8:	4c6a      	ldr	r4, [pc, #424]	; (5264 <_mktm_r+0x2f4>)
    50ba:	fb87 2e00 	smull	r2, lr, r7, r0
    50be:	fb81 2304 	smull	r2, r3, r1, r4
    50c2:	fb84 7201 	smull	r7, r2, r4, r1
    50c6:	17cc      	asrs	r4, r1, #31
    50c8:	18cf      	adds	r7, r1, r3
    50ca:	ebc4 1767 	rsb	r7, r4, r7, asr #5
    50ce:	440a      	add	r2, r1
    50d0:	eb0e 0300 	add.w	r3, lr, r0
    50d4:	ebc4 1262 	rsb	r2, r4, r2, asr #5
    50d8:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
    50dc:	6834      	ldr	r4, [r6, #0]
    50de:	6877      	ldr	r7, [r6, #4]
    50e0:	68b0      	ldr	r0, [r6, #8]
    50e2:	eba1 018e 	sub.w	r1, r1, lr, lsl #2
    50e6:	1a61      	subs	r1, r4, r1
    50e8:	ebc5 23e3 	rsb	r3, r5, r3, asr #11
    50ec:	1ac3      	subs	r3, r0, r3
    50ee:	1aba      	subs	r2, r7, r2
    50f0:	293b      	cmp	r1, #59	; 0x3b
    50f2:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    50f6:	dd68      	ble.n	51ca <_mktm_r+0x25a>
    50f8:	3201      	adds	r2, #1
    50fa:	393c      	subs	r1, #60	; 0x3c
    50fc:	e886 0006 	stmia.w	r6, {r1, r2}
    5100:	2a3b      	cmp	r2, #59	; 0x3b
    5102:	f340 8083 	ble.w	520c <_mktm_r+0x29c>
    5106:	3301      	adds	r3, #1
    5108:	3a3c      	subs	r2, #60	; 0x3c
    510a:	60b3      	str	r3, [r6, #8]
    510c:	6072      	str	r2, [r6, #4]
    510e:	2b17      	cmp	r3, #23
    5110:	dd62      	ble.n	51d8 <_mktm_r+0x268>
    5112:	69b2      	ldr	r2, [r6, #24]
    5114:	69f1      	ldr	r1, [r6, #28]
    5116:	3201      	adds	r2, #1
    5118:	2a06      	cmp	r2, #6
    511a:	bfc8      	it	gt
    511c:	2200      	movgt	r2, #0
    511e:	61b2      	str	r2, [r6, #24]
    5120:	68f2      	ldr	r2, [r6, #12]
    5122:	3101      	adds	r1, #1
    5124:	61f1      	str	r1, [r6, #28]
    5126:	3b18      	subs	r3, #24
    5128:	3201      	adds	r2, #1
    512a:	6931      	ldr	r1, [r6, #16]
    512c:	60b3      	str	r3, [r6, #8]
    512e:	60f2      	str	r2, [r6, #12]
    5130:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
    5134:	429a      	cmp	r2, r3
    5136:	dd06      	ble.n	5146 <_mktm_r+0x1d6>
    5138:	3101      	adds	r1, #1
    513a:	1ad3      	subs	r3, r2, r3
    513c:	290c      	cmp	r1, #12
    513e:	60f3      	str	r3, [r6, #12]
    5140:	f000 8083 	beq.w	524a <_mktm_r+0x2da>
    5144:	6131      	str	r1, [r6, #16]
    5146:	f001 fd3d 	bl	6bc4 <__tz_unlock>
    514a:	4630      	mov	r0, r6
    514c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5150:	f04f 0964 	mov.w	r9, #100	; 0x64
    5154:	e00f      	b.n	5176 <_mktm_r+0x206>
    5156:	17e2      	asrs	r2, r4, #31
    5158:	fb85 b104 	smull	fp, r1, r5, r4
    515c:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
    5160:	fb0c 4212 	mls	r2, ip, r2, r4
    5164:	f1d2 0201 	rsbs	r2, r2, #1
    5168:	bf38      	it	cc
    516a:	2200      	movcc	r2, #0
    516c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    5170:	185b      	adds	r3, r3, r1
    5172:	f57f af6c 	bpl.w	504e <_mktm_r+0xde>
    5176:	3c01      	subs	r4, #1
    5178:	07a1      	lsls	r1, r4, #30
    517a:	d1ec      	bne.n	5156 <_mktm_r+0x1e6>
    517c:	fb85 b104 	smull	fp, r1, r5, r4
    5180:	17e2      	asrs	r2, r4, #31
    5182:	ebc2 1161 	rsb	r1, r2, r1, asr #5
    5186:	fb09 4111 	mls	r1, r9, r1, r4
    518a:	2900      	cmp	r1, #0
    518c:	d0e4      	beq.n	5158 <_mktm_r+0x1e8>
    518e:	2201      	movs	r2, #1
    5190:	e7ec      	b.n	516c <_mktm_r+0x1fc>
    5192:	f8da 3004 	ldr.w	r3, [sl, #4]
    5196:	42a3      	cmp	r3, r4
    5198:	d004      	beq.n	51a4 <_mktm_r+0x234>
    519a:	4620      	mov	r0, r4
    519c:	f7ff fe1c 	bl	4dd8 <__tzcalc_limits>
    51a0:	2800      	cmp	r0, #0
    51a2:	d04b      	beq.n	523c <_mktm_r+0x2cc>
    51a4:	f8da 3000 	ldr.w	r3, [sl]
    51a8:	2b00      	cmp	r3, #0
    51aa:	d037      	beq.n	521c <_mktm_r+0x2ac>
    51ac:	f8d8 3000 	ldr.w	r3, [r8]
    51b0:	f8da 201c 	ldr.w	r2, [sl, #28]
    51b4:	4293      	cmp	r3, r2
    51b6:	db45      	blt.n	5244 <_mktm_r+0x2d4>
    51b8:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
    51bc:	4293      	cmp	r3, r2
    51be:	da41      	bge.n	5244 <_mktm_r+0x2d4>
    51c0:	2301      	movs	r3, #1
    51c2:	6233      	str	r3, [r6, #32]
    51c4:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
    51c8:	e76b      	b.n	50a2 <_mktm_r+0x132>
    51ca:	2900      	cmp	r1, #0
    51cc:	da98      	bge.n	5100 <_mktm_r+0x190>
    51ce:	3a01      	subs	r2, #1
    51d0:	313c      	adds	r1, #60	; 0x3c
    51d2:	e886 0006 	stmia.w	r6, {r1, r2}
    51d6:	e793      	b.n	5100 <_mktm_r+0x190>
    51d8:	2b00      	cmp	r3, #0
    51da:	dab4      	bge.n	5146 <_mktm_r+0x1d6>
    51dc:	69b2      	ldr	r2, [r6, #24]
    51de:	69f1      	ldr	r1, [r6, #28]
    51e0:	3a01      	subs	r2, #1
    51e2:	bf48      	it	mi
    51e4:	2206      	movmi	r2, #6
    51e6:	61b2      	str	r2, [r6, #24]
    51e8:	68f2      	ldr	r2, [r6, #12]
    51ea:	3901      	subs	r1, #1
    51ec:	3318      	adds	r3, #24
    51ee:	3a01      	subs	r2, #1
    51f0:	61f1      	str	r1, [r6, #28]
    51f2:	60b3      	str	r3, [r6, #8]
    51f4:	60f2      	str	r2, [r6, #12]
    51f6:	2a00      	cmp	r2, #0
    51f8:	d1a5      	bne.n	5146 <_mktm_r+0x1d6>
    51fa:	6933      	ldr	r3, [r6, #16]
    51fc:	3b01      	subs	r3, #1
    51fe:	d43d      	bmi.n	527c <_mktm_r+0x30c>
    5200:	6133      	str	r3, [r6, #16]
    5202:	009b      	lsls	r3, r3, #2
    5204:	f859 3003 	ldr.w	r3, [r9, r3]
    5208:	60f3      	str	r3, [r6, #12]
    520a:	e79c      	b.n	5146 <_mktm_r+0x1d6>
    520c:	2a00      	cmp	r2, #0
    520e:	f6bf af7e 	bge.w	510e <_mktm_r+0x19e>
    5212:	3b01      	subs	r3, #1
    5214:	323c      	adds	r2, #60	; 0x3c
    5216:	60b3      	str	r3, [r6, #8]
    5218:	6072      	str	r2, [r6, #4]
    521a:	e778      	b.n	510e <_mktm_r+0x19e>
    521c:	f8d8 3000 	ldr.w	r3, [r8]
    5220:	f8da 201c 	ldr.w	r2, [sl, #28]
    5224:	4293      	cmp	r3, r2
    5226:	dacb      	bge.n	51c0 <_mktm_r+0x250>
    5228:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
    522c:	4293      	cmp	r3, r2
    522e:	bfac      	ite	ge
    5230:	2300      	movge	r3, #0
    5232:	2301      	movlt	r3, #1
    5234:	6233      	str	r3, [r6, #32]
    5236:	2b00      	cmp	r3, #0
    5238:	d1c4      	bne.n	51c4 <_mktm_r+0x254>
    523a:	e730      	b.n	509e <_mktm_r+0x12e>
    523c:	f04f 33ff 	mov.w	r3, #4294967295
    5240:	6233      	str	r3, [r6, #32]
    5242:	e72c      	b.n	509e <_mktm_r+0x12e>
    5244:	2300      	movs	r3, #0
    5246:	6233      	str	r3, [r6, #32]
    5248:	e729      	b.n	509e <_mktm_r+0x12e>
    524a:	6972      	ldr	r2, [r6, #20]
    524c:	2300      	movs	r3, #0
    524e:	3201      	adds	r2, #1
    5250:	6172      	str	r2, [r6, #20]
    5252:	6133      	str	r3, [r6, #16]
    5254:	61f3      	str	r3, [r6, #28]
    5256:	e776      	b.n	5146 <_mktm_r+0x1d6>
    5258:	c22e4507 	.word	0xc22e4507
    525c:	00015180 	.word	0x00015180
    5260:	91a2b3c5 	.word	0x91a2b3c5
    5264:	88888889 	.word	0x88888889
    5268:	92492493 	.word	0x92492493
    526c:	51eb851f 	.word	0x51eb851f
    5270:	0000abd4 	.word	0x0000abd4
    5274:	0000ab74 	.word	0x0000ab74
    5278:	20000f6c 	.word	0x20000f6c
    527c:	6973      	ldr	r3, [r6, #20]
    527e:	210b      	movs	r1, #11
    5280:	1e5a      	subs	r2, r3, #1
    5282:	6172      	str	r2, [r6, #20]
    5284:	0792      	lsls	r2, r2, #30
    5286:	6131      	str	r1, [r6, #16]
    5288:	d014      	beq.n	52b4 <_mktm_r+0x344>
    528a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
    528e:	17da      	asrs	r2, r3, #31
    5290:	4810      	ldr	r0, [pc, #64]	; (52d4 <_mktm_r+0x364>)
    5292:	f44f 71c8 	mov.w	r1, #400	; 0x190
    5296:	fb80 b003 	smull	fp, r0, r0, r3
    529a:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
    529e:	fb01 3312 	mls	r3, r1, r2, r3
    52a2:	f1d3 0301 	rsbs	r3, r3, #1
    52a6:	bf38      	it	cc
    52a8:	2300      	movcc	r3, #0
    52aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
    52ae:	61f3      	str	r3, [r6, #28]
    52b0:	232c      	movs	r3, #44	; 0x2c
    52b2:	e7a7      	b.n	5204 <_mktm_r+0x294>
    52b4:	4907      	ldr	r1, [pc, #28]	; (52d4 <_mktm_r+0x364>)
    52b6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
    52ba:	fb81 7103 	smull	r7, r1, r1, r3
    52be:	17da      	asrs	r2, r3, #31
    52c0:	ebc2 1161 	rsb	r1, r2, r1, asr #5
    52c4:	2064      	movs	r0, #100	; 0x64
    52c6:	fb00 3111 	mls	r1, r0, r1, r3
    52ca:	2900      	cmp	r1, #0
    52cc:	d0e0      	beq.n	5290 <_mktm_r+0x320>
    52ce:	f240 136d 	movw	r3, #365	; 0x16d
    52d2:	e7ec      	b.n	52ae <_mktm_r+0x33e>
    52d4:	51eb851f 	.word	0x51eb851f

000052d8 <sprintf>:
    52d8:	b40e      	push	{r1, r2, r3}
    52da:	b5f0      	push	{r4, r5, r6, r7, lr}
    52dc:	b09c      	sub	sp, #112	; 0x70
    52de:	ac21      	add	r4, sp, #132	; 0x84
    52e0:	f854 2b04 	ldr.w	r2, [r4], #4
    52e4:	490e      	ldr	r1, [pc, #56]	; (5320 <sprintf+0x48>)
    52e6:	4606      	mov	r6, r0
    52e8:	4623      	mov	r3, r4
    52ea:	f44f 7e02 	mov.w	lr, #520	; 0x208
    52ee:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    52f2:	6808      	ldr	r0, [r1, #0]
    52f4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    52f8:	a902      	add	r1, sp, #8
    52fa:	9602      	str	r6, [sp, #8]
    52fc:	9606      	str	r6, [sp, #24]
    52fe:	9401      	str	r4, [sp, #4]
    5300:	f8ad e014 	strh.w	lr, [sp, #20]
    5304:	9504      	str	r5, [sp, #16]
    5306:	9507      	str	r5, [sp, #28]
    5308:	f8ad 7016 	strh.w	r7, [sp, #22]
    530c:	f000 f9e8 	bl	56e0 <_svfprintf_r>
    5310:	9b02      	ldr	r3, [sp, #8]
    5312:	2200      	movs	r2, #0
    5314:	701a      	strb	r2, [r3, #0]
    5316:	b01c      	add	sp, #112	; 0x70
    5318:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    531c:	b003      	add	sp, #12
    531e:	4770      	bx	lr
    5320:	200004b8 	.word	0x200004b8

00005324 <strcmp>:
    5324:	ea40 0c01 	orr.w	ip, r0, r1
    5328:	f01c 0f07 	tst.w	ip, #7
    532c:	d127      	bne.n	537e <strcmp+0x5a>
    532e:	f1bd 0d10 	subs.w	sp, sp, #16
    5332:	e9cd 4502 	strd	r4, r5, [sp, #8]
    5336:	e9cd 6700 	strd	r6, r7, [sp]
    533a:	f06f 0600 	mvn.w	r6, #0
    533e:	f04f 0700 	mov.w	r7, #0
    5342:	bf00      	nop
    5344:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5348:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    534c:	42a2      	cmp	r2, r4
    534e:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    5352:	ea2c 0c02 	bic.w	ip, ip, r2
    5356:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    535a:	bf08      	it	eq
    535c:	f1bc 0f00 	cmpeq.w	ip, #0
    5360:	f040 80e5 	bne.w	552e <strcmp+0x20a>
    5364:	42ab      	cmp	r3, r5
    5366:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    536a:	ea2c 0c03 	bic.w	ip, ip, r3
    536e:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    5372:	bf08      	it	eq
    5374:	f1bc 0f00 	cmpeq.w	ip, #0
    5378:	f040 80d6 	bne.w	5528 <strcmp+0x204>
    537c:	e7e2      	b.n	5344 <strcmp+0x20>
    537e:	f010 0c03 	ands.w	ip, r0, #3
    5382:	d021      	beq.n	53c8 <strcmp+0xa4>
    5384:	f020 0003 	bic.w	r0, r0, #3
    5388:	f850 2b04 	ldr.w	r2, [r0], #4
    538c:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
    5390:	d008      	beq.n	53a4 <strcmp+0x80>
    5392:	d20f      	bcs.n	53b4 <strcmp+0x90>
    5394:	f811 cb01 	ldrb.w	ip, [r1], #1
    5398:	fa5f f392 	uxtb.w	r3, r2, ror #8
    539c:	ebb3 0c0c 	subs.w	ip, r3, ip
    53a0:	d110      	bne.n	53c4 <strcmp+0xa0>
    53a2:	b17b      	cbz	r3, 53c4 <strcmp+0xa0>
    53a4:	f811 cb01 	ldrb.w	ip, [r1], #1
    53a8:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
    53ac:	ebb3 0c0c 	subs.w	ip, r3, ip
    53b0:	d108      	bne.n	53c4 <strcmp+0xa0>
    53b2:	b13b      	cbz	r3, 53c4 <strcmp+0xa0>
    53b4:	f811 cb01 	ldrb.w	ip, [r1], #1
    53b8:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
    53bc:	ebb3 0c0c 	subs.w	ip, r3, ip
    53c0:	d100      	bne.n	53c4 <strcmp+0xa0>
    53c2:	b90b      	cbnz	r3, 53c8 <strcmp+0xa4>
    53c4:	4660      	mov	r0, ip
    53c6:	4770      	bx	lr
    53c8:	f1bd 0d10 	subs.w	sp, sp, #16
    53cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    53d0:	e9cd 6700 	strd	r6, r7, [sp]
    53d4:	f06f 0600 	mvn.w	r6, #0
    53d8:	f04f 0700 	mov.w	r7, #0
    53dc:	f011 0c03 	ands.w	ip, r1, #3
    53e0:	d133      	bne.n	544a <strcmp+0x126>
    53e2:	f010 0f04 	tst.w	r0, #4
    53e6:	d00f      	beq.n	5408 <strcmp+0xe4>
    53e8:	f850 2b04 	ldr.w	r2, [r0], #4
    53ec:	f851 4b04 	ldr.w	r4, [r1], #4
    53f0:	42a2      	cmp	r2, r4
    53f2:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    53f6:	ea2c 0c02 	bic.w	ip, ip, r2
    53fa:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    53fe:	bf08      	it	eq
    5400:	f1bc 0f00 	cmpeq.w	ip, #0
    5404:	f040 8093 	bne.w	552e <strcmp+0x20a>
    5408:	f011 0f04 	tst.w	r1, #4
    540c:	d099      	beq.n	5342 <strcmp+0x1e>
    540e:	f851 5b04 	ldr.w	r5, [r1], #4
    5412:	bf00      	nop
    5414:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5418:	42aa      	cmp	r2, r5
    541a:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    541e:	ea2c 0c02 	bic.w	ip, ip, r2
    5422:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    5426:	bf08      	it	eq
    5428:	f1bc 0f00 	cmpeq.w	ip, #0
    542c:	d179      	bne.n	5522 <strcmp+0x1fe>
    542e:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    5432:	42a3      	cmp	r3, r4
    5434:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    5438:	ea2c 0c03 	bic.w	ip, ip, r3
    543c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    5440:	bf08      	it	eq
    5442:	f1bc 0f00 	cmpeq.w	ip, #0
    5446:	d169      	bne.n	551c <strcmp+0x1f8>
    5448:	e7e4      	b.n	5414 <strcmp+0xf0>
    544a:	f021 0103 	bic.w	r1, r1, #3
    544e:	f1bc 0f02 	cmp.w	ip, #2
    5452:	d020      	beq.n	5496 <strcmp+0x172>
    5454:	da3f      	bge.n	54d6 <strcmp+0x1b2>
    5456:	f851 5b04 	ldr.w	r5, [r1], #4
    545a:	bf00      	nop
    545c:	f850 3b04 	ldr.w	r3, [r0], #4
    5460:	ea4f 2515 	mov.w	r5, r5, lsr #8
    5464:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    5468:	ea2c 0c03 	bic.w	ip, ip, r3
    546c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    5470:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
    5474:	ea03 2216 	and.w	r2, r3, r6, lsr #8
    5478:	bf08      	it	eq
    547a:	42aa      	cmpeq	r2, r5
    547c:	d151      	bne.n	5522 <strcmp+0x1fe>
    547e:	f851 5b04 	ldr.w	r5, [r1], #4
    5482:	f1bc 0f00 	cmp.w	ip, #0
    5486:	ea82 0303 	eor.w	r3, r2, r3
    548a:	ea4f 6205 	mov.w	r2, r5, lsl #24
    548e:	bf08      	it	eq
    5490:	4293      	cmpeq	r3, r2
    5492:	d140      	bne.n	5516 <strcmp+0x1f2>
    5494:	e7e2      	b.n	545c <strcmp+0x138>
    5496:	f851 5b04 	ldr.w	r5, [r1], #4
    549a:	bf00      	nop
    549c:	f850 3b04 	ldr.w	r3, [r0], #4
    54a0:	ea4f 4515 	mov.w	r5, r5, lsr #16
    54a4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    54a8:	ea2c 0c03 	bic.w	ip, ip, r3
    54ac:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    54b0:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
    54b4:	ea03 4216 	and.w	r2, r3, r6, lsr #16
    54b8:	bf08      	it	eq
    54ba:	42aa      	cmpeq	r2, r5
    54bc:	d131      	bne.n	5522 <strcmp+0x1fe>
    54be:	f851 5b04 	ldr.w	r5, [r1], #4
    54c2:	f1bc 0f00 	cmp.w	ip, #0
    54c6:	ea82 0303 	eor.w	r3, r2, r3
    54ca:	ea4f 4205 	mov.w	r2, r5, lsl #16
    54ce:	bf08      	it	eq
    54d0:	4293      	cmpeq	r3, r2
    54d2:	d120      	bne.n	5516 <strcmp+0x1f2>
    54d4:	e7e2      	b.n	549c <strcmp+0x178>
    54d6:	f851 5b04 	ldr.w	r5, [r1], #4
    54da:	bf00      	nop
    54dc:	f850 3b04 	ldr.w	r3, [r0], #4
    54e0:	ea4f 6515 	mov.w	r5, r5, lsr #24
    54e4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    54e8:	ea2c 0c03 	bic.w	ip, ip, r3
    54ec:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    54f0:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
    54f4:	ea03 6216 	and.w	r2, r3, r6, lsr #24
    54f8:	bf08      	it	eq
    54fa:	42aa      	cmpeq	r2, r5
    54fc:	d111      	bne.n	5522 <strcmp+0x1fe>
    54fe:	f851 5b04 	ldr.w	r5, [r1], #4
    5502:	f1bc 0f00 	cmp.w	ip, #0
    5506:	ea82 0303 	eor.w	r3, r2, r3
    550a:	ea4f 2205 	mov.w	r2, r5, lsl #8
    550e:	bf08      	it	eq
    5510:	4293      	cmpeq	r3, r2
    5512:	d100      	bne.n	5516 <strcmp+0x1f2>
    5514:	e7e2      	b.n	54dc <strcmp+0x1b8>
    5516:	ba19      	rev	r1, r3
    5518:	ba12      	rev	r2, r2
    551a:	e00a      	b.n	5532 <strcmp+0x20e>
    551c:	ba19      	rev	r1, r3
    551e:	ba22      	rev	r2, r4
    5520:	e007      	b.n	5532 <strcmp+0x20e>
    5522:	ba11      	rev	r1, r2
    5524:	ba2a      	rev	r2, r5
    5526:	e004      	b.n	5532 <strcmp+0x20e>
    5528:	ba19      	rev	r1, r3
    552a:	ba2a      	rev	r2, r5
    552c:	e001      	b.n	5532 <strcmp+0x20e>
    552e:	ba11      	rev	r1, r2
    5530:	ba22      	rev	r2, r4
    5532:	fa9c f08c 	rev.w	r0, ip
    5536:	e9dd 6700 	ldrd	r6, r7, [sp]
    553a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    553e:	f11d 0d10 	adds.w	sp, sp, #16
    5542:	b138      	cbz	r0, 5554 <strcmp+0x230>
    5544:	fab0 f080 	clz	r0, r0
    5548:	f1c0 0018 	rsb	r0, r0, #24
    554c:	fa21 f100 	lsr.w	r1, r1, r0
    5550:	fa22 f200 	lsr.w	r2, r2, r0
    5554:	2001      	movs	r0, #1
    5556:	4291      	cmp	r1, r2
    5558:	bf98      	it	ls
    555a:	4180      	sbcls	r0, r0
    555c:	4770      	bx	lr
    555e:	bf00      	nop

00005560 <strcpy>:
    5560:	ea80 0201 	eor.w	r2, r0, r1
    5564:	4684      	mov	ip, r0
    5566:	f012 0f03 	tst.w	r2, #3
    556a:	d14f      	bne.n	560c <strcpy+0xac>
    556c:	f011 0f03 	tst.w	r1, #3
    5570:	d132      	bne.n	55d8 <strcpy+0x78>
    5572:	f84d 4d04 	str.w	r4, [sp, #-4]!
    5576:	f011 0f04 	tst.w	r1, #4
    557a:	f851 3b04 	ldr.w	r3, [r1], #4
    557e:	d00b      	beq.n	5598 <strcpy+0x38>
    5580:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    5584:	439a      	bics	r2, r3
    5586:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    558a:	bf04      	itt	eq
    558c:	f84c 3b04 	streq.w	r3, [ip], #4
    5590:	f851 3b04 	ldreq.w	r3, [r1], #4
    5594:	d116      	bne.n	55c4 <strcpy+0x64>
    5596:	bf00      	nop
    5598:	f851 4b04 	ldr.w	r4, [r1], #4
    559c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    55a0:	439a      	bics	r2, r3
    55a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    55a6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    55aa:	d10b      	bne.n	55c4 <strcpy+0x64>
    55ac:	f84c 3b04 	str.w	r3, [ip], #4
    55b0:	43a2      	bics	r2, r4
    55b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    55b6:	bf04      	itt	eq
    55b8:	f851 3b04 	ldreq.w	r3, [r1], #4
    55bc:	f84c 4b04 	streq.w	r4, [ip], #4
    55c0:	d0ea      	beq.n	5598 <strcpy+0x38>
    55c2:	4623      	mov	r3, r4
    55c4:	f80c 3b01 	strb.w	r3, [ip], #1
    55c8:	f013 0fff 	tst.w	r3, #255	; 0xff
    55cc:	ea4f 2333 	mov.w	r3, r3, ror #8
    55d0:	d1f8      	bne.n	55c4 <strcpy+0x64>
    55d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    55d6:	4770      	bx	lr
    55d8:	f011 0f01 	tst.w	r1, #1
    55dc:	d006      	beq.n	55ec <strcpy+0x8c>
    55de:	f811 2b01 	ldrb.w	r2, [r1], #1
    55e2:	f80c 2b01 	strb.w	r2, [ip], #1
    55e6:	2a00      	cmp	r2, #0
    55e8:	bf08      	it	eq
    55ea:	4770      	bxeq	lr
    55ec:	f011 0f02 	tst.w	r1, #2
    55f0:	d0bf      	beq.n	5572 <strcpy+0x12>
    55f2:	f831 2b02 	ldrh.w	r2, [r1], #2
    55f6:	f012 0fff 	tst.w	r2, #255	; 0xff
    55fa:	bf16      	itet	ne
    55fc:	f82c 2b02 	strhne.w	r2, [ip], #2
    5600:	f88c 2000 	strbeq.w	r2, [ip]
    5604:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    5608:	d1b3      	bne.n	5572 <strcpy+0x12>
    560a:	4770      	bx	lr
    560c:	f811 2b01 	ldrb.w	r2, [r1], #1
    5610:	f80c 2b01 	strb.w	r2, [ip], #1
    5614:	2a00      	cmp	r2, #0
    5616:	d1f9      	bne.n	560c <strcpy+0xac>
    5618:	4770      	bx	lr
    561a:	bf00      	nop

0000561c <strlen>:
    561c:	f020 0103 	bic.w	r1, r0, #3
    5620:	f010 0003 	ands.w	r0, r0, #3
    5624:	f1c0 0000 	rsb	r0, r0, #0
    5628:	f851 3b04 	ldr.w	r3, [r1], #4
    562c:	f100 0c04 	add.w	ip, r0, #4
    5630:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5634:	f06f 0200 	mvn.w	r2, #0
    5638:	bf1c      	itt	ne
    563a:	fa22 f20c 	lsrne.w	r2, r2, ip
    563e:	4313      	orrne	r3, r2
    5640:	f04f 0c01 	mov.w	ip, #1
    5644:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    5648:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    564c:	eba3 020c 	sub.w	r2, r3, ip
    5650:	ea22 0203 	bic.w	r2, r2, r3
    5654:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    5658:	bf04      	itt	eq
    565a:	f851 3b04 	ldreq.w	r3, [r1], #4
    565e:	3004      	addeq	r0, #4
    5660:	d0f4      	beq.n	564c <strlen+0x30>
    5662:	f013 0fff 	tst.w	r3, #255	; 0xff
    5666:	bf1f      	itttt	ne
    5668:	3001      	addne	r0, #1
    566a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    566e:	3001      	addne	r0, #1
    5670:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    5674:	bf18      	it	ne
    5676:	3001      	addne	r0, #1
    5678:	4770      	bx	lr
    567a:	bf00      	nop

0000567c <strncpy>:
    567c:	ea40 0301 	orr.w	r3, r0, r1
    5680:	079b      	lsls	r3, r3, #30
    5682:	b470      	push	{r4, r5, r6}
    5684:	d12a      	bne.n	56dc <strncpy+0x60>
    5686:	2a03      	cmp	r2, #3
    5688:	d928      	bls.n	56dc <strncpy+0x60>
    568a:	460c      	mov	r4, r1
    568c:	4603      	mov	r3, r0
    568e:	4621      	mov	r1, r4
    5690:	f854 5b04 	ldr.w	r5, [r4], #4
    5694:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
    5698:	ea26 0605 	bic.w	r6, r6, r5
    569c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    56a0:	d105      	bne.n	56ae <strncpy+0x32>
    56a2:	3a04      	subs	r2, #4
    56a4:	2a03      	cmp	r2, #3
    56a6:	f843 5b04 	str.w	r5, [r3], #4
    56aa:	4621      	mov	r1, r4
    56ac:	d8ef      	bhi.n	568e <strncpy+0x12>
    56ae:	b19a      	cbz	r2, 56d8 <strncpy+0x5c>
    56b0:	780c      	ldrb	r4, [r1, #0]
    56b2:	3a01      	subs	r2, #1
    56b4:	701c      	strb	r4, [r3, #0]
    56b6:	3301      	adds	r3, #1
    56b8:	b13c      	cbz	r4, 56ca <strncpy+0x4e>
    56ba:	b16a      	cbz	r2, 56d8 <strncpy+0x5c>
    56bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    56c0:	3a01      	subs	r2, #1
    56c2:	f803 4b01 	strb.w	r4, [r3], #1
    56c6:	2c00      	cmp	r4, #0
    56c8:	d1f7      	bne.n	56ba <strncpy+0x3e>
    56ca:	b12a      	cbz	r2, 56d8 <strncpy+0x5c>
    56cc:	441a      	add	r2, r3
    56ce:	2100      	movs	r1, #0
    56d0:	f803 1b01 	strb.w	r1, [r3], #1
    56d4:	4293      	cmp	r3, r2
    56d6:	d1fb      	bne.n	56d0 <strncpy+0x54>
    56d8:	bc70      	pop	{r4, r5, r6}
    56da:	4770      	bx	lr
    56dc:	4603      	mov	r3, r0
    56de:	e7e6      	b.n	56ae <strncpy+0x32>

000056e0 <_svfprintf_r>:
    56e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56e4:	b0c9      	sub	sp, #292	; 0x124
    56e6:	9310      	str	r3, [sp, #64]	; 0x40
    56e8:	910c      	str	r1, [sp, #48]	; 0x30
    56ea:	4691      	mov	r9, r2
    56ec:	900d      	str	r0, [sp, #52]	; 0x34
    56ee:	f002 fb0b 	bl	7d08 <_localeconv_r>
    56f2:	6800      	ldr	r0, [r0, #0]
    56f4:	9015      	str	r0, [sp, #84]	; 0x54
    56f6:	f7ff ff91 	bl	561c <strlen>
    56fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    56fc:	9018      	str	r0, [sp, #96]	; 0x60
    56fe:	89a3      	ldrh	r3, [r4, #12]
    5700:	061e      	lsls	r6, r3, #24
    5702:	d503      	bpl.n	570c <_svfprintf_r+0x2c>
    5704:	6923      	ldr	r3, [r4, #16]
    5706:	2b00      	cmp	r3, #0
    5708:	f001 8081 	beq.w	680e <_svfprintf_r+0x112e>
    570c:	ac38      	add	r4, sp, #224	; 0xe0
    570e:	46a4      	mov	ip, r4
    5710:	9408      	str	r4, [sp, #32]
    5712:	942b      	str	r4, [sp, #172]	; 0xac
    5714:	2500      	movs	r5, #0
    5716:	2400      	movs	r4, #0
    5718:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    571c:	2300      	movs	r3, #0
    571e:	9311      	str	r3, [sp, #68]	; 0x44
    5720:	932d      	str	r3, [sp, #180]	; 0xb4
    5722:	932c      	str	r3, [sp, #176]	; 0xb0
    5724:	931a      	str	r3, [sp, #104]	; 0x68
    5726:	9319      	str	r3, [sp, #100]	; 0x64
    5728:	930e      	str	r3, [sp, #56]	; 0x38
    572a:	4666      	mov	r6, ip
    572c:	f899 3000 	ldrb.w	r3, [r9]
    5730:	2b00      	cmp	r3, #0
    5732:	f000 80f8 	beq.w	5926 <_svfprintf_r+0x246>
    5736:	2b25      	cmp	r3, #37	; 0x25
    5738:	f000 80f5 	beq.w	5926 <_svfprintf_r+0x246>
    573c:	f109 0201 	add.w	r2, r9, #1
    5740:	e001      	b.n	5746 <_svfprintf_r+0x66>
    5742:	2b25      	cmp	r3, #37	; 0x25
    5744:	d004      	beq.n	5750 <_svfprintf_r+0x70>
    5746:	7813      	ldrb	r3, [r2, #0]
    5748:	4614      	mov	r4, r2
    574a:	3201      	adds	r2, #1
    574c:	2b00      	cmp	r3, #0
    574e:	d1f8      	bne.n	5742 <_svfprintf_r+0x62>
    5750:	ebc9 0504 	rsb	r5, r9, r4
    5754:	b17d      	cbz	r5, 5776 <_svfprintf_r+0x96>
    5756:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5758:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    575a:	3301      	adds	r3, #1
    575c:	442a      	add	r2, r5
    575e:	2b07      	cmp	r3, #7
    5760:	f8c6 9000 	str.w	r9, [r6]
    5764:	6075      	str	r5, [r6, #4]
    5766:	922d      	str	r2, [sp, #180]	; 0xb4
    5768:	932c      	str	r3, [sp, #176]	; 0xb0
    576a:	f300 80c2 	bgt.w	58f2 <_svfprintf_r+0x212>
    576e:	3608      	adds	r6, #8
    5770:	980e      	ldr	r0, [sp, #56]	; 0x38
    5772:	4428      	add	r0, r5
    5774:	900e      	str	r0, [sp, #56]	; 0x38
    5776:	7823      	ldrb	r3, [r4, #0]
    5778:	2b00      	cmp	r3, #0
    577a:	f000 80c2 	beq.w	5902 <_svfprintf_r+0x222>
    577e:	2300      	movs	r3, #0
    5780:	f894 8001 	ldrb.w	r8, [r4, #1]
    5784:	461a      	mov	r2, r3
    5786:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    578a:	930f      	str	r3, [sp, #60]	; 0x3c
    578c:	9309      	str	r3, [sp, #36]	; 0x24
    578e:	f104 0901 	add.w	r9, r4, #1
    5792:	f04f 34ff 	mov.w	r4, #4294967295
    5796:	940a      	str	r4, [sp, #40]	; 0x28
    5798:	f109 0901 	add.w	r9, r9, #1
    579c:	f1a8 0320 	sub.w	r3, r8, #32
    57a0:	2b58      	cmp	r3, #88	; 0x58
    57a2:	f200 83c5 	bhi.w	5f30 <_svfprintf_r+0x850>
    57a6:	e8df f013 	tbh	[pc, r3, lsl #1]
    57aa:	026a      	.short	0x026a
    57ac:	03c303c3 	.word	0x03c303c3
    57b0:	03c30271 	.word	0x03c30271
    57b4:	03c303c3 	.word	0x03c303c3
    57b8:	03c303c3 	.word	0x03c303c3
    57bc:	031403c3 	.word	0x031403c3
    57c0:	03c30366 	.word	0x03c30366
    57c4:	00c0009d 	.word	0x00c0009d
    57c8:	027803c3 	.word	0x027803c3
    57cc:	027f027f 	.word	0x027f027f
    57d0:	027f027f 	.word	0x027f027f
    57d4:	027f027f 	.word	0x027f027f
    57d8:	027f027f 	.word	0x027f027f
    57dc:	03c3027f 	.word	0x03c3027f
    57e0:	03c303c3 	.word	0x03c303c3
    57e4:	03c303c3 	.word	0x03c303c3
    57e8:	03c303c3 	.word	0x03c303c3
    57ec:	03c303c3 	.word	0x03c303c3
    57f0:	029003c3 	.word	0x029003c3
    57f4:	03c30371 	.word	0x03c30371
    57f8:	03c30371 	.word	0x03c30371
    57fc:	03c303c3 	.word	0x03c303c3
    5800:	036a03c3 	.word	0x036a03c3
    5804:	03c303c3 	.word	0x03c303c3
    5808:	03c30078 	.word	0x03c30078
    580c:	03c303c3 	.word	0x03c303c3
    5810:	03c303c3 	.word	0x03c303c3
    5814:	03c30059 	.word	0x03c30059
    5818:	02af03c3 	.word	0x02af03c3
    581c:	03c303c3 	.word	0x03c303c3
    5820:	03c303c3 	.word	0x03c303c3
    5824:	03c303c3 	.word	0x03c303c3
    5828:	03c303c3 	.word	0x03c303c3
    582c:	03c303c3 	.word	0x03c303c3
    5830:	03480337 	.word	0x03480337
    5834:	03710371 	.word	0x03710371
    5838:	02ff0371 	.word	0x02ff0371
    583c:	03c30348 	.word	0x03c30348
    5840:	030803c3 	.word	0x030803c3
    5844:	02c503c3 	.word	0x02c503c3
    5848:	0320007c 	.word	0x0320007c
    584c:	03c303a3 	.word	0x03c303a3
    5850:	03c302d9 	.word	0x03c302d9
    5854:	03c3005f 	.word	0x03c3005f
    5858:	00de03c3 	.word	0x00de03c3
    585c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5860:	f04c 0c10 	orr.w	ip, ip, #16
    5864:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5868:	9c09      	ldr	r4, [sp, #36]	; 0x24
    586a:	06a2      	lsls	r2, r4, #26
    586c:	f100 8354 	bmi.w	5f18 <_svfprintf_r+0x838>
    5870:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5872:	06e3      	lsls	r3, r4, #27
    5874:	f100 85bd 	bmi.w	63f2 <_svfprintf_r+0xd12>
    5878:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    587c:	f01c 0f40 	tst.w	ip, #64	; 0x40
    5880:	f000 85b7 	beq.w	63f2 <_svfprintf_r+0xd12>
    5884:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    5888:	2500      	movs	r5, #0
    588a:	f8bc 4000 	ldrh.w	r4, [ip]
    588e:	f10c 0c04 	add.w	ip, ip, #4
    5892:	2301      	movs	r3, #1
    5894:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    5898:	e08c      	b.n	59b4 <_svfprintf_r+0x2d4>
    589a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    589c:	f045 0510 	orr.w	r5, r5, #16
    58a0:	9509      	str	r5, [sp, #36]	; 0x24
    58a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    58a6:	f01c 0320 	ands.w	r3, ip, #32
    58aa:	f040 832a 	bne.w	5f02 <_svfprintf_r+0x822>
    58ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    58b2:	f01c 0210 	ands.w	r2, ip, #16
    58b6:	f040 85a4 	bne.w	6402 <_svfprintf_r+0xd22>
    58ba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    58be:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
    58c2:	f000 859e 	beq.w	6402 <_svfprintf_r+0xd22>
    58c6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    58ca:	4613      	mov	r3, r2
    58cc:	f8bc 4000 	ldrh.w	r4, [ip]
    58d0:	f10c 0c04 	add.w	ip, ip, #4
    58d4:	2500      	movs	r5, #0
    58d6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    58da:	e06b      	b.n	59b4 <_svfprintf_r+0x2d4>
    58dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    58de:	9310      	str	r3, [sp, #64]	; 0x40
    58e0:	4264      	negs	r4, r4
    58e2:	940f      	str	r4, [sp, #60]	; 0x3c
    58e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    58e6:	f045 0504 	orr.w	r5, r5, #4
    58ea:	9509      	str	r5, [sp, #36]	; 0x24
    58ec:	f899 8000 	ldrb.w	r8, [r9]
    58f0:	e752      	b.n	5798 <_svfprintf_r+0xb8>
    58f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    58f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    58f6:	aa2b      	add	r2, sp, #172	; 0xac
    58f8:	f003 f8ae 	bl	8a58 <__ssprint_r>
    58fc:	b940      	cbnz	r0, 5910 <_svfprintf_r+0x230>
    58fe:	ae38      	add	r6, sp, #224	; 0xe0
    5900:	e736      	b.n	5770 <_svfprintf_r+0x90>
    5902:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    5904:	b123      	cbz	r3, 5910 <_svfprintf_r+0x230>
    5906:	980d      	ldr	r0, [sp, #52]	; 0x34
    5908:	990c      	ldr	r1, [sp, #48]	; 0x30
    590a:	aa2b      	add	r2, sp, #172	; 0xac
    590c:	f003 f8a4 	bl	8a58 <__ssprint_r>
    5910:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5912:	980e      	ldr	r0, [sp, #56]	; 0x38
    5914:	89a3      	ldrh	r3, [r4, #12]
    5916:	f013 0f40 	tst.w	r3, #64	; 0x40
    591a:	bf18      	it	ne
    591c:	f04f 30ff 	movne.w	r0, #4294967295
    5920:	b049      	add	sp, #292	; 0x124
    5922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5926:	464c      	mov	r4, r9
    5928:	e725      	b.n	5776 <_svfprintf_r+0x96>
    592a:	f899 8000 	ldrb.w	r8, [r9]
    592e:	f109 0001 	add.w	r0, r9, #1
    5932:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
    5936:	f001 810c 	beq.w	6b52 <_svfprintf_r+0x1472>
    593a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    593e:	2b09      	cmp	r3, #9
    5940:	bf98      	it	ls
    5942:	2100      	movls	r1, #0
    5944:	f201 806b 	bhi.w	6a1e <_svfprintf_r+0x133e>
    5948:	f810 8b01 	ldrb.w	r8, [r0], #1
    594c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5950:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    5954:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    5958:	2b09      	cmp	r3, #9
    595a:	d9f5      	bls.n	5948 <_svfprintf_r+0x268>
    595c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    5960:	910a      	str	r1, [sp, #40]	; 0x28
    5962:	4681      	mov	r9, r0
    5964:	e71a      	b.n	579c <_svfprintf_r+0xbc>
    5966:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5968:	4ca1      	ldr	r4, [pc, #644]	; (5bf0 <_svfprintf_r+0x510>)
    596a:	06af      	lsls	r7, r5, #26
    596c:	941a      	str	r4, [sp, #104]	; 0x68
    596e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5972:	f140 81d1 	bpl.w	5d18 <_svfprintf_r+0x638>
    5976:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    597a:	f10c 0307 	add.w	r3, ip, #7
    597e:	f023 0307 	bic.w	r3, r3, #7
    5982:	f103 0408 	add.w	r4, r3, #8
    5986:	9410      	str	r4, [sp, #64]	; 0x40
    5988:	e9d3 4500 	ldrd	r4, r5, [r3]
    598c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5990:	f01c 0f01 	tst.w	ip, #1
    5994:	f000 8462 	beq.w	625c <_svfprintf_r+0xb7c>
    5998:	ea54 0005 	orrs.w	r0, r4, r5
    599c:	f000 845e 	beq.w	625c <_svfprintf_r+0xb7c>
    59a0:	2330      	movs	r3, #48	; 0x30
    59a2:	f04c 0c02 	orr.w	ip, ip, #2
    59a6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    59aa:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    59ae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    59b2:	2302      	movs	r3, #2
    59b4:	f04f 0a00 	mov.w	sl, #0
    59b8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    59bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    59be:	2900      	cmp	r1, #0
    59c0:	db05      	blt.n	59ce <_svfprintf_r+0x2ee>
    59c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    59c6:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
    59ca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    59ce:	ea54 0005 	orrs.w	r0, r4, r5
    59d2:	f040 82c5 	bne.w	5f60 <_svfprintf_r+0x880>
    59d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    59d8:	2900      	cmp	r1, #0
    59da:	f040 82c1 	bne.w	5f60 <_svfprintf_r+0x880>
    59de:	2b00      	cmp	r3, #0
    59e0:	f040 8438 	bne.w	6254 <_svfprintf_r+0xb74>
    59e4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    59e8:	f01c 0f01 	tst.w	ip, #1
    59ec:	f000 8432 	beq.w	6254 <_svfprintf_r+0xb74>
    59f0:	af48      	add	r7, sp, #288	; 0x120
    59f2:	2330      	movs	r3, #48	; 0x30
    59f4:	9d08      	ldr	r5, [sp, #32]
    59f6:	f807 3d41 	strb.w	r3, [r7, #-65]!
    59fa:	1bec      	subs	r4, r5, r7
    59fc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    5a00:	2500      	movs	r5, #0
    5a02:	4564      	cmp	r4, ip
    5a04:	bfa8      	it	ge
    5a06:	46a4      	movge	ip, r4
    5a08:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    5a0c:	9514      	str	r5, [sp, #80]	; 0x50
    5a0e:	f1ba 0f00 	cmp.w	sl, #0
    5a12:	d002      	beq.n	5a1a <_svfprintf_r+0x33a>
    5a14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5a16:	3501      	adds	r5, #1
    5a18:	950b      	str	r5, [sp, #44]	; 0x2c
    5a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a1c:	f013 0302 	ands.w	r3, r3, #2
    5a20:	9312      	str	r3, [sp, #72]	; 0x48
    5a22:	d002      	beq.n	5a2a <_svfprintf_r+0x34a>
    5a24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5a26:	3502      	adds	r5, #2
    5a28:	950b      	str	r5, [sp, #44]	; 0x2c
    5a2a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5a2e:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
    5a32:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    5a36:	f040 8290 	bne.w	5f5a <_svfprintf_r+0x87a>
    5a3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5a3c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    5a40:	ebcc 0b05 	rsb	fp, ip, r5
    5a44:	f1bb 0f00 	cmp.w	fp, #0
    5a48:	f340 8287 	ble.w	5f5a <_svfprintf_r+0x87a>
    5a4c:	f1bb 0f10 	cmp.w	fp, #16
    5a50:	992d      	ldr	r1, [sp, #180]	; 0xb4
    5a52:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    5a54:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 5bf8 <_svfprintf_r+0x518>
    5a58:	dd2c      	ble.n	5ab4 <_svfprintf_r+0x3d4>
    5a5a:	971b      	str	r7, [sp, #108]	; 0x6c
    5a5c:	4630      	mov	r0, r6
    5a5e:	4657      	mov	r7, sl
    5a60:	2510      	movs	r5, #16
    5a62:	46ca      	mov	sl, r9
    5a64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5a66:	46a1      	mov	r9, r4
    5a68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    5a6a:	e006      	b.n	5a7a <_svfprintf_r+0x39a>
    5a6c:	f1ab 0b10 	sub.w	fp, fp, #16
    5a70:	f1bb 0f10 	cmp.w	fp, #16
    5a74:	f100 0008 	add.w	r0, r0, #8
    5a78:	dd17      	ble.n	5aaa <_svfprintf_r+0x3ca>
    5a7a:	3201      	adds	r2, #1
    5a7c:	3110      	adds	r1, #16
    5a7e:	2a07      	cmp	r2, #7
    5a80:	912d      	str	r1, [sp, #180]	; 0xb4
    5a82:	922c      	str	r2, [sp, #176]	; 0xb0
    5a84:	6007      	str	r7, [r0, #0]
    5a86:	6045      	str	r5, [r0, #4]
    5a88:	ddf0      	ble.n	5a6c <_svfprintf_r+0x38c>
    5a8a:	4620      	mov	r0, r4
    5a8c:	4631      	mov	r1, r6
    5a8e:	aa2b      	add	r2, sp, #172	; 0xac
    5a90:	f002 ffe2 	bl	8a58 <__ssprint_r>
    5a94:	2800      	cmp	r0, #0
    5a96:	f47f af3b 	bne.w	5910 <_svfprintf_r+0x230>
    5a9a:	f1ab 0b10 	sub.w	fp, fp, #16
    5a9e:	f1bb 0f10 	cmp.w	fp, #16
    5aa2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    5aa4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    5aa6:	a838      	add	r0, sp, #224	; 0xe0
    5aa8:	dce7      	bgt.n	5a7a <_svfprintf_r+0x39a>
    5aaa:	464c      	mov	r4, r9
    5aac:	46d1      	mov	r9, sl
    5aae:	46ba      	mov	sl, r7
    5ab0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    5ab2:	4606      	mov	r6, r0
    5ab4:	3201      	adds	r2, #1
    5ab6:	eb0b 0c01 	add.w	ip, fp, r1
    5aba:	2a07      	cmp	r2, #7
    5abc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5ac0:	922c      	str	r2, [sp, #176]	; 0xb0
    5ac2:	e886 0c00 	stmia.w	r6, {sl, fp}
    5ac6:	f300 841a 	bgt.w	62fe <_svfprintf_r+0xc1e>
    5aca:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    5ace:	3608      	adds	r6, #8
    5ad0:	f1ba 0f00 	cmp.w	sl, #0
    5ad4:	d00f      	beq.n	5af6 <_svfprintf_r+0x416>
    5ad6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5ad8:	f10c 0c01 	add.w	ip, ip, #1
    5adc:	3301      	adds	r3, #1
    5ade:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
    5ae2:	2201      	movs	r2, #1
    5ae4:	2b07      	cmp	r3, #7
    5ae6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5aea:	932c      	str	r3, [sp, #176]	; 0xb0
    5aec:	e886 0006 	stmia.w	r6, {r1, r2}
    5af0:	f300 83a4 	bgt.w	623c <_svfprintf_r+0xb5c>
    5af4:	3608      	adds	r6, #8
    5af6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5af8:	b173      	cbz	r3, 5b18 <_svfprintf_r+0x438>
    5afa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5afc:	f10c 0c02 	add.w	ip, ip, #2
    5b00:	3301      	adds	r3, #1
    5b02:	a924      	add	r1, sp, #144	; 0x90
    5b04:	2202      	movs	r2, #2
    5b06:	2b07      	cmp	r3, #7
    5b08:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5b0c:	932c      	str	r3, [sp, #176]	; 0xb0
    5b0e:	e886 0006 	stmia.w	r6, {r1, r2}
    5b12:	f300 8387 	bgt.w	6224 <_svfprintf_r+0xb44>
    5b16:	3608      	adds	r6, #8
    5b18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    5b1a:	2d80      	cmp	r5, #128	; 0x80
    5b1c:	f000 82ca 	beq.w	60b4 <_svfprintf_r+0x9d4>
    5b20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5b22:	ebc4 0a05 	rsb	sl, r4, r5
    5b26:	f1ba 0f00 	cmp.w	sl, #0
    5b2a:	dd3b      	ble.n	5ba4 <_svfprintf_r+0x4c4>
    5b2c:	f1ba 0f10 	cmp.w	sl, #16
    5b30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5b32:	4d30      	ldr	r5, [pc, #192]	; (5bf4 <_svfprintf_r+0x514>)
    5b34:	dd2b      	ble.n	5b8e <_svfprintf_r+0x4ae>
    5b36:	940a      	str	r4, [sp, #40]	; 0x28
    5b38:	4632      	mov	r2, r6
    5b3a:	f04f 0b10 	mov.w	fp, #16
    5b3e:	462e      	mov	r6, r5
    5b40:	4661      	mov	r1, ip
    5b42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    5b44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5b46:	e006      	b.n	5b56 <_svfprintf_r+0x476>
    5b48:	f1aa 0a10 	sub.w	sl, sl, #16
    5b4c:	f1ba 0f10 	cmp.w	sl, #16
    5b50:	f102 0208 	add.w	r2, r2, #8
    5b54:	dd17      	ble.n	5b86 <_svfprintf_r+0x4a6>
    5b56:	3301      	adds	r3, #1
    5b58:	3110      	adds	r1, #16
    5b5a:	2b07      	cmp	r3, #7
    5b5c:	912d      	str	r1, [sp, #180]	; 0xb4
    5b5e:	932c      	str	r3, [sp, #176]	; 0xb0
    5b60:	e882 0840 	stmia.w	r2, {r6, fp}
    5b64:	ddf0      	ble.n	5b48 <_svfprintf_r+0x468>
    5b66:	4620      	mov	r0, r4
    5b68:	4629      	mov	r1, r5
    5b6a:	aa2b      	add	r2, sp, #172	; 0xac
    5b6c:	f002 ff74 	bl	8a58 <__ssprint_r>
    5b70:	2800      	cmp	r0, #0
    5b72:	f47f aecd 	bne.w	5910 <_svfprintf_r+0x230>
    5b76:	f1aa 0a10 	sub.w	sl, sl, #16
    5b7a:	f1ba 0f10 	cmp.w	sl, #16
    5b7e:	992d      	ldr	r1, [sp, #180]	; 0xb4
    5b80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5b82:	aa38      	add	r2, sp, #224	; 0xe0
    5b84:	dce7      	bgt.n	5b56 <_svfprintf_r+0x476>
    5b86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5b88:	4635      	mov	r5, r6
    5b8a:	468c      	mov	ip, r1
    5b8c:	4616      	mov	r6, r2
    5b8e:	3301      	adds	r3, #1
    5b90:	44d4      	add	ip, sl
    5b92:	2b07      	cmp	r3, #7
    5b94:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5b98:	932c      	str	r3, [sp, #176]	; 0xb0
    5b9a:	e886 0420 	stmia.w	r6, {r5, sl}
    5b9e:	f300 8335 	bgt.w	620c <_svfprintf_r+0xb2c>
    5ba2:	3608      	adds	r6, #8
    5ba4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5ba6:	05ed      	lsls	r5, r5, #23
    5ba8:	f100 8224 	bmi.w	5ff4 <_svfprintf_r+0x914>
    5bac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5bae:	44a4      	add	ip, r4
    5bb0:	3301      	adds	r3, #1
    5bb2:	2b07      	cmp	r3, #7
    5bb4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5bb8:	6037      	str	r7, [r6, #0]
    5bba:	6074      	str	r4, [r6, #4]
    5bbc:	932c      	str	r3, [sp, #176]	; 0xb0
    5bbe:	f300 830f 	bgt.w	61e0 <_svfprintf_r+0xb00>
    5bc2:	3608      	adds	r6, #8
    5bc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5bc6:	0763      	lsls	r3, r4, #29
    5bc8:	d549      	bpl.n	5c5e <_svfprintf_r+0x57e>
    5bca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5bcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5bce:	1a2c      	subs	r4, r5, r0
    5bd0:	2c00      	cmp	r4, #0
    5bd2:	dd44      	ble.n	5c5e <_svfprintf_r+0x57e>
    5bd4:	2c10      	cmp	r4, #16
    5bd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5bd8:	f8df a01c 	ldr.w	sl, [pc, #28]	; 5bf8 <_svfprintf_r+0x518>
    5bdc:	dd2b      	ble.n	5c36 <_svfprintf_r+0x556>
    5bde:	4657      	mov	r7, sl
    5be0:	2510      	movs	r5, #16
    5be2:	4662      	mov	r2, ip
    5be4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    5be8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    5bec:	e00b      	b.n	5c06 <_svfprintf_r+0x526>
    5bee:	bf00      	nop
    5bf0:	0000ac10 	.word	0x0000ac10
    5bf4:	0000abdc 	.word	0x0000abdc
    5bf8:	0000ac30 	.word	0x0000ac30
    5bfc:	3c10      	subs	r4, #16
    5bfe:	2c10      	cmp	r4, #16
    5c00:	f106 0608 	add.w	r6, r6, #8
    5c04:	dd15      	ble.n	5c32 <_svfprintf_r+0x552>
    5c06:	3301      	adds	r3, #1
    5c08:	3210      	adds	r2, #16
    5c0a:	2b07      	cmp	r3, #7
    5c0c:	922d      	str	r2, [sp, #180]	; 0xb4
    5c0e:	932c      	str	r3, [sp, #176]	; 0xb0
    5c10:	6037      	str	r7, [r6, #0]
    5c12:	6075      	str	r5, [r6, #4]
    5c14:	ddf2      	ble.n	5bfc <_svfprintf_r+0x51c>
    5c16:	4650      	mov	r0, sl
    5c18:	4641      	mov	r1, r8
    5c1a:	aa2b      	add	r2, sp, #172	; 0xac
    5c1c:	f002 ff1c 	bl	8a58 <__ssprint_r>
    5c20:	2800      	cmp	r0, #0
    5c22:	f47f ae75 	bne.w	5910 <_svfprintf_r+0x230>
    5c26:	3c10      	subs	r4, #16
    5c28:	2c10      	cmp	r4, #16
    5c2a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    5c2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    5c2e:	ae38      	add	r6, sp, #224	; 0xe0
    5c30:	dce9      	bgt.n	5c06 <_svfprintf_r+0x526>
    5c32:	4694      	mov	ip, r2
    5c34:	46ba      	mov	sl, r7
    5c36:	3301      	adds	r3, #1
    5c38:	44a4      	add	ip, r4
    5c3a:	2b07      	cmp	r3, #7
    5c3c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    5c40:	932c      	str	r3, [sp, #176]	; 0xb0
    5c42:	f8c6 a000 	str.w	sl, [r6]
    5c46:	6074      	str	r4, [r6, #4]
    5c48:	dd09      	ble.n	5c5e <_svfprintf_r+0x57e>
    5c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    5c4c:	990c      	ldr	r1, [sp, #48]	; 0x30
    5c4e:	aa2b      	add	r2, sp, #172	; 0xac
    5c50:	f002 ff02 	bl	8a58 <__ssprint_r>
    5c54:	2800      	cmp	r0, #0
    5c56:	f47f ae5b 	bne.w	5910 <_svfprintf_r+0x230>
    5c5a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    5c5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5c60:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5c62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5c64:	42a8      	cmp	r0, r5
    5c66:	bfac      	ite	ge
    5c68:	1824      	addge	r4, r4, r0
    5c6a:	1964      	addlt	r4, r4, r5
    5c6c:	940e      	str	r4, [sp, #56]	; 0x38
    5c6e:	f1bc 0f00 	cmp.w	ip, #0
    5c72:	f040 82c1 	bne.w	61f8 <_svfprintf_r+0xb18>
    5c76:	2300      	movs	r3, #0
    5c78:	932c      	str	r3, [sp, #176]	; 0xb0
    5c7a:	ae38      	add	r6, sp, #224	; 0xe0
    5c7c:	e556      	b.n	572c <_svfprintf_r+0x4c>
    5c7e:	f899 8000 	ldrb.w	r8, [r9]
    5c82:	2a00      	cmp	r2, #0
    5c84:	f47f ad88 	bne.w	5798 <_svfprintf_r+0xb8>
    5c88:	2220      	movs	r2, #32
    5c8a:	e585      	b.n	5798 <_svfprintf_r+0xb8>
    5c8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5c8e:	f045 0501 	orr.w	r5, r5, #1
    5c92:	9509      	str	r5, [sp, #36]	; 0x24
    5c94:	f899 8000 	ldrb.w	r8, [r9]
    5c98:	e57e      	b.n	5798 <_svfprintf_r+0xb8>
    5c9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5c9c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    5ca0:	9509      	str	r5, [sp, #36]	; 0x24
    5ca2:	f899 8000 	ldrb.w	r8, [r9]
    5ca6:	e577      	b.n	5798 <_svfprintf_r+0xb8>
    5ca8:	2400      	movs	r4, #0
    5caa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    5cae:	940f      	str	r4, [sp, #60]	; 0x3c
    5cb0:	4621      	mov	r1, r4
    5cb2:	f819 8b01 	ldrb.w	r8, [r9], #1
    5cb6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5cba:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    5cbe:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
    5cc2:	2b09      	cmp	r3, #9
    5cc4:	d9f5      	bls.n	5cb2 <_svfprintf_r+0x5d2>
    5cc6:	910f      	str	r1, [sp, #60]	; 0x3c
    5cc8:	e568      	b.n	579c <_svfprintf_r+0xbc>
    5cca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5cce:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5cd2:	f04c 0c10 	orr.w	ip, ip, #16
    5cd6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5cda:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5cdc:	06a5      	lsls	r5, r4, #26
    5cde:	f140 80b2 	bpl.w	5e46 <_svfprintf_r+0x766>
    5ce2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5ce4:	1de9      	adds	r1, r5, #7
    5ce6:	f021 0107 	bic.w	r1, r1, #7
    5cea:	e9d1 2300 	ldrd	r2, r3, [r1]
    5cee:	3108      	adds	r1, #8
    5cf0:	9110      	str	r1, [sp, #64]	; 0x40
    5cf2:	4614      	mov	r4, r2
    5cf4:	461d      	mov	r5, r3
    5cf6:	2a00      	cmp	r2, #0
    5cf8:	f173 0c00 	sbcs.w	ip, r3, #0
    5cfc:	f2c0 8394 	blt.w	6428 <_svfprintf_r+0xd48>
    5d00:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    5d04:	2301      	movs	r3, #1
    5d06:	e659      	b.n	59bc <_svfprintf_r+0x2dc>
    5d08:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5d0a:	4cb6      	ldr	r4, [pc, #728]	; (5fe4 <_svfprintf_r+0x904>)
    5d0c:	06af      	lsls	r7, r5, #26
    5d0e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5d12:	941a      	str	r4, [sp, #104]	; 0x68
    5d14:	f53f ae2f 	bmi.w	5976 <_svfprintf_r+0x296>
    5d18:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5d1a:	06ed      	lsls	r5, r5, #27
    5d1c:	f140 8443 	bpl.w	65a6 <_svfprintf_r+0xec6>
    5d20:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    5d24:	2500      	movs	r5, #0
    5d26:	f8dc 4000 	ldr.w	r4, [ip]
    5d2a:	f10c 0c04 	add.w	ip, ip, #4
    5d2e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    5d32:	e62b      	b.n	598c <_svfprintf_r+0x2ac>
    5d34:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5d38:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5d3c:	f01c 0f20 	tst.w	ip, #32
    5d40:	f000 8440 	beq.w	65c4 <_svfprintf_r+0xee4>
    5d44:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5d46:	6821      	ldr	r1, [r4, #0]
    5d48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    5d4a:	17e5      	asrs	r5, r4, #31
    5d4c:	462b      	mov	r3, r5
    5d4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5d50:	4622      	mov	r2, r4
    5d52:	3504      	adds	r5, #4
    5d54:	9510      	str	r5, [sp, #64]	; 0x40
    5d56:	e9c1 2300 	strd	r2, r3, [r1]
    5d5a:	e4e7      	b.n	572c <_svfprintf_r+0x4c>
    5d5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5d5e:	f04f 0a00 	mov.w	sl, #0
    5d62:	6827      	ldr	r7, [r4, #0]
    5d64:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    5d68:	1d25      	adds	r5, r4, #4
    5d6a:	2f00      	cmp	r7, #0
    5d6c:	f000 85e9 	beq.w	6942 <_svfprintf_r+0x1262>
    5d70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5d72:	4638      	mov	r0, r7
    5d74:	2c00      	cmp	r4, #0
    5d76:	f2c0 859b 	blt.w	68b0 <_svfprintf_r+0x11d0>
    5d7a:	4651      	mov	r1, sl
    5d7c:	4622      	mov	r2, r4
    5d7e:	f002 fa63 	bl	8248 <memchr>
    5d82:	2800      	cmp	r0, #0
    5d84:	f000 8613 	beq.w	69ae <_svfprintf_r+0x12ce>
    5d88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5d8a:	1bc0      	subs	r0, r0, r7
    5d8c:	42a0      	cmp	r0, r4
    5d8e:	bfb8      	it	lt
    5d90:	4604      	movlt	r4, r0
    5d92:	9510      	str	r5, [sp, #64]	; 0x40
    5d94:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    5d98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    5d9c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    5da0:	950b      	str	r5, [sp, #44]	; 0x2c
    5da2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    5da6:	e632      	b.n	5a0e <_svfprintf_r+0x32e>
    5da8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5dac:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    5db0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5db4:	f899 8000 	ldrb.w	r8, [r9]
    5db8:	e4ee      	b.n	5798 <_svfprintf_r+0xb8>
    5dba:	f899 8000 	ldrb.w	r8, [r9]
    5dbe:	464b      	mov	r3, r9
    5dc0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    5dc4:	f000 847f 	beq.w	66c6 <_svfprintf_r+0xfe6>
    5dc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5dca:	f045 0510 	orr.w	r5, r5, #16
    5dce:	9509      	str	r5, [sp, #36]	; 0x24
    5dd0:	e4e2      	b.n	5798 <_svfprintf_r+0xb8>
    5dd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5dd4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5dd6:	6824      	ldr	r4, [r4, #0]
    5dd8:	1d2b      	adds	r3, r5, #4
    5dda:	2c00      	cmp	r4, #0
    5ddc:	940f      	str	r4, [sp, #60]	; 0x3c
    5dde:	f6ff ad7d 	blt.w	58dc <_svfprintf_r+0x1fc>
    5de2:	9310      	str	r3, [sp, #64]	; 0x40
    5de4:	f899 8000 	ldrb.w	r8, [r9]
    5de8:	e4d6      	b.n	5798 <_svfprintf_r+0xb8>
    5dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5dec:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5df0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5df2:	487d      	ldr	r0, [pc, #500]	; (5fe8 <_svfprintf_r+0x908>)
    5df4:	3504      	adds	r5, #4
    5df6:	681c      	ldr	r4, [r3, #0]
    5df8:	f04f 0878 	mov.w	r8, #120	; 0x78
    5dfc:	2330      	movs	r3, #48	; 0x30
    5dfe:	f04c 0c02 	orr.w	ip, ip, #2
    5e02:	9510      	str	r5, [sp, #64]	; 0x40
    5e04:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    5e08:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5e0c:	2500      	movs	r5, #0
    5e0e:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
    5e12:	901a      	str	r0, [sp, #104]	; 0x68
    5e14:	2302      	movs	r3, #2
    5e16:	e5cd      	b.n	59b4 <_svfprintf_r+0x2d4>
    5e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5e1c:	681a      	ldr	r2, [r3, #0]
    5e1e:	2401      	movs	r4, #1
    5e20:	2300      	movs	r3, #0
    5e22:	3504      	adds	r5, #4
    5e24:	469a      	mov	sl, r3
    5e26:	940b      	str	r4, [sp, #44]	; 0x2c
    5e28:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
    5e2c:	9510      	str	r5, [sp, #64]	; 0x40
    5e2e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    5e32:	930a      	str	r3, [sp, #40]	; 0x28
    5e34:	9314      	str	r3, [sp, #80]	; 0x50
    5e36:	af2e      	add	r7, sp, #184	; 0xb8
    5e38:	e5ef      	b.n	5a1a <_svfprintf_r+0x33a>
    5e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5e3c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5e40:	06a5      	lsls	r5, r4, #26
    5e42:	f53f af4e 	bmi.w	5ce2 <_svfprintf_r+0x602>
    5e46:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5e4a:	f01c 0f10 	tst.w	ip, #16
    5e4e:	f040 82df 	bne.w	6410 <_svfprintf_r+0xd30>
    5e52:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5e56:	f01c 0f40 	tst.w	ip, #64	; 0x40
    5e5a:	f000 82d9 	beq.w	6410 <_svfprintf_r+0xd30>
    5e5e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    5e62:	f9bc 4000 	ldrsh.w	r4, [ip]
    5e66:	f10c 0c04 	add.w	ip, ip, #4
    5e6a:	17e5      	asrs	r5, r4, #31
    5e6c:	4622      	mov	r2, r4
    5e6e:	462b      	mov	r3, r5
    5e70:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    5e74:	e73f      	b.n	5cf6 <_svfprintf_r+0x616>
    5e76:	f899 8000 	ldrb.w	r8, [r9]
    5e7a:	222b      	movs	r2, #43	; 0x2b
    5e7c:	e48c      	b.n	5798 <_svfprintf_r+0xb8>
    5e7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5e80:	f045 0508 	orr.w	r5, r5, #8
    5e84:	9509      	str	r5, [sp, #36]	; 0x24
    5e86:	f899 8000 	ldrb.w	r8, [r9]
    5e8a:	e485      	b.n	5798 <_svfprintf_r+0xb8>
    5e8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5e8e:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5e92:	1deb      	adds	r3, r5, #7
    5e94:	f023 0307 	bic.w	r3, r3, #7
    5e98:	f103 0c08 	add.w	ip, r3, #8
    5e9c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    5ea0:	e9d3 4500 	ldrd	r4, r5, [r3]
    5ea4:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    5ea8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    5eac:	f002 fd9a 	bl	89e4 <__fpclassifyd>
    5eb0:	2801      	cmp	r0, #1
    5eb2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    5eb6:	f040 835c 	bne.w	6572 <_svfprintf_r+0xe92>
    5eba:	2200      	movs	r2, #0
    5ebc:	2300      	movs	r3, #0
    5ebe:	f003 fe75 	bl	9bac <__aeabi_dcmplt>
    5ec2:	2800      	cmp	r0, #0
    5ec4:	f040 8563 	bne.w	698e <_svfprintf_r+0x12ae>
    5ec8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    5ecc:	2503      	movs	r5, #3
    5ece:	950b      	str	r5, [sp, #44]	; 0x2c
    5ed0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5ed2:	4f46      	ldr	r7, [pc, #280]	; (5fec <_svfprintf_r+0x90c>)
    5ed4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    5ed8:	4b45      	ldr	r3, [pc, #276]	; (5ff0 <_svfprintf_r+0x910>)
    5eda:	2400      	movs	r4, #0
    5edc:	9509      	str	r5, [sp, #36]	; 0x24
    5ede:	2500      	movs	r5, #0
    5ee0:	940a      	str	r4, [sp, #40]	; 0x28
    5ee2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    5ee6:	bfd8      	it	le
    5ee8:	461f      	movle	r7, r3
    5eea:	2403      	movs	r4, #3
    5eec:	9514      	str	r5, [sp, #80]	; 0x50
    5eee:	e58e      	b.n	5a0e <_svfprintf_r+0x32e>
    5ef0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    5ef4:	f04c 0c20 	orr.w	ip, ip, #32
    5ef8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5efc:	f899 8000 	ldrb.w	r8, [r9]
    5f00:	e44a      	b.n	5798 <_svfprintf_r+0xb8>
    5f02:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5f04:	1de3      	adds	r3, r4, #7
    5f06:	f023 0307 	bic.w	r3, r3, #7
    5f0a:	f103 0508 	add.w	r5, r3, #8
    5f0e:	9510      	str	r5, [sp, #64]	; 0x40
    5f10:	e9d3 4500 	ldrd	r4, r5, [r3]
    5f14:	2300      	movs	r3, #0
    5f16:	e54d      	b.n	59b4 <_svfprintf_r+0x2d4>
    5f18:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5f1a:	1deb      	adds	r3, r5, #7
    5f1c:	f023 0307 	bic.w	r3, r3, #7
    5f20:	f103 0c08 	add.w	ip, r3, #8
    5f24:	e9d3 4500 	ldrd	r4, r5, [r3]
    5f28:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    5f2c:	2301      	movs	r3, #1
    5f2e:	e541      	b.n	59b4 <_svfprintf_r+0x2d4>
    5f30:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    5f34:	f1b8 0f00 	cmp.w	r8, #0
    5f38:	f43f ace3 	beq.w	5902 <_svfprintf_r+0x222>
    5f3c:	2300      	movs	r3, #0
    5f3e:	f04f 0c01 	mov.w	ip, #1
    5f42:	469a      	mov	sl, r3
    5f44:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    5f48:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
    5f4c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    5f50:	930a      	str	r3, [sp, #40]	; 0x28
    5f52:	9314      	str	r3, [sp, #80]	; 0x50
    5f54:	4664      	mov	r4, ip
    5f56:	af2e      	add	r7, sp, #184	; 0xb8
    5f58:	e55f      	b.n	5a1a <_svfprintf_r+0x33a>
    5f5a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    5f5e:	e5b7      	b.n	5ad0 <_svfprintf_r+0x3f0>
    5f60:	2b01      	cmp	r3, #1
    5f62:	f000 80ec 	beq.w	613e <_svfprintf_r+0xa5e>
    5f66:	2b02      	cmp	r3, #2
    5f68:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
    5f6c:	d118      	bne.n	5fa0 <_svfprintf_r+0x8c0>
    5f6e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    5f72:	4619      	mov	r1, r3
    5f74:	f004 000f 	and.w	r0, r4, #15
    5f78:	0922      	lsrs	r2, r4, #4
    5f7a:	f81c 0000 	ldrb.w	r0, [ip, r0]
    5f7e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
    5f82:	092b      	lsrs	r3, r5, #4
    5f84:	7008      	strb	r0, [r1, #0]
    5f86:	ea52 0003 	orrs.w	r0, r2, r3
    5f8a:	460f      	mov	r7, r1
    5f8c:	4614      	mov	r4, r2
    5f8e:	461d      	mov	r5, r3
    5f90:	f101 31ff 	add.w	r1, r1, #4294967295
    5f94:	d1ee      	bne.n	5f74 <_svfprintf_r+0x894>
    5f96:	9d08      	ldr	r5, [sp, #32]
    5f98:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
    5f9c:	1bec      	subs	r4, r5, r7
    5f9e:	e52d      	b.n	59fc <_svfprintf_r+0x31c>
    5fa0:	08e0      	lsrs	r0, r4, #3
    5fa2:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
    5fa6:	f004 0207 	and.w	r2, r4, #7
    5faa:	08e9      	lsrs	r1, r5, #3
    5fac:	3230      	adds	r2, #48	; 0x30
    5fae:	ea50 0c01 	orrs.w	ip, r0, r1
    5fb2:	461f      	mov	r7, r3
    5fb4:	701a      	strb	r2, [r3, #0]
    5fb6:	4604      	mov	r4, r0
    5fb8:	460d      	mov	r5, r1
    5fba:	f103 33ff 	add.w	r3, r3, #4294967295
    5fbe:	d1ef      	bne.n	5fa0 <_svfprintf_r+0x8c0>
    5fc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5fc2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    5fc6:	07e0      	lsls	r0, r4, #31
    5fc8:	4639      	mov	r1, r7
    5fca:	f140 80c1 	bpl.w	6150 <_svfprintf_r+0xa70>
    5fce:	2a30      	cmp	r2, #48	; 0x30
    5fd0:	f000 80be 	beq.w	6150 <_svfprintf_r+0xa70>
    5fd4:	9d08      	ldr	r5, [sp, #32]
    5fd6:	461f      	mov	r7, r3
    5fd8:	2330      	movs	r3, #48	; 0x30
    5fda:	1bec      	subs	r4, r5, r7
    5fdc:	f801 3c01 	strb.w	r3, [r1, #-1]
    5fe0:	e50c      	b.n	59fc <_svfprintf_r+0x31c>
    5fe2:	bf00      	nop
    5fe4:	0000abfc 	.word	0x0000abfc
    5fe8:	0000ac10 	.word	0x0000ac10
    5fec:	0000abf0 	.word	0x0000abf0
    5ff0:	0000abec 	.word	0x0000abec
    5ff4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    5ff8:	f340 80ad 	ble.w	6156 <_svfprintf_r+0xa76>
    5ffc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    6000:	2200      	movs	r2, #0
    6002:	2300      	movs	r3, #0
    6004:	f8cd c01c 	str.w	ip, [sp, #28]
    6008:	f003 fdc6 	bl	9b98 <__aeabi_dcmpeq>
    600c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    6010:	2800      	cmp	r0, #0
    6012:	f000 8126 	beq.w	6262 <_svfprintf_r+0xb82>
    6016:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6018:	49aa      	ldr	r1, [pc, #680]	; (62c4 <_svfprintf_r+0xbe4>)
    601a:	3301      	adds	r3, #1
    601c:	f10c 0c01 	add.w	ip, ip, #1
    6020:	2201      	movs	r2, #1
    6022:	2b07      	cmp	r3, #7
    6024:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    6028:	932c      	str	r3, [sp, #176]	; 0xb0
    602a:	e886 0006 	stmia.w	r6, {r1, r2}
    602e:	f300 82ed 	bgt.w	660c <_svfprintf_r+0xf2c>
    6032:	3608      	adds	r6, #8
    6034:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6036:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6038:	42a3      	cmp	r3, r4
    603a:	db03      	blt.n	6044 <_svfprintf_r+0x964>
    603c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    603e:	07ec      	lsls	r4, r5, #31
    6040:	f57f adc0 	bpl.w	5bc4 <_svfprintf_r+0x4e4>
    6044:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6046:	9c18      	ldr	r4, [sp, #96]	; 0x60
    6048:	3301      	adds	r3, #1
    604a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    604c:	44a4      	add	ip, r4
    604e:	2b07      	cmp	r3, #7
    6050:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    6054:	6035      	str	r5, [r6, #0]
    6056:	6074      	str	r4, [r6, #4]
    6058:	932c      	str	r3, [sp, #176]	; 0xb0
    605a:	f300 833e 	bgt.w	66da <_svfprintf_r+0xffa>
    605e:	3608      	adds	r6, #8
    6060:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6062:	1e6c      	subs	r4, r5, #1
    6064:	2c00      	cmp	r4, #0
    6066:	f77f adad 	ble.w	5bc4 <_svfprintf_r+0x4e4>
    606a:	2c10      	cmp	r4, #16
    606c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    606e:	4d96      	ldr	r5, [pc, #600]	; (62c8 <_svfprintf_r+0xbe8>)
    6070:	f340 8197 	ble.w	63a2 <_svfprintf_r+0xcc2>
    6074:	2710      	movs	r7, #16
    6076:	4662      	mov	r2, ip
    6078:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    607c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    6080:	e004      	b.n	608c <_svfprintf_r+0x9ac>
    6082:	3608      	adds	r6, #8
    6084:	3c10      	subs	r4, #16
    6086:	2c10      	cmp	r4, #16
    6088:	f340 818a 	ble.w	63a0 <_svfprintf_r+0xcc0>
    608c:	3301      	adds	r3, #1
    608e:	3210      	adds	r2, #16
    6090:	2b07      	cmp	r3, #7
    6092:	922d      	str	r2, [sp, #180]	; 0xb4
    6094:	932c      	str	r3, [sp, #176]	; 0xb0
    6096:	e886 00a0 	stmia.w	r6, {r5, r7}
    609a:	ddf2      	ble.n	6082 <_svfprintf_r+0x9a2>
    609c:	4640      	mov	r0, r8
    609e:	4651      	mov	r1, sl
    60a0:	aa2b      	add	r2, sp, #172	; 0xac
    60a2:	f002 fcd9 	bl	8a58 <__ssprint_r>
    60a6:	2800      	cmp	r0, #0
    60a8:	f47f ac32 	bne.w	5910 <_svfprintf_r+0x230>
    60ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    60ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    60b0:	ae38      	add	r6, sp, #224	; 0xe0
    60b2:	e7e7      	b.n	6084 <_svfprintf_r+0x9a4>
    60b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    60b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    60b8:	ebc0 0a05 	rsb	sl, r0, r5
    60bc:	f1ba 0f00 	cmp.w	sl, #0
    60c0:	f77f ad2e 	ble.w	5b20 <_svfprintf_r+0x440>
    60c4:	f1ba 0f10 	cmp.w	sl, #16
    60c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    60ca:	4d7f      	ldr	r5, [pc, #508]	; (62c8 <_svfprintf_r+0xbe8>)
    60cc:	dd2b      	ble.n	6126 <_svfprintf_r+0xa46>
    60ce:	9412      	str	r4, [sp, #72]	; 0x48
    60d0:	4632      	mov	r2, r6
    60d2:	f04f 0b10 	mov.w	fp, #16
    60d6:	462e      	mov	r6, r5
    60d8:	4661      	mov	r1, ip
    60da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    60dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    60de:	e006      	b.n	60ee <_svfprintf_r+0xa0e>
    60e0:	f1aa 0a10 	sub.w	sl, sl, #16
    60e4:	f1ba 0f10 	cmp.w	sl, #16
    60e8:	f102 0208 	add.w	r2, r2, #8
    60ec:	dd17      	ble.n	611e <_svfprintf_r+0xa3e>
    60ee:	3301      	adds	r3, #1
    60f0:	3110      	adds	r1, #16
    60f2:	2b07      	cmp	r3, #7
    60f4:	912d      	str	r1, [sp, #180]	; 0xb4
    60f6:	932c      	str	r3, [sp, #176]	; 0xb0
    60f8:	e882 0840 	stmia.w	r2, {r6, fp}
    60fc:	ddf0      	ble.n	60e0 <_svfprintf_r+0xa00>
    60fe:	4620      	mov	r0, r4
    6100:	4629      	mov	r1, r5
    6102:	aa2b      	add	r2, sp, #172	; 0xac
    6104:	f002 fca8 	bl	8a58 <__ssprint_r>
    6108:	2800      	cmp	r0, #0
    610a:	f47f ac01 	bne.w	5910 <_svfprintf_r+0x230>
    610e:	f1aa 0a10 	sub.w	sl, sl, #16
    6112:	f1ba 0f10 	cmp.w	sl, #16
    6116:	992d      	ldr	r1, [sp, #180]	; 0xb4
    6118:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    611a:	aa38      	add	r2, sp, #224	; 0xe0
    611c:	dce7      	bgt.n	60ee <_svfprintf_r+0xa0e>
    611e:	9c12      	ldr	r4, [sp, #72]	; 0x48
    6120:	4635      	mov	r5, r6
    6122:	468c      	mov	ip, r1
    6124:	4616      	mov	r6, r2
    6126:	3301      	adds	r3, #1
    6128:	44d4      	add	ip, sl
    612a:	2b07      	cmp	r3, #7
    612c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    6130:	932c      	str	r3, [sp, #176]	; 0xb0
    6132:	e886 0420 	stmia.w	r6, {r5, sl}
    6136:	f300 820f 	bgt.w	6558 <_svfprintf_r+0xe78>
    613a:	3608      	adds	r6, #8
    613c:	e4f0      	b.n	5b20 <_svfprintf_r+0x440>
    613e:	2d00      	cmp	r5, #0
    6140:	bf08      	it	eq
    6142:	2c0a      	cmpeq	r4, #10
    6144:	f080 8138 	bcs.w	63b8 <_svfprintf_r+0xcd8>
    6148:	3430      	adds	r4, #48	; 0x30
    614a:	af48      	add	r7, sp, #288	; 0x120
    614c:	f807 4d41 	strb.w	r4, [r7, #-65]!
    6150:	9d08      	ldr	r5, [sp, #32]
    6152:	1bec      	subs	r4, r5, r7
    6154:	e452      	b.n	59fc <_svfprintf_r+0x31c>
    6156:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6158:	2c01      	cmp	r4, #1
    615a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    615c:	f340 81d2 	ble.w	6504 <_svfprintf_r+0xe24>
    6160:	3401      	adds	r4, #1
    6162:	f10c 0301 	add.w	r3, ip, #1
    6166:	2201      	movs	r2, #1
    6168:	2c07      	cmp	r4, #7
    616a:	932d      	str	r3, [sp, #180]	; 0xb4
    616c:	6037      	str	r7, [r6, #0]
    616e:	942c      	str	r4, [sp, #176]	; 0xb0
    6170:	6072      	str	r2, [r6, #4]
    6172:	f300 81d8 	bgt.w	6526 <_svfprintf_r+0xe46>
    6176:	3608      	adds	r6, #8
    6178:	9d15      	ldr	r5, [sp, #84]	; 0x54
    617a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    617e:	3401      	adds	r4, #1
    6180:	6035      	str	r5, [r6, #0]
    6182:	9d18      	ldr	r5, [sp, #96]	; 0x60
    6184:	4498      	add	r8, r3
    6186:	2c07      	cmp	r4, #7
    6188:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    618c:	942c      	str	r4, [sp, #176]	; 0xb0
    618e:	6075      	str	r5, [r6, #4]
    6190:	f300 81d5 	bgt.w	653e <_svfprintf_r+0xe5e>
    6194:	3608      	adds	r6, #8
    6196:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    619a:	2200      	movs	r2, #0
    619c:	2300      	movs	r3, #0
    619e:	f003 fcfb 	bl	9b98 <__aeabi_dcmpeq>
    61a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    61a4:	2800      	cmp	r0, #0
    61a6:	f040 80b9 	bne.w	631c <_svfprintf_r+0xc3c>
    61aa:	1e6b      	subs	r3, r5, #1
    61ac:	3401      	adds	r4, #1
    61ae:	3701      	adds	r7, #1
    61b0:	4498      	add	r8, r3
    61b2:	2c07      	cmp	r4, #7
    61b4:	942c      	str	r4, [sp, #176]	; 0xb0
    61b6:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    61ba:	6037      	str	r7, [r6, #0]
    61bc:	6073      	str	r3, [r6, #4]
    61be:	f300 80e2 	bgt.w	6386 <_svfprintf_r+0xca6>
    61c2:	3608      	adds	r6, #8
    61c4:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    61c8:	3401      	adds	r4, #1
    61ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
    61cc:	44c4      	add	ip, r8
    61ce:	ab27      	add	r3, sp, #156	; 0x9c
    61d0:	2c07      	cmp	r4, #7
    61d2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    61d6:	942c      	str	r4, [sp, #176]	; 0xb0
    61d8:	e886 0028 	stmia.w	r6, {r3, r5}
    61dc:	f77f acf1 	ble.w	5bc2 <_svfprintf_r+0x4e2>
    61e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    61e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    61e4:	aa2b      	add	r2, sp, #172	; 0xac
    61e6:	f002 fc37 	bl	8a58 <__ssprint_r>
    61ea:	2800      	cmp	r0, #0
    61ec:	f47f ab90 	bne.w	5910 <_svfprintf_r+0x230>
    61f0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    61f4:	ae38      	add	r6, sp, #224	; 0xe0
    61f6:	e4e5      	b.n	5bc4 <_svfprintf_r+0x4e4>
    61f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    61fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    61fc:	aa2b      	add	r2, sp, #172	; 0xac
    61fe:	f002 fc2b 	bl	8a58 <__ssprint_r>
    6202:	2800      	cmp	r0, #0
    6204:	f43f ad37 	beq.w	5c76 <_svfprintf_r+0x596>
    6208:	f7ff bb82 	b.w	5910 <_svfprintf_r+0x230>
    620c:	980d      	ldr	r0, [sp, #52]	; 0x34
    620e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6210:	aa2b      	add	r2, sp, #172	; 0xac
    6212:	f002 fc21 	bl	8a58 <__ssprint_r>
    6216:	2800      	cmp	r0, #0
    6218:	f47f ab7a 	bne.w	5910 <_svfprintf_r+0x230>
    621c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6220:	ae38      	add	r6, sp, #224	; 0xe0
    6222:	e4bf      	b.n	5ba4 <_svfprintf_r+0x4c4>
    6224:	980d      	ldr	r0, [sp, #52]	; 0x34
    6226:	990c      	ldr	r1, [sp, #48]	; 0x30
    6228:	aa2b      	add	r2, sp, #172	; 0xac
    622a:	f002 fc15 	bl	8a58 <__ssprint_r>
    622e:	2800      	cmp	r0, #0
    6230:	f47f ab6e 	bne.w	5910 <_svfprintf_r+0x230>
    6234:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6238:	ae38      	add	r6, sp, #224	; 0xe0
    623a:	e46d      	b.n	5b18 <_svfprintf_r+0x438>
    623c:	980d      	ldr	r0, [sp, #52]	; 0x34
    623e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6240:	aa2b      	add	r2, sp, #172	; 0xac
    6242:	f002 fc09 	bl	8a58 <__ssprint_r>
    6246:	2800      	cmp	r0, #0
    6248:	f47f ab62 	bne.w	5910 <_svfprintf_r+0x230>
    624c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6250:	ae38      	add	r6, sp, #224	; 0xe0
    6252:	e450      	b.n	5af6 <_svfprintf_r+0x416>
    6254:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6256:	af38      	add	r7, sp, #224	; 0xe0
    6258:	f7ff bbd0 	b.w	59fc <_svfprintf_r+0x31c>
    625c:	2302      	movs	r3, #2
    625e:	f7ff bba9 	b.w	59b4 <_svfprintf_r+0x2d4>
    6262:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6264:	2b00      	cmp	r3, #0
    6266:	f340 81dd 	ble.w	6624 <_svfprintf_r+0xf44>
    626a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    626c:	9d14      	ldr	r5, [sp, #80]	; 0x50
    626e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    6272:	42ac      	cmp	r4, r5
    6274:	bfa8      	it	ge
    6276:	462c      	movge	r4, r5
    6278:	2c00      	cmp	r4, #0
    627a:	44ba      	add	sl, r7
    627c:	dd0b      	ble.n	6296 <_svfprintf_r+0xbb6>
    627e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6280:	44a4      	add	ip, r4
    6282:	3301      	adds	r3, #1
    6284:	2b07      	cmp	r3, #7
    6286:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    628a:	6037      	str	r7, [r6, #0]
    628c:	6074      	str	r4, [r6, #4]
    628e:	932c      	str	r3, [sp, #176]	; 0xb0
    6290:	f300 831e 	bgt.w	68d0 <_svfprintf_r+0x11f0>
    6294:	3608      	adds	r6, #8
    6296:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6298:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    629c:	1b2c      	subs	r4, r5, r4
    629e:	2c00      	cmp	r4, #0
    62a0:	f340 80d7 	ble.w	6452 <_svfprintf_r+0xd72>
    62a4:	2c10      	cmp	r4, #16
    62a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    62a8:	4d07      	ldr	r5, [pc, #28]	; (62c8 <_svfprintf_r+0xbe8>)
    62aa:	f340 81a3 	ble.w	65f4 <_svfprintf_r+0xf14>
    62ae:	970a      	str	r7, [sp, #40]	; 0x28
    62b0:	f04f 0810 	mov.w	r8, #16
    62b4:	462f      	mov	r7, r5
    62b6:	4662      	mov	r2, ip
    62b8:	4625      	mov	r5, r4
    62ba:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    62be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    62c0:	e009      	b.n	62d6 <_svfprintf_r+0xbf6>
    62c2:	bf00      	nop
    62c4:	0000ac2c 	.word	0x0000ac2c
    62c8:	0000abdc 	.word	0x0000abdc
    62cc:	3608      	adds	r6, #8
    62ce:	3d10      	subs	r5, #16
    62d0:	2d10      	cmp	r5, #16
    62d2:	f340 818b 	ble.w	65ec <_svfprintf_r+0xf0c>
    62d6:	3301      	adds	r3, #1
    62d8:	3210      	adds	r2, #16
    62da:	2b07      	cmp	r3, #7
    62dc:	922d      	str	r2, [sp, #180]	; 0xb4
    62de:	932c      	str	r3, [sp, #176]	; 0xb0
    62e0:	e886 0180 	stmia.w	r6, {r7, r8}
    62e4:	ddf2      	ble.n	62cc <_svfprintf_r+0xbec>
    62e6:	4658      	mov	r0, fp
    62e8:	4621      	mov	r1, r4
    62ea:	aa2b      	add	r2, sp, #172	; 0xac
    62ec:	f002 fbb4 	bl	8a58 <__ssprint_r>
    62f0:	2800      	cmp	r0, #0
    62f2:	f47f ab0d 	bne.w	5910 <_svfprintf_r+0x230>
    62f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    62f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    62fa:	ae38      	add	r6, sp, #224	; 0xe0
    62fc:	e7e7      	b.n	62ce <_svfprintf_r+0xbee>
    62fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    6300:	990c      	ldr	r1, [sp, #48]	; 0x30
    6302:	aa2b      	add	r2, sp, #172	; 0xac
    6304:	f002 fba8 	bl	8a58 <__ssprint_r>
    6308:	2800      	cmp	r0, #0
    630a:	f47f ab01 	bne.w	5910 <_svfprintf_r+0x230>
    630e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    6312:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6316:	ae38      	add	r6, sp, #224	; 0xe0
    6318:	f7ff bbda 	b.w	5ad0 <_svfprintf_r+0x3f0>
    631c:	1e6f      	subs	r7, r5, #1
    631e:	2f00      	cmp	r7, #0
    6320:	f77f af50 	ble.w	61c4 <_svfprintf_r+0xae4>
    6324:	2f10      	cmp	r7, #16
    6326:	4dae      	ldr	r5, [pc, #696]	; (65e0 <_svfprintf_r+0xf00>)
    6328:	dd23      	ble.n	6372 <_svfprintf_r+0xc92>
    632a:	4643      	mov	r3, r8
    632c:	f04f 0a10 	mov.w	sl, #16
    6330:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    6334:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    6338:	e004      	b.n	6344 <_svfprintf_r+0xc64>
    633a:	3f10      	subs	r7, #16
    633c:	2f10      	cmp	r7, #16
    633e:	f106 0608 	add.w	r6, r6, #8
    6342:	dd15      	ble.n	6370 <_svfprintf_r+0xc90>
    6344:	3401      	adds	r4, #1
    6346:	3310      	adds	r3, #16
    6348:	2c07      	cmp	r4, #7
    634a:	932d      	str	r3, [sp, #180]	; 0xb4
    634c:	942c      	str	r4, [sp, #176]	; 0xb0
    634e:	e886 0420 	stmia.w	r6, {r5, sl}
    6352:	ddf2      	ble.n	633a <_svfprintf_r+0xc5a>
    6354:	4640      	mov	r0, r8
    6356:	4659      	mov	r1, fp
    6358:	aa2b      	add	r2, sp, #172	; 0xac
    635a:	f002 fb7d 	bl	8a58 <__ssprint_r>
    635e:	2800      	cmp	r0, #0
    6360:	f47f aad6 	bne.w	5910 <_svfprintf_r+0x230>
    6364:	3f10      	subs	r7, #16
    6366:	2f10      	cmp	r7, #16
    6368:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    636a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    636c:	ae38      	add	r6, sp, #224	; 0xe0
    636e:	dce9      	bgt.n	6344 <_svfprintf_r+0xc64>
    6370:	4698      	mov	r8, r3
    6372:	3401      	adds	r4, #1
    6374:	44b8      	add	r8, r7
    6376:	2c07      	cmp	r4, #7
    6378:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    637c:	942c      	str	r4, [sp, #176]	; 0xb0
    637e:	e886 00a0 	stmia.w	r6, {r5, r7}
    6382:	f77f af1e 	ble.w	61c2 <_svfprintf_r+0xae2>
    6386:	980d      	ldr	r0, [sp, #52]	; 0x34
    6388:	990c      	ldr	r1, [sp, #48]	; 0x30
    638a:	aa2b      	add	r2, sp, #172	; 0xac
    638c:	f002 fb64 	bl	8a58 <__ssprint_r>
    6390:	2800      	cmp	r0, #0
    6392:	f47f aabd 	bne.w	5910 <_svfprintf_r+0x230>
    6396:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    639a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    639c:	ae38      	add	r6, sp, #224	; 0xe0
    639e:	e711      	b.n	61c4 <_svfprintf_r+0xae4>
    63a0:	4694      	mov	ip, r2
    63a2:	3301      	adds	r3, #1
    63a4:	44a4      	add	ip, r4
    63a6:	2b07      	cmp	r3, #7
    63a8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    63ac:	932c      	str	r3, [sp, #176]	; 0xb0
    63ae:	6035      	str	r5, [r6, #0]
    63b0:	6074      	str	r4, [r6, #4]
    63b2:	f77f ac06 	ble.w	5bc2 <_svfprintf_r+0x4e2>
    63b6:	e713      	b.n	61e0 <_svfprintf_r+0xb00>
    63b8:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
    63bc:	4620      	mov	r0, r4
    63be:	4629      	mov	r1, r5
    63c0:	220a      	movs	r2, #10
    63c2:	2300      	movs	r3, #0
    63c4:	f003 fc42 	bl	9c4c <__aeabi_uldivmod>
    63c8:	3230      	adds	r2, #48	; 0x30
    63ca:	f88b 2000 	strb.w	r2, [fp]
    63ce:	4620      	mov	r0, r4
    63d0:	4629      	mov	r1, r5
    63d2:	220a      	movs	r2, #10
    63d4:	2300      	movs	r3, #0
    63d6:	f003 fc39 	bl	9c4c <__aeabi_uldivmod>
    63da:	4604      	mov	r4, r0
    63dc:	460d      	mov	r5, r1
    63de:	ea54 0c05 	orrs.w	ip, r4, r5
    63e2:	465f      	mov	r7, fp
    63e4:	f10b 3bff 	add.w	fp, fp, #4294967295
    63e8:	d1e8      	bne.n	63bc <_svfprintf_r+0xcdc>
    63ea:	9d08      	ldr	r5, [sp, #32]
    63ec:	1bec      	subs	r4, r5, r7
    63ee:	f7ff bb05 	b.w	59fc <_svfprintf_r+0x31c>
    63f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    63f4:	2301      	movs	r3, #1
    63f6:	682c      	ldr	r4, [r5, #0]
    63f8:	3504      	adds	r5, #4
    63fa:	9510      	str	r5, [sp, #64]	; 0x40
    63fc:	2500      	movs	r5, #0
    63fe:	f7ff bad9 	b.w	59b4 <_svfprintf_r+0x2d4>
    6402:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6404:	682c      	ldr	r4, [r5, #0]
    6406:	3504      	adds	r5, #4
    6408:	9510      	str	r5, [sp, #64]	; 0x40
    640a:	2500      	movs	r5, #0
    640c:	f7ff bad2 	b.w	59b4 <_svfprintf_r+0x2d4>
    6410:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6412:	682c      	ldr	r4, [r5, #0]
    6414:	3504      	adds	r5, #4
    6416:	9510      	str	r5, [sp, #64]	; 0x40
    6418:	17e5      	asrs	r5, r4, #31
    641a:	4622      	mov	r2, r4
    641c:	462b      	mov	r3, r5
    641e:	2a00      	cmp	r2, #0
    6420:	f173 0c00 	sbcs.w	ip, r3, #0
    6424:	f6bf ac6c 	bge.w	5d00 <_svfprintf_r+0x620>
    6428:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    642c:	4264      	negs	r4, r4
    642e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    6432:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    6436:	2301      	movs	r3, #1
    6438:	f7ff bac0 	b.w	59bc <_svfprintf_r+0x2dc>
    643c:	980d      	ldr	r0, [sp, #52]	; 0x34
    643e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6440:	aa2b      	add	r2, sp, #172	; 0xac
    6442:	f002 fb09 	bl	8a58 <__ssprint_r>
    6446:	2800      	cmp	r0, #0
    6448:	f47f aa62 	bne.w	5910 <_svfprintf_r+0x230>
    644c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6450:	ae38      	add	r6, sp, #224	; 0xe0
    6452:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6454:	9c25      	ldr	r4, [sp, #148]	; 0x94
    6456:	442f      	add	r7, r5
    6458:	9d11      	ldr	r5, [sp, #68]	; 0x44
    645a:	42ac      	cmp	r4, r5
    645c:	db42      	blt.n	64e4 <_svfprintf_r+0xe04>
    645e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6460:	07e9      	lsls	r1, r5, #31
    6462:	d43f      	bmi.n	64e4 <_svfprintf_r+0xe04>
    6464:	9811      	ldr	r0, [sp, #68]	; 0x44
    6466:	ebc7 050a 	rsb	r5, r7, sl
    646a:	1b04      	subs	r4, r0, r4
    646c:	42ac      	cmp	r4, r5
    646e:	bfb8      	it	lt
    6470:	4625      	movlt	r5, r4
    6472:	2d00      	cmp	r5, #0
    6474:	dd0b      	ble.n	648e <_svfprintf_r+0xdae>
    6476:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6478:	44ac      	add	ip, r5
    647a:	3301      	adds	r3, #1
    647c:	2b07      	cmp	r3, #7
    647e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    6482:	6037      	str	r7, [r6, #0]
    6484:	6075      	str	r5, [r6, #4]
    6486:	932c      	str	r3, [sp, #176]	; 0xb0
    6488:	f300 824c 	bgt.w	6924 <_svfprintf_r+0x1244>
    648c:	3608      	adds	r6, #8
    648e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    6492:	1b64      	subs	r4, r4, r5
    6494:	2c00      	cmp	r4, #0
    6496:	f77f ab95 	ble.w	5bc4 <_svfprintf_r+0x4e4>
    649a:	2c10      	cmp	r4, #16
    649c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    649e:	4d50      	ldr	r5, [pc, #320]	; (65e0 <_svfprintf_r+0xf00>)
    64a0:	f77f af7f 	ble.w	63a2 <_svfprintf_r+0xcc2>
    64a4:	2710      	movs	r7, #16
    64a6:	4662      	mov	r2, ip
    64a8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    64ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    64b0:	e004      	b.n	64bc <_svfprintf_r+0xddc>
    64b2:	3608      	adds	r6, #8
    64b4:	3c10      	subs	r4, #16
    64b6:	2c10      	cmp	r4, #16
    64b8:	f77f af72 	ble.w	63a0 <_svfprintf_r+0xcc0>
    64bc:	3301      	adds	r3, #1
    64be:	3210      	adds	r2, #16
    64c0:	2b07      	cmp	r3, #7
    64c2:	922d      	str	r2, [sp, #180]	; 0xb4
    64c4:	932c      	str	r3, [sp, #176]	; 0xb0
    64c6:	e886 00a0 	stmia.w	r6, {r5, r7}
    64ca:	ddf2      	ble.n	64b2 <_svfprintf_r+0xdd2>
    64cc:	4640      	mov	r0, r8
    64ce:	4651      	mov	r1, sl
    64d0:	aa2b      	add	r2, sp, #172	; 0xac
    64d2:	f002 fac1 	bl	8a58 <__ssprint_r>
    64d6:	2800      	cmp	r0, #0
    64d8:	f47f aa1a 	bne.w	5910 <_svfprintf_r+0x230>
    64dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    64de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    64e0:	ae38      	add	r6, sp, #224	; 0xe0
    64e2:	e7e7      	b.n	64b4 <_svfprintf_r+0xdd4>
    64e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    64e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    64e8:	44ac      	add	ip, r5
    64ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
    64ec:	3301      	adds	r3, #1
    64ee:	6035      	str	r5, [r6, #0]
    64f0:	9d18      	ldr	r5, [sp, #96]	; 0x60
    64f2:	2b07      	cmp	r3, #7
    64f4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    64f8:	6075      	str	r5, [r6, #4]
    64fa:	932c      	str	r3, [sp, #176]	; 0xb0
    64fc:	f300 81f4 	bgt.w	68e8 <_svfprintf_r+0x1208>
    6500:	3608      	adds	r6, #8
    6502:	e7af      	b.n	6464 <_svfprintf_r+0xd84>
    6504:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6506:	07ea      	lsls	r2, r5, #31
    6508:	f53f ae2a 	bmi.w	6160 <_svfprintf_r+0xa80>
    650c:	3401      	adds	r4, #1
    650e:	f10c 0801 	add.w	r8, ip, #1
    6512:	2301      	movs	r3, #1
    6514:	2c07      	cmp	r4, #7
    6516:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
    651a:	942c      	str	r4, [sp, #176]	; 0xb0
    651c:	6037      	str	r7, [r6, #0]
    651e:	6073      	str	r3, [r6, #4]
    6520:	f77f ae4f 	ble.w	61c2 <_svfprintf_r+0xae2>
    6524:	e72f      	b.n	6386 <_svfprintf_r+0xca6>
    6526:	980d      	ldr	r0, [sp, #52]	; 0x34
    6528:	990c      	ldr	r1, [sp, #48]	; 0x30
    652a:	aa2b      	add	r2, sp, #172	; 0xac
    652c:	f002 fa94 	bl	8a58 <__ssprint_r>
    6530:	2800      	cmp	r0, #0
    6532:	f47f a9ed 	bne.w	5910 <_svfprintf_r+0x230>
    6536:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    6538:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    653a:	ae38      	add	r6, sp, #224	; 0xe0
    653c:	e61c      	b.n	6178 <_svfprintf_r+0xa98>
    653e:	980d      	ldr	r0, [sp, #52]	; 0x34
    6540:	990c      	ldr	r1, [sp, #48]	; 0x30
    6542:	aa2b      	add	r2, sp, #172	; 0xac
    6544:	f002 fa88 	bl	8a58 <__ssprint_r>
    6548:	2800      	cmp	r0, #0
    654a:	f47f a9e1 	bne.w	5910 <_svfprintf_r+0x230>
    654e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
    6552:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    6554:	ae38      	add	r6, sp, #224	; 0xe0
    6556:	e61e      	b.n	6196 <_svfprintf_r+0xab6>
    6558:	980d      	ldr	r0, [sp, #52]	; 0x34
    655a:	990c      	ldr	r1, [sp, #48]	; 0x30
    655c:	aa2b      	add	r2, sp, #172	; 0xac
    655e:	f002 fa7b 	bl	8a58 <__ssprint_r>
    6562:	2800      	cmp	r0, #0
    6564:	f47f a9d4 	bne.w	5910 <_svfprintf_r+0x230>
    6568:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    656c:	ae38      	add	r6, sp, #224	; 0xe0
    656e:	f7ff bad7 	b.w	5b20 <_svfprintf_r+0x440>
    6572:	f002 fa37 	bl	89e4 <__fpclassifyd>
    6576:	2800      	cmp	r0, #0
    6578:	f040 80bb 	bne.w	66f2 <_svfprintf_r+0x1012>
    657c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    657e:	4f19      	ldr	r7, [pc, #100]	; (65e4 <_svfprintf_r+0xf04>)
    6580:	4b19      	ldr	r3, [pc, #100]	; (65e8 <_svfprintf_r+0xf08>)
    6582:	f04f 0c03 	mov.w	ip, #3
    6586:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    658a:	9409      	str	r4, [sp, #36]	; 0x24
    658c:	900a      	str	r0, [sp, #40]	; 0x28
    658e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    6592:	9014      	str	r0, [sp, #80]	; 0x50
    6594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    6598:	bfd8      	it	le
    659a:	461f      	movle	r7, r3
    659c:	4664      	mov	r4, ip
    659e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    65a2:	f7ff ba34 	b.w	5a0e <_svfprintf_r+0x32e>
    65a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    65a8:	0664      	lsls	r4, r4, #25
    65aa:	f140 8150 	bpl.w	684e <_svfprintf_r+0x116e>
    65ae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    65b2:	2500      	movs	r5, #0
    65b4:	f8bc 4000 	ldrh.w	r4, [ip]
    65b8:	f10c 0c04 	add.w	ip, ip, #4
    65bc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    65c0:	f7ff b9e4 	b.w	598c <_svfprintf_r+0x2ac>
    65c4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    65c8:	f01c 0f10 	tst.w	ip, #16
    65cc:	f000 8146 	beq.w	685c <_svfprintf_r+0x117c>
    65d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    65d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    65d4:	6823      	ldr	r3, [r4, #0]
    65d6:	3404      	adds	r4, #4
    65d8:	9410      	str	r4, [sp, #64]	; 0x40
    65da:	601d      	str	r5, [r3, #0]
    65dc:	f7ff b8a6 	b.w	572c <_svfprintf_r+0x4c>
    65e0:	0000abdc 	.word	0x0000abdc
    65e4:	0000abf8 	.word	0x0000abf8
    65e8:	0000abf4 	.word	0x0000abf4
    65ec:	462c      	mov	r4, r5
    65ee:	463d      	mov	r5, r7
    65f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    65f2:	4694      	mov	ip, r2
    65f4:	3301      	adds	r3, #1
    65f6:	44a4      	add	ip, r4
    65f8:	2b07      	cmp	r3, #7
    65fa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    65fe:	932c      	str	r3, [sp, #176]	; 0xb0
    6600:	6035      	str	r5, [r6, #0]
    6602:	6074      	str	r4, [r6, #4]
    6604:	f73f af1a 	bgt.w	643c <_svfprintf_r+0xd5c>
    6608:	3608      	adds	r6, #8
    660a:	e722      	b.n	6452 <_svfprintf_r+0xd72>
    660c:	980d      	ldr	r0, [sp, #52]	; 0x34
    660e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6610:	aa2b      	add	r2, sp, #172	; 0xac
    6612:	f002 fa21 	bl	8a58 <__ssprint_r>
    6616:	2800      	cmp	r0, #0
    6618:	f47f a97a 	bne.w	5910 <_svfprintf_r+0x230>
    661c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6620:	ae38      	add	r6, sp, #224	; 0xe0
    6622:	e507      	b.n	6034 <_svfprintf_r+0x954>
    6624:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    6626:	49b7      	ldr	r1, [pc, #732]	; (6904 <_svfprintf_r+0x1224>)
    6628:	3201      	adds	r2, #1
    662a:	f10c 0c01 	add.w	ip, ip, #1
    662e:	2001      	movs	r0, #1
    6630:	2a07      	cmp	r2, #7
    6632:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    6636:	922c      	str	r2, [sp, #176]	; 0xb0
    6638:	6031      	str	r1, [r6, #0]
    663a:	6070      	str	r0, [r6, #4]
    663c:	f300 80f7 	bgt.w	682e <_svfprintf_r+0x114e>
    6640:	3608      	adds	r6, #8
    6642:	461c      	mov	r4, r3
    6644:	b92c      	cbnz	r4, 6652 <_svfprintf_r+0xf72>
    6646:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6648:	b91d      	cbnz	r5, 6652 <_svfprintf_r+0xf72>
    664a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    664c:	07e8      	lsls	r0, r5, #31
    664e:	f57f aab9 	bpl.w	5bc4 <_svfprintf_r+0x4e4>
    6652:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6654:	9d15      	ldr	r5, [sp, #84]	; 0x54
    6656:	9918      	ldr	r1, [sp, #96]	; 0x60
    6658:	3301      	adds	r3, #1
    665a:	6035      	str	r5, [r6, #0]
    665c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    665e:	4461      	add	r1, ip
    6660:	2b07      	cmp	r3, #7
    6662:	912d      	str	r1, [sp, #180]	; 0xb4
    6664:	6075      	str	r5, [r6, #4]
    6666:	932c      	str	r3, [sp, #176]	; 0xb0
    6668:	f300 81de 	bgt.w	6a28 <_svfprintf_r+0x1348>
    666c:	f106 0208 	add.w	r2, r6, #8
    6670:	4264      	negs	r4, r4
    6672:	2c00      	cmp	r4, #0
    6674:	f340 810b 	ble.w	688e <_svfprintf_r+0x11ae>
    6678:	2c10      	cmp	r4, #16
    667a:	4da3      	ldr	r5, [pc, #652]	; (6908 <_svfprintf_r+0x1228>)
    667c:	f340 8148 	ble.w	6910 <_svfprintf_r+0x1230>
    6680:	46a3      	mov	fp, r4
    6682:	2610      	movs	r6, #16
    6684:	460c      	mov	r4, r1
    6686:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    668a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    668e:	e006      	b.n	669e <_svfprintf_r+0xfbe>
    6690:	3208      	adds	r2, #8
    6692:	f1ab 0b10 	sub.w	fp, fp, #16
    6696:	f1bb 0f10 	cmp.w	fp, #16
    669a:	f340 8137 	ble.w	690c <_svfprintf_r+0x122c>
    669e:	3301      	adds	r3, #1
    66a0:	3410      	adds	r4, #16
    66a2:	2b07      	cmp	r3, #7
    66a4:	942d      	str	r4, [sp, #180]	; 0xb4
    66a6:	932c      	str	r3, [sp, #176]	; 0xb0
    66a8:	e882 0060 	stmia.w	r2, {r5, r6}
    66ac:	ddf0      	ble.n	6690 <_svfprintf_r+0xfb0>
    66ae:	4640      	mov	r0, r8
    66b0:	4651      	mov	r1, sl
    66b2:	aa2b      	add	r2, sp, #172	; 0xac
    66b4:	f002 f9d0 	bl	8a58 <__ssprint_r>
    66b8:	2800      	cmp	r0, #0
    66ba:	f47f a929 	bne.w	5910 <_svfprintf_r+0x230>
    66be:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
    66c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    66c2:	aa38      	add	r2, sp, #224	; 0xe0
    66c4:	e7e5      	b.n	6692 <_svfprintf_r+0xfb2>
    66c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    66c8:	f109 0901 	add.w	r9, r9, #1
    66cc:	f044 0420 	orr.w	r4, r4, #32
    66d0:	9409      	str	r4, [sp, #36]	; 0x24
    66d2:	f893 8001 	ldrb.w	r8, [r3, #1]
    66d6:	f7ff b85f 	b.w	5798 <_svfprintf_r+0xb8>
    66da:	980d      	ldr	r0, [sp, #52]	; 0x34
    66dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    66de:	aa2b      	add	r2, sp, #172	; 0xac
    66e0:	f002 f9ba 	bl	8a58 <__ssprint_r>
    66e4:	2800      	cmp	r0, #0
    66e6:	f47f a913 	bne.w	5910 <_svfprintf_r+0x230>
    66ea:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    66ee:	ae38      	add	r6, sp, #224	; 0xe0
    66f0:	e4b6      	b.n	6060 <_svfprintf_r+0x980>
    66f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    66f4:	f028 0a20 	bic.w	sl, r8, #32
    66f8:	3501      	adds	r5, #1
    66fa:	f000 80a5 	beq.w	6848 <_svfprintf_r+0x1168>
    66fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    6702:	d104      	bne.n	670e <_svfprintf_r+0x102e>
    6704:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6706:	2d00      	cmp	r5, #0
    6708:	bf08      	it	eq
    670a:	2501      	moveq	r5, #1
    670c:	950a      	str	r5, [sp, #40]	; 0x28
    670e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    6712:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    6716:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
    671a:	2b00      	cmp	r3, #0
    671c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
    6720:	f2c0 819c 	blt.w	6a5c <_svfprintf_r+0x137c>
    6724:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    6728:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
    672c:	f04f 0b00 	mov.w	fp, #0
    6730:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    6734:	f000 819b 	beq.w	6a6e <_svfprintf_r+0x138e>
    6738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    673c:	f000 81a9 	beq.w	6a92 <_svfprintf_r+0x13b2>
    6740:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
    6744:	bf0a      	itet	eq
    6746:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
    6748:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
    674a:	1c65      	addeq	r5, r4, #1
    674c:	2002      	movs	r0, #2
    674e:	a925      	add	r1, sp, #148	; 0x94
    6750:	aa26      	add	r2, sp, #152	; 0x98
    6752:	ab29      	add	r3, sp, #164	; 0xa4
    6754:	e88d 0021 	stmia.w	sp, {r0, r5}
    6758:	9203      	str	r2, [sp, #12]
    675a:	9304      	str	r3, [sp, #16]
    675c:	9102      	str	r1, [sp, #8]
    675e:	980d      	ldr	r0, [sp, #52]	; 0x34
    6760:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    6764:	f000 fb98 	bl	6e98 <_dtoa_r>
    6768:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    676c:	4607      	mov	r7, r0
    676e:	d002      	beq.n	6776 <_svfprintf_r+0x1096>
    6770:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    6774:	d105      	bne.n	6782 <_svfprintf_r+0x10a2>
    6776:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    677a:	f01c 0f01 	tst.w	ip, #1
    677e:	f000 819c 	beq.w	6aba <_svfprintf_r+0x13da>
    6782:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
    6786:	eb07 0405 	add.w	r4, r7, r5
    678a:	f000 811c 	beq.w	69c6 <_svfprintf_r+0x12e6>
    678e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
    6792:	2200      	movs	r2, #0
    6794:	2300      	movs	r3, #0
    6796:	f003 f9ff 	bl	9b98 <__aeabi_dcmpeq>
    679a:	2800      	cmp	r0, #0
    679c:	f040 8105 	bne.w	69aa <_svfprintf_r+0x12ca>
    67a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    67a2:	429c      	cmp	r4, r3
    67a4:	d906      	bls.n	67b4 <_svfprintf_r+0x10d4>
    67a6:	2130      	movs	r1, #48	; 0x30
    67a8:	1c5a      	adds	r2, r3, #1
    67aa:	9229      	str	r2, [sp, #164]	; 0xa4
    67ac:	7019      	strb	r1, [r3, #0]
    67ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    67b0:	429c      	cmp	r4, r3
    67b2:	d8f9      	bhi.n	67a8 <_svfprintf_r+0x10c8>
    67b4:	1bdb      	subs	r3, r3, r7
    67b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
    67ba:	9311      	str	r3, [sp, #68]	; 0x44
    67bc:	f000 80ed 	beq.w	699a <_svfprintf_r+0x12ba>
    67c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    67c4:	f340 81f2 	ble.w	6bac <_svfprintf_r+0x14cc>
    67c8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    67cc:	f000 8168 	beq.w	6aa0 <_svfprintf_r+0x13c0>
    67d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
    67d2:	9414      	str	r4, [sp, #80]	; 0x50
    67d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
    67d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    67d8:	42ac      	cmp	r4, r5
    67da:	f300 8132 	bgt.w	6a42 <_svfprintf_r+0x1362>
    67de:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    67e2:	f01c 0f01 	tst.w	ip, #1
    67e6:	f040 81ad 	bne.w	6b44 <_svfprintf_r+0x1464>
    67ea:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    67ee:	462c      	mov	r4, r5
    67f0:	f04f 0867 	mov.w	r8, #103	; 0x67
    67f4:	f1bb 0f00 	cmp.w	fp, #0
    67f8:	f040 80b2 	bne.w	6960 <_svfprintf_r+0x1280>
    67fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
    67fe:	930b      	str	r3, [sp, #44]	; 0x2c
    6800:	9509      	str	r5, [sp, #36]	; 0x24
    6802:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    6806:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    680a:	f7ff b900 	b.w	5a0e <_svfprintf_r+0x32e>
    680e:	980d      	ldr	r0, [sp, #52]	; 0x34
    6810:	2140      	movs	r1, #64	; 0x40
    6812:	f001 fa7d 	bl	7d10 <_malloc_r>
    6816:	6020      	str	r0, [r4, #0]
    6818:	6120      	str	r0, [r4, #16]
    681a:	2800      	cmp	r0, #0
    681c:	f000 81bf 	beq.w	6b9e <_svfprintf_r+0x14be>
    6820:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    6824:	2340      	movs	r3, #64	; 0x40
    6826:	f8cc 3014 	str.w	r3, [ip, #20]
    682a:	f7fe bf6f 	b.w	570c <_svfprintf_r+0x2c>
    682e:	980d      	ldr	r0, [sp, #52]	; 0x34
    6830:	990c      	ldr	r1, [sp, #48]	; 0x30
    6832:	aa2b      	add	r2, sp, #172	; 0xac
    6834:	f002 f910 	bl	8a58 <__ssprint_r>
    6838:	2800      	cmp	r0, #0
    683a:	f47f a869 	bne.w	5910 <_svfprintf_r+0x230>
    683e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    6840:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    6844:	ae38      	add	r6, sp, #224	; 0xe0
    6846:	e6fd      	b.n	6644 <_svfprintf_r+0xf64>
    6848:	2406      	movs	r4, #6
    684a:	940a      	str	r4, [sp, #40]	; 0x28
    684c:	e75f      	b.n	670e <_svfprintf_r+0x102e>
    684e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6850:	682c      	ldr	r4, [r5, #0]
    6852:	3504      	adds	r5, #4
    6854:	9510      	str	r5, [sp, #64]	; 0x40
    6856:	2500      	movs	r5, #0
    6858:	f7ff b898 	b.w	598c <_svfprintf_r+0x2ac>
    685c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    6860:	f01c 0f40 	tst.w	ip, #64	; 0x40
    6864:	f000 8087 	beq.w	6976 <_svfprintf_r+0x1296>
    6868:	9c10      	ldr	r4, [sp, #64]	; 0x40
    686a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    686c:	6823      	ldr	r3, [r4, #0]
    686e:	3404      	adds	r4, #4
    6870:	9410      	str	r4, [sp, #64]	; 0x40
    6872:	801d      	strh	r5, [r3, #0]
    6874:	f7fe bf5a 	b.w	572c <_svfprintf_r+0x4c>
    6878:	980d      	ldr	r0, [sp, #52]	; 0x34
    687a:	990c      	ldr	r1, [sp, #48]	; 0x30
    687c:	aa2b      	add	r2, sp, #172	; 0xac
    687e:	f002 f8eb 	bl	8a58 <__ssprint_r>
    6882:	2800      	cmp	r0, #0
    6884:	f47f a844 	bne.w	5910 <_svfprintf_r+0x230>
    6888:	992d      	ldr	r1, [sp, #180]	; 0xb4
    688a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    688c:	aa38      	add	r2, sp, #224	; 0xe0
    688e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    6892:	3301      	adds	r3, #1
    6894:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6896:	448c      	add	ip, r1
    6898:	2b07      	cmp	r3, #7
    689a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    689e:	932c      	str	r3, [sp, #176]	; 0xb0
    68a0:	6017      	str	r7, [r2, #0]
    68a2:	6054      	str	r4, [r2, #4]
    68a4:	f73f ac9c 	bgt.w	61e0 <_svfprintf_r+0xb00>
    68a8:	f102 0608 	add.w	r6, r2, #8
    68ac:	f7ff b98a 	b.w	5bc4 <_svfprintf_r+0x4e4>
    68b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    68b4:	f7fe feb2 	bl	561c <strlen>
    68b8:	9510      	str	r5, [sp, #64]	; 0x40
    68ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    68bc:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    68c0:	4604      	mov	r4, r0
    68c2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    68c6:	9514      	str	r5, [sp, #80]	; 0x50
    68c8:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    68cc:	f7ff b89f 	b.w	5a0e <_svfprintf_r+0x32e>
    68d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    68d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    68d4:	aa2b      	add	r2, sp, #172	; 0xac
    68d6:	f002 f8bf 	bl	8a58 <__ssprint_r>
    68da:	2800      	cmp	r0, #0
    68dc:	f47f a818 	bne.w	5910 <_svfprintf_r+0x230>
    68e0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    68e4:	ae38      	add	r6, sp, #224	; 0xe0
    68e6:	e4d6      	b.n	6296 <_svfprintf_r+0xbb6>
    68e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    68ea:	990c      	ldr	r1, [sp, #48]	; 0x30
    68ec:	aa2b      	add	r2, sp, #172	; 0xac
    68ee:	f002 f8b3 	bl	8a58 <__ssprint_r>
    68f2:	2800      	cmp	r0, #0
    68f4:	f47f a80c 	bne.w	5910 <_svfprintf_r+0x230>
    68f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    68fa:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    68fe:	ae38      	add	r6, sp, #224	; 0xe0
    6900:	e5b0      	b.n	6464 <_svfprintf_r+0xd84>
    6902:	bf00      	nop
    6904:	0000ac2c 	.word	0x0000ac2c
    6908:	0000abdc 	.word	0x0000abdc
    690c:	4621      	mov	r1, r4
    690e:	465c      	mov	r4, fp
    6910:	3301      	adds	r3, #1
    6912:	4421      	add	r1, r4
    6914:	2b07      	cmp	r3, #7
    6916:	912d      	str	r1, [sp, #180]	; 0xb4
    6918:	932c      	str	r3, [sp, #176]	; 0xb0
    691a:	6015      	str	r5, [r2, #0]
    691c:	6054      	str	r4, [r2, #4]
    691e:	dcab      	bgt.n	6878 <_svfprintf_r+0x1198>
    6920:	3208      	adds	r2, #8
    6922:	e7b4      	b.n	688e <_svfprintf_r+0x11ae>
    6924:	980d      	ldr	r0, [sp, #52]	; 0x34
    6926:	990c      	ldr	r1, [sp, #48]	; 0x30
    6928:	aa2b      	add	r2, sp, #172	; 0xac
    692a:	f002 f895 	bl	8a58 <__ssprint_r>
    692e:	2800      	cmp	r0, #0
    6930:	f47e afee 	bne.w	5910 <_svfprintf_r+0x230>
    6934:	9c25      	ldr	r4, [sp, #148]	; 0x94
    6936:	9911      	ldr	r1, [sp, #68]	; 0x44
    6938:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    693c:	1b0c      	subs	r4, r1, r4
    693e:	ae38      	add	r6, sp, #224	; 0xe0
    6940:	e5a5      	b.n	648e <_svfprintf_r+0xdae>
    6942:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6944:	46ba      	mov	sl, r7
    6946:	2c06      	cmp	r4, #6
    6948:	bf28      	it	cs
    694a:	2406      	movcs	r4, #6
    694c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
    6950:	970a      	str	r7, [sp, #40]	; 0x28
    6952:	9714      	str	r7, [sp, #80]	; 0x50
    6954:	9510      	str	r5, [sp, #64]	; 0x40
    6956:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    695a:	4f97      	ldr	r7, [pc, #604]	; (6bb8 <_svfprintf_r+0x14d8>)
    695c:	f7ff b857 	b.w	5a0e <_svfprintf_r+0x32e>
    6960:	9d12      	ldr	r5, [sp, #72]	; 0x48
    6962:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    6966:	9509      	str	r5, [sp, #36]	; 0x24
    6968:	2500      	movs	r5, #0
    696a:	930b      	str	r3, [sp, #44]	; 0x2c
    696c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    6970:	950a      	str	r5, [sp, #40]	; 0x28
    6972:	f7ff b84f 	b.w	5a14 <_svfprintf_r+0x334>
    6976:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    697a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    697c:	f8dc 3000 	ldr.w	r3, [ip]
    6980:	f10c 0c04 	add.w	ip, ip, #4
    6984:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    6988:	601c      	str	r4, [r3, #0]
    698a:	f7fe becf 	b.w	572c <_svfprintf_r+0x4c>
    698e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
    6992:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
    6996:	f7ff ba99 	b.w	5ecc <_svfprintf_r+0x7ec>
    699a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    699c:	1cdc      	adds	r4, r3, #3
    699e:	db19      	blt.n	69d4 <_svfprintf_r+0x12f4>
    69a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    69a2:	429c      	cmp	r4, r3
    69a4:	db16      	blt.n	69d4 <_svfprintf_r+0x12f4>
    69a6:	9314      	str	r3, [sp, #80]	; 0x50
    69a8:	e714      	b.n	67d4 <_svfprintf_r+0x10f4>
    69aa:	4623      	mov	r3, r4
    69ac:	e702      	b.n	67b4 <_svfprintf_r+0x10d4>
    69ae:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
    69b2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    69b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    69b8:	9510      	str	r5, [sp, #64]	; 0x40
    69ba:	900a      	str	r0, [sp, #40]	; 0x28
    69bc:	9014      	str	r0, [sp, #80]	; 0x50
    69be:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
    69c2:	f7ff b824 	b.w	5a0e <_svfprintf_r+0x32e>
    69c6:	783b      	ldrb	r3, [r7, #0]
    69c8:	2b30      	cmp	r3, #48	; 0x30
    69ca:	f000 80ad 	beq.w	6b28 <_svfprintf_r+0x1448>
    69ce:	9d25      	ldr	r5, [sp, #148]	; 0x94
    69d0:	442c      	add	r4, r5
    69d2:	e6dc      	b.n	678e <_svfprintf_r+0x10ae>
    69d4:	f1a8 0802 	sub.w	r8, r8, #2
    69d8:	1e59      	subs	r1, r3, #1
    69da:	2900      	cmp	r1, #0
    69dc:	9125      	str	r1, [sp, #148]	; 0x94
    69de:	bfba      	itte	lt
    69e0:	4249      	neglt	r1, r1
    69e2:	232d      	movlt	r3, #45	; 0x2d
    69e4:	232b      	movge	r3, #43	; 0x2b
    69e6:	2909      	cmp	r1, #9
    69e8:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
    69ec:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
    69f0:	dc65      	bgt.n	6abe <_svfprintf_r+0x13de>
    69f2:	2330      	movs	r3, #48	; 0x30
    69f4:	3130      	adds	r1, #48	; 0x30
    69f6:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
    69fa:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
    69fe:	ab28      	add	r3, sp, #160	; 0xa0
    6a00:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6a02:	aa27      	add	r2, sp, #156	; 0x9c
    6a04:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6a06:	1a9a      	subs	r2, r3, r2
    6a08:	2d01      	cmp	r5, #1
    6a0a:	9219      	str	r2, [sp, #100]	; 0x64
    6a0c:	4414      	add	r4, r2
    6a0e:	f340 80b7 	ble.w	6b80 <_svfprintf_r+0x14a0>
    6a12:	3401      	adds	r4, #1
    6a14:	2500      	movs	r5, #0
    6a16:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6a1a:	9514      	str	r5, [sp, #80]	; 0x50
    6a1c:	e6ea      	b.n	67f4 <_svfprintf_r+0x1114>
    6a1e:	2400      	movs	r4, #0
    6a20:	4681      	mov	r9, r0
    6a22:	940a      	str	r4, [sp, #40]	; 0x28
    6a24:	f7fe beba 	b.w	579c <_svfprintf_r+0xbc>
    6a28:	980d      	ldr	r0, [sp, #52]	; 0x34
    6a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
    6a2c:	aa2b      	add	r2, sp, #172	; 0xac
    6a2e:	f002 f813 	bl	8a58 <__ssprint_r>
    6a32:	2800      	cmp	r0, #0
    6a34:	f47e af6c 	bne.w	5910 <_svfprintf_r+0x230>
    6a38:	9c25      	ldr	r4, [sp, #148]	; 0x94
    6a3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    6a3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6a3e:	aa38      	add	r2, sp, #224	; 0xe0
    6a40:	e616      	b.n	6670 <_svfprintf_r+0xf90>
    6a42:	9c14      	ldr	r4, [sp, #80]	; 0x50
    6a44:	9d11      	ldr	r5, [sp, #68]	; 0x44
    6a46:	2c00      	cmp	r4, #0
    6a48:	bfd4      	ite	le
    6a4a:	f1c4 0402 	rsble	r4, r4, #2
    6a4e:	2401      	movgt	r4, #1
    6a50:	442c      	add	r4, r5
    6a52:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6a56:	f04f 0867 	mov.w	r8, #103	; 0x67
    6a5a:	e6cb      	b.n	67f4 <_svfprintf_r+0x1114>
    6a5c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6a5e:	9816      	ldr	r0, [sp, #88]	; 0x58
    6a60:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    6a64:	9020      	str	r0, [sp, #128]	; 0x80
    6a66:	9121      	str	r1, [sp, #132]	; 0x84
    6a68:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
    6a6c:	e660      	b.n	6730 <_svfprintf_r+0x1050>
    6a6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6a70:	2003      	movs	r0, #3
    6a72:	a925      	add	r1, sp, #148	; 0x94
    6a74:	aa26      	add	r2, sp, #152	; 0x98
    6a76:	ab29      	add	r3, sp, #164	; 0xa4
    6a78:	9501      	str	r5, [sp, #4]
    6a7a:	9000      	str	r0, [sp, #0]
    6a7c:	9203      	str	r2, [sp, #12]
    6a7e:	9304      	str	r3, [sp, #16]
    6a80:	9102      	str	r1, [sp, #8]
    6a82:	980d      	ldr	r0, [sp, #52]	; 0x34
    6a84:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    6a88:	f000 fa06 	bl	6e98 <_dtoa_r>
    6a8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6a8e:	4607      	mov	r7, r0
    6a90:	e677      	b.n	6782 <_svfprintf_r+0x10a2>
    6a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6a94:	2003      	movs	r0, #3
    6a96:	a925      	add	r1, sp, #148	; 0x94
    6a98:	aa26      	add	r2, sp, #152	; 0x98
    6a9a:	ab29      	add	r3, sp, #164	; 0xa4
    6a9c:	9401      	str	r4, [sp, #4]
    6a9e:	e7ec      	b.n	6a7a <_svfprintf_r+0x139a>
    6aa0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    6aa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6aa4:	2d00      	cmp	r5, #0
    6aa6:	9514      	str	r5, [sp, #80]	; 0x50
    6aa8:	dd63      	ble.n	6b72 <_svfprintf_r+0x1492>
    6aaa:	bbb4      	cbnz	r4, 6b1a <_svfprintf_r+0x143a>
    6aac:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6aae:	07e8      	lsls	r0, r5, #31
    6ab0:	d433      	bmi.n	6b1a <_svfprintf_r+0x143a>
    6ab2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    6ab4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6ab8:	e69c      	b.n	67f4 <_svfprintf_r+0x1114>
    6aba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    6abc:	e67a      	b.n	67b4 <_svfprintf_r+0x10d4>
    6abe:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
    6ac2:	4d3e      	ldr	r5, [pc, #248]	; (6bbc <_svfprintf_r+0x14dc>)
    6ac4:	17cb      	asrs	r3, r1, #31
    6ac6:	fb85 5001 	smull	r5, r0, r5, r1
    6aca:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
    6ace:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    6ad2:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    6ad6:	2809      	cmp	r0, #9
    6ad8:	4613      	mov	r3, r2
    6ada:	f101 0230 	add.w	r2, r1, #48	; 0x30
    6ade:	701a      	strb	r2, [r3, #0]
    6ae0:	4601      	mov	r1, r0
    6ae2:	f103 32ff 	add.w	r2, r3, #4294967295
    6ae6:	dcec      	bgt.n	6ac2 <_svfprintf_r+0x13e2>
    6ae8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    6aec:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
    6af0:	b2c9      	uxtb	r1, r1
    6af2:	4294      	cmp	r4, r2
    6af4:	f803 1c01 	strb.w	r1, [r3, #-1]
    6af8:	d95a      	bls.n	6bb0 <_svfprintf_r+0x14d0>
    6afa:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
    6afe:	461a      	mov	r2, r3
    6b00:	e001      	b.n	6b06 <_svfprintf_r+0x1426>
    6b02:	f812 1b01 	ldrb.w	r1, [r2], #1
    6b06:	42a2      	cmp	r2, r4
    6b08:	f800 1f01 	strb.w	r1, [r0, #1]!
    6b0c:	d1f9      	bne.n	6b02 <_svfprintf_r+0x1422>
    6b0e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
    6b12:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    6b16:	3bf6      	subs	r3, #246	; 0xf6
    6b18:	e772      	b.n	6a00 <_svfprintf_r+0x1320>
    6b1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6b1c:	1c6c      	adds	r4, r5, #1
    6b1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6b20:	442c      	add	r4, r5
    6b22:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6b26:	e665      	b.n	67f4 <_svfprintf_r+0x1114>
    6b28:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
    6b2c:	2200      	movs	r2, #0
    6b2e:	2300      	movs	r3, #0
    6b30:	f003 f832 	bl	9b98 <__aeabi_dcmpeq>
    6b34:	2800      	cmp	r0, #0
    6b36:	f47f af4a 	bne.w	69ce <_svfprintf_r+0x12ee>
    6b3a:	f1c5 0501 	rsb	r5, r5, #1
    6b3e:	9525      	str	r5, [sp, #148]	; 0x94
    6b40:	442c      	add	r4, r5
    6b42:	e624      	b.n	678e <_svfprintf_r+0x10ae>
    6b44:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6b46:	f04f 0867 	mov.w	r8, #103	; 0x67
    6b4a:	1c6c      	adds	r4, r5, #1
    6b4c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6b50:	e650      	b.n	67f4 <_svfprintf_r+0x1114>
    6b52:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6b54:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    6b58:	682d      	ldr	r5, [r5, #0]
    6b5a:	f10c 0304 	add.w	r3, ip, #4
    6b5e:	2d00      	cmp	r5, #0
    6b60:	f899 8001 	ldrb.w	r8, [r9, #1]
    6b64:	950a      	str	r5, [sp, #40]	; 0x28
    6b66:	9310      	str	r3, [sp, #64]	; 0x40
    6b68:	4681      	mov	r9, r0
    6b6a:	f6be ae15 	bge.w	5798 <_svfprintf_r+0xb8>
    6b6e:	f7fe be10 	b.w	5792 <_svfprintf_r+0xb2>
    6b72:	b97c      	cbnz	r4, 6b94 <_svfprintf_r+0x14b4>
    6b74:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6b76:	07e9      	lsls	r1, r5, #31
    6b78:	d40c      	bmi.n	6b94 <_svfprintf_r+0x14b4>
    6b7a:	2301      	movs	r3, #1
    6b7c:	461c      	mov	r4, r3
    6b7e:	e639      	b.n	67f4 <_svfprintf_r+0x1114>
    6b80:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    6b84:	f01c 0301 	ands.w	r3, ip, #1
    6b88:	f47f af43 	bne.w	6a12 <_svfprintf_r+0x1332>
    6b8c:	9314      	str	r3, [sp, #80]	; 0x50
    6b8e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6b92:	e62f      	b.n	67f4 <_svfprintf_r+0x1114>
    6b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6b96:	1cac      	adds	r4, r5, #2
    6b98:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    6b9c:	e62a      	b.n	67f4 <_svfprintf_r+0x1114>
    6b9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    6ba0:	230c      	movs	r3, #12
    6ba2:	602b      	str	r3, [r5, #0]
    6ba4:	f04f 30ff 	mov.w	r0, #4294967295
    6ba8:	f7fe beba 	b.w	5920 <_svfprintf_r+0x240>
    6bac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6bae:	e713      	b.n	69d8 <_svfprintf_r+0x12f8>
    6bb0:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
    6bb4:	e724      	b.n	6a00 <_svfprintf_r+0x1320>
    6bb6:	bf00      	nop
    6bb8:	0000ac24 	.word	0x0000ac24
    6bbc:	66666667 	.word	0x66666667

00006bc0 <__tz_lock>:
    6bc0:	4770      	bx	lr
    6bc2:	bf00      	nop

00006bc4 <__tz_unlock>:
    6bc4:	4770      	bx	lr
    6bc6:	bf00      	nop

00006bc8 <_vsprintf_r>:
    6bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bca:	b09b      	sub	sp, #108	; 0x6c
    6bcc:	460d      	mov	r5, r1
    6bce:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    6bd2:	f44f 7702 	mov.w	r7, #520	; 0x208
    6bd6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    6bda:	4669      	mov	r1, sp
    6bdc:	9500      	str	r5, [sp, #0]
    6bde:	9504      	str	r5, [sp, #16]
    6be0:	f8ad 700c 	strh.w	r7, [sp, #12]
    6be4:	9402      	str	r4, [sp, #8]
    6be6:	9405      	str	r4, [sp, #20]
    6be8:	f8ad 600e 	strh.w	r6, [sp, #14]
    6bec:	f7fe fd78 	bl	56e0 <_svfprintf_r>
    6bf0:	9b00      	ldr	r3, [sp, #0]
    6bf2:	2200      	movs	r2, #0
    6bf4:	701a      	strb	r2, [r3, #0]
    6bf6:	b01b      	add	sp, #108	; 0x6c
    6bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bfa:	bf00      	nop

00006bfc <vsprintf>:
    6bfc:	b430      	push	{r4, r5}
    6bfe:	4c04      	ldr	r4, [pc, #16]	; (6c10 <vsprintf+0x14>)
    6c00:	460d      	mov	r5, r1
    6c02:	4613      	mov	r3, r2
    6c04:	4601      	mov	r1, r0
    6c06:	462a      	mov	r2, r5
    6c08:	6820      	ldr	r0, [r4, #0]
    6c0a:	bc30      	pop	{r4, r5}
    6c0c:	f7ff bfdc 	b.w	6bc8 <_vsprintf_r>
    6c10:	200004b8 	.word	0x200004b8

00006c14 <register_fini>:
    6c14:	4b02      	ldr	r3, [pc, #8]	; (6c20 <register_fini+0xc>)
    6c16:	b113      	cbz	r3, 6c1e <register_fini+0xa>
    6c18:	4802      	ldr	r0, [pc, #8]	; (6c24 <register_fini+0x10>)
    6c1a:	f000 b87d 	b.w	6d18 <atexit>
    6c1e:	4770      	bx	lr
    6c20:	00000000 	.word	0x00000000
    6c24:	00007cd1 	.word	0x00007cd1

00006c28 <__call_exitprocs>:
    6c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c2c:	4b38      	ldr	r3, [pc, #224]	; (6d10 <__call_exitprocs+0xe8>)
    6c2e:	b085      	sub	sp, #20
    6c30:	681b      	ldr	r3, [r3, #0]
    6c32:	9002      	str	r0, [sp, #8]
    6c34:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    6c38:	9301      	str	r3, [sp, #4]
    6c3a:	460f      	mov	r7, r1
    6c3c:	9203      	str	r2, [sp, #12]
    6c3e:	9b01      	ldr	r3, [sp, #4]
    6c40:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
    6c44:	f1b8 0f00 	cmp.w	r8, #0
    6c48:	d01c      	beq.n	6c84 <__call_exitprocs+0x5c>
    6c4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
    6c4e:	f04f 0901 	mov.w	r9, #1
    6c52:	46da      	mov	sl, fp
    6c54:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6c58:	1e5c      	subs	r4, r3, #1
    6c5a:	d411      	bmi.n	6c80 <__call_exitprocs+0x58>
    6c5c:	f108 0588 	add.w	r5, r8, #136	; 0x88
    6c60:	1c9e      	adds	r6, r3, #2
    6c62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6c66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
    6c6a:	b177      	cbz	r7, 6c8a <__call_exitprocs+0x62>
    6c6c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    6c6e:	42bb      	cmp	r3, r7
    6c70:	d00b      	beq.n	6c8a <__call_exitprocs+0x62>
    6c72:	3c01      	subs	r4, #1
    6c74:	1c63      	adds	r3, r4, #1
    6c76:	f1a5 0504 	sub.w	r5, r5, #4
    6c7a:	f1a6 0604 	sub.w	r6, r6, #4
    6c7e:	d1f4      	bne.n	6c6a <__call_exitprocs+0x42>
    6c80:	4a24      	ldr	r2, [pc, #144]	; (6d14 <__call_exitprocs+0xec>)
    6c82:	bb7a      	cbnz	r2, 6ce4 <__call_exitprocs+0xbc>
    6c84:	b005      	add	sp, #20
    6c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c8a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6c8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    6c92:	3a01      	subs	r2, #1
    6c94:	42a2      	cmp	r2, r4
    6c96:	bf16      	itet	ne
    6c98:	2200      	movne	r2, #0
    6c9a:	f8c8 4004 	streq.w	r4, [r8, #4]
    6c9e:	f846 2c04 	strne.w	r2, [r6, #-4]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d0e5      	beq.n	6c72 <__call_exitprocs+0x4a>
    6ca6:	fa09 f204 	lsl.w	r2, r9, r4
    6caa:	f8d8 1188 	ldr.w	r1, [r8, #392]	; 0x188
    6cae:	f8d8 b004 	ldr.w	fp, [r8, #4]
    6cb2:	420a      	tst	r2, r1
    6cb4:	d010      	beq.n	6cd8 <__call_exitprocs+0xb0>
    6cb6:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
    6cba:	420a      	tst	r2, r1
    6cbc:	d10e      	bne.n	6cdc <__call_exitprocs+0xb4>
    6cbe:	9802      	ldr	r0, [sp, #8]
    6cc0:	f855 1c04 	ldr.w	r1, [r5, #-4]
    6cc4:	4798      	blx	r3
    6cc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6cca:	455b      	cmp	r3, fp
    6ccc:	d1b7      	bne.n	6c3e <__call_exitprocs+0x16>
    6cce:	f8da 3000 	ldr.w	r3, [sl]
    6cd2:	4543      	cmp	r3, r8
    6cd4:	d0cd      	beq.n	6c72 <__call_exitprocs+0x4a>
    6cd6:	e7b2      	b.n	6c3e <__call_exitprocs+0x16>
    6cd8:	4798      	blx	r3
    6cda:	e7f4      	b.n	6cc6 <__call_exitprocs+0x9e>
    6cdc:	f855 0c04 	ldr.w	r0, [r5, #-4]
    6ce0:	4798      	blx	r3
    6ce2:	e7f0      	b.n	6cc6 <__call_exitprocs+0x9e>
    6ce4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6ce8:	b96b      	cbnz	r3, 6d06 <__call_exitprocs+0xde>
    6cea:	f8d8 3000 	ldr.w	r3, [r8]
    6cee:	b163      	cbz	r3, 6d0a <__call_exitprocs+0xe2>
    6cf0:	4640      	mov	r0, r8
    6cf2:	f8ca 3000 	str.w	r3, [sl]
    6cf6:	f3af 8000 	nop.w
    6cfa:	f8da 8000 	ldr.w	r8, [sl]
    6cfe:	f1b8 0f00 	cmp.w	r8, #0
    6d02:	d1a7      	bne.n	6c54 <__call_exitprocs+0x2c>
    6d04:	e7be      	b.n	6c84 <__call_exitprocs+0x5c>
    6d06:	f8d8 3000 	ldr.w	r3, [r8]
    6d0a:	46c2      	mov	sl, r8
    6d0c:	4698      	mov	r8, r3
    6d0e:	e7f6      	b.n	6cfe <__call_exitprocs+0xd6>
    6d10:	0000ab10 	.word	0x0000ab10
    6d14:	00000000 	.word	0x00000000

00006d18 <atexit>:
    6d18:	4601      	mov	r1, r0
    6d1a:	2000      	movs	r0, #0
    6d1c:	4602      	mov	r2, r0
    6d1e:	4603      	mov	r3, r0
    6d20:	f001 bf1a 	b.w	8b58 <__register_exitproc>

00006d24 <div>:
    6d24:	b410      	push	{r4}
    6d26:	2900      	cmp	r1, #0
    6d28:	fb91 f4f2 	sdiv	r4, r1, r2
    6d2c:	fb02 1314 	mls	r3, r2, r4, r1
    6d30:	db06      	blt.n	6d40 <div+0x1c>
    6d32:	2b00      	cmp	r3, #0
    6d34:	db0e      	blt.n	6d54 <div+0x30>
    6d36:	6004      	str	r4, [r0, #0]
    6d38:	6043      	str	r3, [r0, #4]
    6d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d3e:	4770      	bx	lr
    6d40:	2b00      	cmp	r3, #0
    6d42:	bfc4      	itt	gt
    6d44:	f104 34ff 	addgt.w	r4, r4, #4294967295
    6d48:	189b      	addgt	r3, r3, r2
    6d4a:	6004      	str	r4, [r0, #0]
    6d4c:	6043      	str	r3, [r0, #4]
    6d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d52:	4770      	bx	lr
    6d54:	3401      	adds	r4, #1
    6d56:	1a9b      	subs	r3, r3, r2
    6d58:	6004      	str	r4, [r0, #0]
    6d5a:	6043      	str	r3, [r0, #4]
    6d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop

00006d64 <quorem>:
    6d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d68:	6903      	ldr	r3, [r0, #16]
    6d6a:	690d      	ldr	r5, [r1, #16]
    6d6c:	b083      	sub	sp, #12
    6d6e:	429d      	cmp	r5, r3
    6d70:	4683      	mov	fp, r0
    6d72:	f300 808c 	bgt.w	6e8e <quorem+0x12a>
    6d76:	3d01      	subs	r5, #1
    6d78:	f101 0414 	add.w	r4, r1, #20
    6d7c:	f100 0a14 	add.w	sl, r0, #20
    6d80:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    6d84:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
    6d88:	3201      	adds	r2, #1
    6d8a:	fbb3 f8f2 	udiv	r8, r3, r2
    6d8e:	00aa      	lsls	r2, r5, #2
    6d90:	4691      	mov	r9, r2
    6d92:	9200      	str	r2, [sp, #0]
    6d94:	4452      	add	r2, sl
    6d96:	44a1      	add	r9, r4
    6d98:	9201      	str	r2, [sp, #4]
    6d9a:	f1b8 0f00 	cmp.w	r8, #0
    6d9e:	d03e      	beq.n	6e1e <quorem+0xba>
    6da0:	2600      	movs	r6, #0
    6da2:	4630      	mov	r0, r6
    6da4:	4622      	mov	r2, r4
    6da6:	4653      	mov	r3, sl
    6da8:	468c      	mov	ip, r1
    6daa:	f852 7b04 	ldr.w	r7, [r2], #4
    6dae:	6819      	ldr	r1, [r3, #0]
    6db0:	fa1f fe87 	uxth.w	lr, r7
    6db4:	0c3f      	lsrs	r7, r7, #16
    6db6:	fb0e 6e08 	mla	lr, lr, r8, r6
    6dba:	fb07 f608 	mul.w	r6, r7, r8
    6dbe:	eb06 461e 	add.w	r6, r6, lr, lsr #16
    6dc2:	fa1f fe8e 	uxth.w	lr, lr
    6dc6:	ebce 0e00 	rsb	lr, lr, r0
    6dca:	b28f      	uxth	r7, r1
    6dcc:	b2b0      	uxth	r0, r6
    6dce:	4477      	add	r7, lr
    6dd0:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
    6dd4:	eb00 4027 	add.w	r0, r0, r7, asr #16
    6dd8:	b2bf      	uxth	r7, r7
    6dda:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    6dde:	4591      	cmp	r9, r2
    6de0:	f843 7b04 	str.w	r7, [r3], #4
    6de4:	ea4f 4020 	mov.w	r0, r0, asr #16
    6de8:	ea4f 4616 	mov.w	r6, r6, lsr #16
    6dec:	d2dd      	bcs.n	6daa <quorem+0x46>
    6dee:	9a00      	ldr	r2, [sp, #0]
    6df0:	4661      	mov	r1, ip
    6df2:	f85a 3002 	ldr.w	r3, [sl, r2]
    6df6:	b993      	cbnz	r3, 6e1e <quorem+0xba>
    6df8:	9a01      	ldr	r2, [sp, #4]
    6dfa:	1f13      	subs	r3, r2, #4
    6dfc:	459a      	cmp	sl, r3
    6dfe:	d20c      	bcs.n	6e1a <quorem+0xb6>
    6e00:	f852 3c04 	ldr.w	r3, [r2, #-4]
    6e04:	b94b      	cbnz	r3, 6e1a <quorem+0xb6>
    6e06:	f1a2 0308 	sub.w	r3, r2, #8
    6e0a:	e002      	b.n	6e12 <quorem+0xae>
    6e0c:	681a      	ldr	r2, [r3, #0]
    6e0e:	3b04      	subs	r3, #4
    6e10:	b91a      	cbnz	r2, 6e1a <quorem+0xb6>
    6e12:	459a      	cmp	sl, r3
    6e14:	f105 35ff 	add.w	r5, r5, #4294967295
    6e18:	d3f8      	bcc.n	6e0c <quorem+0xa8>
    6e1a:	f8cb 5010 	str.w	r5, [fp, #16]
    6e1e:	4658      	mov	r0, fp
    6e20:	f001 fcf2 	bl	8808 <__mcmp>
    6e24:	2800      	cmp	r0, #0
    6e26:	db2e      	blt.n	6e86 <quorem+0x122>
    6e28:	f108 0801 	add.w	r8, r8, #1
    6e2c:	4653      	mov	r3, sl
    6e2e:	2200      	movs	r2, #0
    6e30:	f854 6b04 	ldr.w	r6, [r4], #4
    6e34:	6818      	ldr	r0, [r3, #0]
    6e36:	b2b1      	uxth	r1, r6
    6e38:	1a51      	subs	r1, r2, r1
    6e3a:	b287      	uxth	r7, r0
    6e3c:	0c36      	lsrs	r6, r6, #16
    6e3e:	4439      	add	r1, r7
    6e40:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
    6e44:	eb00 4221 	add.w	r2, r0, r1, asr #16
    6e48:	b289      	uxth	r1, r1
    6e4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    6e4e:	45a1      	cmp	r9, r4
    6e50:	f843 1b04 	str.w	r1, [r3], #4
    6e54:	ea4f 4222 	mov.w	r2, r2, asr #16
    6e58:	d2ea      	bcs.n	6e30 <quorem+0xcc>
    6e5a:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
    6e5e:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
    6e62:	b982      	cbnz	r2, 6e86 <quorem+0x122>
    6e64:	1f1a      	subs	r2, r3, #4
    6e66:	4592      	cmp	sl, r2
    6e68:	d20b      	bcs.n	6e82 <quorem+0x11e>
    6e6a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    6e6e:	b942      	cbnz	r2, 6e82 <quorem+0x11e>
    6e70:	3b08      	subs	r3, #8
    6e72:	e002      	b.n	6e7a <quorem+0x116>
    6e74:	681a      	ldr	r2, [r3, #0]
    6e76:	3b04      	subs	r3, #4
    6e78:	b91a      	cbnz	r2, 6e82 <quorem+0x11e>
    6e7a:	459a      	cmp	sl, r3
    6e7c:	f105 35ff 	add.w	r5, r5, #4294967295
    6e80:	d3f8      	bcc.n	6e74 <quorem+0x110>
    6e82:	f8cb 5010 	str.w	r5, [fp, #16]
    6e86:	4640      	mov	r0, r8
    6e88:	b003      	add	sp, #12
    6e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e8e:	2000      	movs	r0, #0
    6e90:	b003      	add	sp, #12
    6e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e96:	bf00      	nop

00006e98 <_dtoa_r>:
    6e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    6e9e:	b09b      	sub	sp, #108	; 0x6c
    6ea0:	4604      	mov	r4, r0
    6ea2:	4692      	mov	sl, r2
    6ea4:	469b      	mov	fp, r3
    6ea6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    6ea8:	b141      	cbz	r1, 6ebc <_dtoa_r+0x24>
    6eaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6eac:	2201      	movs	r2, #1
    6eae:	409a      	lsls	r2, r3
    6eb0:	604b      	str	r3, [r1, #4]
    6eb2:	608a      	str	r2, [r1, #8]
    6eb4:	f001 fab2 	bl	841c <_Bfree>
    6eb8:	2300      	movs	r3, #0
    6eba:	6423      	str	r3, [r4, #64]	; 0x40
    6ebc:	f1bb 0f00 	cmp.w	fp, #0
    6ec0:	46d9      	mov	r9, fp
    6ec2:	db33      	blt.n	6f2c <_dtoa_r+0x94>
    6ec4:	2300      	movs	r3, #0
    6ec6:	602b      	str	r3, [r5, #0]
    6ec8:	4ba5      	ldr	r3, [pc, #660]	; (7160 <_dtoa_r+0x2c8>)
    6eca:	461a      	mov	r2, r3
    6ecc:	ea09 0303 	and.w	r3, r9, r3
    6ed0:	4293      	cmp	r3, r2
    6ed2:	d014      	beq.n	6efe <_dtoa_r+0x66>
    6ed4:	4650      	mov	r0, sl
    6ed6:	4659      	mov	r1, fp
    6ed8:	2200      	movs	r2, #0
    6eda:	2300      	movs	r3, #0
    6edc:	f002 fe5c 	bl	9b98 <__aeabi_dcmpeq>
    6ee0:	4680      	mov	r8, r0
    6ee2:	b348      	cbz	r0, 6f38 <_dtoa_r+0xa0>
    6ee4:	9e26      	ldr	r6, [sp, #152]	; 0x98
    6ee6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    6ee8:	2301      	movs	r3, #1
    6eea:	6033      	str	r3, [r6, #0]
    6eec:	2d00      	cmp	r5, #0
    6eee:	f000 80ca 	beq.w	7086 <_dtoa_r+0x1ee>
    6ef2:	489c      	ldr	r0, [pc, #624]	; (7164 <_dtoa_r+0x2cc>)
    6ef4:	6028      	str	r0, [r5, #0]
    6ef6:	3801      	subs	r0, #1
    6ef8:	b01b      	add	sp, #108	; 0x6c
    6efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6efe:	9d26      	ldr	r5, [sp, #152]	; 0x98
    6f00:	f242 730f 	movw	r3, #9999	; 0x270f
    6f04:	602b      	str	r3, [r5, #0]
    6f06:	f1ba 0f00 	cmp.w	sl, #0
    6f0a:	f000 80a5 	beq.w	7058 <_dtoa_r+0x1c0>
    6f0e:	4896      	ldr	r0, [pc, #600]	; (7168 <_dtoa_r+0x2d0>)
    6f10:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    6f12:	2e00      	cmp	r6, #0
    6f14:	d0f0      	beq.n	6ef8 <_dtoa_r+0x60>
    6f16:	78c3      	ldrb	r3, [r0, #3]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	f000 80b6 	beq.w	708a <_dtoa_r+0x1f2>
    6f1e:	f100 0308 	add.w	r3, r0, #8
    6f22:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    6f24:	602b      	str	r3, [r5, #0]
    6f26:	b01b      	add	sp, #108	; 0x6c
    6f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f2c:	2301      	movs	r3, #1
    6f2e:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
    6f32:	602b      	str	r3, [r5, #0]
    6f34:	46cb      	mov	fp, r9
    6f36:	e7c7      	b.n	6ec8 <_dtoa_r+0x30>
    6f38:	aa19      	add	r2, sp, #100	; 0x64
    6f3a:	ab18      	add	r3, sp, #96	; 0x60
    6f3c:	e88d 000c 	stmia.w	sp, {r2, r3}
    6f40:	4620      	mov	r0, r4
    6f42:	4652      	mov	r2, sl
    6f44:	465b      	mov	r3, fp
    6f46:	f001 fcef 	bl	8928 <__d2b>
    6f4a:	ea5f 5519 	movs.w	r5, r9, lsr #20
    6f4e:	900a      	str	r0, [sp, #40]	; 0x28
    6f50:	f040 808b 	bne.w	706a <_dtoa_r+0x1d2>
    6f54:	9f18      	ldr	r7, [sp, #96]	; 0x60
    6f56:	9d19      	ldr	r5, [sp, #100]	; 0x64
    6f58:	f46f 6382 	mvn.w	r3, #1040	; 0x410
    6f5c:	443d      	add	r5, r7
    6f5e:	429d      	cmp	r5, r3
    6f60:	f2c0 8295 	blt.w	748e <_dtoa_r+0x5f6>
    6f64:	331f      	adds	r3, #31
    6f66:	f205 4212 	addw	r2, r5, #1042	; 0x412
    6f6a:	1b5b      	subs	r3, r3, r5
    6f6c:	fa09 f303 	lsl.w	r3, r9, r3
    6f70:	fa2a f202 	lsr.w	r2, sl, r2
    6f74:	ea43 0002 	orr.w	r0, r3, r2
    6f78:	f002 fb30 	bl	95dc <__aeabi_ui2d>
    6f7c:	2601      	movs	r6, #1
    6f7e:	3d01      	subs	r5, #1
    6f80:	46b8      	mov	r8, r7
    6f82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    6f86:	9616      	str	r6, [sp, #88]	; 0x58
    6f88:	2200      	movs	r2, #0
    6f8a:	4b78      	ldr	r3, [pc, #480]	; (716c <_dtoa_r+0x2d4>)
    6f8c:	f002 f9e8 	bl	9360 <__aeabi_dsub>
    6f90:	a36d      	add	r3, pc, #436	; (adr r3, 7148 <_dtoa_r+0x2b0>)
    6f92:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f96:	f002 fb97 	bl	96c8 <__aeabi_dmul>
    6f9a:	a36d      	add	r3, pc, #436	; (adr r3, 7150 <_dtoa_r+0x2b8>)
    6f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6fa0:	f002 f9e0 	bl	9364 <__adddf3>
    6fa4:	4606      	mov	r6, r0
    6fa6:	4628      	mov	r0, r5
    6fa8:	460f      	mov	r7, r1
    6faa:	f002 fb27 	bl	95fc <__aeabi_i2d>
    6fae:	a36a      	add	r3, pc, #424	; (adr r3, 7158 <_dtoa_r+0x2c0>)
    6fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    6fb4:	f002 fb88 	bl	96c8 <__aeabi_dmul>
    6fb8:	4602      	mov	r2, r0
    6fba:	460b      	mov	r3, r1
    6fbc:	4630      	mov	r0, r6
    6fbe:	4639      	mov	r1, r7
    6fc0:	f002 f9d0 	bl	9364 <__adddf3>
    6fc4:	4606      	mov	r6, r0
    6fc6:	460f      	mov	r7, r1
    6fc8:	f002 fe18 	bl	9bfc <__aeabi_d2iz>
    6fcc:	4639      	mov	r1, r7
    6fce:	9007      	str	r0, [sp, #28]
    6fd0:	2200      	movs	r2, #0
    6fd2:	4630      	mov	r0, r6
    6fd4:	2300      	movs	r3, #0
    6fd6:	f002 fde9 	bl	9bac <__aeabi_dcmplt>
    6fda:	2800      	cmp	r0, #0
    6fdc:	f040 8229 	bne.w	7432 <_dtoa_r+0x59a>
    6fe0:	9e07      	ldr	r6, [sp, #28]
    6fe2:	2e16      	cmp	r6, #22
    6fe4:	f200 8222 	bhi.w	742c <_dtoa_r+0x594>
    6fe8:	4961      	ldr	r1, [pc, #388]	; (7170 <_dtoa_r+0x2d8>)
    6fea:	4652      	mov	r2, sl
    6fec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
    6ff0:	465b      	mov	r3, fp
    6ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
    6ff6:	f002 fdf7 	bl	9be8 <__aeabi_dcmpgt>
    6ffa:	2800      	cmp	r0, #0
    6ffc:	f000 824c 	beq.w	7498 <_dtoa_r+0x600>
    7000:	3e01      	subs	r6, #1
    7002:	9607      	str	r6, [sp, #28]
    7004:	2600      	movs	r6, #0
    7006:	960e      	str	r6, [sp, #56]	; 0x38
    7008:	ebc5 0508 	rsb	r5, r5, r8
    700c:	3d01      	subs	r5, #1
    700e:	9506      	str	r5, [sp, #24]
    7010:	f100 8226 	bmi.w	7460 <_dtoa_r+0x5c8>
    7014:	2500      	movs	r5, #0
    7016:	9508      	str	r5, [sp, #32]
    7018:	9e07      	ldr	r6, [sp, #28]
    701a:	2e00      	cmp	r6, #0
    701c:	f2c0 8217 	blt.w	744e <_dtoa_r+0x5b6>
    7020:	9d06      	ldr	r5, [sp, #24]
    7022:	960d      	str	r6, [sp, #52]	; 0x34
    7024:	4435      	add	r5, r6
    7026:	2600      	movs	r6, #0
    7028:	9506      	str	r5, [sp, #24]
    702a:	960c      	str	r6, [sp, #48]	; 0x30
    702c:	9d24      	ldr	r5, [sp, #144]	; 0x90
    702e:	2d09      	cmp	r5, #9
    7030:	d82d      	bhi.n	708e <_dtoa_r+0x1f6>
    7032:	2d05      	cmp	r5, #5
    7034:	bfc4      	itt	gt
    7036:	3d04      	subgt	r5, #4
    7038:	9524      	strgt	r5, [sp, #144]	; 0x90
    703a:	9e24      	ldr	r6, [sp, #144]	; 0x90
    703c:	bfc8      	it	gt
    703e:	2500      	movgt	r5, #0
    7040:	f1a6 0302 	sub.w	r3, r6, #2
    7044:	bfd8      	it	le
    7046:	2501      	movle	r5, #1
    7048:	2b03      	cmp	r3, #3
    704a:	d822      	bhi.n	7092 <_dtoa_r+0x1fa>
    704c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7050:	029e03b7 	.word	0x029e03b7
    7054:	049a03c0 	.word	0x049a03c0
    7058:	4a46      	ldr	r2, [pc, #280]	; (7174 <_dtoa_r+0x2dc>)
    705a:	4b43      	ldr	r3, [pc, #268]	; (7168 <_dtoa_r+0x2d0>)
    705c:	f3c9 0013 	ubfx	r0, r9, #0, #20
    7060:	2800      	cmp	r0, #0
    7062:	bf0c      	ite	eq
    7064:	4610      	moveq	r0, r2
    7066:	4618      	movne	r0, r3
    7068:	e752      	b.n	6f10 <_dtoa_r+0x78>
    706a:	f3cb 0313 	ubfx	r3, fp, #0, #20
    706e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    7072:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    7076:	4650      	mov	r0, sl
    7078:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    707c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    7080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    7084:	e780      	b.n	6f88 <_dtoa_r+0xf0>
    7086:	483c      	ldr	r0, [pc, #240]	; (7178 <_dtoa_r+0x2e0>)
    7088:	e736      	b.n	6ef8 <_dtoa_r+0x60>
    708a:	1cc3      	adds	r3, r0, #3
    708c:	e749      	b.n	6f22 <_dtoa_r+0x8a>
    708e:	2500      	movs	r5, #0
    7090:	9524      	str	r5, [sp, #144]	; 0x90
    7092:	2500      	movs	r5, #0
    7094:	6465      	str	r5, [r4, #68]	; 0x44
    7096:	4629      	mov	r1, r5
    7098:	4620      	mov	r0, r4
    709a:	f001 f999 	bl	83d0 <_Balloc>
    709e:	f04f 39ff 	mov.w	r9, #4294967295
    70a2:	2601      	movs	r6, #1
    70a4:	9009      	str	r0, [sp, #36]	; 0x24
    70a6:	9525      	str	r5, [sp, #148]	; 0x94
    70a8:	6420      	str	r0, [r4, #64]	; 0x40
    70aa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    70ae:	960b      	str	r6, [sp, #44]	; 0x2c
    70b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    70b2:	2b00      	cmp	r3, #0
    70b4:	f2c0 80d2 	blt.w	725c <_dtoa_r+0x3c4>
    70b8:	9e07      	ldr	r6, [sp, #28]
    70ba:	2e0e      	cmp	r6, #14
    70bc:	f300 80ce 	bgt.w	725c <_dtoa_r+0x3c4>
    70c0:	4b2b      	ldr	r3, [pc, #172]	; (7170 <_dtoa_r+0x2d8>)
    70c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    70c6:	e9d3 0100 	ldrd	r0, r1, [r3]
    70ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
    70ce:	9925      	ldr	r1, [sp, #148]	; 0x94
    70d0:	2900      	cmp	r1, #0
    70d2:	f2c0 8380 	blt.w	77d6 <_dtoa_r+0x93e>
    70d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    70da:	4659      	mov	r1, fp
    70dc:	4650      	mov	r0, sl
    70de:	f002 fc1d 	bl	991c <__aeabi_ddiv>
    70e2:	f002 fd8b 	bl	9bfc <__aeabi_d2iz>
    70e6:	4605      	mov	r5, r0
    70e8:	f002 fa88 	bl	95fc <__aeabi_i2d>
    70ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    70f0:	f002 faea 	bl	96c8 <__aeabi_dmul>
    70f4:	4602      	mov	r2, r0
    70f6:	460b      	mov	r3, r1
    70f8:	4650      	mov	r0, sl
    70fa:	4659      	mov	r1, fp
    70fc:	f002 f930 	bl	9360 <__aeabi_dsub>
    7100:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7102:	f105 0330 	add.w	r3, r5, #48	; 0x30
    7106:	f1b9 0f01 	cmp.w	r9, #1
    710a:	4606      	mov	r6, r0
    710c:	460f      	mov	r7, r1
    710e:	7013      	strb	r3, [r2, #0]
    7110:	f102 0b01 	add.w	fp, r2, #1
    7114:	d064      	beq.n	71e0 <_dtoa_r+0x348>
    7116:	2200      	movs	r2, #0
    7118:	4b18      	ldr	r3, [pc, #96]	; (717c <_dtoa_r+0x2e4>)
    711a:	f002 fad5 	bl	96c8 <__aeabi_dmul>
    711e:	2200      	movs	r2, #0
    7120:	2300      	movs	r3, #0
    7122:	4606      	mov	r6, r0
    7124:	460f      	mov	r7, r1
    7126:	f002 fd37 	bl	9b98 <__aeabi_dcmpeq>
    712a:	2800      	cmp	r0, #0
    712c:	f040 8081 	bne.w	7232 <_dtoa_r+0x39a>
    7130:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    7134:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7136:	44c8      	add	r8, r9
    7138:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    713c:	f105 0902 	add.w	r9, r5, #2
    7140:	9403      	str	r4, [sp, #12]
    7142:	e028      	b.n	7196 <_dtoa_r+0x2fe>
    7144:	f3af 8000 	nop.w
    7148:	636f4361 	.word	0x636f4361
    714c:	3fd287a7 	.word	0x3fd287a7
    7150:	8b60c8b3 	.word	0x8b60c8b3
    7154:	3fc68a28 	.word	0x3fc68a28
    7158:	509f79fb 	.word	0x509f79fb
    715c:	3fd34413 	.word	0x3fd34413
    7160:	7ff00000 	.word	0x7ff00000
    7164:	0000ac2d 	.word	0x0000ac2d
    7168:	0000ac50 	.word	0x0000ac50
    716c:	3ff80000 	.word	0x3ff80000
    7170:	0000ac60 	.word	0x0000ac60
    7174:	0000ac44 	.word	0x0000ac44
    7178:	0000ac2c 	.word	0x0000ac2c
    717c:	40240000 	.word	0x40240000
    7180:	f002 faa2 	bl	96c8 <__aeabi_dmul>
    7184:	2200      	movs	r2, #0
    7186:	2300      	movs	r3, #0
    7188:	4606      	mov	r6, r0
    718a:	460f      	mov	r7, r1
    718c:	f002 fd04 	bl	9b98 <__aeabi_dcmpeq>
    7190:	2800      	cmp	r0, #0
    7192:	f040 83c1 	bne.w	7918 <_dtoa_r+0xa80>
    7196:	4652      	mov	r2, sl
    7198:	465b      	mov	r3, fp
    719a:	4630      	mov	r0, r6
    719c:	4639      	mov	r1, r7
    719e:	f002 fbbd 	bl	991c <__aeabi_ddiv>
    71a2:	f002 fd2b 	bl	9bfc <__aeabi_d2iz>
    71a6:	4605      	mov	r5, r0
    71a8:	f002 fa28 	bl	95fc <__aeabi_i2d>
    71ac:	4652      	mov	r2, sl
    71ae:	465b      	mov	r3, fp
    71b0:	f002 fa8a 	bl	96c8 <__aeabi_dmul>
    71b4:	4602      	mov	r2, r0
    71b6:	460b      	mov	r3, r1
    71b8:	4630      	mov	r0, r6
    71ba:	4639      	mov	r1, r7
    71bc:	f002 f8d0 	bl	9360 <__aeabi_dsub>
    71c0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
    71c4:	45c1      	cmp	r9, r8
    71c6:	f809 ec01 	strb.w	lr, [r9, #-1]
    71ca:	464c      	mov	r4, r9
    71cc:	4606      	mov	r6, r0
    71ce:	460f      	mov	r7, r1
    71d0:	f04f 0200 	mov.w	r2, #0
    71d4:	4ba7      	ldr	r3, [pc, #668]	; (7474 <_dtoa_r+0x5dc>)
    71d6:	f109 0901 	add.w	r9, r9, #1
    71da:	d1d1      	bne.n	7180 <_dtoa_r+0x2e8>
    71dc:	46a3      	mov	fp, r4
    71de:	9c03      	ldr	r4, [sp, #12]
    71e0:	4632      	mov	r2, r6
    71e2:	463b      	mov	r3, r7
    71e4:	4630      	mov	r0, r6
    71e6:	4639      	mov	r1, r7
    71e8:	f002 f8bc 	bl	9364 <__adddf3>
    71ec:	4606      	mov	r6, r0
    71ee:	460f      	mov	r7, r1
    71f0:	4632      	mov	r2, r6
    71f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    71f6:	463b      	mov	r3, r7
    71f8:	f002 fcd8 	bl	9bac <__aeabi_dcmplt>
    71fc:	b940      	cbnz	r0, 7210 <_dtoa_r+0x378>
    71fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    7202:	4632      	mov	r2, r6
    7204:	463b      	mov	r3, r7
    7206:	f002 fcc7 	bl	9b98 <__aeabi_dcmpeq>
    720a:	b190      	cbz	r0, 7232 <_dtoa_r+0x39a>
    720c:	07eb      	lsls	r3, r5, #31
    720e:	d510      	bpl.n	7232 <_dtoa_r+0x39a>
    7210:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
    7214:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7216:	e005      	b.n	7224 <_dtoa_r+0x38c>
    7218:	429a      	cmp	r2, r3
    721a:	f000 8429 	beq.w	7a70 <_dtoa_r+0xbd8>
    721e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    7222:	469b      	mov	fp, r3
    7224:	2d39      	cmp	r5, #57	; 0x39
    7226:	f10b 33ff 	add.w	r3, fp, #4294967295
    722a:	d0f5      	beq.n	7218 <_dtoa_r+0x380>
    722c:	1c6a      	adds	r2, r5, #1
    722e:	b2d2      	uxtb	r2, r2
    7230:	701a      	strb	r2, [r3, #0]
    7232:	4620      	mov	r0, r4
    7234:	990a      	ldr	r1, [sp, #40]	; 0x28
    7236:	f001 f8f1 	bl	841c <_Bfree>
    723a:	9e07      	ldr	r6, [sp, #28]
    723c:	9d26      	ldr	r5, [sp, #152]	; 0x98
    723e:	1c73      	adds	r3, r6, #1
    7240:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    7242:	2200      	movs	r2, #0
    7244:	f88b 2000 	strb.w	r2, [fp]
    7248:	602b      	str	r3, [r5, #0]
    724a:	2e00      	cmp	r6, #0
    724c:	f000 8325 	beq.w	789a <_dtoa_r+0xa02>
    7250:	9809      	ldr	r0, [sp, #36]	; 0x24
    7252:	f8c6 b000 	str.w	fp, [r6]
    7256:	b01b      	add	sp, #108	; 0x6c
    7258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    725c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    725e:	2d00      	cmp	r5, #0
    7260:	f000 8103 	beq.w	746a <_dtoa_r+0x5d2>
    7264:	9e24      	ldr	r6, [sp, #144]	; 0x90
    7266:	2e01      	cmp	r6, #1
    7268:	f340 82dc 	ble.w	7824 <_dtoa_r+0x98c>
    726c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    726e:	f109 37ff 	add.w	r7, r9, #4294967295
    7272:	42be      	cmp	r6, r7
    7274:	f2c0 8389 	blt.w	798a <_dtoa_r+0xaf2>
    7278:	1bf7      	subs	r7, r6, r7
    727a:	f1b9 0f00 	cmp.w	r9, #0
    727e:	f2c0 8487 	blt.w	7b90 <_dtoa_r+0xcf8>
    7282:	9d08      	ldr	r5, [sp, #32]
    7284:	464b      	mov	r3, r9
    7286:	9e08      	ldr	r6, [sp, #32]
    7288:	4620      	mov	r0, r4
    728a:	441e      	add	r6, r3
    728c:	9608      	str	r6, [sp, #32]
    728e:	9e06      	ldr	r6, [sp, #24]
    7290:	2101      	movs	r1, #1
    7292:	441e      	add	r6, r3
    7294:	9606      	str	r6, [sp, #24]
    7296:	f001 f963 	bl	8560 <__i2b>
    729a:	4606      	mov	r6, r0
    729c:	b165      	cbz	r5, 72b8 <_dtoa_r+0x420>
    729e:	9806      	ldr	r0, [sp, #24]
    72a0:	2800      	cmp	r0, #0
    72a2:	dd09      	ble.n	72b8 <_dtoa_r+0x420>
    72a4:	4603      	mov	r3, r0
    72a6:	9908      	ldr	r1, [sp, #32]
    72a8:	42ab      	cmp	r3, r5
    72aa:	bfa8      	it	ge
    72ac:	462b      	movge	r3, r5
    72ae:	1ac9      	subs	r1, r1, r3
    72b0:	1ac0      	subs	r0, r0, r3
    72b2:	9108      	str	r1, [sp, #32]
    72b4:	1aed      	subs	r5, r5, r3
    72b6:	9006      	str	r0, [sp, #24]
    72b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    72ba:	2a00      	cmp	r2, #0
    72bc:	dd1d      	ble.n	72fa <_dtoa_r+0x462>
    72be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72c0:	2b00      	cmp	r3, #0
    72c2:	f000 8358 	beq.w	7976 <_dtoa_r+0xade>
    72c6:	2f00      	cmp	r7, #0
    72c8:	dd11      	ble.n	72ee <_dtoa_r+0x456>
    72ca:	4631      	mov	r1, r6
    72cc:	463a      	mov	r2, r7
    72ce:	4620      	mov	r0, r4
    72d0:	f001 f9ee 	bl	86b0 <__pow5mult>
    72d4:	4606      	mov	r6, r0
    72d6:	4631      	mov	r1, r6
    72d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    72da:	4620      	mov	r0, r4
    72dc:	f001 f94a 	bl	8574 <__multiply>
    72e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    72e2:	4680      	mov	r8, r0
    72e4:	4620      	mov	r0, r4
    72e6:	f001 f899 	bl	841c <_Bfree>
    72ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    72ee:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    72f2:	ebbe 0207 	subs.w	r2, lr, r7
    72f6:	f040 828f 	bne.w	7818 <_dtoa_r+0x980>
    72fa:	4620      	mov	r0, r4
    72fc:	2101      	movs	r1, #1
    72fe:	f001 f92f 	bl	8560 <__i2b>
    7302:	4680      	mov	r8, r0
    7304:	980d      	ldr	r0, [sp, #52]	; 0x34
    7306:	2800      	cmp	r0, #0
    7308:	dd05      	ble.n	7316 <_dtoa_r+0x47e>
    730a:	4641      	mov	r1, r8
    730c:	4620      	mov	r0, r4
    730e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7310:	f001 f9ce 	bl	86b0 <__pow5mult>
    7314:	4680      	mov	r8, r0
    7316:	9924      	ldr	r1, [sp, #144]	; 0x90
    7318:	2901      	cmp	r1, #1
    731a:	f340 82c1 	ble.w	78a0 <_dtoa_r+0xa08>
    731e:	2700      	movs	r7, #0
    7320:	980d      	ldr	r0, [sp, #52]	; 0x34
    7322:	2800      	cmp	r0, #0
    7324:	f040 82af 	bne.w	7886 <_dtoa_r+0x9ee>
    7328:	2001      	movs	r0, #1
    732a:	9b06      	ldr	r3, [sp, #24]
    732c:	4403      	add	r3, r0
    732e:	f013 031f 	ands.w	r3, r3, #31
    7332:	f000 80a1 	beq.w	7478 <_dtoa_r+0x5e0>
    7336:	f1c3 0220 	rsb	r2, r3, #32
    733a:	2a04      	cmp	r2, #4
    733c:	f340 84b7 	ble.w	7cae <_dtoa_r+0xe16>
    7340:	9908      	ldr	r1, [sp, #32]
    7342:	9a06      	ldr	r2, [sp, #24]
    7344:	f1c3 031c 	rsb	r3, r3, #28
    7348:	4419      	add	r1, r3
    734a:	441a      	add	r2, r3
    734c:	9108      	str	r1, [sp, #32]
    734e:	441d      	add	r5, r3
    7350:	9206      	str	r2, [sp, #24]
    7352:	9908      	ldr	r1, [sp, #32]
    7354:	2900      	cmp	r1, #0
    7356:	dd05      	ble.n	7364 <_dtoa_r+0x4cc>
    7358:	990a      	ldr	r1, [sp, #40]	; 0x28
    735a:	9a08      	ldr	r2, [sp, #32]
    735c:	4620      	mov	r0, r4
    735e:	f001 f9f5 	bl	874c <__lshift>
    7362:	900a      	str	r0, [sp, #40]	; 0x28
    7364:	9a06      	ldr	r2, [sp, #24]
    7366:	2a00      	cmp	r2, #0
    7368:	dd04      	ble.n	7374 <_dtoa_r+0x4dc>
    736a:	4641      	mov	r1, r8
    736c:	4620      	mov	r0, r4
    736e:	f001 f9ed 	bl	874c <__lshift>
    7372:	4680      	mov	r8, r0
    7374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7376:	2b00      	cmp	r3, #0
    7378:	f040 826a 	bne.w	7850 <_dtoa_r+0x9b8>
    737c:	f1b9 0f00 	cmp.w	r9, #0
    7380:	f340 82a6 	ble.w	78d0 <_dtoa_r+0xa38>
    7384:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7386:	2800      	cmp	r0, #0
    7388:	f040 8088 	bne.w	749c <_dtoa_r+0x604>
    738c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    738e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7390:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    7394:	e006      	b.n	73a4 <_dtoa_r+0x50c>
    7396:	4639      	mov	r1, r7
    7398:	4620      	mov	r0, r4
    739a:	220a      	movs	r2, #10
    739c:	2300      	movs	r3, #0
    739e:	f001 f847 	bl	8430 <__multadd>
    73a2:	4607      	mov	r7, r0
    73a4:	4638      	mov	r0, r7
    73a6:	4641      	mov	r1, r8
    73a8:	f7ff fcdc 	bl	6d64 <quorem>
    73ac:	3030      	adds	r0, #48	; 0x30
    73ae:	f80b 0005 	strb.w	r0, [fp, r5]
    73b2:	3501      	adds	r5, #1
    73b4:	45a9      	cmp	r9, r5
    73b6:	dcee      	bgt.n	7396 <_dtoa_r+0x4fe>
    73b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    73bc:	4682      	mov	sl, r0
    73be:	970a      	str	r7, [sp, #40]	; 0x28
    73c0:	f1b9 0f01 	cmp.w	r9, #1
    73c4:	bfac      	ite	ge
    73c6:	44cb      	addge	fp, r9
    73c8:	f10b 0b01 	addlt.w	fp, fp, #1
    73cc:	2500      	movs	r5, #0
    73ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    73d0:	2201      	movs	r2, #1
    73d2:	4620      	mov	r0, r4
    73d4:	f001 f9ba 	bl	874c <__lshift>
    73d8:	4641      	mov	r1, r8
    73da:	900a      	str	r0, [sp, #40]	; 0x28
    73dc:	f001 fa14 	bl	8808 <__mcmp>
    73e0:	2800      	cmp	r0, #0
    73e2:	f340 8309 	ble.w	79f8 <_dtoa_r+0xb60>
    73e6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    73ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    73ec:	e005      	b.n	73fa <_dtoa_r+0x562>
    73ee:	4299      	cmp	r1, r3
    73f0:	f000 828b 	beq.w	790a <_dtoa_r+0xa72>
    73f4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    73f8:	469b      	mov	fp, r3
    73fa:	2a39      	cmp	r2, #57	; 0x39
    73fc:	f10b 33ff 	add.w	r3, fp, #4294967295
    7400:	d0f5      	beq.n	73ee <_dtoa_r+0x556>
    7402:	3201      	adds	r2, #1
    7404:	701a      	strb	r2, [r3, #0]
    7406:	4641      	mov	r1, r8
    7408:	4620      	mov	r0, r4
    740a:	f001 f807 	bl	841c <_Bfree>
    740e:	2e00      	cmp	r6, #0
    7410:	f43f af0f 	beq.w	7232 <_dtoa_r+0x39a>
    7414:	b12d      	cbz	r5, 7422 <_dtoa_r+0x58a>
    7416:	42b5      	cmp	r5, r6
    7418:	d003      	beq.n	7422 <_dtoa_r+0x58a>
    741a:	4629      	mov	r1, r5
    741c:	4620      	mov	r0, r4
    741e:	f000 fffd 	bl	841c <_Bfree>
    7422:	4631      	mov	r1, r6
    7424:	4620      	mov	r0, r4
    7426:	f000 fff9 	bl	841c <_Bfree>
    742a:	e702      	b.n	7232 <_dtoa_r+0x39a>
    742c:	2601      	movs	r6, #1
    742e:	960e      	str	r6, [sp, #56]	; 0x38
    7430:	e5ea      	b.n	7008 <_dtoa_r+0x170>
    7432:	9807      	ldr	r0, [sp, #28]
    7434:	f002 f8e2 	bl	95fc <__aeabi_i2d>
    7438:	4632      	mov	r2, r6
    743a:	463b      	mov	r3, r7
    743c:	f002 fbac 	bl	9b98 <__aeabi_dcmpeq>
    7440:	2800      	cmp	r0, #0
    7442:	f47f adcd 	bne.w	6fe0 <_dtoa_r+0x148>
    7446:	9e07      	ldr	r6, [sp, #28]
    7448:	3e01      	subs	r6, #1
    744a:	9607      	str	r6, [sp, #28]
    744c:	e5c8      	b.n	6fe0 <_dtoa_r+0x148>
    744e:	9e07      	ldr	r6, [sp, #28]
    7450:	9d08      	ldr	r5, [sp, #32]
    7452:	1bad      	subs	r5, r5, r6
    7454:	9508      	str	r5, [sp, #32]
    7456:	4275      	negs	r5, r6
    7458:	2600      	movs	r6, #0
    745a:	950c      	str	r5, [sp, #48]	; 0x30
    745c:	960d      	str	r6, [sp, #52]	; 0x34
    745e:	e5e5      	b.n	702c <_dtoa_r+0x194>
    7460:	426d      	negs	r5, r5
    7462:	2600      	movs	r6, #0
    7464:	9508      	str	r5, [sp, #32]
    7466:	9606      	str	r6, [sp, #24]
    7468:	e5d6      	b.n	7018 <_dtoa_r+0x180>
    746a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    746c:	9d08      	ldr	r5, [sp, #32]
    746e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    7470:	e714      	b.n	729c <_dtoa_r+0x404>
    7472:	bf00      	nop
    7474:	40240000 	.word	0x40240000
    7478:	231c      	movs	r3, #28
    747a:	f8dd e020 	ldr.w	lr, [sp, #32]
    747e:	9806      	ldr	r0, [sp, #24]
    7480:	449e      	add	lr, r3
    7482:	4418      	add	r0, r3
    7484:	f8cd e020 	str.w	lr, [sp, #32]
    7488:	441d      	add	r5, r3
    748a:	9006      	str	r0, [sp, #24]
    748c:	e761      	b.n	7352 <_dtoa_r+0x4ba>
    748e:	48a7      	ldr	r0, [pc, #668]	; (772c <_dtoa_r+0x894>)
    7490:	1b40      	subs	r0, r0, r5
    7492:	fa0a f000 	lsl.w	r0, sl, r0
    7496:	e56f      	b.n	6f78 <_dtoa_r+0xe0>
    7498:	900e      	str	r0, [sp, #56]	; 0x38
    749a:	e5b5      	b.n	7008 <_dtoa_r+0x170>
    749c:	2d00      	cmp	r5, #0
    749e:	dd05      	ble.n	74ac <_dtoa_r+0x614>
    74a0:	4631      	mov	r1, r6
    74a2:	462a      	mov	r2, r5
    74a4:	4620      	mov	r0, r4
    74a6:	f001 f951 	bl	874c <__lshift>
    74aa:	4606      	mov	r6, r0
    74ac:	2f00      	cmp	r7, #0
    74ae:	f040 82e9 	bne.w	7a84 <_dtoa_r+0xbec>
    74b2:	4637      	mov	r7, r6
    74b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    74b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    74b8:	444d      	add	r5, r9
    74ba:	9508      	str	r5, [sp, #32]
    74bc:	f00a 0501 	and.w	r5, sl, #1
    74c0:	950b      	str	r5, [sp, #44]	; 0x2c
    74c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    74c6:	1c45      	adds	r5, r0, #1
    74c8:	e00a      	b.n	74e0 <_dtoa_r+0x648>
    74ca:	f000 ffb1 	bl	8430 <__multadd>
    74ce:	4639      	mov	r1, r7
    74d0:	4606      	mov	r6, r0
    74d2:	220a      	movs	r2, #10
    74d4:	4620      	mov	r0, r4
    74d6:	2300      	movs	r3, #0
    74d8:	f000 ffaa 	bl	8430 <__multadd>
    74dc:	4607      	mov	r7, r0
    74de:	3501      	adds	r5, #1
    74e0:	4641      	mov	r1, r8
    74e2:	4648      	mov	r0, r9
    74e4:	f7ff fc3e 	bl	6d64 <quorem>
    74e8:	4631      	mov	r1, r6
    74ea:	4683      	mov	fp, r0
    74ec:	4648      	mov	r0, r9
    74ee:	f001 f98b 	bl	8808 <__mcmp>
    74f2:	4641      	mov	r1, r8
    74f4:	9003      	str	r0, [sp, #12]
    74f6:	463a      	mov	r2, r7
    74f8:	4620      	mov	r0, r4
    74fa:	f001 f9a9 	bl	8850 <__mdiff>
    74fe:	68c2      	ldr	r2, [r0, #12]
    7500:	1e69      	subs	r1, r5, #1
    7502:	4603      	mov	r3, r0
    7504:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
    7508:	9106      	str	r1, [sp, #24]
    750a:	2a00      	cmp	r2, #0
    750c:	f040 8193 	bne.w	7836 <_dtoa_r+0x99e>
    7510:	4619      	mov	r1, r3
    7512:	4648      	mov	r0, r9
    7514:	9302      	str	r3, [sp, #8]
    7516:	f001 f977 	bl	8808 <__mcmp>
    751a:	9b02      	ldr	r3, [sp, #8]
    751c:	4602      	mov	r2, r0
    751e:	4619      	mov	r1, r3
    7520:	4620      	mov	r0, r4
    7522:	9202      	str	r2, [sp, #8]
    7524:	f000 ff7a 	bl	841c <_Bfree>
    7528:	9a02      	ldr	r2, [sp, #8]
    752a:	b92a      	cbnz	r2, 7538 <_dtoa_r+0x6a0>
    752c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    752e:	b91b      	cbnz	r3, 7538 <_dtoa_r+0x6a0>
    7530:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7532:	2800      	cmp	r0, #0
    7534:	f000 8393 	beq.w	7c5e <_dtoa_r+0xdc6>
    7538:	9b03      	ldr	r3, [sp, #12]
    753a:	2b00      	cmp	r3, #0
    753c:	f2c0 8234 	blt.w	79a8 <_dtoa_r+0xb10>
    7540:	d105      	bne.n	754e <_dtoa_r+0x6b6>
    7542:	9824      	ldr	r0, [sp, #144]	; 0x90
    7544:	b918      	cbnz	r0, 754e <_dtoa_r+0x6b6>
    7546:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7548:	2900      	cmp	r1, #0
    754a:	f000 822d 	beq.w	79a8 <_dtoa_r+0xb10>
    754e:	2a00      	cmp	r2, #0
    7550:	f300 82ac 	bgt.w	7aac <_dtoa_r+0xc14>
    7554:	f8dd e020 	ldr.w	lr, [sp, #32]
    7558:	f805 ac01 	strb.w	sl, [r5, #-1]
    755c:	4575      	cmp	r5, lr
    755e:	46ab      	mov	fp, r5
    7560:	f000 82b4 	beq.w	7acc <_dtoa_r+0xc34>
    7564:	4649      	mov	r1, r9
    7566:	220a      	movs	r2, #10
    7568:	2300      	movs	r3, #0
    756a:	4620      	mov	r0, r4
    756c:	f000 ff60 	bl	8430 <__multadd>
    7570:	42be      	cmp	r6, r7
    7572:	4681      	mov	r9, r0
    7574:	4631      	mov	r1, r6
    7576:	4620      	mov	r0, r4
    7578:	f04f 020a 	mov.w	r2, #10
    757c:	f04f 0300 	mov.w	r3, #0
    7580:	d1a3      	bne.n	74ca <_dtoa_r+0x632>
    7582:	f000 ff55 	bl	8430 <__multadd>
    7586:	4606      	mov	r6, r0
    7588:	4607      	mov	r7, r0
    758a:	e7a8      	b.n	74de <_dtoa_r+0x646>
    758c:	2600      	movs	r6, #0
    758e:	960b      	str	r6, [sp, #44]	; 0x2c
    7590:	9e07      	ldr	r6, [sp, #28]
    7592:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
    7596:	44b6      	add	lr, r6
    7598:	f10e 0901 	add.w	r9, lr, #1
    759c:	f1b9 0f00 	cmp.w	r9, #0
    75a0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    75a4:	464e      	mov	r6, r9
    75a6:	f340 8150 	ble.w	784a <_dtoa_r+0x9b2>
    75aa:	2100      	movs	r1, #0
    75ac:	2e17      	cmp	r6, #23
    75ae:	6461      	str	r1, [r4, #68]	; 0x44
    75b0:	d90a      	bls.n	75c8 <_dtoa_r+0x730>
    75b2:	2201      	movs	r2, #1
    75b4:	2304      	movs	r3, #4
    75b6:	005b      	lsls	r3, r3, #1
    75b8:	f103 0014 	add.w	r0, r3, #20
    75bc:	42b0      	cmp	r0, r6
    75be:	4611      	mov	r1, r2
    75c0:	f102 0201 	add.w	r2, r2, #1
    75c4:	d9f7      	bls.n	75b6 <_dtoa_r+0x71e>
    75c6:	6461      	str	r1, [r4, #68]	; 0x44
    75c8:	4620      	mov	r0, r4
    75ca:	f000 ff01 	bl	83d0 <_Balloc>
    75ce:	2e0e      	cmp	r6, #14
    75d0:	9009      	str	r0, [sp, #36]	; 0x24
    75d2:	6420      	str	r0, [r4, #64]	; 0x40
    75d4:	f63f ad6c 	bhi.w	70b0 <_dtoa_r+0x218>
    75d8:	2d00      	cmp	r5, #0
    75da:	f43f ad69 	beq.w	70b0 <_dtoa_r+0x218>
    75de:	9d07      	ldr	r5, [sp, #28]
    75e0:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
    75e4:	2d00      	cmp	r5, #0
    75e6:	f340 821c 	ble.w	7a22 <_dtoa_r+0xb8a>
    75ea:	4b51      	ldr	r3, [pc, #324]	; (7730 <_dtoa_r+0x898>)
    75ec:	f005 020f 	and.w	r2, r5, #15
    75f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    75f4:	112d      	asrs	r5, r5, #4
    75f6:	e9d3 6700 	ldrd	r6, r7, [r3]
    75fa:	06eb      	lsls	r3, r5, #27
    75fc:	f140 81cd 	bpl.w	799a <_dtoa_r+0xb02>
    7600:	4b4c      	ldr	r3, [pc, #304]	; (7734 <_dtoa_r+0x89c>)
    7602:	4650      	mov	r0, sl
    7604:	4659      	mov	r1, fp
    7606:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    760a:	f002 f987 	bl	991c <__aeabi_ddiv>
    760e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    7612:	f005 050f 	and.w	r5, r5, #15
    7616:	f04f 0803 	mov.w	r8, #3
    761a:	b18d      	cbz	r5, 7640 <_dtoa_r+0x7a8>
    761c:	f8df a114 	ldr.w	sl, [pc, #276]	; 7734 <_dtoa_r+0x89c>
    7620:	4630      	mov	r0, r6
    7622:	4639      	mov	r1, r7
    7624:	07ee      	lsls	r6, r5, #31
    7626:	d505      	bpl.n	7634 <_dtoa_r+0x79c>
    7628:	e9da 2300 	ldrd	r2, r3, [sl]
    762c:	f108 0801 	add.w	r8, r8, #1
    7630:	f002 f84a 	bl	96c8 <__aeabi_dmul>
    7634:	106d      	asrs	r5, r5, #1
    7636:	f10a 0a08 	add.w	sl, sl, #8
    763a:	d1f3      	bne.n	7624 <_dtoa_r+0x78c>
    763c:	4606      	mov	r6, r0
    763e:	460f      	mov	r7, r1
    7640:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    7644:	4632      	mov	r2, r6
    7646:	463b      	mov	r3, r7
    7648:	f002 f968 	bl	991c <__aeabi_ddiv>
    764c:	4682      	mov	sl, r0
    764e:	468b      	mov	fp, r1
    7650:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7652:	b145      	cbz	r5, 7666 <_dtoa_r+0x7ce>
    7654:	4650      	mov	r0, sl
    7656:	4659      	mov	r1, fp
    7658:	2200      	movs	r2, #0
    765a:	4b37      	ldr	r3, [pc, #220]	; (7738 <_dtoa_r+0x8a0>)
    765c:	f002 faa6 	bl	9bac <__aeabi_dcmplt>
    7660:	2800      	cmp	r0, #0
    7662:	f040 82aa 	bne.w	7bba <_dtoa_r+0xd22>
    7666:	4640      	mov	r0, r8
    7668:	f001 ffc8 	bl	95fc <__aeabi_i2d>
    766c:	4652      	mov	r2, sl
    766e:	465b      	mov	r3, fp
    7670:	f002 f82a 	bl	96c8 <__aeabi_dmul>
    7674:	2200      	movs	r2, #0
    7676:	4b31      	ldr	r3, [pc, #196]	; (773c <_dtoa_r+0x8a4>)
    7678:	f001 fe74 	bl	9364 <__adddf3>
    767c:	4606      	mov	r6, r0
    767e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    7682:	f1b9 0f00 	cmp.w	r9, #0
    7686:	f000 815a 	beq.w	793e <_dtoa_r+0xaa6>
    768a:	9d07      	ldr	r5, [sp, #28]
    768c:	46c8      	mov	r8, r9
    768e:	9517      	str	r5, [sp, #92]	; 0x5c
    7690:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7692:	2d00      	cmp	r5, #0
    7694:	f000 8223 	beq.w	7ade <_dtoa_r+0xc46>
    7698:	4b25      	ldr	r3, [pc, #148]	; (7730 <_dtoa_r+0x898>)
    769a:	2000      	movs	r0, #0
    769c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    76a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    76a4:	4926      	ldr	r1, [pc, #152]	; (7740 <_dtoa_r+0x8a8>)
    76a6:	f002 f939 	bl	991c <__aeabi_ddiv>
    76aa:	4632      	mov	r2, r6
    76ac:	463b      	mov	r3, r7
    76ae:	f001 fe57 	bl	9360 <__aeabi_dsub>
    76b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    76b6:	4659      	mov	r1, fp
    76b8:	4650      	mov	r0, sl
    76ba:	f002 fa9f 	bl	9bfc <__aeabi_d2iz>
    76be:	4605      	mov	r5, r0
    76c0:	f001 ff9c 	bl	95fc <__aeabi_i2d>
    76c4:	4602      	mov	r2, r0
    76c6:	460b      	mov	r3, r1
    76c8:	4650      	mov	r0, sl
    76ca:	4659      	mov	r1, fp
    76cc:	f001 fe48 	bl	9360 <__aeabi_dsub>
    76d0:	3530      	adds	r5, #48	; 0x30
    76d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    76d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    76d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    76dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    76e0:	b2ed      	uxtb	r5, r5
    76e2:	7035      	strb	r5, [r6, #0]
    76e4:	f106 0b01 	add.w	fp, r6, #1
    76e8:	f002 fa7e 	bl	9be8 <__aeabi_dcmpgt>
    76ec:	2800      	cmp	r0, #0
    76ee:	f040 82ab 	bne.w	7c48 <_dtoa_r+0xdb0>
    76f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    76f6:	2000      	movs	r0, #0
    76f8:	490f      	ldr	r1, [pc, #60]	; (7738 <_dtoa_r+0x8a0>)
    76fa:	f001 fe31 	bl	9360 <__aeabi_dsub>
    76fe:	4602      	mov	r2, r0
    7700:	460b      	mov	r3, r1
    7702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    7706:	f002 fa6f 	bl	9be8 <__aeabi_dcmpgt>
    770a:	2800      	cmp	r0, #0
    770c:	f040 82a2 	bne.w	7c54 <_dtoa_r+0xdbc>
    7710:	f1b8 0f01 	cmp.w	r8, #1
    7714:	f340 8181 	ble.w	7a1a <_dtoa_r+0xb82>
    7718:	44b0      	add	r8, r6
    771a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
    771e:	46a2      	mov	sl, r4
    7720:	46c1      	mov	r9, r8
    7722:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    7726:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
    772a:	e019      	b.n	7760 <_dtoa_r+0x8c8>
    772c:	fffffbee 	.word	0xfffffbee
    7730:	0000ac60 	.word	0x0000ac60
    7734:	0000ad28 	.word	0x0000ad28
    7738:	3ff00000 	.word	0x3ff00000
    773c:	401c0000 	.word	0x401c0000
    7740:	3fe00000 	.word	0x3fe00000
    7744:	2000      	movs	r0, #0
    7746:	49a8      	ldr	r1, [pc, #672]	; (79e8 <_dtoa_r+0xb50>)
    7748:	f001 fe0a 	bl	9360 <__aeabi_dsub>
    774c:	4622      	mov	r2, r4
    774e:	462b      	mov	r3, r5
    7750:	f002 fa2c 	bl	9bac <__aeabi_dcmplt>
    7754:	2800      	cmp	r0, #0
    7756:	f040 827b 	bne.w	7c50 <_dtoa_r+0xdb8>
    775a:	45cb      	cmp	fp, r9
    775c:	f000 815a 	beq.w	7a14 <_dtoa_r+0xb7c>
    7760:	4620      	mov	r0, r4
    7762:	4629      	mov	r1, r5
    7764:	2200      	movs	r2, #0
    7766:	4ba1      	ldr	r3, [pc, #644]	; (79ec <_dtoa_r+0xb54>)
    7768:	f001 ffae 	bl	96c8 <__aeabi_dmul>
    776c:	2200      	movs	r2, #0
    776e:	4b9f      	ldr	r3, [pc, #636]	; (79ec <_dtoa_r+0xb54>)
    7770:	4604      	mov	r4, r0
    7772:	460d      	mov	r5, r1
    7774:	4630      	mov	r0, r6
    7776:	4639      	mov	r1, r7
    7778:	f001 ffa6 	bl	96c8 <__aeabi_dmul>
    777c:	460f      	mov	r7, r1
    777e:	4606      	mov	r6, r0
    7780:	f002 fa3c 	bl	9bfc <__aeabi_d2iz>
    7784:	4680      	mov	r8, r0
    7786:	f001 ff39 	bl	95fc <__aeabi_i2d>
    778a:	4602      	mov	r2, r0
    778c:	460b      	mov	r3, r1
    778e:	4630      	mov	r0, r6
    7790:	4639      	mov	r1, r7
    7792:	f001 fde5 	bl	9360 <__aeabi_dsub>
    7796:	f108 0830 	add.w	r8, r8, #48	; 0x30
    779a:	fa5f f888 	uxtb.w	r8, r8
    779e:	4622      	mov	r2, r4
    77a0:	462b      	mov	r3, r5
    77a2:	f80b 8b01 	strb.w	r8, [fp], #1
    77a6:	4606      	mov	r6, r0
    77a8:	460f      	mov	r7, r1
    77aa:	f002 f9ff 	bl	9bac <__aeabi_dcmplt>
    77ae:	4632      	mov	r2, r6
    77b0:	463b      	mov	r3, r7
    77b2:	2800      	cmp	r0, #0
    77b4:	d0c6      	beq.n	7744 <_dtoa_r+0x8ac>
    77b6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    77b8:	4654      	mov	r4, sl
    77ba:	9607      	str	r6, [sp, #28]
    77bc:	e539      	b.n	7232 <_dtoa_r+0x39a>
    77be:	2600      	movs	r6, #0
    77c0:	960b      	str	r6, [sp, #44]	; 0x2c
    77c2:	9825      	ldr	r0, [sp, #148]	; 0x94
    77c4:	2800      	cmp	r0, #0
    77c6:	dd3c      	ble.n	7842 <_dtoa_r+0x9aa>
    77c8:	4606      	mov	r6, r0
    77ca:	900f      	str	r0, [sp, #60]	; 0x3c
    77cc:	4681      	mov	r9, r0
    77ce:	e6ec      	b.n	75aa <_dtoa_r+0x712>
    77d0:	2601      	movs	r6, #1
    77d2:	960b      	str	r6, [sp, #44]	; 0x2c
    77d4:	e7f5      	b.n	77c2 <_dtoa_r+0x92a>
    77d6:	f1b9 0f00 	cmp.w	r9, #0
    77da:	f73f ac7c 	bgt.w	70d6 <_dtoa_r+0x23e>
    77de:	f040 80c6 	bne.w	796e <_dtoa_r+0xad6>
    77e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    77e6:	2200      	movs	r2, #0
    77e8:	4b81      	ldr	r3, [pc, #516]	; (79f0 <_dtoa_r+0xb58>)
    77ea:	f001 ff6d 	bl	96c8 <__aeabi_dmul>
    77ee:	4652      	mov	r2, sl
    77f0:	465b      	mov	r3, fp
    77f2:	f002 f9ef 	bl	9bd4 <__aeabi_dcmpge>
    77f6:	46c8      	mov	r8, r9
    77f8:	464e      	mov	r6, r9
    77fa:	2800      	cmp	r0, #0
    77fc:	d07c      	beq.n	78f8 <_dtoa_r+0xa60>
    77fe:	9d25      	ldr	r5, [sp, #148]	; 0x94
    7800:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    7804:	43ed      	mvns	r5, r5
    7806:	9507      	str	r5, [sp, #28]
    7808:	4641      	mov	r1, r8
    780a:	4620      	mov	r0, r4
    780c:	f000 fe06 	bl	841c <_Bfree>
    7810:	2e00      	cmp	r6, #0
    7812:	f47f ae06 	bne.w	7422 <_dtoa_r+0x58a>
    7816:	e50c      	b.n	7232 <_dtoa_r+0x39a>
    7818:	990a      	ldr	r1, [sp, #40]	; 0x28
    781a:	4620      	mov	r0, r4
    781c:	f000 ff48 	bl	86b0 <__pow5mult>
    7820:	900a      	str	r0, [sp, #40]	; 0x28
    7822:	e56a      	b.n	72fa <_dtoa_r+0x462>
    7824:	9d16      	ldr	r5, [sp, #88]	; 0x58
    7826:	2d00      	cmp	r5, #0
    7828:	f000 81b8 	beq.w	7b9c <_dtoa_r+0xd04>
    782c:	f203 4333 	addw	r3, r3, #1075	; 0x433
    7830:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7832:	9d08      	ldr	r5, [sp, #32]
    7834:	e527      	b.n	7286 <_dtoa_r+0x3ee>
    7836:	4601      	mov	r1, r0
    7838:	4620      	mov	r0, r4
    783a:	f000 fdef 	bl	841c <_Bfree>
    783e:	2201      	movs	r2, #1
    7840:	e67a      	b.n	7538 <_dtoa_r+0x6a0>
    7842:	2601      	movs	r6, #1
    7844:	9625      	str	r6, [sp, #148]	; 0x94
    7846:	960f      	str	r6, [sp, #60]	; 0x3c
    7848:	46b1      	mov	r9, r6
    784a:	2100      	movs	r1, #0
    784c:	6461      	str	r1, [r4, #68]	; 0x44
    784e:	e6bb      	b.n	75c8 <_dtoa_r+0x730>
    7850:	980a      	ldr	r0, [sp, #40]	; 0x28
    7852:	4641      	mov	r1, r8
    7854:	f000 ffd8 	bl	8808 <__mcmp>
    7858:	2800      	cmp	r0, #0
    785a:	f6bf ad8f 	bge.w	737c <_dtoa_r+0x4e4>
    785e:	f8dd e01c 	ldr.w	lr, [sp, #28]
    7862:	990a      	ldr	r1, [sp, #40]	; 0x28
    7864:	f10e 3eff 	add.w	lr, lr, #4294967295
    7868:	4620      	mov	r0, r4
    786a:	220a      	movs	r2, #10
    786c:	2300      	movs	r3, #0
    786e:	f8cd e01c 	str.w	lr, [sp, #28]
    7872:	f000 fddd 	bl	8430 <__multadd>
    7876:	900a      	str	r0, [sp, #40]	; 0x28
    7878:	980b      	ldr	r0, [sp, #44]	; 0x2c
    787a:	2800      	cmp	r0, #0
    787c:	f040 8209 	bne.w	7c92 <_dtoa_r+0xdfa>
    7880:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    7884:	e57a      	b.n	737c <_dtoa_r+0x4e4>
    7886:	f8d8 3010 	ldr.w	r3, [r8, #16]
    788a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    788e:	6918      	ldr	r0, [r3, #16]
    7890:	f000 fe18 	bl	84c4 <__hi0bits>
    7894:	f1c0 0020 	rsb	r0, r0, #32
    7898:	e547      	b.n	732a <_dtoa_r+0x492>
    789a:	9809      	ldr	r0, [sp, #36]	; 0x24
    789c:	f7ff bb2c 	b.w	6ef8 <_dtoa_r+0x60>
    78a0:	f1ba 0f00 	cmp.w	sl, #0
    78a4:	f47f ad3b 	bne.w	731e <_dtoa_r+0x486>
    78a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
    78ac:	2b00      	cmp	r3, #0
    78ae:	f040 817c 	bne.w	7baa <_dtoa_r+0xd12>
    78b2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    78b6:	0d3f      	lsrs	r7, r7, #20
    78b8:	053f      	lsls	r7, r7, #20
    78ba:	2f00      	cmp	r7, #0
    78bc:	f43f ad30 	beq.w	7320 <_dtoa_r+0x488>
    78c0:	9a08      	ldr	r2, [sp, #32]
    78c2:	9b06      	ldr	r3, [sp, #24]
    78c4:	3201      	adds	r2, #1
    78c6:	3301      	adds	r3, #1
    78c8:	9208      	str	r2, [sp, #32]
    78ca:	9306      	str	r3, [sp, #24]
    78cc:	2701      	movs	r7, #1
    78ce:	e527      	b.n	7320 <_dtoa_r+0x488>
    78d0:	9924      	ldr	r1, [sp, #144]	; 0x90
    78d2:	2902      	cmp	r1, #2
    78d4:	f77f ad56 	ble.w	7384 <_dtoa_r+0x4ec>
    78d8:	f1b9 0f00 	cmp.w	r9, #0
    78dc:	d18f      	bne.n	77fe <_dtoa_r+0x966>
    78de:	4641      	mov	r1, r8
    78e0:	464b      	mov	r3, r9
    78e2:	2205      	movs	r2, #5
    78e4:	4620      	mov	r0, r4
    78e6:	f000 fda3 	bl	8430 <__multadd>
    78ea:	4680      	mov	r8, r0
    78ec:	4641      	mov	r1, r8
    78ee:	980a      	ldr	r0, [sp, #40]	; 0x28
    78f0:	f000 ff8a 	bl	8808 <__mcmp>
    78f4:	2800      	cmp	r0, #0
    78f6:	dd82      	ble.n	77fe <_dtoa_r+0x966>
    78f8:	9d07      	ldr	r5, [sp, #28]
    78fa:	2331      	movs	r3, #49	; 0x31
    78fc:	3501      	adds	r5, #1
    78fe:	9507      	str	r5, [sp, #28]
    7900:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7902:	702b      	strb	r3, [r5, #0]
    7904:	f105 0b01 	add.w	fp, r5, #1
    7908:	e77e      	b.n	7808 <_dtoa_r+0x970>
    790a:	9807      	ldr	r0, [sp, #28]
    790c:	9909      	ldr	r1, [sp, #36]	; 0x24
    790e:	2331      	movs	r3, #49	; 0x31
    7910:	3001      	adds	r0, #1
    7912:	9007      	str	r0, [sp, #28]
    7914:	700b      	strb	r3, [r1, #0]
    7916:	e576      	b.n	7406 <_dtoa_r+0x56e>
    7918:	46a3      	mov	fp, r4
    791a:	9c03      	ldr	r4, [sp, #12]
    791c:	e489      	b.n	7232 <_dtoa_r+0x39a>
    791e:	4640      	mov	r0, r8
    7920:	f001 fe6c 	bl	95fc <__aeabi_i2d>
    7924:	4602      	mov	r2, r0
    7926:	460b      	mov	r3, r1
    7928:	4650      	mov	r0, sl
    792a:	4659      	mov	r1, fp
    792c:	f001 fecc 	bl	96c8 <__aeabi_dmul>
    7930:	2200      	movs	r2, #0
    7932:	4b30      	ldr	r3, [pc, #192]	; (79f4 <_dtoa_r+0xb5c>)
    7934:	f001 fd16 	bl	9364 <__adddf3>
    7938:	4606      	mov	r6, r0
    793a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    793e:	4650      	mov	r0, sl
    7940:	4659      	mov	r1, fp
    7942:	2200      	movs	r2, #0
    7944:	4b2a      	ldr	r3, [pc, #168]	; (79f0 <_dtoa_r+0xb58>)
    7946:	f001 fd0b 	bl	9360 <__aeabi_dsub>
    794a:	4632      	mov	r2, r6
    794c:	463b      	mov	r3, r7
    794e:	4682      	mov	sl, r0
    7950:	468b      	mov	fp, r1
    7952:	f002 f949 	bl	9be8 <__aeabi_dcmpgt>
    7956:	2800      	cmp	r0, #0
    7958:	f040 80bd 	bne.w	7ad6 <_dtoa_r+0xc3e>
    795c:	4632      	mov	r2, r6
    795e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    7962:	4650      	mov	r0, sl
    7964:	4659      	mov	r1, fp
    7966:	f002 f921 	bl	9bac <__aeabi_dcmplt>
    796a:	2800      	cmp	r0, #0
    796c:	d055      	beq.n	7a1a <_dtoa_r+0xb82>
    796e:	f04f 0800 	mov.w	r8, #0
    7972:	4646      	mov	r6, r8
    7974:	e743      	b.n	77fe <_dtoa_r+0x966>
    7976:	990a      	ldr	r1, [sp, #40]	; 0x28
    7978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    797a:	4620      	mov	r0, r4
    797c:	f000 fe98 	bl	86b0 <__pow5mult>
    7980:	900a      	str	r0, [sp, #40]	; 0x28
    7982:	e4ba      	b.n	72fa <_dtoa_r+0x462>
    7984:	2601      	movs	r6, #1
    7986:	960b      	str	r6, [sp, #44]	; 0x2c
    7988:	e602      	b.n	7590 <_dtoa_r+0x6f8>
    798a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    798c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    798e:	1b7b      	subs	r3, r7, r5
    7990:	441e      	add	r6, r3
    7992:	970c      	str	r7, [sp, #48]	; 0x30
    7994:	960d      	str	r6, [sp, #52]	; 0x34
    7996:	2700      	movs	r7, #0
    7998:	e46f      	b.n	727a <_dtoa_r+0x3e2>
    799a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    799e:	f04f 0802 	mov.w	r8, #2
    79a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    79a6:	e638      	b.n	761a <_dtoa_r+0x782>
    79a8:	2a00      	cmp	r2, #0
    79aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    79ae:	46d9      	mov	r9, fp
    79b0:	dd11      	ble.n	79d6 <_dtoa_r+0xb3e>
    79b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    79b4:	2201      	movs	r2, #1
    79b6:	4620      	mov	r0, r4
    79b8:	f000 fec8 	bl	874c <__lshift>
    79bc:	4641      	mov	r1, r8
    79be:	900a      	str	r0, [sp, #40]	; 0x28
    79c0:	f000 ff22 	bl	8808 <__mcmp>
    79c4:	2800      	cmp	r0, #0
    79c6:	f340 815d 	ble.w	7c84 <_dtoa_r+0xdec>
    79ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    79ce:	f000 811b 	beq.w	7c08 <_dtoa_r+0xd70>
    79d2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
    79d6:	9b06      	ldr	r3, [sp, #24]
    79d8:	4635      	mov	r5, r6
    79da:	f883 a000 	strb.w	sl, [r3]
    79de:	f103 0b01 	add.w	fp, r3, #1
    79e2:	463e      	mov	r6, r7
    79e4:	e50f      	b.n	7406 <_dtoa_r+0x56e>
    79e6:	bf00      	nop
    79e8:	3ff00000 	.word	0x3ff00000
    79ec:	40240000 	.word	0x40240000
    79f0:	40140000 	.word	0x40140000
    79f4:	401c0000 	.word	0x401c0000
    79f8:	d103      	bne.n	7a02 <_dtoa_r+0xb6a>
    79fa:	f01a 0f01 	tst.w	sl, #1
    79fe:	f47f acf2 	bne.w	73e6 <_dtoa_r+0x54e>
    7a02:	465b      	mov	r3, fp
    7a04:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    7a08:	469b      	mov	fp, r3
    7a0a:	2a30      	cmp	r2, #48	; 0x30
    7a0c:	f103 33ff 	add.w	r3, r3, #4294967295
    7a10:	d0f8      	beq.n	7a04 <_dtoa_r+0xb6c>
    7a12:	e4f8      	b.n	7406 <_dtoa_r+0x56e>
    7a14:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    7a18:	4654      	mov	r4, sl
    7a1a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    7a1e:	f7ff bb47 	b.w	70b0 <_dtoa_r+0x218>
    7a22:	9e07      	ldr	r6, [sp, #28]
    7a24:	4275      	negs	r5, r6
    7a26:	2d00      	cmp	r5, #0
    7a28:	f000 80c2 	beq.w	7bb0 <_dtoa_r+0xd18>
    7a2c:	4ba3      	ldr	r3, [pc, #652]	; (7cbc <_dtoa_r+0xe24>)
    7a2e:	f005 020f 	and.w	r2, r5, #15
    7a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7a36:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a3a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    7a3e:	f001 fe43 	bl	96c8 <__aeabi_dmul>
    7a42:	112d      	asrs	r5, r5, #4
    7a44:	4682      	mov	sl, r0
    7a46:	468b      	mov	fp, r1
    7a48:	f000 812e 	beq.w	7ca8 <_dtoa_r+0xe10>
    7a4c:	4e9c      	ldr	r6, [pc, #624]	; (7cc0 <_dtoa_r+0xe28>)
    7a4e:	f04f 0802 	mov.w	r8, #2
    7a52:	07ea      	lsls	r2, r5, #31
    7a54:	d505      	bpl.n	7a62 <_dtoa_r+0xbca>
    7a56:	e9d6 2300 	ldrd	r2, r3, [r6]
    7a5a:	f108 0801 	add.w	r8, r8, #1
    7a5e:	f001 fe33 	bl	96c8 <__aeabi_dmul>
    7a62:	106d      	asrs	r5, r5, #1
    7a64:	f106 0608 	add.w	r6, r6, #8
    7a68:	d1f3      	bne.n	7a52 <_dtoa_r+0xbba>
    7a6a:	4682      	mov	sl, r0
    7a6c:	468b      	mov	fp, r1
    7a6e:	e5ef      	b.n	7650 <_dtoa_r+0x7b8>
    7a70:	9e07      	ldr	r6, [sp, #28]
    7a72:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7a74:	2230      	movs	r2, #48	; 0x30
    7a76:	702a      	strb	r2, [r5, #0]
    7a78:	3601      	adds	r6, #1
    7a7a:	2231      	movs	r2, #49	; 0x31
    7a7c:	9607      	str	r6, [sp, #28]
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f7ff bbd7 	b.w	7232 <_dtoa_r+0x39a>
    7a84:	6871      	ldr	r1, [r6, #4]
    7a86:	4620      	mov	r0, r4
    7a88:	f000 fca2 	bl	83d0 <_Balloc>
    7a8c:	6933      	ldr	r3, [r6, #16]
    7a8e:	4605      	mov	r5, r0
    7a90:	1c9a      	adds	r2, r3, #2
    7a92:	0092      	lsls	r2, r2, #2
    7a94:	f106 010c 	add.w	r1, r6, #12
    7a98:	300c      	adds	r0, #12
    7a9a:	f000 fc1f 	bl	82dc <memcpy>
    7a9e:	4620      	mov	r0, r4
    7aa0:	4629      	mov	r1, r5
    7aa2:	2201      	movs	r2, #1
    7aa4:	f000 fe52 	bl	874c <__lshift>
    7aa8:	4607      	mov	r7, r0
    7aaa:	e503      	b.n	74b4 <_dtoa_r+0x61c>
    7aac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    7ab0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    7ab4:	f000 80a8 	beq.w	7c08 <_dtoa_r+0xd70>
    7ab8:	9d06      	ldr	r5, [sp, #24]
    7aba:	f10a 0301 	add.w	r3, sl, #1
    7abe:	702b      	strb	r3, [r5, #0]
    7ac0:	4635      	mov	r5, r6
    7ac2:	9e06      	ldr	r6, [sp, #24]
    7ac4:	f106 0b01 	add.w	fp, r6, #1
    7ac8:	463e      	mov	r6, r7
    7aca:	e49c      	b.n	7406 <_dtoa_r+0x56e>
    7acc:	4635      	mov	r5, r6
    7ace:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    7ad2:	463e      	mov	r6, r7
    7ad4:	e47b      	b.n	73ce <_dtoa_r+0x536>
    7ad6:	f04f 0800 	mov.w	r8, #0
    7ada:	4646      	mov	r6, r8
    7adc:	e70c      	b.n	78f8 <_dtoa_r+0xa60>
    7ade:	4977      	ldr	r1, [pc, #476]	; (7cbc <_dtoa_r+0xe24>)
    7ae0:	f108 35ff 	add.w	r5, r8, #4294967295
    7ae4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    7ae8:	4632      	mov	r2, r6
    7aea:	463b      	mov	r3, r7
    7aec:	e9d1 0100 	ldrd	r0, r1, [r1]
    7af0:	9510      	str	r5, [sp, #64]	; 0x40
    7af2:	f001 fde9 	bl	96c8 <__aeabi_dmul>
    7af6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    7afa:	4659      	mov	r1, fp
    7afc:	4650      	mov	r0, sl
    7afe:	f002 f87d 	bl	9bfc <__aeabi_d2iz>
    7b02:	4605      	mov	r5, r0
    7b04:	f001 fd7a 	bl	95fc <__aeabi_i2d>
    7b08:	4602      	mov	r2, r0
    7b0a:	460b      	mov	r3, r1
    7b0c:	4650      	mov	r0, sl
    7b0e:	4659      	mov	r1, fp
    7b10:	f001 fc26 	bl	9360 <__aeabi_dsub>
    7b14:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    7b18:	3530      	adds	r5, #48	; 0x30
    7b1a:	f1b8 0f01 	cmp.w	r8, #1
    7b1e:	4606      	mov	r6, r0
    7b20:	460f      	mov	r7, r1
    7b22:	f88e 5000 	strb.w	r5, [lr]
    7b26:	f10e 0b01 	add.w	fp, lr, #1
    7b2a:	d01e      	beq.n	7b6a <_dtoa_r+0xcd2>
    7b2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7b2e:	1e6b      	subs	r3, r5, #1
    7b30:	eb03 0a08 	add.w	sl, r3, r8
    7b34:	2200      	movs	r2, #0
    7b36:	4b63      	ldr	r3, [pc, #396]	; (7cc4 <_dtoa_r+0xe2c>)
    7b38:	f001 fdc6 	bl	96c8 <__aeabi_dmul>
    7b3c:	460f      	mov	r7, r1
    7b3e:	4606      	mov	r6, r0
    7b40:	f002 f85c 	bl	9bfc <__aeabi_d2iz>
    7b44:	4680      	mov	r8, r0
    7b46:	f001 fd59 	bl	95fc <__aeabi_i2d>
    7b4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
    7b4e:	4602      	mov	r2, r0
    7b50:	460b      	mov	r3, r1
    7b52:	4630      	mov	r0, r6
    7b54:	4639      	mov	r1, r7
    7b56:	f001 fc03 	bl	9360 <__aeabi_dsub>
    7b5a:	f805 8f01 	strb.w	r8, [r5, #1]!
    7b5e:	4555      	cmp	r5, sl
    7b60:	d1e8      	bne.n	7b34 <_dtoa_r+0xc9c>
    7b62:	9d10      	ldr	r5, [sp, #64]	; 0x40
    7b64:	4606      	mov	r6, r0
    7b66:	460f      	mov	r7, r1
    7b68:	44ab      	add	fp, r5
    7b6a:	2200      	movs	r2, #0
    7b6c:	4b56      	ldr	r3, [pc, #344]	; (7cc8 <_dtoa_r+0xe30>)
    7b6e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    7b72:	f001 fbf7 	bl	9364 <__adddf3>
    7b76:	4632      	mov	r2, r6
    7b78:	463b      	mov	r3, r7
    7b7a:	f002 f817 	bl	9bac <__aeabi_dcmplt>
    7b7e:	2800      	cmp	r0, #0
    7b80:	d04d      	beq.n	7c1e <_dtoa_r+0xd86>
    7b82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    7b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7b86:	9607      	str	r6, [sp, #28]
    7b88:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
    7b8c:	f7ff bb4a 	b.w	7224 <_dtoa_r+0x38c>
    7b90:	9e08      	ldr	r6, [sp, #32]
    7b92:	2300      	movs	r3, #0
    7b94:	ebc9 0506 	rsb	r5, r9, r6
    7b98:	f7ff bb75 	b.w	7286 <_dtoa_r+0x3ee>
    7b9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7b9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7ba0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    7ba4:	9d08      	ldr	r5, [sp, #32]
    7ba6:	f7ff bb6e 	b.w	7286 <_dtoa_r+0x3ee>
    7baa:	4657      	mov	r7, sl
    7bac:	f7ff bbb8 	b.w	7320 <_dtoa_r+0x488>
    7bb0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    7bb4:	f04f 0802 	mov.w	r8, #2
    7bb8:	e54a      	b.n	7650 <_dtoa_r+0x7b8>
    7bba:	f1b9 0f00 	cmp.w	r9, #0
    7bbe:	f43f aeae 	beq.w	791e <_dtoa_r+0xa86>
    7bc2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7bc4:	2e00      	cmp	r6, #0
    7bc6:	f77f af28 	ble.w	7a1a <_dtoa_r+0xb82>
    7bca:	2200      	movs	r2, #0
    7bcc:	4b3d      	ldr	r3, [pc, #244]	; (7cc4 <_dtoa_r+0xe2c>)
    7bce:	4650      	mov	r0, sl
    7bd0:	4659      	mov	r1, fp
    7bd2:	f001 fd79 	bl	96c8 <__aeabi_dmul>
    7bd6:	4682      	mov	sl, r0
    7bd8:	f108 0001 	add.w	r0, r8, #1
    7bdc:	468b      	mov	fp, r1
    7bde:	f001 fd0d 	bl	95fc <__aeabi_i2d>
    7be2:	4602      	mov	r2, r0
    7be4:	460b      	mov	r3, r1
    7be6:	4650      	mov	r0, sl
    7be8:	4659      	mov	r1, fp
    7bea:	f001 fd6d 	bl	96c8 <__aeabi_dmul>
    7bee:	2200      	movs	r2, #0
    7bf0:	4b36      	ldr	r3, [pc, #216]	; (7ccc <_dtoa_r+0xe34>)
    7bf2:	f001 fbb7 	bl	9364 <__adddf3>
    7bf6:	9d07      	ldr	r5, [sp, #28]
    7bf8:	4606      	mov	r6, r0
    7bfa:	3d01      	subs	r5, #1
    7bfc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    7c00:	9517      	str	r5, [sp, #92]	; 0x5c
    7c02:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    7c06:	e543      	b.n	7690 <_dtoa_r+0x7f8>
    7c08:	4635      	mov	r5, r6
    7c0a:	9b06      	ldr	r3, [sp, #24]
    7c0c:	9e06      	ldr	r6, [sp, #24]
    7c0e:	2239      	movs	r2, #57	; 0x39
    7c10:	7032      	strb	r2, [r6, #0]
    7c12:	f103 0b01 	add.w	fp, r3, #1
    7c16:	463e      	mov	r6, r7
    7c18:	9909      	ldr	r1, [sp, #36]	; 0x24
    7c1a:	f7ff bbee 	b.w	73fa <_dtoa_r+0x562>
    7c1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    7c22:	2000      	movs	r0, #0
    7c24:	4928      	ldr	r1, [pc, #160]	; (7cc8 <_dtoa_r+0xe30>)
    7c26:	f001 fb9b 	bl	9360 <__aeabi_dsub>
    7c2a:	4632      	mov	r2, r6
    7c2c:	463b      	mov	r3, r7
    7c2e:	f001 ffdb 	bl	9be8 <__aeabi_dcmpgt>
    7c32:	2800      	cmp	r0, #0
    7c34:	f43f aef1 	beq.w	7a1a <_dtoa_r+0xb82>
    7c38:	465b      	mov	r3, fp
    7c3a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    7c3e:	469b      	mov	fp, r3
    7c40:	2a30      	cmp	r2, #48	; 0x30
    7c42:	f103 33ff 	add.w	r3, r3, #4294967295
    7c46:	d0f8      	beq.n	7c3a <_dtoa_r+0xda2>
    7c48:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    7c4a:	9507      	str	r5, [sp, #28]
    7c4c:	f7ff baf1 	b.w	7232 <_dtoa_r+0x39a>
    7c50:	4645      	mov	r5, r8
    7c52:	4654      	mov	r4, sl
    7c54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    7c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c58:	9607      	str	r6, [sp, #28]
    7c5a:	f7ff bae3 	b.w	7224 <_dtoa_r+0x38c>
    7c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    7c62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    7c66:	d0cf      	beq.n	7c08 <_dtoa_r+0xd70>
    7c68:	9b03      	ldr	r3, [sp, #12]
    7c6a:	4635      	mov	r5, r6
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	9e06      	ldr	r6, [sp, #24]
    7c70:	bfc8      	it	gt
    7c72:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
    7c76:	f886 a000 	strb.w	sl, [r6]
    7c7a:	f106 0b01 	add.w	fp, r6, #1
    7c7e:	463e      	mov	r6, r7
    7c80:	f7ff bbc1 	b.w	7406 <_dtoa_r+0x56e>
    7c84:	f47f aea7 	bne.w	79d6 <_dtoa_r+0xb3e>
    7c88:	f01a 0f01 	tst.w	sl, #1
    7c8c:	f43f aea3 	beq.w	79d6 <_dtoa_r+0xb3e>
    7c90:	e69b      	b.n	79ca <_dtoa_r+0xb32>
    7c92:	4631      	mov	r1, r6
    7c94:	4620      	mov	r0, r4
    7c96:	220a      	movs	r2, #10
    7c98:	2300      	movs	r3, #0
    7c9a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    7c9e:	f000 fbc7 	bl	8430 <__multadd>
    7ca2:	4606      	mov	r6, r0
    7ca4:	f7ff bb6a 	b.w	737c <_dtoa_r+0x4e4>
    7ca8:	f04f 0802 	mov.w	r8, #2
    7cac:	e4d0      	b.n	7650 <_dtoa_r+0x7b8>
    7cae:	f43f ab50 	beq.w	7352 <_dtoa_r+0x4ba>
    7cb2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
    7cb6:	f7ff bbe0 	b.w	747a <_dtoa_r+0x5e2>
    7cba:	bf00      	nop
    7cbc:	0000ac60 	.word	0x0000ac60
    7cc0:	0000ad28 	.word	0x0000ad28
    7cc4:	40240000 	.word	0x40240000
    7cc8:	3fe00000 	.word	0x3fe00000
    7ccc:	401c0000 	.word	0x401c0000

00007cd0 <__libc_fini_array>:
    7cd0:	b538      	push	{r3, r4, r5, lr}
    7cd2:	4d09      	ldr	r5, [pc, #36]	; (7cf8 <__libc_fini_array+0x28>)
    7cd4:	4c09      	ldr	r4, [pc, #36]	; (7cfc <__libc_fini_array+0x2c>)
    7cd6:	1b64      	subs	r4, r4, r5
    7cd8:	10a4      	asrs	r4, r4, #2
    7cda:	bf18      	it	ne
    7cdc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    7ce0:	d005      	beq.n	7cee <__libc_fini_array+0x1e>
    7ce2:	3c01      	subs	r4, #1
    7ce4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    7ce8:	4798      	blx	r3
    7cea:	2c00      	cmp	r4, #0
    7cec:	d1f9      	bne.n	7ce2 <__libc_fini_array+0x12>
    7cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7cf2:	f002 ba91 	b.w	a218 <_fini>
    7cf6:	bf00      	nop
    7cf8:	2000094c 	.word	0x2000094c
    7cfc:	20000950 	.word	0x20000950

00007d00 <__gettzinfo>:
    7d00:	4800      	ldr	r0, [pc, #0]	; (7d04 <__gettzinfo+0x4>)
    7d02:	4770      	bx	lr
    7d04:	200004bc 	.word	0x200004bc

00007d08 <_localeconv_r>:
    7d08:	4800      	ldr	r0, [pc, #0]	; (7d0c <_localeconv_r+0x4>)
    7d0a:	4770      	bx	lr
    7d0c:	200004fc 	.word	0x200004fc

00007d10 <_malloc_r>:
    7d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d14:	f101 050b 	add.w	r5, r1, #11
    7d18:	2d16      	cmp	r5, #22
    7d1a:	b083      	sub	sp, #12
    7d1c:	4606      	mov	r6, r0
    7d1e:	d927      	bls.n	7d70 <_malloc_r+0x60>
    7d20:	f035 0507 	bics.w	r5, r5, #7
    7d24:	d427      	bmi.n	7d76 <_malloc_r+0x66>
    7d26:	42a9      	cmp	r1, r5
    7d28:	d825      	bhi.n	7d76 <_malloc_r+0x66>
    7d2a:	4630      	mov	r0, r6
    7d2c:	f000 fb4c 	bl	83c8 <__malloc_lock>
    7d30:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    7d34:	d226      	bcs.n	7d84 <_malloc_r+0x74>
    7d36:	4fc1      	ldr	r7, [pc, #772]	; (803c <_malloc_r+0x32c>)
    7d38:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    7d3c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    7d40:	68dc      	ldr	r4, [r3, #12]
    7d42:	429c      	cmp	r4, r3
    7d44:	f000 81d2 	beq.w	80ec <_malloc_r+0x3dc>
    7d48:	6863      	ldr	r3, [r4, #4]
    7d4a:	68e2      	ldr	r2, [r4, #12]
    7d4c:	f023 0303 	bic.w	r3, r3, #3
    7d50:	4423      	add	r3, r4
    7d52:	6858      	ldr	r0, [r3, #4]
    7d54:	68a1      	ldr	r1, [r4, #8]
    7d56:	f040 0501 	orr.w	r5, r0, #1
    7d5a:	60ca      	str	r2, [r1, #12]
    7d5c:	4630      	mov	r0, r6
    7d5e:	6091      	str	r1, [r2, #8]
    7d60:	605d      	str	r5, [r3, #4]
    7d62:	f000 fb33 	bl	83cc <__malloc_unlock>
    7d66:	3408      	adds	r4, #8
    7d68:	4620      	mov	r0, r4
    7d6a:	b003      	add	sp, #12
    7d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d70:	2510      	movs	r5, #16
    7d72:	42a9      	cmp	r1, r5
    7d74:	d9d9      	bls.n	7d2a <_malloc_r+0x1a>
    7d76:	2400      	movs	r4, #0
    7d78:	230c      	movs	r3, #12
    7d7a:	4620      	mov	r0, r4
    7d7c:	6033      	str	r3, [r6, #0]
    7d7e:	b003      	add	sp, #12
    7d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d84:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    7d88:	f000 8089 	beq.w	7e9e <_malloc_r+0x18e>
    7d8c:	f1bc 0f04 	cmp.w	ip, #4
    7d90:	f200 8160 	bhi.w	8054 <_malloc_r+0x344>
    7d94:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    7d98:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    7d9c:	ea4f 014c 	mov.w	r1, ip, lsl #1
    7da0:	4fa6      	ldr	r7, [pc, #664]	; (803c <_malloc_r+0x32c>)
    7da2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    7da6:	68cc      	ldr	r4, [r1, #12]
    7da8:	42a1      	cmp	r1, r4
    7daa:	d105      	bne.n	7db8 <_malloc_r+0xa8>
    7dac:	e00c      	b.n	7dc8 <_malloc_r+0xb8>
    7dae:	2b00      	cmp	r3, #0
    7db0:	da79      	bge.n	7ea6 <_malloc_r+0x196>
    7db2:	68e4      	ldr	r4, [r4, #12]
    7db4:	42a1      	cmp	r1, r4
    7db6:	d007      	beq.n	7dc8 <_malloc_r+0xb8>
    7db8:	6862      	ldr	r2, [r4, #4]
    7dba:	f022 0203 	bic.w	r2, r2, #3
    7dbe:	1b53      	subs	r3, r2, r5
    7dc0:	2b0f      	cmp	r3, #15
    7dc2:	ddf4      	ble.n	7dae <_malloc_r+0x9e>
    7dc4:	f10c 3cff 	add.w	ip, ip, #4294967295
    7dc8:	f10c 0c01 	add.w	ip, ip, #1
    7dcc:	4b9b      	ldr	r3, [pc, #620]	; (803c <_malloc_r+0x32c>)
    7dce:	693c      	ldr	r4, [r7, #16]
    7dd0:	f103 0e08 	add.w	lr, r3, #8
    7dd4:	4574      	cmp	r4, lr
    7dd6:	f000 817e 	beq.w	80d6 <_malloc_r+0x3c6>
    7dda:	6861      	ldr	r1, [r4, #4]
    7ddc:	f021 0103 	bic.w	r1, r1, #3
    7de0:	1b4a      	subs	r2, r1, r5
    7de2:	2a0f      	cmp	r2, #15
    7de4:	f300 8164 	bgt.w	80b0 <_malloc_r+0x3a0>
    7de8:	2a00      	cmp	r2, #0
    7dea:	f8c3 e014 	str.w	lr, [r3, #20]
    7dee:	f8c3 e010 	str.w	lr, [r3, #16]
    7df2:	da69      	bge.n	7ec8 <_malloc_r+0x1b8>
    7df4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7df8:	f080 813a 	bcs.w	8070 <_malloc_r+0x360>
    7dfc:	08c9      	lsrs	r1, r1, #3
    7dfe:	108a      	asrs	r2, r1, #2
    7e00:	f04f 0801 	mov.w	r8, #1
    7e04:	fa08 f802 	lsl.w	r8, r8, r2
    7e08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    7e0c:	685a      	ldr	r2, [r3, #4]
    7e0e:	6888      	ldr	r0, [r1, #8]
    7e10:	ea48 0202 	orr.w	r2, r8, r2
    7e14:	60a0      	str	r0, [r4, #8]
    7e16:	60e1      	str	r1, [r4, #12]
    7e18:	605a      	str	r2, [r3, #4]
    7e1a:	608c      	str	r4, [r1, #8]
    7e1c:	60c4      	str	r4, [r0, #12]
    7e1e:	ea4f 03ac 	mov.w	r3, ip, asr #2
    7e22:	2001      	movs	r0, #1
    7e24:	4098      	lsls	r0, r3
    7e26:	4290      	cmp	r0, r2
    7e28:	d85b      	bhi.n	7ee2 <_malloc_r+0x1d2>
    7e2a:	4202      	tst	r2, r0
    7e2c:	d106      	bne.n	7e3c <_malloc_r+0x12c>
    7e2e:	f02c 0c03 	bic.w	ip, ip, #3
    7e32:	0040      	lsls	r0, r0, #1
    7e34:	4202      	tst	r2, r0
    7e36:	f10c 0c04 	add.w	ip, ip, #4
    7e3a:	d0fa      	beq.n	7e32 <_malloc_r+0x122>
    7e3c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    7e40:	4644      	mov	r4, r8
    7e42:	46e1      	mov	r9, ip
    7e44:	68e3      	ldr	r3, [r4, #12]
    7e46:	429c      	cmp	r4, r3
    7e48:	d107      	bne.n	7e5a <_malloc_r+0x14a>
    7e4a:	e146      	b.n	80da <_malloc_r+0x3ca>
    7e4c:	2a00      	cmp	r2, #0
    7e4e:	f280 8157 	bge.w	8100 <_malloc_r+0x3f0>
    7e52:	68db      	ldr	r3, [r3, #12]
    7e54:	429c      	cmp	r4, r3
    7e56:	f000 8140 	beq.w	80da <_malloc_r+0x3ca>
    7e5a:	6859      	ldr	r1, [r3, #4]
    7e5c:	f021 0103 	bic.w	r1, r1, #3
    7e60:	1b4a      	subs	r2, r1, r5
    7e62:	2a0f      	cmp	r2, #15
    7e64:	ddf2      	ble.n	7e4c <_malloc_r+0x13c>
    7e66:	461c      	mov	r4, r3
    7e68:	f854 cf08 	ldr.w	ip, [r4, #8]!
    7e6c:	68d9      	ldr	r1, [r3, #12]
    7e6e:	f045 0901 	orr.w	r9, r5, #1
    7e72:	f042 0801 	orr.w	r8, r2, #1
    7e76:	441d      	add	r5, r3
    7e78:	f8c3 9004 	str.w	r9, [r3, #4]
    7e7c:	4630      	mov	r0, r6
    7e7e:	f8cc 100c 	str.w	r1, [ip, #12]
    7e82:	f8c1 c008 	str.w	ip, [r1, #8]
    7e86:	617d      	str	r5, [r7, #20]
    7e88:	613d      	str	r5, [r7, #16]
    7e8a:	f8c5 e00c 	str.w	lr, [r5, #12]
    7e8e:	f8c5 e008 	str.w	lr, [r5, #8]
    7e92:	f8c5 8004 	str.w	r8, [r5, #4]
    7e96:	50aa      	str	r2, [r5, r2]
    7e98:	f000 fa98 	bl	83cc <__malloc_unlock>
    7e9c:	e764      	b.n	7d68 <_malloc_r+0x58>
    7e9e:	217e      	movs	r1, #126	; 0x7e
    7ea0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    7ea4:	e77c      	b.n	7da0 <_malloc_r+0x90>
    7ea6:	4422      	add	r2, r4
    7ea8:	6850      	ldr	r0, [r2, #4]
    7eaa:	68e3      	ldr	r3, [r4, #12]
    7eac:	68a1      	ldr	r1, [r4, #8]
    7eae:	f040 0501 	orr.w	r5, r0, #1
    7eb2:	60cb      	str	r3, [r1, #12]
    7eb4:	4630      	mov	r0, r6
    7eb6:	6099      	str	r1, [r3, #8]
    7eb8:	6055      	str	r5, [r2, #4]
    7eba:	f000 fa87 	bl	83cc <__malloc_unlock>
    7ebe:	3408      	adds	r4, #8
    7ec0:	4620      	mov	r0, r4
    7ec2:	b003      	add	sp, #12
    7ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ec8:	4421      	add	r1, r4
    7eca:	684b      	ldr	r3, [r1, #4]
    7ecc:	4630      	mov	r0, r6
    7ece:	f043 0301 	orr.w	r3, r3, #1
    7ed2:	604b      	str	r3, [r1, #4]
    7ed4:	f000 fa7a 	bl	83cc <__malloc_unlock>
    7ed8:	3408      	adds	r4, #8
    7eda:	4620      	mov	r0, r4
    7edc:	b003      	add	sp, #12
    7ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ee2:	68bc      	ldr	r4, [r7, #8]
    7ee4:	6863      	ldr	r3, [r4, #4]
    7ee6:	f023 0903 	bic.w	r9, r3, #3
    7eea:	45a9      	cmp	r9, r5
    7eec:	d304      	bcc.n	7ef8 <_malloc_r+0x1e8>
    7eee:	ebc5 0309 	rsb	r3, r5, r9
    7ef2:	2b0f      	cmp	r3, #15
    7ef4:	f300 8091 	bgt.w	801a <_malloc_r+0x30a>
    7ef8:	4b51      	ldr	r3, [pc, #324]	; (8040 <_malloc_r+0x330>)
    7efa:	4a52      	ldr	r2, [pc, #328]	; (8044 <_malloc_r+0x334>)
    7efc:	6819      	ldr	r1, [r3, #0]
    7efe:	6813      	ldr	r3, [r2, #0]
    7f00:	eb05 0a01 	add.w	sl, r5, r1
    7f04:	3301      	adds	r3, #1
    7f06:	eb04 0b09 	add.w	fp, r4, r9
    7f0a:	f000 8161 	beq.w	81d0 <_malloc_r+0x4c0>
    7f0e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    7f12:	f10a 0a0f 	add.w	sl, sl, #15
    7f16:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    7f1a:	f02a 0a0f 	bic.w	sl, sl, #15
    7f1e:	4630      	mov	r0, r6
    7f20:	4651      	mov	r1, sl
    7f22:	9201      	str	r2, [sp, #4]
    7f24:	f000 fd86 	bl	8a34 <_sbrk_r>
    7f28:	f1b0 3fff 	cmp.w	r0, #4294967295
    7f2c:	4680      	mov	r8, r0
    7f2e:	9a01      	ldr	r2, [sp, #4]
    7f30:	f000 8101 	beq.w	8136 <_malloc_r+0x426>
    7f34:	4583      	cmp	fp, r0
    7f36:	f200 80fb 	bhi.w	8130 <_malloc_r+0x420>
    7f3a:	f8df c114 	ldr.w	ip, [pc, #276]	; 8050 <_malloc_r+0x340>
    7f3e:	45c3      	cmp	fp, r8
    7f40:	f8dc 3000 	ldr.w	r3, [ip]
    7f44:	4453      	add	r3, sl
    7f46:	f8cc 3000 	str.w	r3, [ip]
    7f4a:	f000 814a 	beq.w	81e2 <_malloc_r+0x4d2>
    7f4e:	6812      	ldr	r2, [r2, #0]
    7f50:	493c      	ldr	r1, [pc, #240]	; (8044 <_malloc_r+0x334>)
    7f52:	3201      	adds	r2, #1
    7f54:	bf1b      	ittet	ne
    7f56:	ebcb 0b08 	rsbne	fp, fp, r8
    7f5a:	445b      	addne	r3, fp
    7f5c:	f8c1 8000 	streq.w	r8, [r1]
    7f60:	f8cc 3000 	strne.w	r3, [ip]
    7f64:	f018 0307 	ands.w	r3, r8, #7
    7f68:	f000 8114 	beq.w	8194 <_malloc_r+0x484>
    7f6c:	f1c3 0208 	rsb	r2, r3, #8
    7f70:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    7f74:	4490      	add	r8, r2
    7f76:	3308      	adds	r3, #8
    7f78:	44c2      	add	sl, r8
    7f7a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    7f7e:	ebca 0a03 	rsb	sl, sl, r3
    7f82:	4651      	mov	r1, sl
    7f84:	4630      	mov	r0, r6
    7f86:	f8cd c004 	str.w	ip, [sp, #4]
    7f8a:	f000 fd53 	bl	8a34 <_sbrk_r>
    7f8e:	1c43      	adds	r3, r0, #1
    7f90:	f8dd c004 	ldr.w	ip, [sp, #4]
    7f94:	f000 8135 	beq.w	8202 <_malloc_r+0x4f2>
    7f98:	ebc8 0200 	rsb	r2, r8, r0
    7f9c:	4452      	add	r2, sl
    7f9e:	f042 0201 	orr.w	r2, r2, #1
    7fa2:	f8dc 3000 	ldr.w	r3, [ip]
    7fa6:	42bc      	cmp	r4, r7
    7fa8:	4453      	add	r3, sl
    7faa:	f8c7 8008 	str.w	r8, [r7, #8]
    7fae:	f8cc 3000 	str.w	r3, [ip]
    7fb2:	f8c8 2004 	str.w	r2, [r8, #4]
    7fb6:	f8df a098 	ldr.w	sl, [pc, #152]	; 8050 <_malloc_r+0x340>
    7fba:	d015      	beq.n	7fe8 <_malloc_r+0x2d8>
    7fbc:	f1b9 0f0f 	cmp.w	r9, #15
    7fc0:	f240 80eb 	bls.w	819a <_malloc_r+0x48a>
    7fc4:	6861      	ldr	r1, [r4, #4]
    7fc6:	f1a9 020c 	sub.w	r2, r9, #12
    7fca:	f022 0207 	bic.w	r2, r2, #7
    7fce:	f001 0101 	and.w	r1, r1, #1
    7fd2:	ea42 0e01 	orr.w	lr, r2, r1
    7fd6:	2005      	movs	r0, #5
    7fd8:	18a1      	adds	r1, r4, r2
    7fda:	2a0f      	cmp	r2, #15
    7fdc:	f8c4 e004 	str.w	lr, [r4, #4]
    7fe0:	6048      	str	r0, [r1, #4]
    7fe2:	6088      	str	r0, [r1, #8]
    7fe4:	f200 8111 	bhi.w	820a <_malloc_r+0x4fa>
    7fe8:	4a17      	ldr	r2, [pc, #92]	; (8048 <_malloc_r+0x338>)
    7fea:	68bc      	ldr	r4, [r7, #8]
    7fec:	6811      	ldr	r1, [r2, #0]
    7fee:	428b      	cmp	r3, r1
    7ff0:	bf88      	it	hi
    7ff2:	6013      	strhi	r3, [r2, #0]
    7ff4:	4a15      	ldr	r2, [pc, #84]	; (804c <_malloc_r+0x33c>)
    7ff6:	6811      	ldr	r1, [r2, #0]
    7ff8:	428b      	cmp	r3, r1
    7ffa:	bf88      	it	hi
    7ffc:	6013      	strhi	r3, [r2, #0]
    7ffe:	6862      	ldr	r2, [r4, #4]
    8000:	f022 0203 	bic.w	r2, r2, #3
    8004:	4295      	cmp	r5, r2
    8006:	ebc5 0302 	rsb	r3, r5, r2
    800a:	d801      	bhi.n	8010 <_malloc_r+0x300>
    800c:	2b0f      	cmp	r3, #15
    800e:	dc04      	bgt.n	801a <_malloc_r+0x30a>
    8010:	4630      	mov	r0, r6
    8012:	f000 f9db 	bl	83cc <__malloc_unlock>
    8016:	2400      	movs	r4, #0
    8018:	e6a6      	b.n	7d68 <_malloc_r+0x58>
    801a:	f045 0201 	orr.w	r2, r5, #1
    801e:	f043 0301 	orr.w	r3, r3, #1
    8022:	4425      	add	r5, r4
    8024:	6062      	str	r2, [r4, #4]
    8026:	4630      	mov	r0, r6
    8028:	60bd      	str	r5, [r7, #8]
    802a:	606b      	str	r3, [r5, #4]
    802c:	f000 f9ce 	bl	83cc <__malloc_unlock>
    8030:	3408      	adds	r4, #8
    8032:	4620      	mov	r0, r4
    8034:	b003      	add	sp, #12
    8036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    803a:	bf00      	nop
    803c:	20000534 	.word	0x20000534
    8040:	20000f78 	.word	0x20000f78
    8044:	20000940 	.word	0x20000940
    8048:	20000f74 	.word	0x20000f74
    804c:	20000f70 	.word	0x20000f70
    8050:	20000f7c 	.word	0x20000f7c
    8054:	f1bc 0f14 	cmp.w	ip, #20
    8058:	d961      	bls.n	811e <_malloc_r+0x40e>
    805a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    805e:	f200 808f 	bhi.w	8180 <_malloc_r+0x470>
    8062:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    8066:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    806a:	ea4f 014c 	mov.w	r1, ip, lsl #1
    806e:	e697      	b.n	7da0 <_malloc_r+0x90>
    8070:	0a4b      	lsrs	r3, r1, #9
    8072:	2b04      	cmp	r3, #4
    8074:	d958      	bls.n	8128 <_malloc_r+0x418>
    8076:	2b14      	cmp	r3, #20
    8078:	f200 80ad 	bhi.w	81d6 <_malloc_r+0x4c6>
    807c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    8080:	0050      	lsls	r0, r2, #1
    8082:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8086:	6883      	ldr	r3, [r0, #8]
    8088:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8244 <_malloc_r+0x534>
    808c:	4283      	cmp	r3, r0
    808e:	f000 808a 	beq.w	81a6 <_malloc_r+0x496>
    8092:	685a      	ldr	r2, [r3, #4]
    8094:	f022 0203 	bic.w	r2, r2, #3
    8098:	4291      	cmp	r1, r2
    809a:	d202      	bcs.n	80a2 <_malloc_r+0x392>
    809c:	689b      	ldr	r3, [r3, #8]
    809e:	4298      	cmp	r0, r3
    80a0:	d1f7      	bne.n	8092 <_malloc_r+0x382>
    80a2:	68d9      	ldr	r1, [r3, #12]
    80a4:	687a      	ldr	r2, [r7, #4]
    80a6:	60e1      	str	r1, [r4, #12]
    80a8:	60a3      	str	r3, [r4, #8]
    80aa:	608c      	str	r4, [r1, #8]
    80ac:	60dc      	str	r4, [r3, #12]
    80ae:	e6b6      	b.n	7e1e <_malloc_r+0x10e>
    80b0:	f045 0701 	orr.w	r7, r5, #1
    80b4:	f042 0101 	orr.w	r1, r2, #1
    80b8:	4425      	add	r5, r4
    80ba:	6067      	str	r7, [r4, #4]
    80bc:	4630      	mov	r0, r6
    80be:	615d      	str	r5, [r3, #20]
    80c0:	611d      	str	r5, [r3, #16]
    80c2:	f8c5 e00c 	str.w	lr, [r5, #12]
    80c6:	f8c5 e008 	str.w	lr, [r5, #8]
    80ca:	6069      	str	r1, [r5, #4]
    80cc:	50aa      	str	r2, [r5, r2]
    80ce:	3408      	adds	r4, #8
    80d0:	f000 f97c 	bl	83cc <__malloc_unlock>
    80d4:	e648      	b.n	7d68 <_malloc_r+0x58>
    80d6:	685a      	ldr	r2, [r3, #4]
    80d8:	e6a1      	b.n	7e1e <_malloc_r+0x10e>
    80da:	f109 0901 	add.w	r9, r9, #1
    80de:	f019 0f03 	tst.w	r9, #3
    80e2:	f104 0408 	add.w	r4, r4, #8
    80e6:	f47f aead 	bne.w	7e44 <_malloc_r+0x134>
    80ea:	e02d      	b.n	8148 <_malloc_r+0x438>
    80ec:	f104 0308 	add.w	r3, r4, #8
    80f0:	6964      	ldr	r4, [r4, #20]
    80f2:	42a3      	cmp	r3, r4
    80f4:	bf08      	it	eq
    80f6:	f10c 0c02 	addeq.w	ip, ip, #2
    80fa:	f43f ae67 	beq.w	7dcc <_malloc_r+0xbc>
    80fe:	e623      	b.n	7d48 <_malloc_r+0x38>
    8100:	4419      	add	r1, r3
    8102:	6848      	ldr	r0, [r1, #4]
    8104:	461c      	mov	r4, r3
    8106:	f854 2f08 	ldr.w	r2, [r4, #8]!
    810a:	68db      	ldr	r3, [r3, #12]
    810c:	f040 0501 	orr.w	r5, r0, #1
    8110:	604d      	str	r5, [r1, #4]
    8112:	4630      	mov	r0, r6
    8114:	60d3      	str	r3, [r2, #12]
    8116:	609a      	str	r2, [r3, #8]
    8118:	f000 f958 	bl	83cc <__malloc_unlock>
    811c:	e624      	b.n	7d68 <_malloc_r+0x58>
    811e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    8122:	ea4f 014c 	mov.w	r1, ip, lsl #1
    8126:	e63b      	b.n	7da0 <_malloc_r+0x90>
    8128:	098a      	lsrs	r2, r1, #6
    812a:	3238      	adds	r2, #56	; 0x38
    812c:	0050      	lsls	r0, r2, #1
    812e:	e7a8      	b.n	8082 <_malloc_r+0x372>
    8130:	42bc      	cmp	r4, r7
    8132:	f43f af02 	beq.w	7f3a <_malloc_r+0x22a>
    8136:	68bc      	ldr	r4, [r7, #8]
    8138:	6862      	ldr	r2, [r4, #4]
    813a:	f022 0203 	bic.w	r2, r2, #3
    813e:	e761      	b.n	8004 <_malloc_r+0x2f4>
    8140:	f8d8 8000 	ldr.w	r8, [r8]
    8144:	4598      	cmp	r8, r3
    8146:	d17a      	bne.n	823e <_malloc_r+0x52e>
    8148:	f01c 0f03 	tst.w	ip, #3
    814c:	f1a8 0308 	sub.w	r3, r8, #8
    8150:	f10c 3cff 	add.w	ip, ip, #4294967295
    8154:	d1f4      	bne.n	8140 <_malloc_r+0x430>
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	ea23 0300 	bic.w	r3, r3, r0
    815c:	607b      	str	r3, [r7, #4]
    815e:	0040      	lsls	r0, r0, #1
    8160:	4298      	cmp	r0, r3
    8162:	f63f aebe 	bhi.w	7ee2 <_malloc_r+0x1d2>
    8166:	2800      	cmp	r0, #0
    8168:	f43f aebb 	beq.w	7ee2 <_malloc_r+0x1d2>
    816c:	4203      	tst	r3, r0
    816e:	46cc      	mov	ip, r9
    8170:	f47f ae64 	bne.w	7e3c <_malloc_r+0x12c>
    8174:	0040      	lsls	r0, r0, #1
    8176:	4203      	tst	r3, r0
    8178:	f10c 0c04 	add.w	ip, ip, #4
    817c:	d0fa      	beq.n	8174 <_malloc_r+0x464>
    817e:	e65d      	b.n	7e3c <_malloc_r+0x12c>
    8180:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    8184:	d819      	bhi.n	81ba <_malloc_r+0x4aa>
    8186:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    818a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    818e:	ea4f 014c 	mov.w	r1, ip, lsl #1
    8192:	e605      	b.n	7da0 <_malloc_r+0x90>
    8194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8198:	e6ee      	b.n	7f78 <_malloc_r+0x268>
    819a:	2301      	movs	r3, #1
    819c:	f8c8 3004 	str.w	r3, [r8, #4]
    81a0:	4644      	mov	r4, r8
    81a2:	2200      	movs	r2, #0
    81a4:	e72e      	b.n	8004 <_malloc_r+0x2f4>
    81a6:	1092      	asrs	r2, r2, #2
    81a8:	2001      	movs	r0, #1
    81aa:	4090      	lsls	r0, r2
    81ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    81b0:	4619      	mov	r1, r3
    81b2:	4302      	orrs	r2, r0
    81b4:	f8c8 2004 	str.w	r2, [r8, #4]
    81b8:	e775      	b.n	80a6 <_malloc_r+0x396>
    81ba:	f240 5354 	movw	r3, #1364	; 0x554
    81be:	459c      	cmp	ip, r3
    81c0:	d81b      	bhi.n	81fa <_malloc_r+0x4ea>
    81c2:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    81c6:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    81ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
    81ce:	e5e7      	b.n	7da0 <_malloc_r+0x90>
    81d0:	f10a 0a10 	add.w	sl, sl, #16
    81d4:	e6a3      	b.n	7f1e <_malloc_r+0x20e>
    81d6:	2b54      	cmp	r3, #84	; 0x54
    81d8:	d81f      	bhi.n	821a <_malloc_r+0x50a>
    81da:	0b0a      	lsrs	r2, r1, #12
    81dc:	326e      	adds	r2, #110	; 0x6e
    81de:	0050      	lsls	r0, r2, #1
    81e0:	e74f      	b.n	8082 <_malloc_r+0x372>
    81e2:	f3cb 010b 	ubfx	r1, fp, #0, #12
    81e6:	2900      	cmp	r1, #0
    81e8:	f47f aeb1 	bne.w	7f4e <_malloc_r+0x23e>
    81ec:	eb0a 0109 	add.w	r1, sl, r9
    81f0:	68ba      	ldr	r2, [r7, #8]
    81f2:	f041 0101 	orr.w	r1, r1, #1
    81f6:	6051      	str	r1, [r2, #4]
    81f8:	e6f6      	b.n	7fe8 <_malloc_r+0x2d8>
    81fa:	21fc      	movs	r1, #252	; 0xfc
    81fc:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    8200:	e5ce      	b.n	7da0 <_malloc_r+0x90>
    8202:	2201      	movs	r2, #1
    8204:	f04f 0a00 	mov.w	sl, #0
    8208:	e6cb      	b.n	7fa2 <_malloc_r+0x292>
    820a:	f104 0108 	add.w	r1, r4, #8
    820e:	4630      	mov	r0, r6
    8210:	f000 fd74 	bl	8cfc <_free_r>
    8214:	f8da 3000 	ldr.w	r3, [sl]
    8218:	e6e6      	b.n	7fe8 <_malloc_r+0x2d8>
    821a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    821e:	d803      	bhi.n	8228 <_malloc_r+0x518>
    8220:	0bca      	lsrs	r2, r1, #15
    8222:	3277      	adds	r2, #119	; 0x77
    8224:	0050      	lsls	r0, r2, #1
    8226:	e72c      	b.n	8082 <_malloc_r+0x372>
    8228:	f240 5254 	movw	r2, #1364	; 0x554
    822c:	4293      	cmp	r3, r2
    822e:	d803      	bhi.n	8238 <_malloc_r+0x528>
    8230:	0c8a      	lsrs	r2, r1, #18
    8232:	327c      	adds	r2, #124	; 0x7c
    8234:	0050      	lsls	r0, r2, #1
    8236:	e724      	b.n	8082 <_malloc_r+0x372>
    8238:	20fc      	movs	r0, #252	; 0xfc
    823a:	227e      	movs	r2, #126	; 0x7e
    823c:	e721      	b.n	8082 <_malloc_r+0x372>
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	e78d      	b.n	815e <_malloc_r+0x44e>
    8242:	bf00      	nop
    8244:	20000534 	.word	0x20000534

00008248 <memchr>:
    8248:	0783      	lsls	r3, r0, #30
    824a:	b470      	push	{r4, r5, r6}
    824c:	b2c9      	uxtb	r1, r1
    824e:	d040      	beq.n	82d2 <memchr+0x8a>
    8250:	1e54      	subs	r4, r2, #1
    8252:	b32a      	cbz	r2, 82a0 <memchr+0x58>
    8254:	7803      	ldrb	r3, [r0, #0]
    8256:	428b      	cmp	r3, r1
    8258:	d023      	beq.n	82a2 <memchr+0x5a>
    825a:	1c43      	adds	r3, r0, #1
    825c:	e004      	b.n	8268 <memchr+0x20>
    825e:	b1fc      	cbz	r4, 82a0 <memchr+0x58>
    8260:	7805      	ldrb	r5, [r0, #0]
    8262:	4614      	mov	r4, r2
    8264:	428d      	cmp	r5, r1
    8266:	d01c      	beq.n	82a2 <memchr+0x5a>
    8268:	f013 0f03 	tst.w	r3, #3
    826c:	4618      	mov	r0, r3
    826e:	f104 32ff 	add.w	r2, r4, #4294967295
    8272:	f103 0301 	add.w	r3, r3, #1
    8276:	d1f2      	bne.n	825e <memchr+0x16>
    8278:	2c03      	cmp	r4, #3
    827a:	d814      	bhi.n	82a6 <memchr+0x5e>
    827c:	1e65      	subs	r5, r4, #1
    827e:	b354      	cbz	r4, 82d6 <memchr+0x8e>
    8280:	7803      	ldrb	r3, [r0, #0]
    8282:	428b      	cmp	r3, r1
    8284:	d00d      	beq.n	82a2 <memchr+0x5a>
    8286:	1c42      	adds	r2, r0, #1
    8288:	2300      	movs	r3, #0
    828a:	e002      	b.n	8292 <memchr+0x4a>
    828c:	7804      	ldrb	r4, [r0, #0]
    828e:	428c      	cmp	r4, r1
    8290:	d007      	beq.n	82a2 <memchr+0x5a>
    8292:	42ab      	cmp	r3, r5
    8294:	4610      	mov	r0, r2
    8296:	f103 0301 	add.w	r3, r3, #1
    829a:	f102 0201 	add.w	r2, r2, #1
    829e:	d1f5      	bne.n	828c <memchr+0x44>
    82a0:	2000      	movs	r0, #0
    82a2:	bc70      	pop	{r4, r5, r6}
    82a4:	4770      	bx	lr
    82a6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    82aa:	4603      	mov	r3, r0
    82ac:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    82b0:	681a      	ldr	r2, [r3, #0]
    82b2:	4618      	mov	r0, r3
    82b4:	4072      	eors	r2, r6
    82b6:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    82ba:	ea25 0202 	bic.w	r2, r5, r2
    82be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    82c2:	f103 0304 	add.w	r3, r3, #4
    82c6:	d1d9      	bne.n	827c <memchr+0x34>
    82c8:	3c04      	subs	r4, #4
    82ca:	2c03      	cmp	r4, #3
    82cc:	4618      	mov	r0, r3
    82ce:	d8ef      	bhi.n	82b0 <memchr+0x68>
    82d0:	e7d4      	b.n	827c <memchr+0x34>
    82d2:	4614      	mov	r4, r2
    82d4:	e7d0      	b.n	8278 <memchr+0x30>
    82d6:	4620      	mov	r0, r4
    82d8:	e7e3      	b.n	82a2 <memchr+0x5a>
    82da:	bf00      	nop

000082dc <memcpy>:
    82dc:	4684      	mov	ip, r0
    82de:	ea41 0300 	orr.w	r3, r1, r0
    82e2:	f013 0303 	ands.w	r3, r3, #3
    82e6:	d149      	bne.n	837c <memcpy+0xa0>
    82e8:	3a40      	subs	r2, #64	; 0x40
    82ea:	d323      	bcc.n	8334 <memcpy+0x58>
    82ec:	680b      	ldr	r3, [r1, #0]
    82ee:	6003      	str	r3, [r0, #0]
    82f0:	684b      	ldr	r3, [r1, #4]
    82f2:	6043      	str	r3, [r0, #4]
    82f4:	688b      	ldr	r3, [r1, #8]
    82f6:	6083      	str	r3, [r0, #8]
    82f8:	68cb      	ldr	r3, [r1, #12]
    82fa:	60c3      	str	r3, [r0, #12]
    82fc:	690b      	ldr	r3, [r1, #16]
    82fe:	6103      	str	r3, [r0, #16]
    8300:	694b      	ldr	r3, [r1, #20]
    8302:	6143      	str	r3, [r0, #20]
    8304:	698b      	ldr	r3, [r1, #24]
    8306:	6183      	str	r3, [r0, #24]
    8308:	69cb      	ldr	r3, [r1, #28]
    830a:	61c3      	str	r3, [r0, #28]
    830c:	6a0b      	ldr	r3, [r1, #32]
    830e:	6203      	str	r3, [r0, #32]
    8310:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    8312:	6243      	str	r3, [r0, #36]	; 0x24
    8314:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8316:	6283      	str	r3, [r0, #40]	; 0x28
    8318:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    831a:	62c3      	str	r3, [r0, #44]	; 0x2c
    831c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    831e:	6303      	str	r3, [r0, #48]	; 0x30
    8320:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    8322:	6343      	str	r3, [r0, #52]	; 0x34
    8324:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    8326:	6383      	str	r3, [r0, #56]	; 0x38
    8328:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    832a:	63c3      	str	r3, [r0, #60]	; 0x3c
    832c:	3040      	adds	r0, #64	; 0x40
    832e:	3140      	adds	r1, #64	; 0x40
    8330:	3a40      	subs	r2, #64	; 0x40
    8332:	d2db      	bcs.n	82ec <memcpy+0x10>
    8334:	3230      	adds	r2, #48	; 0x30
    8336:	d30b      	bcc.n	8350 <memcpy+0x74>
    8338:	680b      	ldr	r3, [r1, #0]
    833a:	6003      	str	r3, [r0, #0]
    833c:	684b      	ldr	r3, [r1, #4]
    833e:	6043      	str	r3, [r0, #4]
    8340:	688b      	ldr	r3, [r1, #8]
    8342:	6083      	str	r3, [r0, #8]
    8344:	68cb      	ldr	r3, [r1, #12]
    8346:	60c3      	str	r3, [r0, #12]
    8348:	3010      	adds	r0, #16
    834a:	3110      	adds	r1, #16
    834c:	3a10      	subs	r2, #16
    834e:	d2f3      	bcs.n	8338 <memcpy+0x5c>
    8350:	320c      	adds	r2, #12
    8352:	d305      	bcc.n	8360 <memcpy+0x84>
    8354:	f851 3b04 	ldr.w	r3, [r1], #4
    8358:	f840 3b04 	str.w	r3, [r0], #4
    835c:	3a04      	subs	r2, #4
    835e:	d2f9      	bcs.n	8354 <memcpy+0x78>
    8360:	3204      	adds	r2, #4
    8362:	d008      	beq.n	8376 <memcpy+0x9a>
    8364:	07d2      	lsls	r2, r2, #31
    8366:	bf1c      	itt	ne
    8368:	f811 3b01 	ldrbne.w	r3, [r1], #1
    836c:	f800 3b01 	strbne.w	r3, [r0], #1
    8370:	d301      	bcc.n	8376 <memcpy+0x9a>
    8372:	880b      	ldrh	r3, [r1, #0]
    8374:	8003      	strh	r3, [r0, #0]
    8376:	4660      	mov	r0, ip
    8378:	4770      	bx	lr
    837a:	bf00      	nop
    837c:	2a08      	cmp	r2, #8
    837e:	d313      	bcc.n	83a8 <memcpy+0xcc>
    8380:	078b      	lsls	r3, r1, #30
    8382:	d0b1      	beq.n	82e8 <memcpy+0xc>
    8384:	f010 0303 	ands.w	r3, r0, #3
    8388:	d0ae      	beq.n	82e8 <memcpy+0xc>
    838a:	f1c3 0304 	rsb	r3, r3, #4
    838e:	1ad2      	subs	r2, r2, r3
    8390:	07db      	lsls	r3, r3, #31
    8392:	bf1c      	itt	ne
    8394:	f811 3b01 	ldrbne.w	r3, [r1], #1
    8398:	f800 3b01 	strbne.w	r3, [r0], #1
    839c:	d3a4      	bcc.n	82e8 <memcpy+0xc>
    839e:	f831 3b02 	ldrh.w	r3, [r1], #2
    83a2:	f820 3b02 	strh.w	r3, [r0], #2
    83a6:	e79f      	b.n	82e8 <memcpy+0xc>
    83a8:	3a04      	subs	r2, #4
    83aa:	d3d9      	bcc.n	8360 <memcpy+0x84>
    83ac:	3a01      	subs	r2, #1
    83ae:	f811 3b01 	ldrb.w	r3, [r1], #1
    83b2:	f800 3b01 	strb.w	r3, [r0], #1
    83b6:	d2f9      	bcs.n	83ac <memcpy+0xd0>
    83b8:	780b      	ldrb	r3, [r1, #0]
    83ba:	7003      	strb	r3, [r0, #0]
    83bc:	784b      	ldrb	r3, [r1, #1]
    83be:	7043      	strb	r3, [r0, #1]
    83c0:	788b      	ldrb	r3, [r1, #2]
    83c2:	7083      	strb	r3, [r0, #2]
    83c4:	4660      	mov	r0, ip
    83c6:	4770      	bx	lr

000083c8 <__malloc_lock>:
    83c8:	4770      	bx	lr
    83ca:	bf00      	nop

000083cc <__malloc_unlock>:
    83cc:	4770      	bx	lr
    83ce:	bf00      	nop

000083d0 <_Balloc>:
    83d0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    83d2:	b570      	push	{r4, r5, r6, lr}
    83d4:	4605      	mov	r5, r0
    83d6:	460c      	mov	r4, r1
    83d8:	b14a      	cbz	r2, 83ee <_Balloc+0x1e>
    83da:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    83de:	b180      	cbz	r0, 8402 <_Balloc+0x32>
    83e0:	6801      	ldr	r1, [r0, #0]
    83e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    83e6:	2200      	movs	r2, #0
    83e8:	6102      	str	r2, [r0, #16]
    83ea:	60c2      	str	r2, [r0, #12]
    83ec:	bd70      	pop	{r4, r5, r6, pc}
    83ee:	2221      	movs	r2, #33	; 0x21
    83f0:	2104      	movs	r1, #4
    83f2:	f000 fc05 	bl	8c00 <_calloc_r>
    83f6:	64e8      	str	r0, [r5, #76]	; 0x4c
    83f8:	4602      	mov	r2, r0
    83fa:	2800      	cmp	r0, #0
    83fc:	d1ed      	bne.n	83da <_Balloc+0xa>
    83fe:	2000      	movs	r0, #0
    8400:	bd70      	pop	{r4, r5, r6, pc}
    8402:	2101      	movs	r1, #1
    8404:	fa01 f604 	lsl.w	r6, r1, r4
    8408:	1d72      	adds	r2, r6, #5
    840a:	4628      	mov	r0, r5
    840c:	0092      	lsls	r2, r2, #2
    840e:	f000 fbf7 	bl	8c00 <_calloc_r>
    8412:	2800      	cmp	r0, #0
    8414:	d0f3      	beq.n	83fe <_Balloc+0x2e>
    8416:	6044      	str	r4, [r0, #4]
    8418:	6086      	str	r6, [r0, #8]
    841a:	e7e4      	b.n	83e6 <_Balloc+0x16>

0000841c <_Bfree>:
    841c:	b131      	cbz	r1, 842c <_Bfree+0x10>
    841e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    8420:	684a      	ldr	r2, [r1, #4]
    8422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8426:	6008      	str	r0, [r1, #0]
    8428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    842c:	4770      	bx	lr
    842e:	bf00      	nop

00008430 <__multadd>:
    8430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8434:	690f      	ldr	r7, [r1, #16]
    8436:	b083      	sub	sp, #12
    8438:	4688      	mov	r8, r1
    843a:	4681      	mov	r9, r0
    843c:	f101 0514 	add.w	r5, r1, #20
    8440:	2400      	movs	r4, #0
    8442:	682e      	ldr	r6, [r5, #0]
    8444:	3401      	adds	r4, #1
    8446:	b2b1      	uxth	r1, r6
    8448:	0c36      	lsrs	r6, r6, #16
    844a:	fb02 3301 	mla	r3, r2, r1, r3
    844e:	fb02 f606 	mul.w	r6, r2, r6
    8452:	b299      	uxth	r1, r3
    8454:	eb06 4313 	add.w	r3, r6, r3, lsr #16
    8458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    845c:	42a7      	cmp	r7, r4
    845e:	f845 1b04 	str.w	r1, [r5], #4
    8462:	ea4f 4313 	mov.w	r3, r3, lsr #16
    8466:	dcec      	bgt.n	8442 <__multadd+0x12>
    8468:	b14b      	cbz	r3, 847e <__multadd+0x4e>
    846a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    846e:	4297      	cmp	r7, r2
    8470:	da09      	bge.n	8486 <__multadd+0x56>
    8472:	eb08 0287 	add.w	r2, r8, r7, lsl #2
    8476:	3701      	adds	r7, #1
    8478:	6153      	str	r3, [r2, #20]
    847a:	f8c8 7010 	str.w	r7, [r8, #16]
    847e:	4640      	mov	r0, r8
    8480:	b003      	add	sp, #12
    8482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8486:	f8d8 1004 	ldr.w	r1, [r8, #4]
    848a:	4648      	mov	r0, r9
    848c:	3101      	adds	r1, #1
    848e:	9301      	str	r3, [sp, #4]
    8490:	f7ff ff9e 	bl	83d0 <_Balloc>
    8494:	f8d8 2010 	ldr.w	r2, [r8, #16]
    8498:	f108 010c 	add.w	r1, r8, #12
    849c:	3202      	adds	r2, #2
    849e:	4604      	mov	r4, r0
    84a0:	0092      	lsls	r2, r2, #2
    84a2:	300c      	adds	r0, #12
    84a4:	f7ff ff1a 	bl	82dc <memcpy>
    84a8:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
    84ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
    84b0:	9b01      	ldr	r3, [sp, #4]
    84b2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    84b6:	f8c8 0000 	str.w	r0, [r8]
    84ba:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
    84be:	46a0      	mov	r8, r4
    84c0:	e7d7      	b.n	8472 <__multadd+0x42>
    84c2:	bf00      	nop

000084c4 <__hi0bits>:
    84c4:	0c03      	lsrs	r3, r0, #16
    84c6:	041b      	lsls	r3, r3, #16
    84c8:	b9b3      	cbnz	r3, 84f8 <__hi0bits+0x34>
    84ca:	0400      	lsls	r0, r0, #16
    84cc:	2310      	movs	r3, #16
    84ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    84d2:	bf04      	itt	eq
    84d4:	0200      	lsleq	r0, r0, #8
    84d6:	3308      	addeq	r3, #8
    84d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    84dc:	bf04      	itt	eq
    84de:	0100      	lsleq	r0, r0, #4
    84e0:	3304      	addeq	r3, #4
    84e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    84e6:	bf04      	itt	eq
    84e8:	0080      	lsleq	r0, r0, #2
    84ea:	3302      	addeq	r3, #2
    84ec:	2800      	cmp	r0, #0
    84ee:	db07      	blt.n	8500 <__hi0bits+0x3c>
    84f0:	0042      	lsls	r2, r0, #1
    84f2:	d403      	bmi.n	84fc <__hi0bits+0x38>
    84f4:	2020      	movs	r0, #32
    84f6:	4770      	bx	lr
    84f8:	2300      	movs	r3, #0
    84fa:	e7e8      	b.n	84ce <__hi0bits+0xa>
    84fc:	1c58      	adds	r0, r3, #1
    84fe:	4770      	bx	lr
    8500:	4618      	mov	r0, r3
    8502:	4770      	bx	lr

00008504 <__lo0bits>:
    8504:	6803      	ldr	r3, [r0, #0]
    8506:	f013 0207 	ands.w	r2, r3, #7
    850a:	d007      	beq.n	851c <__lo0bits+0x18>
    850c:	07d9      	lsls	r1, r3, #31
    850e:	d420      	bmi.n	8552 <__lo0bits+0x4e>
    8510:	079a      	lsls	r2, r3, #30
    8512:	d420      	bmi.n	8556 <__lo0bits+0x52>
    8514:	089b      	lsrs	r3, r3, #2
    8516:	6003      	str	r3, [r0, #0]
    8518:	2002      	movs	r0, #2
    851a:	4770      	bx	lr
    851c:	b299      	uxth	r1, r3
    851e:	b909      	cbnz	r1, 8524 <__lo0bits+0x20>
    8520:	0c1b      	lsrs	r3, r3, #16
    8522:	2210      	movs	r2, #16
    8524:	f013 0fff 	tst.w	r3, #255	; 0xff
    8528:	bf04      	itt	eq
    852a:	0a1b      	lsreq	r3, r3, #8
    852c:	3208      	addeq	r2, #8
    852e:	0719      	lsls	r1, r3, #28
    8530:	bf04      	itt	eq
    8532:	091b      	lsreq	r3, r3, #4
    8534:	3204      	addeq	r2, #4
    8536:	0799      	lsls	r1, r3, #30
    8538:	bf04      	itt	eq
    853a:	089b      	lsreq	r3, r3, #2
    853c:	3202      	addeq	r2, #2
    853e:	07d9      	lsls	r1, r3, #31
    8540:	d404      	bmi.n	854c <__lo0bits+0x48>
    8542:	085b      	lsrs	r3, r3, #1
    8544:	d101      	bne.n	854a <__lo0bits+0x46>
    8546:	2020      	movs	r0, #32
    8548:	4770      	bx	lr
    854a:	3201      	adds	r2, #1
    854c:	6003      	str	r3, [r0, #0]
    854e:	4610      	mov	r0, r2
    8550:	4770      	bx	lr
    8552:	2000      	movs	r0, #0
    8554:	4770      	bx	lr
    8556:	085b      	lsrs	r3, r3, #1
    8558:	6003      	str	r3, [r0, #0]
    855a:	2001      	movs	r0, #1
    855c:	4770      	bx	lr
    855e:	bf00      	nop

00008560 <__i2b>:
    8560:	b510      	push	{r4, lr}
    8562:	460c      	mov	r4, r1
    8564:	2101      	movs	r1, #1
    8566:	f7ff ff33 	bl	83d0 <_Balloc>
    856a:	2201      	movs	r2, #1
    856c:	6144      	str	r4, [r0, #20]
    856e:	6102      	str	r2, [r0, #16]
    8570:	bd10      	pop	{r4, pc}
    8572:	bf00      	nop

00008574 <__multiply>:
    8574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8578:	690d      	ldr	r5, [r1, #16]
    857a:	f8d2 9010 	ldr.w	r9, [r2, #16]
    857e:	b085      	sub	sp, #20
    8580:	454d      	cmp	r5, r9
    8582:	460c      	mov	r4, r1
    8584:	4692      	mov	sl, r2
    8586:	da04      	bge.n	8592 <__multiply+0x1e>
    8588:	462a      	mov	r2, r5
    858a:	4654      	mov	r4, sl
    858c:	464d      	mov	r5, r9
    858e:	468a      	mov	sl, r1
    8590:	4691      	mov	r9, r2
    8592:	68a3      	ldr	r3, [r4, #8]
    8594:	eb05 0709 	add.w	r7, r5, r9
    8598:	6861      	ldr	r1, [r4, #4]
    859a:	429f      	cmp	r7, r3
    859c:	bfc8      	it	gt
    859e:	3101      	addgt	r1, #1
    85a0:	f7ff ff16 	bl	83d0 <_Balloc>
    85a4:	f100 0614 	add.w	r6, r0, #20
    85a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
    85ac:	4546      	cmp	r6, r8
    85ae:	9001      	str	r0, [sp, #4]
    85b0:	d205      	bcs.n	85be <__multiply+0x4a>
    85b2:	4633      	mov	r3, r6
    85b4:	2000      	movs	r0, #0
    85b6:	f843 0b04 	str.w	r0, [r3], #4
    85ba:	4598      	cmp	r8, r3
    85bc:	d8fb      	bhi.n	85b6 <__multiply+0x42>
    85be:	f10a 0c14 	add.w	ip, sl, #20
    85c2:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
    85c6:	3414      	adds	r4, #20
    85c8:	45cc      	cmp	ip, r9
    85ca:	9400      	str	r4, [sp, #0]
    85cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    85d0:	d25b      	bcs.n	868a <__multiply+0x116>
    85d2:	f8cd 8008 	str.w	r8, [sp, #8]
    85d6:	9703      	str	r7, [sp, #12]
    85d8:	46c8      	mov	r8, r9
    85da:	f85c 3b04 	ldr.w	r3, [ip], #4
    85de:	b29c      	uxth	r4, r3
    85e0:	b324      	cbz	r4, 862c <__multiply+0xb8>
    85e2:	9a00      	ldr	r2, [sp, #0]
    85e4:	4633      	mov	r3, r6
    85e6:	f04f 0900 	mov.w	r9, #0
    85ea:	e000      	b.n	85ee <__multiply+0x7a>
    85ec:	460b      	mov	r3, r1
    85ee:	f852 7b04 	ldr.w	r7, [r2], #4
    85f2:	6819      	ldr	r1, [r3, #0]
    85f4:	fa1f fb87 	uxth.w	fp, r7
    85f8:	fa1f fa81 	uxth.w	sl, r1
    85fc:	0c38      	lsrs	r0, r7, #16
    85fe:	0c09      	lsrs	r1, r1, #16
    8600:	fb04 aa0b 	mla	sl, r4, fp, sl
    8604:	fb04 1000 	mla	r0, r4, r0, r1
    8608:	44d1      	add	r9, sl
    860a:	eb00 4019 	add.w	r0, r0, r9, lsr #16
    860e:	fa1f f989 	uxth.w	r9, r9
    8612:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
    8616:	4619      	mov	r1, r3
    8618:	4295      	cmp	r5, r2
    861a:	ea4f 4910 	mov.w	r9, r0, lsr #16
    861e:	f841 7b04 	str.w	r7, [r1], #4
    8622:	d8e3      	bhi.n	85ec <__multiply+0x78>
    8624:	f8c3 9004 	str.w	r9, [r3, #4]
    8628:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    862c:	ea5f 4913 	movs.w	r9, r3, lsr #16
    8630:	d024      	beq.n	867c <__multiply+0x108>
    8632:	f8d6 a000 	ldr.w	sl, [r6]
    8636:	9b00      	ldr	r3, [sp, #0]
    8638:	4650      	mov	r0, sl
    863a:	4631      	mov	r1, r6
    863c:	f04f 0b00 	mov.w	fp, #0
    8640:	e000      	b.n	8644 <__multiply+0xd0>
    8642:	4611      	mov	r1, r2
    8644:	881a      	ldrh	r2, [r3, #0]
    8646:	0c00      	lsrs	r0, r0, #16
    8648:	fb09 0002 	mla	r0, r9, r2, r0
    864c:	fa1f fa8a 	uxth.w	sl, sl
    8650:	4483      	add	fp, r0
    8652:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
    8656:	460a      	mov	r2, r1
    8658:	f842 0b04 	str.w	r0, [r2], #4
    865c:	f853 7b04 	ldr.w	r7, [r3], #4
    8660:	6848      	ldr	r0, [r1, #4]
    8662:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    8666:	b284      	uxth	r4, r0
    8668:	fb09 4a0a 	mla	sl, r9, sl, r4
    866c:	429d      	cmp	r5, r3
    866e:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
    8672:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
    8676:	d8e4      	bhi.n	8642 <__multiply+0xce>
    8678:	f8c1 a004 	str.w	sl, [r1, #4]
    867c:	45e0      	cmp	r8, ip
    867e:	f106 0604 	add.w	r6, r6, #4
    8682:	d8aa      	bhi.n	85da <__multiply+0x66>
    8684:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8688:	9f03      	ldr	r7, [sp, #12]
    868a:	2f00      	cmp	r7, #0
    868c:	dd0a      	ble.n	86a4 <__multiply+0x130>
    868e:	f858 3c04 	ldr.w	r3, [r8, #-4]
    8692:	f1a8 0804 	sub.w	r8, r8, #4
    8696:	b11b      	cbz	r3, 86a0 <__multiply+0x12c>
    8698:	e004      	b.n	86a4 <__multiply+0x130>
    869a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    869e:	b90b      	cbnz	r3, 86a4 <__multiply+0x130>
    86a0:	3f01      	subs	r7, #1
    86a2:	d1fa      	bne.n	869a <__multiply+0x126>
    86a4:	9b01      	ldr	r3, [sp, #4]
    86a6:	4618      	mov	r0, r3
    86a8:	611f      	str	r7, [r3, #16]
    86aa:	b005      	add	sp, #20
    86ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000086b0 <__pow5mult>:
    86b0:	f012 0303 	ands.w	r3, r2, #3
    86b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86b8:	4614      	mov	r4, r2
    86ba:	4607      	mov	r7, r0
    86bc:	460e      	mov	r6, r1
    86be:	d12c      	bne.n	871a <__pow5mult+0x6a>
    86c0:	10a4      	asrs	r4, r4, #2
    86c2:	d01c      	beq.n	86fe <__pow5mult+0x4e>
    86c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    86c6:	2d00      	cmp	r5, #0
    86c8:	d030      	beq.n	872c <__pow5mult+0x7c>
    86ca:	f04f 0800 	mov.w	r8, #0
    86ce:	e004      	b.n	86da <__pow5mult+0x2a>
    86d0:	1064      	asrs	r4, r4, #1
    86d2:	d014      	beq.n	86fe <__pow5mult+0x4e>
    86d4:	6828      	ldr	r0, [r5, #0]
    86d6:	b1a8      	cbz	r0, 8704 <__pow5mult+0x54>
    86d8:	4605      	mov	r5, r0
    86da:	07e3      	lsls	r3, r4, #31
    86dc:	d5f8      	bpl.n	86d0 <__pow5mult+0x20>
    86de:	4638      	mov	r0, r7
    86e0:	4631      	mov	r1, r6
    86e2:	462a      	mov	r2, r5
    86e4:	f7ff ff46 	bl	8574 <__multiply>
    86e8:	b1ae      	cbz	r6, 8716 <__pow5mult+0x66>
    86ea:	6872      	ldr	r2, [r6, #4]
    86ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    86ee:	1064      	asrs	r4, r4, #1
    86f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    86f4:	6031      	str	r1, [r6, #0]
    86f6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    86fa:	4606      	mov	r6, r0
    86fc:	d1ea      	bne.n	86d4 <__pow5mult+0x24>
    86fe:	4630      	mov	r0, r6
    8700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8704:	4638      	mov	r0, r7
    8706:	4629      	mov	r1, r5
    8708:	462a      	mov	r2, r5
    870a:	f7ff ff33 	bl	8574 <__multiply>
    870e:	6028      	str	r0, [r5, #0]
    8710:	f8c0 8000 	str.w	r8, [r0]
    8714:	e7e0      	b.n	86d8 <__pow5mult+0x28>
    8716:	4606      	mov	r6, r0
    8718:	e7da      	b.n	86d0 <__pow5mult+0x20>
    871a:	4a0b      	ldr	r2, [pc, #44]	; (8748 <__pow5mult+0x98>)
    871c:	3b01      	subs	r3, #1
    871e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8722:	2300      	movs	r3, #0
    8724:	f7ff fe84 	bl	8430 <__multadd>
    8728:	4606      	mov	r6, r0
    872a:	e7c9      	b.n	86c0 <__pow5mult+0x10>
    872c:	2101      	movs	r1, #1
    872e:	4638      	mov	r0, r7
    8730:	f7ff fe4e 	bl	83d0 <_Balloc>
    8734:	f240 2171 	movw	r1, #625	; 0x271
    8738:	2201      	movs	r2, #1
    873a:	2300      	movs	r3, #0
    873c:	6141      	str	r1, [r0, #20]
    873e:	6102      	str	r2, [r0, #16]
    8740:	4605      	mov	r5, r0
    8742:	64b8      	str	r0, [r7, #72]	; 0x48
    8744:	6003      	str	r3, [r0, #0]
    8746:	e7c0      	b.n	86ca <__pow5mult+0x1a>
    8748:	0000ad78 	.word	0x0000ad78

0000874c <__lshift>:
    874c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8750:	690b      	ldr	r3, [r1, #16]
    8752:	ea4f 1a62 	mov.w	sl, r2, asr #5
    8756:	eb0a 0903 	add.w	r9, sl, r3
    875a:	688b      	ldr	r3, [r1, #8]
    875c:	f109 0601 	add.w	r6, r9, #1
    8760:	429e      	cmp	r6, r3
    8762:	460f      	mov	r7, r1
    8764:	4693      	mov	fp, r2
    8766:	4680      	mov	r8, r0
    8768:	6849      	ldr	r1, [r1, #4]
    876a:	dd04      	ble.n	8776 <__lshift+0x2a>
    876c:	005b      	lsls	r3, r3, #1
    876e:	429e      	cmp	r6, r3
    8770:	f101 0101 	add.w	r1, r1, #1
    8774:	dcfa      	bgt.n	876c <__lshift+0x20>
    8776:	4640      	mov	r0, r8
    8778:	f7ff fe2a 	bl	83d0 <_Balloc>
    877c:	f1ba 0f00 	cmp.w	sl, #0
    8780:	f100 0414 	add.w	r4, r0, #20
    8784:	dd09      	ble.n	879a <__lshift+0x4e>
    8786:	2300      	movs	r3, #0
    8788:	461a      	mov	r2, r3
    878a:	4625      	mov	r5, r4
    878c:	3301      	adds	r3, #1
    878e:	4553      	cmp	r3, sl
    8790:	f845 2b04 	str.w	r2, [r5], #4
    8794:	d1fa      	bne.n	878c <__lshift+0x40>
    8796:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    879a:	693a      	ldr	r2, [r7, #16]
    879c:	f107 0314 	add.w	r3, r7, #20
    87a0:	f01b 0b1f 	ands.w	fp, fp, #31
    87a4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    87a8:	d021      	beq.n	87ee <__lshift+0xa2>
    87aa:	f1cb 0a20 	rsb	sl, fp, #32
    87ae:	2200      	movs	r2, #0
    87b0:	e000      	b.n	87b4 <__lshift+0x68>
    87b2:	462c      	mov	r4, r5
    87b4:	6819      	ldr	r1, [r3, #0]
    87b6:	4625      	mov	r5, r4
    87b8:	fa01 f10b 	lsl.w	r1, r1, fp
    87bc:	430a      	orrs	r2, r1
    87be:	f845 2b04 	str.w	r2, [r5], #4
    87c2:	f853 2b04 	ldr.w	r2, [r3], #4
    87c6:	4563      	cmp	r3, ip
    87c8:	fa22 f20a 	lsr.w	r2, r2, sl
    87cc:	d3f1      	bcc.n	87b2 <__lshift+0x66>
    87ce:	6062      	str	r2, [r4, #4]
    87d0:	b10a      	cbz	r2, 87d6 <__lshift+0x8a>
    87d2:	f109 0602 	add.w	r6, r9, #2
    87d6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
    87da:	687a      	ldr	r2, [r7, #4]
    87dc:	3e01      	subs	r6, #1
    87de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    87e2:	6106      	str	r6, [r0, #16]
    87e4:	6039      	str	r1, [r7, #0]
    87e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    87ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87ee:	f853 2b04 	ldr.w	r2, [r3], #4
    87f2:	459c      	cmp	ip, r3
    87f4:	f844 2b04 	str.w	r2, [r4], #4
    87f8:	d9ed      	bls.n	87d6 <__lshift+0x8a>
    87fa:	f853 2b04 	ldr.w	r2, [r3], #4
    87fe:	459c      	cmp	ip, r3
    8800:	f844 2b04 	str.w	r2, [r4], #4
    8804:	d8f3      	bhi.n	87ee <__lshift+0xa2>
    8806:	e7e6      	b.n	87d6 <__lshift+0x8a>

00008808 <__mcmp>:
    8808:	6902      	ldr	r2, [r0, #16]
    880a:	690b      	ldr	r3, [r1, #16]
    880c:	b410      	push	{r4}
    880e:	1ad2      	subs	r2, r2, r3
    8810:	d115      	bne.n	883e <__mcmp+0x36>
    8812:	009b      	lsls	r3, r3, #2
    8814:	3014      	adds	r0, #20
    8816:	3114      	adds	r1, #20
    8818:	4419      	add	r1, r3
    881a:	4403      	add	r3, r0
    881c:	e001      	b.n	8822 <__mcmp+0x1a>
    881e:	4298      	cmp	r0, r3
    8820:	d211      	bcs.n	8846 <__mcmp+0x3e>
    8822:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    8826:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    882a:	42a2      	cmp	r2, r4
    882c:	d0f7      	beq.n	881e <__mcmp+0x16>
    882e:	4294      	cmp	r4, r2
    8830:	bf94      	ite	ls
    8832:	2001      	movls	r0, #1
    8834:	f04f 30ff 	movhi.w	r0, #4294967295
    8838:	f85d 4b04 	ldr.w	r4, [sp], #4
    883c:	4770      	bx	lr
    883e:	4610      	mov	r0, r2
    8840:	f85d 4b04 	ldr.w	r4, [sp], #4
    8844:	4770      	bx	lr
    8846:	2000      	movs	r0, #0
    8848:	f85d 4b04 	ldr.w	r4, [sp], #4
    884c:	4770      	bx	lr
    884e:	bf00      	nop

00008850 <__mdiff>:
    8850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8854:	460d      	mov	r5, r1
    8856:	4604      	mov	r4, r0
    8858:	4611      	mov	r1, r2
    885a:	4628      	mov	r0, r5
    885c:	4616      	mov	r6, r2
    885e:	f7ff ffd3 	bl	8808 <__mcmp>
    8862:	1e07      	subs	r7, r0, #0
    8864:	d056      	beq.n	8914 <__mdiff+0xc4>
    8866:	db4f      	blt.n	8908 <__mdiff+0xb8>
    8868:	f04f 0900 	mov.w	r9, #0
    886c:	6869      	ldr	r1, [r5, #4]
    886e:	4620      	mov	r0, r4
    8870:	f7ff fdae 	bl	83d0 <_Balloc>
    8874:	692f      	ldr	r7, [r5, #16]
    8876:	6932      	ldr	r2, [r6, #16]
    8878:	3514      	adds	r5, #20
    887a:	3614      	adds	r6, #20
    887c:	f8c0 900c 	str.w	r9, [r0, #12]
    8880:	f100 0314 	add.w	r3, r0, #20
    8884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
    8888:	eb06 0882 	add.w	r8, r6, r2, lsl #2
    888c:	2100      	movs	r1, #0
    888e:	f855 4b04 	ldr.w	r4, [r5], #4
    8892:	f856 2b04 	ldr.w	r2, [r6], #4
    8896:	fa1f fa84 	uxth.w	sl, r4
    889a:	448a      	add	sl, r1
    889c:	fa1f f982 	uxth.w	r9, r2
    88a0:	0c11      	lsrs	r1, r2, #16
    88a2:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
    88a6:	ebc9 020a 	rsb	r2, r9, sl
    88aa:	eb01 4122 	add.w	r1, r1, r2, asr #16
    88ae:	b292      	uxth	r2, r2
    88b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    88b4:	45b0      	cmp	r8, r6
    88b6:	f843 2b04 	str.w	r2, [r3], #4
    88ba:	ea4f 4121 	mov.w	r1, r1, asr #16
    88be:	462c      	mov	r4, r5
    88c0:	d8e5      	bhi.n	888e <__mdiff+0x3e>
    88c2:	45ac      	cmp	ip, r5
    88c4:	4698      	mov	r8, r3
    88c6:	d915      	bls.n	88f4 <__mdiff+0xa4>
    88c8:	f854 6b04 	ldr.w	r6, [r4], #4
    88cc:	b2b2      	uxth	r2, r6
    88ce:	4411      	add	r1, r2
    88d0:	0c36      	lsrs	r6, r6, #16
    88d2:	eb06 4621 	add.w	r6, r6, r1, asr #16
    88d6:	b289      	uxth	r1, r1
    88d8:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
    88dc:	45a4      	cmp	ip, r4
    88de:	f843 2b04 	str.w	r2, [r3], #4
    88e2:	ea4f 4126 	mov.w	r1, r6, asr #16
    88e6:	d8ef      	bhi.n	88c8 <__mdiff+0x78>
    88e8:	43eb      	mvns	r3, r5
    88ea:	4463      	add	r3, ip
    88ec:	f023 0303 	bic.w	r3, r3, #3
    88f0:	3304      	adds	r3, #4
    88f2:	4443      	add	r3, r8
    88f4:	3b04      	subs	r3, #4
    88f6:	b922      	cbnz	r2, 8902 <__mdiff+0xb2>
    88f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    88fc:	3f01      	subs	r7, #1
    88fe:	2a00      	cmp	r2, #0
    8900:	d0fa      	beq.n	88f8 <__mdiff+0xa8>
    8902:	6107      	str	r7, [r0, #16]
    8904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8908:	462b      	mov	r3, r5
    890a:	f04f 0901 	mov.w	r9, #1
    890e:	4635      	mov	r5, r6
    8910:	461e      	mov	r6, r3
    8912:	e7ab      	b.n	886c <__mdiff+0x1c>
    8914:	4620      	mov	r0, r4
    8916:	4639      	mov	r1, r7
    8918:	f7ff fd5a 	bl	83d0 <_Balloc>
    891c:	2301      	movs	r3, #1
    891e:	6147      	str	r7, [r0, #20]
    8920:	6103      	str	r3, [r0, #16]
    8922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8926:	bf00      	nop

00008928 <__d2b>:
    8928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    892c:	2101      	movs	r1, #1
    892e:	b083      	sub	sp, #12
    8930:	461d      	mov	r5, r3
    8932:	f3c3 560a 	ubfx	r6, r3, #20, #11
    8936:	4614      	mov	r4, r2
    8938:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    893a:	f7ff fd49 	bl	83d0 <_Balloc>
    893e:	f3c5 0313 	ubfx	r3, r5, #0, #20
    8942:	4680      	mov	r8, r0
    8944:	b10e      	cbz	r6, 894a <__d2b+0x22>
    8946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    894a:	9301      	str	r3, [sp, #4]
    894c:	b324      	cbz	r4, 8998 <__d2b+0x70>
    894e:	a802      	add	r0, sp, #8
    8950:	f840 4d08 	str.w	r4, [r0, #-8]!
    8954:	4668      	mov	r0, sp
    8956:	f7ff fdd5 	bl	8504 <__lo0bits>
    895a:	2800      	cmp	r0, #0
    895c:	d135      	bne.n	89ca <__d2b+0xa2>
    895e:	e89d 000c 	ldmia.w	sp, {r2, r3}
    8962:	f8c8 2014 	str.w	r2, [r8, #20]
    8966:	2b00      	cmp	r3, #0
    8968:	bf0c      	ite	eq
    896a:	2401      	moveq	r4, #1
    896c:	2402      	movne	r4, #2
    896e:	f8c8 3018 	str.w	r3, [r8, #24]
    8972:	f8c8 4010 	str.w	r4, [r8, #16]
    8976:	b9de      	cbnz	r6, 89b0 <__d2b+0x88>
    8978:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    897c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    8980:	6038      	str	r0, [r7, #0]
    8982:	6918      	ldr	r0, [r3, #16]
    8984:	f7ff fd9e 	bl	84c4 <__hi0bits>
    8988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    898a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
    898e:	6018      	str	r0, [r3, #0]
    8990:	4640      	mov	r0, r8
    8992:	b003      	add	sp, #12
    8994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8998:	a801      	add	r0, sp, #4
    899a:	f7ff fdb3 	bl	8504 <__lo0bits>
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	2401      	movs	r4, #1
    89a2:	3020      	adds	r0, #32
    89a4:	f8c8 3014 	str.w	r3, [r8, #20]
    89a8:	f8c8 4010 	str.w	r4, [r8, #16]
    89ac:	2e00      	cmp	r6, #0
    89ae:	d0e3      	beq.n	8978 <__d2b+0x50>
    89b0:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
    89b4:	eb09 0300 	add.w	r3, r9, r0
    89b8:	603b      	str	r3, [r7, #0]
    89ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    89bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    89c0:	6018      	str	r0, [r3, #0]
    89c2:	4640      	mov	r0, r8
    89c4:	b003      	add	sp, #12
    89c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    89ca:	9b01      	ldr	r3, [sp, #4]
    89cc:	f1c0 0120 	rsb	r1, r0, #32
    89d0:	fa03 f101 	lsl.w	r1, r3, r1
    89d4:	40c3      	lsrs	r3, r0
    89d6:	9a00      	ldr	r2, [sp, #0]
    89d8:	9301      	str	r3, [sp, #4]
    89da:	430a      	orrs	r2, r1
    89dc:	f8c8 2014 	str.w	r2, [r8, #20]
    89e0:	e7c1      	b.n	8966 <__d2b+0x3e>
    89e2:	bf00      	nop

000089e4 <__fpclassifyd>:
    89e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    89e8:	b410      	push	{r4}
    89ea:	d008      	beq.n	89fe <__fpclassifyd+0x1a>
    89ec:	4a0f      	ldr	r2, [pc, #60]	; (8a2c <__fpclassifyd+0x48>)
    89ee:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
    89f2:	4294      	cmp	r4, r2
    89f4:	d80a      	bhi.n	8a0c <__fpclassifyd+0x28>
    89f6:	2004      	movs	r0, #4
    89f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    89fc:	4770      	bx	lr
    89fe:	2800      	cmp	r0, #0
    8a00:	bf0c      	ite	eq
    8a02:	2002      	moveq	r0, #2
    8a04:	2003      	movne	r0, #3
    8a06:	f85d 4b04 	ldr.w	r4, [sp], #4
    8a0a:	4770      	bx	lr
    8a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8a10:	d201      	bcs.n	8a16 <__fpclassifyd+0x32>
    8a12:	2003      	movs	r0, #3
    8a14:	e7f7      	b.n	8a06 <__fpclassifyd+0x22>
    8a16:	4a06      	ldr	r2, [pc, #24]	; (8a30 <__fpclassifyd+0x4c>)
    8a18:	4293      	cmp	r3, r2
    8a1a:	d001      	beq.n	8a20 <__fpclassifyd+0x3c>
    8a1c:	2000      	movs	r0, #0
    8a1e:	e7f2      	b.n	8a06 <__fpclassifyd+0x22>
    8a20:	f1d0 0001 	rsbs	r0, r0, #1
    8a24:	bf38      	it	cc
    8a26:	2000      	movcc	r0, #0
    8a28:	e7ed      	b.n	8a06 <__fpclassifyd+0x22>
    8a2a:	bf00      	nop
    8a2c:	7fdfffff 	.word	0x7fdfffff
    8a30:	7ff00000 	.word	0x7ff00000

00008a34 <_sbrk_r>:
    8a34:	b538      	push	{r3, r4, r5, lr}
    8a36:	4c07      	ldr	r4, [pc, #28]	; (8a54 <_sbrk_r+0x20>)
    8a38:	2300      	movs	r3, #0
    8a3a:	4605      	mov	r5, r0
    8a3c:	4608      	mov	r0, r1
    8a3e:	6023      	str	r3, [r4, #0]
    8a40:	f000 fc6e 	bl	9320 <_sbrk>
    8a44:	1c43      	adds	r3, r0, #1
    8a46:	d000      	beq.n	8a4a <_sbrk_r+0x16>
    8a48:	bd38      	pop	{r3, r4, r5, pc}
    8a4a:	6823      	ldr	r3, [r4, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d0fb      	beq.n	8a48 <_sbrk_r+0x14>
    8a50:	602b      	str	r3, [r5, #0]
    8a52:	bd38      	pop	{r3, r4, r5, pc}
    8a54:	20001294 	.word	0x20001294

00008a58 <__ssprint_r>:
    8a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a5c:	6894      	ldr	r4, [r2, #8]
    8a5e:	b083      	sub	sp, #12
    8a60:	4692      	mov	sl, r2
    8a62:	4680      	mov	r8, r0
    8a64:	460d      	mov	r5, r1
    8a66:	6816      	ldr	r6, [r2, #0]
    8a68:	2c00      	cmp	r4, #0
    8a6a:	d06f      	beq.n	8b4c <__ssprint_r+0xf4>
    8a6c:	f04f 0b00 	mov.w	fp, #0
    8a70:	6808      	ldr	r0, [r1, #0]
    8a72:	688b      	ldr	r3, [r1, #8]
    8a74:	465c      	mov	r4, fp
    8a76:	2c00      	cmp	r4, #0
    8a78:	d043      	beq.n	8b02 <__ssprint_r+0xaa>
    8a7a:	429c      	cmp	r4, r3
    8a7c:	461f      	mov	r7, r3
    8a7e:	d345      	bcc.n	8b0c <__ssprint_r+0xb4>
    8a80:	89ab      	ldrh	r3, [r5, #12]
    8a82:	f413 6f90 	tst.w	r3, #1152	; 0x480
    8a86:	d044      	beq.n	8b12 <__ssprint_r+0xba>
    8a88:	696f      	ldr	r7, [r5, #20]
    8a8a:	6929      	ldr	r1, [r5, #16]
    8a8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    8a90:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    8a94:	ebc1 0900 	rsb	r9, r1, r0
    8a98:	1c62      	adds	r2, r4, #1
    8a9a:	107f      	asrs	r7, r7, #1
    8a9c:	444a      	add	r2, r9
    8a9e:	4297      	cmp	r7, r2
    8aa0:	bf34      	ite	cc
    8aa2:	4617      	movcc	r7, r2
    8aa4:	463a      	movcs	r2, r7
    8aa6:	055b      	lsls	r3, r3, #21
    8aa8:	d535      	bpl.n	8b16 <__ssprint_r+0xbe>
    8aaa:	4611      	mov	r1, r2
    8aac:	4640      	mov	r0, r8
    8aae:	f7ff f92f 	bl	7d10 <_malloc_r>
    8ab2:	2800      	cmp	r0, #0
    8ab4:	d039      	beq.n	8b2a <__ssprint_r+0xd2>
    8ab6:	6929      	ldr	r1, [r5, #16]
    8ab8:	464a      	mov	r2, r9
    8aba:	9001      	str	r0, [sp, #4]
    8abc:	f7ff fc0e 	bl	82dc <memcpy>
    8ac0:	89aa      	ldrh	r2, [r5, #12]
    8ac2:	9b01      	ldr	r3, [sp, #4]
    8ac4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    8acc:	81aa      	strh	r2, [r5, #12]
    8ace:	ebc9 0207 	rsb	r2, r9, r7
    8ad2:	eb03 0009 	add.w	r0, r3, r9
    8ad6:	616f      	str	r7, [r5, #20]
    8ad8:	612b      	str	r3, [r5, #16]
    8ada:	6028      	str	r0, [r5, #0]
    8adc:	60aa      	str	r2, [r5, #8]
    8ade:	4627      	mov	r7, r4
    8ae0:	46a1      	mov	r9, r4
    8ae2:	464a      	mov	r2, r9
    8ae4:	4659      	mov	r1, fp
    8ae6:	f000 f9d5 	bl	8e94 <memmove>
    8aea:	f8da 2008 	ldr.w	r2, [sl, #8]
    8aee:	68ab      	ldr	r3, [r5, #8]
    8af0:	6828      	ldr	r0, [r5, #0]
    8af2:	1bdb      	subs	r3, r3, r7
    8af4:	4448      	add	r0, r9
    8af6:	1b14      	subs	r4, r2, r4
    8af8:	60ab      	str	r3, [r5, #8]
    8afa:	6028      	str	r0, [r5, #0]
    8afc:	f8ca 4008 	str.w	r4, [sl, #8]
    8b00:	b324      	cbz	r4, 8b4c <__ssprint_r+0xf4>
    8b02:	f8d6 b000 	ldr.w	fp, [r6]
    8b06:	6874      	ldr	r4, [r6, #4]
    8b08:	3608      	adds	r6, #8
    8b0a:	e7b4      	b.n	8a76 <__ssprint_r+0x1e>
    8b0c:	4627      	mov	r7, r4
    8b0e:	46a1      	mov	r9, r4
    8b10:	e7e7      	b.n	8ae2 <__ssprint_r+0x8a>
    8b12:	46b9      	mov	r9, r7
    8b14:	e7e5      	b.n	8ae2 <__ssprint_r+0x8a>
    8b16:	4640      	mov	r0, r8
    8b18:	f000 fa22 	bl	8f60 <_realloc_r>
    8b1c:	4603      	mov	r3, r0
    8b1e:	2800      	cmp	r0, #0
    8b20:	d1d5      	bne.n	8ace <__ssprint_r+0x76>
    8b22:	4640      	mov	r0, r8
    8b24:	6929      	ldr	r1, [r5, #16]
    8b26:	f000 f8e9 	bl	8cfc <_free_r>
    8b2a:	89aa      	ldrh	r2, [r5, #12]
    8b2c:	230c      	movs	r3, #12
    8b2e:	f8c8 3000 	str.w	r3, [r8]
    8b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    8b36:	2300      	movs	r3, #0
    8b38:	f04f 30ff 	mov.w	r0, #4294967295
    8b3c:	81aa      	strh	r2, [r5, #12]
    8b3e:	f8ca 3008 	str.w	r3, [sl, #8]
    8b42:	f8ca 3004 	str.w	r3, [sl, #4]
    8b46:	b003      	add	sp, #12
    8b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b4c:	4620      	mov	r0, r4
    8b4e:	f8ca 4004 	str.w	r4, [sl, #4]
    8b52:	b003      	add	sp, #12
    8b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008b58 <__register_exitproc>:
    8b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b5a:	4c27      	ldr	r4, [pc, #156]	; (8bf8 <__register_exitproc+0xa0>)
    8b5c:	b085      	sub	sp, #20
    8b5e:	6826      	ldr	r6, [r4, #0]
    8b60:	4607      	mov	r7, r0
    8b62:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    8b66:	2c00      	cmp	r4, #0
    8b68:	d040      	beq.n	8bec <__register_exitproc+0x94>
    8b6a:	6865      	ldr	r5, [r4, #4]
    8b6c:	2d1f      	cmp	r5, #31
    8b6e:	dd1e      	ble.n	8bae <__register_exitproc+0x56>
    8b70:	4822      	ldr	r0, [pc, #136]	; (8bfc <__register_exitproc+0xa4>)
    8b72:	b918      	cbnz	r0, 8b7c <__register_exitproc+0x24>
    8b74:	f04f 30ff 	mov.w	r0, #4294967295
    8b78:	b005      	add	sp, #20
    8b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    8b80:	9103      	str	r1, [sp, #12]
    8b82:	9202      	str	r2, [sp, #8]
    8b84:	9301      	str	r3, [sp, #4]
    8b86:	f3af 8000 	nop.w
    8b8a:	9903      	ldr	r1, [sp, #12]
    8b8c:	4604      	mov	r4, r0
    8b8e:	9a02      	ldr	r2, [sp, #8]
    8b90:	9b01      	ldr	r3, [sp, #4]
    8b92:	2800      	cmp	r0, #0
    8b94:	d0ee      	beq.n	8b74 <__register_exitproc+0x1c>
    8b96:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    8b9a:	2000      	movs	r0, #0
    8b9c:	6025      	str	r5, [r4, #0]
    8b9e:	6060      	str	r0, [r4, #4]
    8ba0:	4605      	mov	r5, r0
    8ba2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    8ba6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    8baa:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    8bae:	b93f      	cbnz	r7, 8bc0 <__register_exitproc+0x68>
    8bb0:	1c6b      	adds	r3, r5, #1
    8bb2:	2000      	movs	r0, #0
    8bb4:	3502      	adds	r5, #2
    8bb6:	6063      	str	r3, [r4, #4]
    8bb8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    8bbc:	b005      	add	sp, #20
    8bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bc0:	2601      	movs	r6, #1
    8bc2:	40ae      	lsls	r6, r5
    8bc4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    8bc8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    8bcc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8bd0:	2f02      	cmp	r7, #2
    8bd2:	ea42 0206 	orr.w	r2, r2, r6
    8bd6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8bda:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    8bde:	d1e7      	bne.n	8bb0 <__register_exitproc+0x58>
    8be0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    8be4:	431e      	orrs	r6, r3
    8be6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
    8bea:	e7e1      	b.n	8bb0 <__register_exitproc+0x58>
    8bec:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    8bf0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    8bf4:	e7b9      	b.n	8b6a <__register_exitproc+0x12>
    8bf6:	bf00      	nop
    8bf8:	0000ab10 	.word	0x0000ab10
    8bfc:	00000000 	.word	0x00000000

00008c00 <_calloc_r>:
    8c00:	b510      	push	{r4, lr}
    8c02:	fb02 f101 	mul.w	r1, r2, r1
    8c06:	f7ff f883 	bl	7d10 <_malloc_r>
    8c0a:	4604      	mov	r4, r0
    8c0c:	b168      	cbz	r0, 8c2a <_calloc_r+0x2a>
    8c0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8c12:	f022 0203 	bic.w	r2, r2, #3
    8c16:	3a04      	subs	r2, #4
    8c18:	2a24      	cmp	r2, #36	; 0x24
    8c1a:	d818      	bhi.n	8c4e <_calloc_r+0x4e>
    8c1c:	2a13      	cmp	r2, #19
    8c1e:	d806      	bhi.n	8c2e <_calloc_r+0x2e>
    8c20:	4603      	mov	r3, r0
    8c22:	2200      	movs	r2, #0
    8c24:	601a      	str	r2, [r3, #0]
    8c26:	605a      	str	r2, [r3, #4]
    8c28:	609a      	str	r2, [r3, #8]
    8c2a:	4620      	mov	r0, r4
    8c2c:	bd10      	pop	{r4, pc}
    8c2e:	2300      	movs	r3, #0
    8c30:	2a1b      	cmp	r2, #27
    8c32:	6003      	str	r3, [r0, #0]
    8c34:	6043      	str	r3, [r0, #4]
    8c36:	d90f      	bls.n	8c58 <_calloc_r+0x58>
    8c38:	2a24      	cmp	r2, #36	; 0x24
    8c3a:	6083      	str	r3, [r0, #8]
    8c3c:	60c3      	str	r3, [r0, #12]
    8c3e:	bf05      	ittet	eq
    8c40:	6103      	streq	r3, [r0, #16]
    8c42:	6143      	streq	r3, [r0, #20]
    8c44:	f100 0310 	addne.w	r3, r0, #16
    8c48:	f100 0318 	addeq.w	r3, r0, #24
    8c4c:	e7e9      	b.n	8c22 <_calloc_r+0x22>
    8c4e:	2100      	movs	r1, #0
    8c50:	f7fb fdba 	bl	47c8 <memset>
    8c54:	4620      	mov	r0, r4
    8c56:	bd10      	pop	{r4, pc}
    8c58:	f100 0308 	add.w	r3, r0, #8
    8c5c:	e7e1      	b.n	8c22 <_calloc_r+0x22>
    8c5e:	bf00      	nop

00008c60 <_malloc_trim_r>:
    8c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c62:	4d23      	ldr	r5, [pc, #140]	; (8cf0 <_malloc_trim_r+0x90>)
    8c64:	460f      	mov	r7, r1
    8c66:	4604      	mov	r4, r0
    8c68:	f7ff fbae 	bl	83c8 <__malloc_lock>
    8c6c:	68ab      	ldr	r3, [r5, #8]
    8c6e:	685e      	ldr	r6, [r3, #4]
    8c70:	f026 0603 	bic.w	r6, r6, #3
    8c74:	1bf1      	subs	r1, r6, r7
    8c76:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    8c7a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    8c7e:	f021 010f 	bic.w	r1, r1, #15
    8c82:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
    8c86:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    8c8a:	db07      	blt.n	8c9c <_malloc_trim_r+0x3c>
    8c8c:	4620      	mov	r0, r4
    8c8e:	2100      	movs	r1, #0
    8c90:	f7ff fed0 	bl	8a34 <_sbrk_r>
    8c94:	68ab      	ldr	r3, [r5, #8]
    8c96:	4433      	add	r3, r6
    8c98:	4298      	cmp	r0, r3
    8c9a:	d004      	beq.n	8ca6 <_malloc_trim_r+0x46>
    8c9c:	4620      	mov	r0, r4
    8c9e:	f7ff fb95 	bl	83cc <__malloc_unlock>
    8ca2:	2000      	movs	r0, #0
    8ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ca6:	4620      	mov	r0, r4
    8ca8:	4279      	negs	r1, r7
    8caa:	f7ff fec3 	bl	8a34 <_sbrk_r>
    8cae:	3001      	adds	r0, #1
    8cb0:	d00d      	beq.n	8cce <_malloc_trim_r+0x6e>
    8cb2:	4b10      	ldr	r3, [pc, #64]	; (8cf4 <_malloc_trim_r+0x94>)
    8cb4:	68aa      	ldr	r2, [r5, #8]
    8cb6:	6819      	ldr	r1, [r3, #0]
    8cb8:	1bf6      	subs	r6, r6, r7
    8cba:	f046 0601 	orr.w	r6, r6, #1
    8cbe:	4620      	mov	r0, r4
    8cc0:	1bc9      	subs	r1, r1, r7
    8cc2:	6056      	str	r6, [r2, #4]
    8cc4:	6019      	str	r1, [r3, #0]
    8cc6:	f7ff fb81 	bl	83cc <__malloc_unlock>
    8cca:	2001      	movs	r0, #1
    8ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cce:	4620      	mov	r0, r4
    8cd0:	2100      	movs	r1, #0
    8cd2:	f7ff feaf 	bl	8a34 <_sbrk_r>
    8cd6:	68ab      	ldr	r3, [r5, #8]
    8cd8:	1ac2      	subs	r2, r0, r3
    8cda:	2a0f      	cmp	r2, #15
    8cdc:	ddde      	ble.n	8c9c <_malloc_trim_r+0x3c>
    8cde:	4d06      	ldr	r5, [pc, #24]	; (8cf8 <_malloc_trim_r+0x98>)
    8ce0:	4904      	ldr	r1, [pc, #16]	; (8cf4 <_malloc_trim_r+0x94>)
    8ce2:	682d      	ldr	r5, [r5, #0]
    8ce4:	f042 0201 	orr.w	r2, r2, #1
    8ce8:	1b40      	subs	r0, r0, r5
    8cea:	605a      	str	r2, [r3, #4]
    8cec:	6008      	str	r0, [r1, #0]
    8cee:	e7d5      	b.n	8c9c <_malloc_trim_r+0x3c>
    8cf0:	20000534 	.word	0x20000534
    8cf4:	20000f7c 	.word	0x20000f7c
    8cf8:	20000940 	.word	0x20000940

00008cfc <_free_r>:
    8cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d00:	460d      	mov	r5, r1
    8d02:	4606      	mov	r6, r0
    8d04:	2900      	cmp	r1, #0
    8d06:	d055      	beq.n	8db4 <_free_r+0xb8>
    8d08:	f7ff fb5e 	bl	83c8 <__malloc_lock>
    8d0c:	f855 1c04 	ldr.w	r1, [r5, #-4]
    8d10:	f8df c170 	ldr.w	ip, [pc, #368]	; 8e84 <_free_r+0x188>
    8d14:	f1a5 0408 	sub.w	r4, r5, #8
    8d18:	f021 0301 	bic.w	r3, r1, #1
    8d1c:	18e2      	adds	r2, r4, r3
    8d1e:	f8dc 0008 	ldr.w	r0, [ip, #8]
    8d22:	6857      	ldr	r7, [r2, #4]
    8d24:	4290      	cmp	r0, r2
    8d26:	f027 0703 	bic.w	r7, r7, #3
    8d2a:	d068      	beq.n	8dfe <_free_r+0x102>
    8d2c:	f011 0101 	ands.w	r1, r1, #1
    8d30:	6057      	str	r7, [r2, #4]
    8d32:	d032      	beq.n	8d9a <_free_r+0x9e>
    8d34:	2100      	movs	r1, #0
    8d36:	19d0      	adds	r0, r2, r7
    8d38:	6840      	ldr	r0, [r0, #4]
    8d3a:	07c0      	lsls	r0, r0, #31
    8d3c:	d406      	bmi.n	8d4c <_free_r+0x50>
    8d3e:	443b      	add	r3, r7
    8d40:	6890      	ldr	r0, [r2, #8]
    8d42:	2900      	cmp	r1, #0
    8d44:	d04d      	beq.n	8de2 <_free_r+0xe6>
    8d46:	68d2      	ldr	r2, [r2, #12]
    8d48:	60c2      	str	r2, [r0, #12]
    8d4a:	6090      	str	r0, [r2, #8]
    8d4c:	f043 0201 	orr.w	r2, r3, #1
    8d50:	6062      	str	r2, [r4, #4]
    8d52:	50e3      	str	r3, [r4, r3]
    8d54:	b9e1      	cbnz	r1, 8d90 <_free_r+0x94>
    8d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8d5a:	d32d      	bcc.n	8db8 <_free_r+0xbc>
    8d5c:	0a5a      	lsrs	r2, r3, #9
    8d5e:	2a04      	cmp	r2, #4
    8d60:	d869      	bhi.n	8e36 <_free_r+0x13a>
    8d62:	0998      	lsrs	r0, r3, #6
    8d64:	3038      	adds	r0, #56	; 0x38
    8d66:	0041      	lsls	r1, r0, #1
    8d68:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
    8d6c:	f8dc 2008 	ldr.w	r2, [ip, #8]
    8d70:	4944      	ldr	r1, [pc, #272]	; (8e84 <_free_r+0x188>)
    8d72:	4562      	cmp	r2, ip
    8d74:	d065      	beq.n	8e42 <_free_r+0x146>
    8d76:	6851      	ldr	r1, [r2, #4]
    8d78:	f021 0103 	bic.w	r1, r1, #3
    8d7c:	428b      	cmp	r3, r1
    8d7e:	d202      	bcs.n	8d86 <_free_r+0x8a>
    8d80:	6892      	ldr	r2, [r2, #8]
    8d82:	4594      	cmp	ip, r2
    8d84:	d1f7      	bne.n	8d76 <_free_r+0x7a>
    8d86:	68d3      	ldr	r3, [r2, #12]
    8d88:	60e3      	str	r3, [r4, #12]
    8d8a:	60a2      	str	r2, [r4, #8]
    8d8c:	609c      	str	r4, [r3, #8]
    8d8e:	60d4      	str	r4, [r2, #12]
    8d90:	4630      	mov	r0, r6
    8d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8d96:	f7ff bb19 	b.w	83cc <__malloc_unlock>
    8d9a:	f855 5c08 	ldr.w	r5, [r5, #-8]
    8d9e:	f10c 0808 	add.w	r8, ip, #8
    8da2:	1b64      	subs	r4, r4, r5
    8da4:	68a0      	ldr	r0, [r4, #8]
    8da6:	442b      	add	r3, r5
    8da8:	4540      	cmp	r0, r8
    8daa:	d042      	beq.n	8e32 <_free_r+0x136>
    8dac:	68e5      	ldr	r5, [r4, #12]
    8dae:	60c5      	str	r5, [r0, #12]
    8db0:	60a8      	str	r0, [r5, #8]
    8db2:	e7c0      	b.n	8d36 <_free_r+0x3a>
    8db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db8:	08db      	lsrs	r3, r3, #3
    8dba:	109a      	asrs	r2, r3, #2
    8dbc:	2001      	movs	r0, #1
    8dbe:	4090      	lsls	r0, r2
    8dc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
    8dc4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    8dc8:	689a      	ldr	r2, [r3, #8]
    8dca:	4301      	orrs	r1, r0
    8dcc:	60a2      	str	r2, [r4, #8]
    8dce:	60e3      	str	r3, [r4, #12]
    8dd0:	f8cc 1004 	str.w	r1, [ip, #4]
    8dd4:	4630      	mov	r0, r6
    8dd6:	609c      	str	r4, [r3, #8]
    8dd8:	60d4      	str	r4, [r2, #12]
    8dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8dde:	f7ff baf5 	b.w	83cc <__malloc_unlock>
    8de2:	4d29      	ldr	r5, [pc, #164]	; (8e88 <_free_r+0x18c>)
    8de4:	42a8      	cmp	r0, r5
    8de6:	d1ae      	bne.n	8d46 <_free_r+0x4a>
    8de8:	f043 0201 	orr.w	r2, r3, #1
    8dec:	f8cc 4014 	str.w	r4, [ip, #20]
    8df0:	f8cc 4010 	str.w	r4, [ip, #16]
    8df4:	60e0      	str	r0, [r4, #12]
    8df6:	60a0      	str	r0, [r4, #8]
    8df8:	6062      	str	r2, [r4, #4]
    8dfa:	50e3      	str	r3, [r4, r3]
    8dfc:	e7c8      	b.n	8d90 <_free_r+0x94>
    8dfe:	441f      	add	r7, r3
    8e00:	07cb      	lsls	r3, r1, #31
    8e02:	d407      	bmi.n	8e14 <_free_r+0x118>
    8e04:	f855 1c08 	ldr.w	r1, [r5, #-8]
    8e08:	1a64      	subs	r4, r4, r1
    8e0a:	68e3      	ldr	r3, [r4, #12]
    8e0c:	68a2      	ldr	r2, [r4, #8]
    8e0e:	440f      	add	r7, r1
    8e10:	60d3      	str	r3, [r2, #12]
    8e12:	609a      	str	r2, [r3, #8]
    8e14:	4b1d      	ldr	r3, [pc, #116]	; (8e8c <_free_r+0x190>)
    8e16:	f047 0201 	orr.w	r2, r7, #1
    8e1a:	681b      	ldr	r3, [r3, #0]
    8e1c:	6062      	str	r2, [r4, #4]
    8e1e:	429f      	cmp	r7, r3
    8e20:	f8cc 4008 	str.w	r4, [ip, #8]
    8e24:	d3b4      	bcc.n	8d90 <_free_r+0x94>
    8e26:	4b1a      	ldr	r3, [pc, #104]	; (8e90 <_free_r+0x194>)
    8e28:	4630      	mov	r0, r6
    8e2a:	6819      	ldr	r1, [r3, #0]
    8e2c:	f7ff ff18 	bl	8c60 <_malloc_trim_r>
    8e30:	e7ae      	b.n	8d90 <_free_r+0x94>
    8e32:	2101      	movs	r1, #1
    8e34:	e77f      	b.n	8d36 <_free_r+0x3a>
    8e36:	2a14      	cmp	r2, #20
    8e38:	d80b      	bhi.n	8e52 <_free_r+0x156>
    8e3a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
    8e3e:	0041      	lsls	r1, r0, #1
    8e40:	e792      	b.n	8d68 <_free_r+0x6c>
    8e42:	1080      	asrs	r0, r0, #2
    8e44:	2501      	movs	r5, #1
    8e46:	4085      	lsls	r5, r0
    8e48:	6848      	ldr	r0, [r1, #4]
    8e4a:	4613      	mov	r3, r2
    8e4c:	4328      	orrs	r0, r5
    8e4e:	6048      	str	r0, [r1, #4]
    8e50:	e79a      	b.n	8d88 <_free_r+0x8c>
    8e52:	2a54      	cmp	r2, #84	; 0x54
    8e54:	d803      	bhi.n	8e5e <_free_r+0x162>
    8e56:	0b18      	lsrs	r0, r3, #12
    8e58:	306e      	adds	r0, #110	; 0x6e
    8e5a:	0041      	lsls	r1, r0, #1
    8e5c:	e784      	b.n	8d68 <_free_r+0x6c>
    8e5e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    8e62:	d803      	bhi.n	8e6c <_free_r+0x170>
    8e64:	0bd8      	lsrs	r0, r3, #15
    8e66:	3077      	adds	r0, #119	; 0x77
    8e68:	0041      	lsls	r1, r0, #1
    8e6a:	e77d      	b.n	8d68 <_free_r+0x6c>
    8e6c:	f240 5154 	movw	r1, #1364	; 0x554
    8e70:	428a      	cmp	r2, r1
    8e72:	d803      	bhi.n	8e7c <_free_r+0x180>
    8e74:	0c98      	lsrs	r0, r3, #18
    8e76:	307c      	adds	r0, #124	; 0x7c
    8e78:	0041      	lsls	r1, r0, #1
    8e7a:	e775      	b.n	8d68 <_free_r+0x6c>
    8e7c:	21fc      	movs	r1, #252	; 0xfc
    8e7e:	207e      	movs	r0, #126	; 0x7e
    8e80:	e772      	b.n	8d68 <_free_r+0x6c>
    8e82:	bf00      	nop
    8e84:	20000534 	.word	0x20000534
    8e88:	2000053c 	.word	0x2000053c
    8e8c:	2000093c 	.word	0x2000093c
    8e90:	20000f78 	.word	0x20000f78

00008e94 <memmove>:
    8e94:	4288      	cmp	r0, r1
    8e96:	b4f0      	push	{r4, r5, r6, r7}
    8e98:	d910      	bls.n	8ebc <memmove+0x28>
    8e9a:	188c      	adds	r4, r1, r2
    8e9c:	42a0      	cmp	r0, r4
    8e9e:	d20d      	bcs.n	8ebc <memmove+0x28>
    8ea0:	1885      	adds	r5, r0, r2
    8ea2:	1e53      	subs	r3, r2, #1
    8ea4:	b142      	cbz	r2, 8eb8 <memmove+0x24>
    8ea6:	4621      	mov	r1, r4
    8ea8:	462a      	mov	r2, r5
    8eaa:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    8eae:	3b01      	subs	r3, #1
    8eb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
    8eb4:	1c5c      	adds	r4, r3, #1
    8eb6:	d1f8      	bne.n	8eaa <memmove+0x16>
    8eb8:	bcf0      	pop	{r4, r5, r6, r7}
    8eba:	4770      	bx	lr
    8ebc:	2a0f      	cmp	r2, #15
    8ebe:	d944      	bls.n	8f4a <memmove+0xb6>
    8ec0:	ea40 0301 	orr.w	r3, r0, r1
    8ec4:	079b      	lsls	r3, r3, #30
    8ec6:	d144      	bne.n	8f52 <memmove+0xbe>
    8ec8:	f1a2 0710 	sub.w	r7, r2, #16
    8ecc:	093f      	lsrs	r7, r7, #4
    8ece:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    8ed2:	3610      	adds	r6, #16
    8ed4:	460c      	mov	r4, r1
    8ed6:	4603      	mov	r3, r0
    8ed8:	6825      	ldr	r5, [r4, #0]
    8eda:	3310      	adds	r3, #16
    8edc:	f843 5c10 	str.w	r5, [r3, #-16]
    8ee0:	6865      	ldr	r5, [r4, #4]
    8ee2:	3410      	adds	r4, #16
    8ee4:	f843 5c0c 	str.w	r5, [r3, #-12]
    8ee8:	f854 5c08 	ldr.w	r5, [r4, #-8]
    8eec:	f843 5c08 	str.w	r5, [r3, #-8]
    8ef0:	f854 5c04 	ldr.w	r5, [r4, #-4]
    8ef4:	f843 5c04 	str.w	r5, [r3, #-4]
    8ef8:	42b3      	cmp	r3, r6
    8efa:	d1ed      	bne.n	8ed8 <memmove+0x44>
    8efc:	1c7b      	adds	r3, r7, #1
    8efe:	f002 0c0f 	and.w	ip, r2, #15
    8f02:	011b      	lsls	r3, r3, #4
    8f04:	f1bc 0f03 	cmp.w	ip, #3
    8f08:	4419      	add	r1, r3
    8f0a:	4403      	add	r3, r0
    8f0c:	d923      	bls.n	8f56 <memmove+0xc2>
    8f0e:	460e      	mov	r6, r1
    8f10:	461d      	mov	r5, r3
    8f12:	4664      	mov	r4, ip
    8f14:	f856 7b04 	ldr.w	r7, [r6], #4
    8f18:	3c04      	subs	r4, #4
    8f1a:	2c03      	cmp	r4, #3
    8f1c:	f845 7b04 	str.w	r7, [r5], #4
    8f20:	d8f8      	bhi.n	8f14 <memmove+0x80>
    8f22:	f1ac 0404 	sub.w	r4, ip, #4
    8f26:	f024 0403 	bic.w	r4, r4, #3
    8f2a:	3404      	adds	r4, #4
    8f2c:	f002 0203 	and.w	r2, r2, #3
    8f30:	4423      	add	r3, r4
    8f32:	4421      	add	r1, r4
    8f34:	2a00      	cmp	r2, #0
    8f36:	d0bf      	beq.n	8eb8 <memmove+0x24>
    8f38:	441a      	add	r2, r3
    8f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
    8f3e:	f803 4b01 	strb.w	r4, [r3], #1
    8f42:	4293      	cmp	r3, r2
    8f44:	d1f9      	bne.n	8f3a <memmove+0xa6>
    8f46:	bcf0      	pop	{r4, r5, r6, r7}
    8f48:	4770      	bx	lr
    8f4a:	4603      	mov	r3, r0
    8f4c:	2a00      	cmp	r2, #0
    8f4e:	d1f3      	bne.n	8f38 <memmove+0xa4>
    8f50:	e7b2      	b.n	8eb8 <memmove+0x24>
    8f52:	4603      	mov	r3, r0
    8f54:	e7f0      	b.n	8f38 <memmove+0xa4>
    8f56:	4662      	mov	r2, ip
    8f58:	2a00      	cmp	r2, #0
    8f5a:	d1ed      	bne.n	8f38 <memmove+0xa4>
    8f5c:	e7ac      	b.n	8eb8 <memmove+0x24>
    8f5e:	bf00      	nop

00008f60 <_realloc_r>:
    8f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f64:	460c      	mov	r4, r1
    8f66:	b083      	sub	sp, #12
    8f68:	4690      	mov	r8, r2
    8f6a:	4681      	mov	r9, r0
    8f6c:	2900      	cmp	r1, #0
    8f6e:	f000 80ba 	beq.w	90e6 <_realloc_r+0x186>
    8f72:	f7ff fa29 	bl	83c8 <__malloc_lock>
    8f76:	f108 060b 	add.w	r6, r8, #11
    8f7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8f7e:	2e16      	cmp	r6, #22
    8f80:	f023 0503 	bic.w	r5, r3, #3
    8f84:	f1a4 0708 	sub.w	r7, r4, #8
    8f88:	d84b      	bhi.n	9022 <_realloc_r+0xc2>
    8f8a:	2110      	movs	r1, #16
    8f8c:	460e      	mov	r6, r1
    8f8e:	45b0      	cmp	r8, r6
    8f90:	d84c      	bhi.n	902c <_realloc_r+0xcc>
    8f92:	428d      	cmp	r5, r1
    8f94:	da51      	bge.n	903a <_realloc_r+0xda>
    8f96:	f8df b384 	ldr.w	fp, [pc, #900]	; 931c <_realloc_r+0x3bc>
    8f9a:	1978      	adds	r0, r7, r5
    8f9c:	f8db e008 	ldr.w	lr, [fp, #8]
    8fa0:	4586      	cmp	lr, r0
    8fa2:	f000 80a6 	beq.w	90f2 <_realloc_r+0x192>
    8fa6:	6842      	ldr	r2, [r0, #4]
    8fa8:	f022 0c01 	bic.w	ip, r2, #1
    8fac:	4484      	add	ip, r0
    8fae:	f8dc c004 	ldr.w	ip, [ip, #4]
    8fb2:	f01c 0f01 	tst.w	ip, #1
    8fb6:	d054      	beq.n	9062 <_realloc_r+0x102>
    8fb8:	2200      	movs	r2, #0
    8fba:	4610      	mov	r0, r2
    8fbc:	07db      	lsls	r3, r3, #31
    8fbe:	d46f      	bmi.n	90a0 <_realloc_r+0x140>
    8fc0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8fc4:	ebc3 0a07 	rsb	sl, r3, r7
    8fc8:	f8da 3004 	ldr.w	r3, [sl, #4]
    8fcc:	f023 0303 	bic.w	r3, r3, #3
    8fd0:	442b      	add	r3, r5
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d062      	beq.n	909c <_realloc_r+0x13c>
    8fd6:	4570      	cmp	r0, lr
    8fd8:	f000 80e9 	beq.w	91ae <_realloc_r+0x24e>
    8fdc:	eb02 0e03 	add.w	lr, r2, r3
    8fe0:	458e      	cmp	lr, r1
    8fe2:	db5b      	blt.n	909c <_realloc_r+0x13c>
    8fe4:	68c3      	ldr	r3, [r0, #12]
    8fe6:	6882      	ldr	r2, [r0, #8]
    8fe8:	46d0      	mov	r8, sl
    8fea:	60d3      	str	r3, [r2, #12]
    8fec:	609a      	str	r2, [r3, #8]
    8fee:	f858 1f08 	ldr.w	r1, [r8, #8]!
    8ff2:	f8da 300c 	ldr.w	r3, [sl, #12]
    8ff6:	1f2a      	subs	r2, r5, #4
    8ff8:	2a24      	cmp	r2, #36	; 0x24
    8ffa:	60cb      	str	r3, [r1, #12]
    8ffc:	6099      	str	r1, [r3, #8]
    8ffe:	f200 8123 	bhi.w	9248 <_realloc_r+0x2e8>
    9002:	2a13      	cmp	r2, #19
    9004:	f240 80b0 	bls.w	9168 <_realloc_r+0x208>
    9008:	6823      	ldr	r3, [r4, #0]
    900a:	2a1b      	cmp	r2, #27
    900c:	f8ca 3008 	str.w	r3, [sl, #8]
    9010:	6863      	ldr	r3, [r4, #4]
    9012:	f8ca 300c 	str.w	r3, [sl, #12]
    9016:	f200 812b 	bhi.w	9270 <_realloc_r+0x310>
    901a:	3408      	adds	r4, #8
    901c:	f10a 0310 	add.w	r3, sl, #16
    9020:	e0a3      	b.n	916a <_realloc_r+0x20a>
    9022:	f026 0607 	bic.w	r6, r6, #7
    9026:	2e00      	cmp	r6, #0
    9028:	4631      	mov	r1, r6
    902a:	dab0      	bge.n	8f8e <_realloc_r+0x2e>
    902c:	230c      	movs	r3, #12
    902e:	2000      	movs	r0, #0
    9030:	f8c9 3000 	str.w	r3, [r9]
    9034:	b003      	add	sp, #12
    9036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    903a:	46a0      	mov	r8, r4
    903c:	1baa      	subs	r2, r5, r6
    903e:	2a0f      	cmp	r2, #15
    9040:	f003 0301 	and.w	r3, r3, #1
    9044:	d81a      	bhi.n	907c <_realloc_r+0x11c>
    9046:	432b      	orrs	r3, r5
    9048:	607b      	str	r3, [r7, #4]
    904a:	443d      	add	r5, r7
    904c:	686b      	ldr	r3, [r5, #4]
    904e:	f043 0301 	orr.w	r3, r3, #1
    9052:	606b      	str	r3, [r5, #4]
    9054:	4648      	mov	r0, r9
    9056:	f7ff f9b9 	bl	83cc <__malloc_unlock>
    905a:	4640      	mov	r0, r8
    905c:	b003      	add	sp, #12
    905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9062:	f022 0203 	bic.w	r2, r2, #3
    9066:	eb02 0c05 	add.w	ip, r2, r5
    906a:	458c      	cmp	ip, r1
    906c:	dba6      	blt.n	8fbc <_realloc_r+0x5c>
    906e:	68c2      	ldr	r2, [r0, #12]
    9070:	6881      	ldr	r1, [r0, #8]
    9072:	46a0      	mov	r8, r4
    9074:	60ca      	str	r2, [r1, #12]
    9076:	4665      	mov	r5, ip
    9078:	6091      	str	r1, [r2, #8]
    907a:	e7df      	b.n	903c <_realloc_r+0xdc>
    907c:	19b9      	adds	r1, r7, r6
    907e:	4333      	orrs	r3, r6
    9080:	f042 0001 	orr.w	r0, r2, #1
    9084:	607b      	str	r3, [r7, #4]
    9086:	440a      	add	r2, r1
    9088:	6048      	str	r0, [r1, #4]
    908a:	6853      	ldr	r3, [r2, #4]
    908c:	3108      	adds	r1, #8
    908e:	f043 0301 	orr.w	r3, r3, #1
    9092:	6053      	str	r3, [r2, #4]
    9094:	4648      	mov	r0, r9
    9096:	f7ff fe31 	bl	8cfc <_free_r>
    909a:	e7db      	b.n	9054 <_realloc_r+0xf4>
    909c:	428b      	cmp	r3, r1
    909e:	da33      	bge.n	9108 <_realloc_r+0x1a8>
    90a0:	4641      	mov	r1, r8
    90a2:	4648      	mov	r0, r9
    90a4:	f7fe fe34 	bl	7d10 <_malloc_r>
    90a8:	4680      	mov	r8, r0
    90aa:	2800      	cmp	r0, #0
    90ac:	d0d2      	beq.n	9054 <_realloc_r+0xf4>
    90ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    90b2:	f1a0 0108 	sub.w	r1, r0, #8
    90b6:	f023 0201 	bic.w	r2, r3, #1
    90ba:	443a      	add	r2, r7
    90bc:	4291      	cmp	r1, r2
    90be:	f000 80bc 	beq.w	923a <_realloc_r+0x2da>
    90c2:	1f2a      	subs	r2, r5, #4
    90c4:	2a24      	cmp	r2, #36	; 0x24
    90c6:	d86e      	bhi.n	91a6 <_realloc_r+0x246>
    90c8:	2a13      	cmp	r2, #19
    90ca:	d842      	bhi.n	9152 <_realloc_r+0x1f2>
    90cc:	4603      	mov	r3, r0
    90ce:	4622      	mov	r2, r4
    90d0:	6811      	ldr	r1, [r2, #0]
    90d2:	6019      	str	r1, [r3, #0]
    90d4:	6851      	ldr	r1, [r2, #4]
    90d6:	6059      	str	r1, [r3, #4]
    90d8:	6892      	ldr	r2, [r2, #8]
    90da:	609a      	str	r2, [r3, #8]
    90dc:	4621      	mov	r1, r4
    90de:	4648      	mov	r0, r9
    90e0:	f7ff fe0c 	bl	8cfc <_free_r>
    90e4:	e7b6      	b.n	9054 <_realloc_r+0xf4>
    90e6:	4611      	mov	r1, r2
    90e8:	b003      	add	sp, #12
    90ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90ee:	f7fe be0f 	b.w	7d10 <_malloc_r>
    90f2:	f8de 2004 	ldr.w	r2, [lr, #4]
    90f6:	f106 0c10 	add.w	ip, r6, #16
    90fa:	f022 0203 	bic.w	r2, r2, #3
    90fe:	1950      	adds	r0, r2, r5
    9100:	4560      	cmp	r0, ip
    9102:	da3d      	bge.n	9180 <_realloc_r+0x220>
    9104:	4670      	mov	r0, lr
    9106:	e759      	b.n	8fbc <_realloc_r+0x5c>
    9108:	46d0      	mov	r8, sl
    910a:	f858 0f08 	ldr.w	r0, [r8, #8]!
    910e:	f8da 100c 	ldr.w	r1, [sl, #12]
    9112:	1f2a      	subs	r2, r5, #4
    9114:	2a24      	cmp	r2, #36	; 0x24
    9116:	60c1      	str	r1, [r0, #12]
    9118:	6088      	str	r0, [r1, #8]
    911a:	f200 80a0 	bhi.w	925e <_realloc_r+0x2fe>
    911e:	2a13      	cmp	r2, #19
    9120:	f240 809b 	bls.w	925a <_realloc_r+0x2fa>
    9124:	6821      	ldr	r1, [r4, #0]
    9126:	2a1b      	cmp	r2, #27
    9128:	f8ca 1008 	str.w	r1, [sl, #8]
    912c:	6861      	ldr	r1, [r4, #4]
    912e:	f8ca 100c 	str.w	r1, [sl, #12]
    9132:	f200 80b2 	bhi.w	929a <_realloc_r+0x33a>
    9136:	3408      	adds	r4, #8
    9138:	f10a 0210 	add.w	r2, sl, #16
    913c:	6821      	ldr	r1, [r4, #0]
    913e:	461d      	mov	r5, r3
    9140:	6011      	str	r1, [r2, #0]
    9142:	6861      	ldr	r1, [r4, #4]
    9144:	4657      	mov	r7, sl
    9146:	6051      	str	r1, [r2, #4]
    9148:	68a3      	ldr	r3, [r4, #8]
    914a:	6093      	str	r3, [r2, #8]
    914c:	f8da 3004 	ldr.w	r3, [sl, #4]
    9150:	e774      	b.n	903c <_realloc_r+0xdc>
    9152:	6823      	ldr	r3, [r4, #0]
    9154:	2a1b      	cmp	r2, #27
    9156:	6003      	str	r3, [r0, #0]
    9158:	6863      	ldr	r3, [r4, #4]
    915a:	6043      	str	r3, [r0, #4]
    915c:	d862      	bhi.n	9224 <_realloc_r+0x2c4>
    915e:	f100 0308 	add.w	r3, r0, #8
    9162:	f104 0208 	add.w	r2, r4, #8
    9166:	e7b3      	b.n	90d0 <_realloc_r+0x170>
    9168:	4643      	mov	r3, r8
    916a:	6822      	ldr	r2, [r4, #0]
    916c:	4675      	mov	r5, lr
    916e:	601a      	str	r2, [r3, #0]
    9170:	6862      	ldr	r2, [r4, #4]
    9172:	4657      	mov	r7, sl
    9174:	605a      	str	r2, [r3, #4]
    9176:	68a2      	ldr	r2, [r4, #8]
    9178:	609a      	str	r2, [r3, #8]
    917a:	f8da 3004 	ldr.w	r3, [sl, #4]
    917e:	e75d      	b.n	903c <_realloc_r+0xdc>
    9180:	1b83      	subs	r3, r0, r6
    9182:	4437      	add	r7, r6
    9184:	f043 0301 	orr.w	r3, r3, #1
    9188:	f8cb 7008 	str.w	r7, [fp, #8]
    918c:	607b      	str	r3, [r7, #4]
    918e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9192:	4648      	mov	r0, r9
    9194:	f003 0301 	and.w	r3, r3, #1
    9198:	431e      	orrs	r6, r3
    919a:	f844 6c04 	str.w	r6, [r4, #-4]
    919e:	f7ff f915 	bl	83cc <__malloc_unlock>
    91a2:	4620      	mov	r0, r4
    91a4:	e75a      	b.n	905c <_realloc_r+0xfc>
    91a6:	4621      	mov	r1, r4
    91a8:	f7ff fe74 	bl	8e94 <memmove>
    91ac:	e796      	b.n	90dc <_realloc_r+0x17c>
    91ae:	eb02 0c03 	add.w	ip, r2, r3
    91b2:	f106 0210 	add.w	r2, r6, #16
    91b6:	4594      	cmp	ip, r2
    91b8:	f6ff af70 	blt.w	909c <_realloc_r+0x13c>
    91bc:	4657      	mov	r7, sl
    91be:	f857 1f08 	ldr.w	r1, [r7, #8]!
    91c2:	f8da 300c 	ldr.w	r3, [sl, #12]
    91c6:	1f2a      	subs	r2, r5, #4
    91c8:	2a24      	cmp	r2, #36	; 0x24
    91ca:	60cb      	str	r3, [r1, #12]
    91cc:	6099      	str	r1, [r3, #8]
    91ce:	f200 8086 	bhi.w	92de <_realloc_r+0x37e>
    91d2:	2a13      	cmp	r2, #19
    91d4:	d977      	bls.n	92c6 <_realloc_r+0x366>
    91d6:	6823      	ldr	r3, [r4, #0]
    91d8:	2a1b      	cmp	r2, #27
    91da:	f8ca 3008 	str.w	r3, [sl, #8]
    91de:	6863      	ldr	r3, [r4, #4]
    91e0:	f8ca 300c 	str.w	r3, [sl, #12]
    91e4:	f200 8084 	bhi.w	92f0 <_realloc_r+0x390>
    91e8:	3408      	adds	r4, #8
    91ea:	f10a 0310 	add.w	r3, sl, #16
    91ee:	6822      	ldr	r2, [r4, #0]
    91f0:	601a      	str	r2, [r3, #0]
    91f2:	6862      	ldr	r2, [r4, #4]
    91f4:	605a      	str	r2, [r3, #4]
    91f6:	68a2      	ldr	r2, [r4, #8]
    91f8:	609a      	str	r2, [r3, #8]
    91fa:	ebc6 020c 	rsb	r2, r6, ip
    91fe:	eb0a 0306 	add.w	r3, sl, r6
    9202:	f042 0201 	orr.w	r2, r2, #1
    9206:	f8cb 3008 	str.w	r3, [fp, #8]
    920a:	605a      	str	r2, [r3, #4]
    920c:	f8da 3004 	ldr.w	r3, [sl, #4]
    9210:	4648      	mov	r0, r9
    9212:	f003 0301 	and.w	r3, r3, #1
    9216:	431e      	orrs	r6, r3
    9218:	f8ca 6004 	str.w	r6, [sl, #4]
    921c:	f7ff f8d6 	bl	83cc <__malloc_unlock>
    9220:	4638      	mov	r0, r7
    9222:	e71b      	b.n	905c <_realloc_r+0xfc>
    9224:	68a3      	ldr	r3, [r4, #8]
    9226:	2a24      	cmp	r2, #36	; 0x24
    9228:	6083      	str	r3, [r0, #8]
    922a:	68e3      	ldr	r3, [r4, #12]
    922c:	60c3      	str	r3, [r0, #12]
    922e:	d02b      	beq.n	9288 <_realloc_r+0x328>
    9230:	f100 0310 	add.w	r3, r0, #16
    9234:	f104 0210 	add.w	r2, r4, #16
    9238:	e74a      	b.n	90d0 <_realloc_r+0x170>
    923a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    923e:	46a0      	mov	r8, r4
    9240:	f022 0203 	bic.w	r2, r2, #3
    9244:	4415      	add	r5, r2
    9246:	e6f9      	b.n	903c <_realloc_r+0xdc>
    9248:	4621      	mov	r1, r4
    924a:	4640      	mov	r0, r8
    924c:	4675      	mov	r5, lr
    924e:	4657      	mov	r7, sl
    9250:	f7ff fe20 	bl	8e94 <memmove>
    9254:	f8da 3004 	ldr.w	r3, [sl, #4]
    9258:	e6f0      	b.n	903c <_realloc_r+0xdc>
    925a:	4642      	mov	r2, r8
    925c:	e76e      	b.n	913c <_realloc_r+0x1dc>
    925e:	4621      	mov	r1, r4
    9260:	4640      	mov	r0, r8
    9262:	461d      	mov	r5, r3
    9264:	4657      	mov	r7, sl
    9266:	f7ff fe15 	bl	8e94 <memmove>
    926a:	f8da 3004 	ldr.w	r3, [sl, #4]
    926e:	e6e5      	b.n	903c <_realloc_r+0xdc>
    9270:	68a3      	ldr	r3, [r4, #8]
    9272:	2a24      	cmp	r2, #36	; 0x24
    9274:	f8ca 3010 	str.w	r3, [sl, #16]
    9278:	68e3      	ldr	r3, [r4, #12]
    927a:	f8ca 3014 	str.w	r3, [sl, #20]
    927e:	d018      	beq.n	92b2 <_realloc_r+0x352>
    9280:	3410      	adds	r4, #16
    9282:	f10a 0318 	add.w	r3, sl, #24
    9286:	e770      	b.n	916a <_realloc_r+0x20a>
    9288:	6922      	ldr	r2, [r4, #16]
    928a:	f100 0318 	add.w	r3, r0, #24
    928e:	6102      	str	r2, [r0, #16]
    9290:	6961      	ldr	r1, [r4, #20]
    9292:	f104 0218 	add.w	r2, r4, #24
    9296:	6141      	str	r1, [r0, #20]
    9298:	e71a      	b.n	90d0 <_realloc_r+0x170>
    929a:	68a1      	ldr	r1, [r4, #8]
    929c:	2a24      	cmp	r2, #36	; 0x24
    929e:	f8ca 1010 	str.w	r1, [sl, #16]
    92a2:	68e1      	ldr	r1, [r4, #12]
    92a4:	f8ca 1014 	str.w	r1, [sl, #20]
    92a8:	d00f      	beq.n	92ca <_realloc_r+0x36a>
    92aa:	3410      	adds	r4, #16
    92ac:	f10a 0218 	add.w	r2, sl, #24
    92b0:	e744      	b.n	913c <_realloc_r+0x1dc>
    92b2:	6922      	ldr	r2, [r4, #16]
    92b4:	f10a 0320 	add.w	r3, sl, #32
    92b8:	f8ca 2018 	str.w	r2, [sl, #24]
    92bc:	6962      	ldr	r2, [r4, #20]
    92be:	3418      	adds	r4, #24
    92c0:	f8ca 201c 	str.w	r2, [sl, #28]
    92c4:	e751      	b.n	916a <_realloc_r+0x20a>
    92c6:	463b      	mov	r3, r7
    92c8:	e791      	b.n	91ee <_realloc_r+0x28e>
    92ca:	6921      	ldr	r1, [r4, #16]
    92cc:	f10a 0220 	add.w	r2, sl, #32
    92d0:	f8ca 1018 	str.w	r1, [sl, #24]
    92d4:	6961      	ldr	r1, [r4, #20]
    92d6:	3418      	adds	r4, #24
    92d8:	f8ca 101c 	str.w	r1, [sl, #28]
    92dc:	e72e      	b.n	913c <_realloc_r+0x1dc>
    92de:	4621      	mov	r1, r4
    92e0:	4638      	mov	r0, r7
    92e2:	f8cd c004 	str.w	ip, [sp, #4]
    92e6:	f7ff fdd5 	bl	8e94 <memmove>
    92ea:	f8dd c004 	ldr.w	ip, [sp, #4]
    92ee:	e784      	b.n	91fa <_realloc_r+0x29a>
    92f0:	68a3      	ldr	r3, [r4, #8]
    92f2:	2a24      	cmp	r2, #36	; 0x24
    92f4:	f8ca 3010 	str.w	r3, [sl, #16]
    92f8:	68e3      	ldr	r3, [r4, #12]
    92fa:	f8ca 3014 	str.w	r3, [sl, #20]
    92fe:	d003      	beq.n	9308 <_realloc_r+0x3a8>
    9300:	3410      	adds	r4, #16
    9302:	f10a 0318 	add.w	r3, sl, #24
    9306:	e772      	b.n	91ee <_realloc_r+0x28e>
    9308:	6922      	ldr	r2, [r4, #16]
    930a:	f10a 0320 	add.w	r3, sl, #32
    930e:	f8ca 2018 	str.w	r2, [sl, #24]
    9312:	6962      	ldr	r2, [r4, #20]
    9314:	3418      	adds	r4, #24
    9316:	f8ca 201c 	str.w	r2, [sl, #28]
    931a:	e768      	b.n	91ee <_realloc_r+0x28e>
    931c:	20000534 	.word	0x20000534

00009320 <_sbrk>:
    9320:	4a09      	ldr	r2, [pc, #36]	; (9348 <_sbrk+0x28>)
    9322:	6813      	ldr	r3, [r2, #0]
    9324:	b163      	cbz	r3, 9340 <_sbrk+0x20>
    9326:	4418      	add	r0, r3
    9328:	4669      	mov	r1, sp
    932a:	4288      	cmp	r0, r1
    932c:	d802      	bhi.n	9334 <_sbrk+0x14>
    932e:	6010      	str	r0, [r2, #0]
    9330:	4618      	mov	r0, r3
    9332:	4770      	bx	lr
    9334:	4b05      	ldr	r3, [pc, #20]	; (934c <_sbrk+0x2c>)
    9336:	220c      	movs	r2, #12
    9338:	601a      	str	r2, [r3, #0]
    933a:	f04f 30ff 	mov.w	r0, #4294967295
    933e:	4770      	bx	lr
    9340:	4b03      	ldr	r3, [pc, #12]	; (9350 <_sbrk+0x30>)
    9342:	6013      	str	r3, [r2, #0]
    9344:	e7ef      	b.n	9326 <_sbrk+0x6>
    9346:	bf00      	nop
    9348:	20000fa4 	.word	0x20000fa4
    934c:	20001294 	.word	0x20001294
    9350:	20001298 	.word	0x20001298

00009354 <_exit>:
    9354:	e7fe      	b.n	9354 <_exit>
    9356:	bf00      	nop

00009358 <__aeabi_drsub>:
    9358:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    935c:	e002      	b.n	9364 <__adddf3>
    935e:	bf00      	nop

00009360 <__aeabi_dsub>:
    9360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00009364 <__adddf3>:
    9364:	b530      	push	{r4, r5, lr}
    9366:	ea4f 0441 	mov.w	r4, r1, lsl #1
    936a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    936e:	ea94 0f05 	teq	r4, r5
    9372:	bf08      	it	eq
    9374:	ea90 0f02 	teqeq	r0, r2
    9378:	bf1f      	itttt	ne
    937a:	ea54 0c00 	orrsne.w	ip, r4, r0
    937e:	ea55 0c02 	orrsne.w	ip, r5, r2
    9382:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    9386:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    938a:	f000 80e2 	beq.w	9552 <__adddf3+0x1ee>
    938e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    9392:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    9396:	bfb8      	it	lt
    9398:	426d      	neglt	r5, r5
    939a:	dd0c      	ble.n	93b6 <__adddf3+0x52>
    939c:	442c      	add	r4, r5
    939e:	ea80 0202 	eor.w	r2, r0, r2
    93a2:	ea81 0303 	eor.w	r3, r1, r3
    93a6:	ea82 0000 	eor.w	r0, r2, r0
    93aa:	ea83 0101 	eor.w	r1, r3, r1
    93ae:	ea80 0202 	eor.w	r2, r0, r2
    93b2:	ea81 0303 	eor.w	r3, r1, r3
    93b6:	2d36      	cmp	r5, #54	; 0x36
    93b8:	bf88      	it	hi
    93ba:	bd30      	pophi	{r4, r5, pc}
    93bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    93c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    93c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    93c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    93cc:	d002      	beq.n	93d4 <__adddf3+0x70>
    93ce:	4240      	negs	r0, r0
    93d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    93d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    93d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    93dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    93e0:	d002      	beq.n	93e8 <__adddf3+0x84>
    93e2:	4252      	negs	r2, r2
    93e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    93e8:	ea94 0f05 	teq	r4, r5
    93ec:	f000 80a7 	beq.w	953e <__adddf3+0x1da>
    93f0:	f1a4 0401 	sub.w	r4, r4, #1
    93f4:	f1d5 0e20 	rsbs	lr, r5, #32
    93f8:	db0d      	blt.n	9416 <__adddf3+0xb2>
    93fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    93fe:	fa22 f205 	lsr.w	r2, r2, r5
    9402:	1880      	adds	r0, r0, r2
    9404:	f141 0100 	adc.w	r1, r1, #0
    9408:	fa03 f20e 	lsl.w	r2, r3, lr
    940c:	1880      	adds	r0, r0, r2
    940e:	fa43 f305 	asr.w	r3, r3, r5
    9412:	4159      	adcs	r1, r3
    9414:	e00e      	b.n	9434 <__adddf3+0xd0>
    9416:	f1a5 0520 	sub.w	r5, r5, #32
    941a:	f10e 0e20 	add.w	lr, lr, #32
    941e:	2a01      	cmp	r2, #1
    9420:	fa03 fc0e 	lsl.w	ip, r3, lr
    9424:	bf28      	it	cs
    9426:	f04c 0c02 	orrcs.w	ip, ip, #2
    942a:	fa43 f305 	asr.w	r3, r3, r5
    942e:	18c0      	adds	r0, r0, r3
    9430:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9438:	d507      	bpl.n	944a <__adddf3+0xe6>
    943a:	f04f 0e00 	mov.w	lr, #0
    943e:	f1dc 0c00 	rsbs	ip, ip, #0
    9442:	eb7e 0000 	sbcs.w	r0, lr, r0
    9446:	eb6e 0101 	sbc.w	r1, lr, r1
    944a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    944e:	d31b      	bcc.n	9488 <__adddf3+0x124>
    9450:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    9454:	d30c      	bcc.n	9470 <__adddf3+0x10c>
    9456:	0849      	lsrs	r1, r1, #1
    9458:	ea5f 0030 	movs.w	r0, r0, rrx
    945c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    9460:	f104 0401 	add.w	r4, r4, #1
    9464:	ea4f 5244 	mov.w	r2, r4, lsl #21
    9468:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    946c:	f080 809a 	bcs.w	95a4 <__adddf3+0x240>
    9470:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9474:	bf08      	it	eq
    9476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    947a:	f150 0000 	adcs.w	r0, r0, #0
    947e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9482:	ea41 0105 	orr.w	r1, r1, r5
    9486:	bd30      	pop	{r4, r5, pc}
    9488:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    948c:	4140      	adcs	r0, r0
    948e:	eb41 0101 	adc.w	r1, r1, r1
    9492:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9496:	f1a4 0401 	sub.w	r4, r4, #1
    949a:	d1e9      	bne.n	9470 <__adddf3+0x10c>
    949c:	f091 0f00 	teq	r1, #0
    94a0:	bf04      	itt	eq
    94a2:	4601      	moveq	r1, r0
    94a4:	2000      	moveq	r0, #0
    94a6:	fab1 f381 	clz	r3, r1
    94aa:	bf08      	it	eq
    94ac:	3320      	addeq	r3, #32
    94ae:	f1a3 030b 	sub.w	r3, r3, #11
    94b2:	f1b3 0220 	subs.w	r2, r3, #32
    94b6:	da0c      	bge.n	94d2 <__adddf3+0x16e>
    94b8:	320c      	adds	r2, #12
    94ba:	dd08      	ble.n	94ce <__adddf3+0x16a>
    94bc:	f102 0c14 	add.w	ip, r2, #20
    94c0:	f1c2 020c 	rsb	r2, r2, #12
    94c4:	fa01 f00c 	lsl.w	r0, r1, ip
    94c8:	fa21 f102 	lsr.w	r1, r1, r2
    94cc:	e00c      	b.n	94e8 <__adddf3+0x184>
    94ce:	f102 0214 	add.w	r2, r2, #20
    94d2:	bfd8      	it	le
    94d4:	f1c2 0c20 	rsble	ip, r2, #32
    94d8:	fa01 f102 	lsl.w	r1, r1, r2
    94dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    94e0:	bfdc      	itt	le
    94e2:	ea41 010c 	orrle.w	r1, r1, ip
    94e6:	4090      	lslle	r0, r2
    94e8:	1ae4      	subs	r4, r4, r3
    94ea:	bfa2      	ittt	ge
    94ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    94f0:	4329      	orrge	r1, r5
    94f2:	bd30      	popge	{r4, r5, pc}
    94f4:	ea6f 0404 	mvn.w	r4, r4
    94f8:	3c1f      	subs	r4, #31
    94fa:	da1c      	bge.n	9536 <__adddf3+0x1d2>
    94fc:	340c      	adds	r4, #12
    94fe:	dc0e      	bgt.n	951e <__adddf3+0x1ba>
    9500:	f104 0414 	add.w	r4, r4, #20
    9504:	f1c4 0220 	rsb	r2, r4, #32
    9508:	fa20 f004 	lsr.w	r0, r0, r4
    950c:	fa01 f302 	lsl.w	r3, r1, r2
    9510:	ea40 0003 	orr.w	r0, r0, r3
    9514:	fa21 f304 	lsr.w	r3, r1, r4
    9518:	ea45 0103 	orr.w	r1, r5, r3
    951c:	bd30      	pop	{r4, r5, pc}
    951e:	f1c4 040c 	rsb	r4, r4, #12
    9522:	f1c4 0220 	rsb	r2, r4, #32
    9526:	fa20 f002 	lsr.w	r0, r0, r2
    952a:	fa01 f304 	lsl.w	r3, r1, r4
    952e:	ea40 0003 	orr.w	r0, r0, r3
    9532:	4629      	mov	r1, r5
    9534:	bd30      	pop	{r4, r5, pc}
    9536:	fa21 f004 	lsr.w	r0, r1, r4
    953a:	4629      	mov	r1, r5
    953c:	bd30      	pop	{r4, r5, pc}
    953e:	f094 0f00 	teq	r4, #0
    9542:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    9546:	bf06      	itte	eq
    9548:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    954c:	3401      	addeq	r4, #1
    954e:	3d01      	subne	r5, #1
    9550:	e74e      	b.n	93f0 <__adddf3+0x8c>
    9552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9556:	bf18      	it	ne
    9558:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    955c:	d029      	beq.n	95b2 <__adddf3+0x24e>
    955e:	ea94 0f05 	teq	r4, r5
    9562:	bf08      	it	eq
    9564:	ea90 0f02 	teqeq	r0, r2
    9568:	d005      	beq.n	9576 <__adddf3+0x212>
    956a:	ea54 0c00 	orrs.w	ip, r4, r0
    956e:	bf04      	itt	eq
    9570:	4619      	moveq	r1, r3
    9572:	4610      	moveq	r0, r2
    9574:	bd30      	pop	{r4, r5, pc}
    9576:	ea91 0f03 	teq	r1, r3
    957a:	bf1e      	ittt	ne
    957c:	2100      	movne	r1, #0
    957e:	2000      	movne	r0, #0
    9580:	bd30      	popne	{r4, r5, pc}
    9582:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    9586:	d105      	bne.n	9594 <__adddf3+0x230>
    9588:	0040      	lsls	r0, r0, #1
    958a:	4149      	adcs	r1, r1
    958c:	bf28      	it	cs
    958e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9592:	bd30      	pop	{r4, r5, pc}
    9594:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    9598:	bf3c      	itt	cc
    959a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    959e:	bd30      	popcc	{r4, r5, pc}
    95a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    95a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    95a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    95ac:	f04f 0000 	mov.w	r0, #0
    95b0:	bd30      	pop	{r4, r5, pc}
    95b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    95b6:	bf1a      	itte	ne
    95b8:	4619      	movne	r1, r3
    95ba:	4610      	movne	r0, r2
    95bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    95c0:	bf1c      	itt	ne
    95c2:	460b      	movne	r3, r1
    95c4:	4602      	movne	r2, r0
    95c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    95ca:	bf06      	itte	eq
    95cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    95d0:	ea91 0f03 	teqeq	r1, r3
    95d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    95d8:	bd30      	pop	{r4, r5, pc}
    95da:	bf00      	nop

000095dc <__aeabi_ui2d>:
    95dc:	f090 0f00 	teq	r0, #0
    95e0:	bf04      	itt	eq
    95e2:	2100      	moveq	r1, #0
    95e4:	4770      	bxeq	lr
    95e6:	b530      	push	{r4, r5, lr}
    95e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    95ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    95f0:	f04f 0500 	mov.w	r5, #0
    95f4:	f04f 0100 	mov.w	r1, #0
    95f8:	e750      	b.n	949c <__adddf3+0x138>
    95fa:	bf00      	nop

000095fc <__aeabi_i2d>:
    95fc:	f090 0f00 	teq	r0, #0
    9600:	bf04      	itt	eq
    9602:	2100      	moveq	r1, #0
    9604:	4770      	bxeq	lr
    9606:	b530      	push	{r4, r5, lr}
    9608:	f44f 6480 	mov.w	r4, #1024	; 0x400
    960c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9610:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9614:	bf48      	it	mi
    9616:	4240      	negmi	r0, r0
    9618:	f04f 0100 	mov.w	r1, #0
    961c:	e73e      	b.n	949c <__adddf3+0x138>
    961e:	bf00      	nop

00009620 <__aeabi_f2d>:
    9620:	0042      	lsls	r2, r0, #1
    9622:	ea4f 01e2 	mov.w	r1, r2, asr #3
    9626:	ea4f 0131 	mov.w	r1, r1, rrx
    962a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    962e:	bf1f      	itttt	ne
    9630:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9638:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    963c:	4770      	bxne	lr
    963e:	f092 0f00 	teq	r2, #0
    9642:	bf14      	ite	ne
    9644:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9648:	4770      	bxeq	lr
    964a:	b530      	push	{r4, r5, lr}
    964c:	f44f 7460 	mov.w	r4, #896	; 0x380
    9650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9658:	e720      	b.n	949c <__adddf3+0x138>
    965a:	bf00      	nop

0000965c <__aeabi_ul2d>:
    965c:	ea50 0201 	orrs.w	r2, r0, r1
    9660:	bf08      	it	eq
    9662:	4770      	bxeq	lr
    9664:	b530      	push	{r4, r5, lr}
    9666:	f04f 0500 	mov.w	r5, #0
    966a:	e00a      	b.n	9682 <__aeabi_l2d+0x16>

0000966c <__aeabi_l2d>:
    966c:	ea50 0201 	orrs.w	r2, r0, r1
    9670:	bf08      	it	eq
    9672:	4770      	bxeq	lr
    9674:	b530      	push	{r4, r5, lr}
    9676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    967a:	d502      	bpl.n	9682 <__aeabi_l2d+0x16>
    967c:	4240      	negs	r0, r0
    967e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9682:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9686:	f104 0432 	add.w	r4, r4, #50	; 0x32
    968a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    968e:	f43f aedc 	beq.w	944a <__adddf3+0xe6>
    9692:	f04f 0203 	mov.w	r2, #3
    9696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    969a:	bf18      	it	ne
    969c:	3203      	addne	r2, #3
    969e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    96a2:	bf18      	it	ne
    96a4:	3203      	addne	r2, #3
    96a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    96aa:	f1c2 0320 	rsb	r3, r2, #32
    96ae:	fa00 fc03 	lsl.w	ip, r0, r3
    96b2:	fa20 f002 	lsr.w	r0, r0, r2
    96b6:	fa01 fe03 	lsl.w	lr, r1, r3
    96ba:	ea40 000e 	orr.w	r0, r0, lr
    96be:	fa21 f102 	lsr.w	r1, r1, r2
    96c2:	4414      	add	r4, r2
    96c4:	e6c1      	b.n	944a <__adddf3+0xe6>
    96c6:	bf00      	nop

000096c8 <__aeabi_dmul>:
    96c8:	b570      	push	{r4, r5, r6, lr}
    96ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    96ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    96d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    96d6:	bf1d      	ittte	ne
    96d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    96dc:	ea94 0f0c 	teqne	r4, ip
    96e0:	ea95 0f0c 	teqne	r5, ip
    96e4:	f000 f8de 	bleq	98a4 <__aeabi_dmul+0x1dc>
    96e8:	442c      	add	r4, r5
    96ea:	ea81 0603 	eor.w	r6, r1, r3
    96ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    96f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    96f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    96fa:	bf18      	it	ne
    96fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    9700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9708:	d038      	beq.n	977c <__aeabi_dmul+0xb4>
    970a:	fba0 ce02 	umull	ip, lr, r0, r2
    970e:	f04f 0500 	mov.w	r5, #0
    9712:	fbe1 e502 	umlal	lr, r5, r1, r2
    9716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    971a:	fbe0 e503 	umlal	lr, r5, r0, r3
    971e:	f04f 0600 	mov.w	r6, #0
    9722:	fbe1 5603 	umlal	r5, r6, r1, r3
    9726:	f09c 0f00 	teq	ip, #0
    972a:	bf18      	it	ne
    972c:	f04e 0e01 	orrne.w	lr, lr, #1
    9730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    9734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    973c:	d204      	bcs.n	9748 <__aeabi_dmul+0x80>
    973e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    9742:	416d      	adcs	r5, r5
    9744:	eb46 0606 	adc.w	r6, r6, r6
    9748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    974c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    9750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    9754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    9758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    975c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9760:	bf88      	it	hi
    9762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9766:	d81e      	bhi.n	97a6 <__aeabi_dmul+0xde>
    9768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    976c:	bf08      	it	eq
    976e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    9772:	f150 0000 	adcs.w	r0, r0, #0
    9776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    977a:	bd70      	pop	{r4, r5, r6, pc}
    977c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9780:	ea46 0101 	orr.w	r1, r6, r1
    9784:	ea40 0002 	orr.w	r0, r0, r2
    9788:	ea81 0103 	eor.w	r1, r1, r3
    978c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    9790:	bfc2      	ittt	gt
    9792:	ebd4 050c 	rsbsgt	r5, r4, ip
    9796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    979a:	bd70      	popgt	{r4, r5, r6, pc}
    979c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    97a0:	f04f 0e00 	mov.w	lr, #0
    97a4:	3c01      	subs	r4, #1
    97a6:	f300 80ab 	bgt.w	9900 <__aeabi_dmul+0x238>
    97aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    97ae:	bfde      	ittt	le
    97b0:	2000      	movle	r0, #0
    97b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    97b6:	bd70      	pople	{r4, r5, r6, pc}
    97b8:	f1c4 0400 	rsb	r4, r4, #0
    97bc:	3c20      	subs	r4, #32
    97be:	da35      	bge.n	982c <__aeabi_dmul+0x164>
    97c0:	340c      	adds	r4, #12
    97c2:	dc1b      	bgt.n	97fc <__aeabi_dmul+0x134>
    97c4:	f104 0414 	add.w	r4, r4, #20
    97c8:	f1c4 0520 	rsb	r5, r4, #32
    97cc:	fa00 f305 	lsl.w	r3, r0, r5
    97d0:	fa20 f004 	lsr.w	r0, r0, r4
    97d4:	fa01 f205 	lsl.w	r2, r1, r5
    97d8:	ea40 0002 	orr.w	r0, r0, r2
    97dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    97e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    97e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    97e8:	fa21 f604 	lsr.w	r6, r1, r4
    97ec:	eb42 0106 	adc.w	r1, r2, r6
    97f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    97f4:	bf08      	it	eq
    97f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    97fa:	bd70      	pop	{r4, r5, r6, pc}
    97fc:	f1c4 040c 	rsb	r4, r4, #12
    9800:	f1c4 0520 	rsb	r5, r4, #32
    9804:	fa00 f304 	lsl.w	r3, r0, r4
    9808:	fa20 f005 	lsr.w	r0, r0, r5
    980c:	fa01 f204 	lsl.w	r2, r1, r4
    9810:	ea40 0002 	orr.w	r0, r0, r2
    9814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    981c:	f141 0100 	adc.w	r1, r1, #0
    9820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9824:	bf08      	it	eq
    9826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    982a:	bd70      	pop	{r4, r5, r6, pc}
    982c:	f1c4 0520 	rsb	r5, r4, #32
    9830:	fa00 f205 	lsl.w	r2, r0, r5
    9834:	ea4e 0e02 	orr.w	lr, lr, r2
    9838:	fa20 f304 	lsr.w	r3, r0, r4
    983c:	fa01 f205 	lsl.w	r2, r1, r5
    9840:	ea43 0302 	orr.w	r3, r3, r2
    9844:	fa21 f004 	lsr.w	r0, r1, r4
    9848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    984c:	fa21 f204 	lsr.w	r2, r1, r4
    9850:	ea20 0002 	bic.w	r0, r0, r2
    9854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    9858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    985c:	bf08      	it	eq
    985e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9862:	bd70      	pop	{r4, r5, r6, pc}
    9864:	f094 0f00 	teq	r4, #0
    9868:	d10f      	bne.n	988a <__aeabi_dmul+0x1c2>
    986a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    986e:	0040      	lsls	r0, r0, #1
    9870:	eb41 0101 	adc.w	r1, r1, r1
    9874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9878:	bf08      	it	eq
    987a:	3c01      	subeq	r4, #1
    987c:	d0f7      	beq.n	986e <__aeabi_dmul+0x1a6>
    987e:	ea41 0106 	orr.w	r1, r1, r6
    9882:	f095 0f00 	teq	r5, #0
    9886:	bf18      	it	ne
    9888:	4770      	bxne	lr
    988a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    988e:	0052      	lsls	r2, r2, #1
    9890:	eb43 0303 	adc.w	r3, r3, r3
    9894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    9898:	bf08      	it	eq
    989a:	3d01      	subeq	r5, #1
    989c:	d0f7      	beq.n	988e <__aeabi_dmul+0x1c6>
    989e:	ea43 0306 	orr.w	r3, r3, r6
    98a2:	4770      	bx	lr
    98a4:	ea94 0f0c 	teq	r4, ip
    98a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    98ac:	bf18      	it	ne
    98ae:	ea95 0f0c 	teqne	r5, ip
    98b2:	d00c      	beq.n	98ce <__aeabi_dmul+0x206>
    98b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    98b8:	bf18      	it	ne
    98ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    98be:	d1d1      	bne.n	9864 <__aeabi_dmul+0x19c>
    98c0:	ea81 0103 	eor.w	r1, r1, r3
    98c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    98c8:	f04f 0000 	mov.w	r0, #0
    98cc:	bd70      	pop	{r4, r5, r6, pc}
    98ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    98d2:	bf06      	itte	eq
    98d4:	4610      	moveq	r0, r2
    98d6:	4619      	moveq	r1, r3
    98d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    98dc:	d019      	beq.n	9912 <__aeabi_dmul+0x24a>
    98de:	ea94 0f0c 	teq	r4, ip
    98e2:	d102      	bne.n	98ea <__aeabi_dmul+0x222>
    98e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    98e8:	d113      	bne.n	9912 <__aeabi_dmul+0x24a>
    98ea:	ea95 0f0c 	teq	r5, ip
    98ee:	d105      	bne.n	98fc <__aeabi_dmul+0x234>
    98f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    98f4:	bf1c      	itt	ne
    98f6:	4610      	movne	r0, r2
    98f8:	4619      	movne	r1, r3
    98fa:	d10a      	bne.n	9912 <__aeabi_dmul+0x24a>
    98fc:	ea81 0103 	eor.w	r1, r1, r3
    9900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    9904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    990c:	f04f 0000 	mov.w	r0, #0
    9910:	bd70      	pop	{r4, r5, r6, pc}
    9912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    9916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    991a:	bd70      	pop	{r4, r5, r6, pc}

0000991c <__aeabi_ddiv>:
    991c:	b570      	push	{r4, r5, r6, lr}
    991e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    992a:	bf1d      	ittte	ne
    992c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9930:	ea94 0f0c 	teqne	r4, ip
    9934:	ea95 0f0c 	teqne	r5, ip
    9938:	f000 f8a7 	bleq	9a8a <__aeabi_ddiv+0x16e>
    993c:	eba4 0405 	sub.w	r4, r4, r5
    9940:	ea81 0e03 	eor.w	lr, r1, r3
    9944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    9948:	ea4f 3101 	mov.w	r1, r1, lsl #12
    994c:	f000 8088 	beq.w	9a60 <__aeabi_ddiv+0x144>
    9950:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    9958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    995c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    9960:	ea4f 2202 	mov.w	r2, r2, lsl #8
    9964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    9968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    996c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    9970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    9974:	429d      	cmp	r5, r3
    9976:	bf08      	it	eq
    9978:	4296      	cmpeq	r6, r2
    997a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    997e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    9982:	d202      	bcs.n	998a <__aeabi_ddiv+0x6e>
    9984:	085b      	lsrs	r3, r3, #1
    9986:	ea4f 0232 	mov.w	r2, r2, rrx
    998a:	1ab6      	subs	r6, r6, r2
    998c:	eb65 0503 	sbc.w	r5, r5, r3
    9990:	085b      	lsrs	r3, r3, #1
    9992:	ea4f 0232 	mov.w	r2, r2, rrx
    9996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    999a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    999e:	ebb6 0e02 	subs.w	lr, r6, r2
    99a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    99a6:	bf22      	ittt	cs
    99a8:	1ab6      	subcs	r6, r6, r2
    99aa:	4675      	movcs	r5, lr
    99ac:	ea40 000c 	orrcs.w	r0, r0, ip
    99b0:	085b      	lsrs	r3, r3, #1
    99b2:	ea4f 0232 	mov.w	r2, r2, rrx
    99b6:	ebb6 0e02 	subs.w	lr, r6, r2
    99ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    99be:	bf22      	ittt	cs
    99c0:	1ab6      	subcs	r6, r6, r2
    99c2:	4675      	movcs	r5, lr
    99c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    99c8:	085b      	lsrs	r3, r3, #1
    99ca:	ea4f 0232 	mov.w	r2, r2, rrx
    99ce:	ebb6 0e02 	subs.w	lr, r6, r2
    99d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    99d6:	bf22      	ittt	cs
    99d8:	1ab6      	subcs	r6, r6, r2
    99da:	4675      	movcs	r5, lr
    99dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    99e0:	085b      	lsrs	r3, r3, #1
    99e2:	ea4f 0232 	mov.w	r2, r2, rrx
    99e6:	ebb6 0e02 	subs.w	lr, r6, r2
    99ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    99ee:	bf22      	ittt	cs
    99f0:	1ab6      	subcs	r6, r6, r2
    99f2:	4675      	movcs	r5, lr
    99f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    99f8:	ea55 0e06 	orrs.w	lr, r5, r6
    99fc:	d018      	beq.n	9a30 <__aeabi_ddiv+0x114>
    99fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
    9a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    9a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
    9a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    9a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    9a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    9a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    9a1a:	d1c0      	bne.n	999e <__aeabi_ddiv+0x82>
    9a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9a20:	d10b      	bne.n	9a3a <__aeabi_ddiv+0x11e>
    9a22:	ea41 0100 	orr.w	r1, r1, r0
    9a26:	f04f 0000 	mov.w	r0, #0
    9a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    9a2e:	e7b6      	b.n	999e <__aeabi_ddiv+0x82>
    9a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9a34:	bf04      	itt	eq
    9a36:	4301      	orreq	r1, r0
    9a38:	2000      	moveq	r0, #0
    9a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9a3e:	bf88      	it	hi
    9a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9a44:	f63f aeaf 	bhi.w	97a6 <__aeabi_dmul+0xde>
    9a48:	ebb5 0c03 	subs.w	ip, r5, r3
    9a4c:	bf04      	itt	eq
    9a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
    9a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    9a56:	f150 0000 	adcs.w	r0, r0, #0
    9a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9a5e:	bd70      	pop	{r4, r5, r6, pc}
    9a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    9a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    9a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    9a6c:	bfc2      	ittt	gt
    9a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
    9a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    9a76:	bd70      	popgt	{r4, r5, r6, pc}
    9a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9a7c:	f04f 0e00 	mov.w	lr, #0
    9a80:	3c01      	subs	r4, #1
    9a82:	e690      	b.n	97a6 <__aeabi_dmul+0xde>
    9a84:	ea45 0e06 	orr.w	lr, r5, r6
    9a88:	e68d      	b.n	97a6 <__aeabi_dmul+0xde>
    9a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    9a8e:	ea94 0f0c 	teq	r4, ip
    9a92:	bf08      	it	eq
    9a94:	ea95 0f0c 	teqeq	r5, ip
    9a98:	f43f af3b 	beq.w	9912 <__aeabi_dmul+0x24a>
    9a9c:	ea94 0f0c 	teq	r4, ip
    9aa0:	d10a      	bne.n	9ab8 <__aeabi_ddiv+0x19c>
    9aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9aa6:	f47f af34 	bne.w	9912 <__aeabi_dmul+0x24a>
    9aaa:	ea95 0f0c 	teq	r5, ip
    9aae:	f47f af25 	bne.w	98fc <__aeabi_dmul+0x234>
    9ab2:	4610      	mov	r0, r2
    9ab4:	4619      	mov	r1, r3
    9ab6:	e72c      	b.n	9912 <__aeabi_dmul+0x24a>
    9ab8:	ea95 0f0c 	teq	r5, ip
    9abc:	d106      	bne.n	9acc <__aeabi_ddiv+0x1b0>
    9abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    9ac2:	f43f aefd 	beq.w	98c0 <__aeabi_dmul+0x1f8>
    9ac6:	4610      	mov	r0, r2
    9ac8:	4619      	mov	r1, r3
    9aca:	e722      	b.n	9912 <__aeabi_dmul+0x24a>
    9acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    9ad0:	bf18      	it	ne
    9ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    9ad6:	f47f aec5 	bne.w	9864 <__aeabi_dmul+0x19c>
    9ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    9ade:	f47f af0d 	bne.w	98fc <__aeabi_dmul+0x234>
    9ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    9ae6:	f47f aeeb 	bne.w	98c0 <__aeabi_dmul+0x1f8>
    9aea:	e712      	b.n	9912 <__aeabi_dmul+0x24a>

00009aec <__gedf2>:
    9aec:	f04f 3cff 	mov.w	ip, #4294967295
    9af0:	e006      	b.n	9b00 <__cmpdf2+0x4>
    9af2:	bf00      	nop

00009af4 <__ledf2>:
    9af4:	f04f 0c01 	mov.w	ip, #1
    9af8:	e002      	b.n	9b00 <__cmpdf2+0x4>
    9afa:	bf00      	nop

00009afc <__cmpdf2>:
    9afc:	f04f 0c01 	mov.w	ip, #1
    9b00:	f84d cd04 	str.w	ip, [sp, #-4]!
    9b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9b10:	bf18      	it	ne
    9b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    9b16:	d01b      	beq.n	9b50 <__cmpdf2+0x54>
    9b18:	b001      	add	sp, #4
    9b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    9b1e:	bf0c      	ite	eq
    9b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    9b24:	ea91 0f03 	teqne	r1, r3
    9b28:	bf02      	ittt	eq
    9b2a:	ea90 0f02 	teqeq	r0, r2
    9b2e:	2000      	moveq	r0, #0
    9b30:	4770      	bxeq	lr
    9b32:	f110 0f00 	cmn.w	r0, #0
    9b36:	ea91 0f03 	teq	r1, r3
    9b3a:	bf58      	it	pl
    9b3c:	4299      	cmppl	r1, r3
    9b3e:	bf08      	it	eq
    9b40:	4290      	cmpeq	r0, r2
    9b42:	bf2c      	ite	cs
    9b44:	17d8      	asrcs	r0, r3, #31
    9b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    9b4a:	f040 0001 	orr.w	r0, r0, #1
    9b4e:	4770      	bx	lr
    9b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9b58:	d102      	bne.n	9b60 <__cmpdf2+0x64>
    9b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9b5e:	d107      	bne.n	9b70 <__cmpdf2+0x74>
    9b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9b68:	d1d6      	bne.n	9b18 <__cmpdf2+0x1c>
    9b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9b6e:	d0d3      	beq.n	9b18 <__cmpdf2+0x1c>
    9b70:	f85d 0b04 	ldr.w	r0, [sp], #4
    9b74:	4770      	bx	lr
    9b76:	bf00      	nop

00009b78 <__aeabi_cdrcmple>:
    9b78:	4684      	mov	ip, r0
    9b7a:	4610      	mov	r0, r2
    9b7c:	4662      	mov	r2, ip
    9b7e:	468c      	mov	ip, r1
    9b80:	4619      	mov	r1, r3
    9b82:	4663      	mov	r3, ip
    9b84:	e000      	b.n	9b88 <__aeabi_cdcmpeq>
    9b86:	bf00      	nop

00009b88 <__aeabi_cdcmpeq>:
    9b88:	b501      	push	{r0, lr}
    9b8a:	f7ff ffb7 	bl	9afc <__cmpdf2>
    9b8e:	2800      	cmp	r0, #0
    9b90:	bf48      	it	mi
    9b92:	f110 0f00 	cmnmi.w	r0, #0
    9b96:	bd01      	pop	{r0, pc}

00009b98 <__aeabi_dcmpeq>:
    9b98:	f84d ed08 	str.w	lr, [sp, #-8]!
    9b9c:	f7ff fff4 	bl	9b88 <__aeabi_cdcmpeq>
    9ba0:	bf0c      	ite	eq
    9ba2:	2001      	moveq	r0, #1
    9ba4:	2000      	movne	r0, #0
    9ba6:	f85d fb08 	ldr.w	pc, [sp], #8
    9baa:	bf00      	nop

00009bac <__aeabi_dcmplt>:
    9bac:	f84d ed08 	str.w	lr, [sp, #-8]!
    9bb0:	f7ff ffea 	bl	9b88 <__aeabi_cdcmpeq>
    9bb4:	bf34      	ite	cc
    9bb6:	2001      	movcc	r0, #1
    9bb8:	2000      	movcs	r0, #0
    9bba:	f85d fb08 	ldr.w	pc, [sp], #8
    9bbe:	bf00      	nop

00009bc0 <__aeabi_dcmple>:
    9bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
    9bc4:	f7ff ffe0 	bl	9b88 <__aeabi_cdcmpeq>
    9bc8:	bf94      	ite	ls
    9bca:	2001      	movls	r0, #1
    9bcc:	2000      	movhi	r0, #0
    9bce:	f85d fb08 	ldr.w	pc, [sp], #8
    9bd2:	bf00      	nop

00009bd4 <__aeabi_dcmpge>:
    9bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
    9bd8:	f7ff ffce 	bl	9b78 <__aeabi_cdrcmple>
    9bdc:	bf94      	ite	ls
    9bde:	2001      	movls	r0, #1
    9be0:	2000      	movhi	r0, #0
    9be2:	f85d fb08 	ldr.w	pc, [sp], #8
    9be6:	bf00      	nop

00009be8 <__aeabi_dcmpgt>:
    9be8:	f84d ed08 	str.w	lr, [sp, #-8]!
    9bec:	f7ff ffc4 	bl	9b78 <__aeabi_cdrcmple>
    9bf0:	bf34      	ite	cc
    9bf2:	2001      	movcc	r0, #1
    9bf4:	2000      	movcs	r0, #0
    9bf6:	f85d fb08 	ldr.w	pc, [sp], #8
    9bfa:	bf00      	nop

00009bfc <__aeabi_d2iz>:
    9bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9c04:	d215      	bcs.n	9c32 <__aeabi_d2iz+0x36>
    9c06:	d511      	bpl.n	9c2c <__aeabi_d2iz+0x30>
    9c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9c10:	d912      	bls.n	9c38 <__aeabi_d2iz+0x3c>
    9c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    9c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9c22:	fa23 f002 	lsr.w	r0, r3, r2
    9c26:	bf18      	it	ne
    9c28:	4240      	negne	r0, r0
    9c2a:	4770      	bx	lr
    9c2c:	f04f 0000 	mov.w	r0, #0
    9c30:	4770      	bx	lr
    9c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    9c36:	d105      	bne.n	9c44 <__aeabi_d2iz+0x48>
    9c38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    9c3c:	bf08      	it	eq
    9c3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9c42:	4770      	bx	lr
    9c44:	f04f 0000 	mov.w	r0, #0
    9c48:	4770      	bx	lr
    9c4a:	bf00      	nop

00009c4c <__aeabi_uldivmod>:
    9c4c:	b94b      	cbnz	r3, 9c62 <__aeabi_uldivmod+0x16>
    9c4e:	b942      	cbnz	r2, 9c62 <__aeabi_uldivmod+0x16>
    9c50:	2900      	cmp	r1, #0
    9c52:	bf08      	it	eq
    9c54:	2800      	cmpeq	r0, #0
    9c56:	d002      	beq.n	9c5e <__aeabi_uldivmod+0x12>
    9c58:	f04f 31ff 	mov.w	r1, #4294967295
    9c5c:	4608      	mov	r0, r1
    9c5e:	f000 b83b 	b.w	9cd8 <__aeabi_idiv0>
    9c62:	b082      	sub	sp, #8
    9c64:	46ec      	mov	ip, sp
    9c66:	e92d 5000 	stmdb	sp!, {ip, lr}
    9c6a:	f000 f81d 	bl	9ca8 <__gnu_uldivmod_helper>
    9c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
    9c72:	b002      	add	sp, #8
    9c74:	bc0c      	pop	{r2, r3}
    9c76:	4770      	bx	lr

00009c78 <__gnu_ldivmod_helper>:
    9c78:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    9c7c:	9e08      	ldr	r6, [sp, #32]
    9c7e:	4614      	mov	r4, r2
    9c80:	461d      	mov	r5, r3
    9c82:	4680      	mov	r8, r0
    9c84:	4689      	mov	r9, r1
    9c86:	f000 f829 	bl	9cdc <__divdi3>
    9c8a:	fb04 f301 	mul.w	r3, r4, r1
    9c8e:	fba4 ab00 	umull	sl, fp, r4, r0
    9c92:	fb00 3205 	mla	r2, r0, r5, r3
    9c96:	4493      	add	fp, r2
    9c98:	ebb8 080a 	subs.w	r8, r8, sl
    9c9c:	eb69 090b 	sbc.w	r9, r9, fp
    9ca0:	e9c6 8900 	strd	r8, r9, [r6]
    9ca4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00009ca8 <__gnu_uldivmod_helper>:
    9ca8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    9cac:	9e08      	ldr	r6, [sp, #32]
    9cae:	4614      	mov	r4, r2
    9cb0:	461d      	mov	r5, r3
    9cb2:	4680      	mov	r8, r0
    9cb4:	4689      	mov	r9, r1
    9cb6:	f000 f961 	bl	9f7c <__udivdi3>
    9cba:	fb00 f505 	mul.w	r5, r0, r5
    9cbe:	fba0 ab04 	umull	sl, fp, r0, r4
    9cc2:	fb04 5401 	mla	r4, r4, r1, r5
    9cc6:	44a3      	add	fp, r4
    9cc8:	ebb8 080a 	subs.w	r8, r8, sl
    9ccc:	eb69 090b 	sbc.w	r9, r9, fp
    9cd0:	e9c6 8900 	strd	r8, r9, [r6]
    9cd4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00009cd8 <__aeabi_idiv0>:
    9cd8:	4770      	bx	lr
    9cda:	bf00      	nop

00009cdc <__divdi3>:
    9cdc:	2900      	cmp	r1, #0
    9cde:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    9ce2:	f2c0 80a1 	blt.w	9e28 <__divdi3+0x14c>
    9ce6:	2400      	movs	r4, #0
    9ce8:	2b00      	cmp	r3, #0
    9cea:	f2c0 8098 	blt.w	9e1e <__divdi3+0x142>
    9cee:	4615      	mov	r5, r2
    9cf0:	4606      	mov	r6, r0
    9cf2:	460f      	mov	r7, r1
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d13f      	bne.n	9d78 <__divdi3+0x9c>
    9cf8:	428a      	cmp	r2, r1
    9cfa:	d958      	bls.n	9dae <__divdi3+0xd2>
    9cfc:	fab2 f382 	clz	r3, r2
    9d00:	b14b      	cbz	r3, 9d16 <__divdi3+0x3a>
    9d02:	f1c3 0220 	rsb	r2, r3, #32
    9d06:	fa01 f703 	lsl.w	r7, r1, r3
    9d0a:	fa20 f202 	lsr.w	r2, r0, r2
    9d0e:	409d      	lsls	r5, r3
    9d10:	fa00 f603 	lsl.w	r6, r0, r3
    9d14:	4317      	orrs	r7, r2
    9d16:	0c29      	lsrs	r1, r5, #16
    9d18:	fbb7 f2f1 	udiv	r2, r7, r1
    9d1c:	fb01 7712 	mls	r7, r1, r2, r7
    9d20:	b2a8      	uxth	r0, r5
    9d22:	fb00 f302 	mul.w	r3, r0, r2
    9d26:	ea4f 4c16 	mov.w	ip, r6, lsr #16
    9d2a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
    9d2e:	42bb      	cmp	r3, r7
    9d30:	d909      	bls.n	9d46 <__divdi3+0x6a>
    9d32:	197f      	adds	r7, r7, r5
    9d34:	f102 3cff 	add.w	ip, r2, #4294967295
    9d38:	f080 8105 	bcs.w	9f46 <__divdi3+0x26a>
    9d3c:	42bb      	cmp	r3, r7
    9d3e:	f240 8102 	bls.w	9f46 <__divdi3+0x26a>
    9d42:	3a02      	subs	r2, #2
    9d44:	442f      	add	r7, r5
    9d46:	1aff      	subs	r7, r7, r3
    9d48:	fbb7 f3f1 	udiv	r3, r7, r1
    9d4c:	fb01 7113 	mls	r1, r1, r3, r7
    9d50:	fb00 f003 	mul.w	r0, r0, r3
    9d54:	b2b6      	uxth	r6, r6
    9d56:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    9d5a:	4288      	cmp	r0, r1
    9d5c:	d908      	bls.n	9d70 <__divdi3+0x94>
    9d5e:	1949      	adds	r1, r1, r5
    9d60:	f103 37ff 	add.w	r7, r3, #4294967295
    9d64:	f080 80f1 	bcs.w	9f4a <__divdi3+0x26e>
    9d68:	4288      	cmp	r0, r1
    9d6a:	f240 80ee 	bls.w	9f4a <__divdi3+0x26e>
    9d6e:	3b02      	subs	r3, #2
    9d70:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    9d74:	2300      	movs	r3, #0
    9d76:	e003      	b.n	9d80 <__divdi3+0xa4>
    9d78:	428b      	cmp	r3, r1
    9d7a:	d90a      	bls.n	9d92 <__divdi3+0xb6>
    9d7c:	2300      	movs	r3, #0
    9d7e:	461a      	mov	r2, r3
    9d80:	4610      	mov	r0, r2
    9d82:	4619      	mov	r1, r3
    9d84:	b114      	cbz	r4, 9d8c <__divdi3+0xb0>
    9d86:	4240      	negs	r0, r0
    9d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9d8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    9d90:	4770      	bx	lr
    9d92:	fab3 f883 	clz	r8, r3
    9d96:	f1b8 0f00 	cmp.w	r8, #0
    9d9a:	f040 8088 	bne.w	9eae <__divdi3+0x1d2>
    9d9e:	428b      	cmp	r3, r1
    9da0:	d302      	bcc.n	9da8 <__divdi3+0xcc>
    9da2:	4282      	cmp	r2, r0
    9da4:	f200 80e2 	bhi.w	9f6c <__divdi3+0x290>
    9da8:	2300      	movs	r3, #0
    9daa:	2201      	movs	r2, #1
    9dac:	e7e8      	b.n	9d80 <__divdi3+0xa4>
    9dae:	b912      	cbnz	r2, 9db6 <__divdi3+0xda>
    9db0:	2301      	movs	r3, #1
    9db2:	fbb3 f5f2 	udiv	r5, r3, r2
    9db6:	fab5 f285 	clz	r2, r5
    9dba:	2a00      	cmp	r2, #0
    9dbc:	d13a      	bne.n	9e34 <__divdi3+0x158>
    9dbe:	1b7f      	subs	r7, r7, r5
    9dc0:	0c28      	lsrs	r0, r5, #16
    9dc2:	fa1f fc85 	uxth.w	ip, r5
    9dc6:	2301      	movs	r3, #1
    9dc8:	fbb7 f1f0 	udiv	r1, r7, r0
    9dcc:	fb00 7711 	mls	r7, r0, r1, r7
    9dd0:	fb0c f201 	mul.w	r2, ip, r1
    9dd4:	ea4f 4816 	mov.w	r8, r6, lsr #16
    9dd8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
    9ddc:	42ba      	cmp	r2, r7
    9dde:	d907      	bls.n	9df0 <__divdi3+0x114>
    9de0:	197f      	adds	r7, r7, r5
    9de2:	f101 38ff 	add.w	r8, r1, #4294967295
    9de6:	d202      	bcs.n	9dee <__divdi3+0x112>
    9de8:	42ba      	cmp	r2, r7
    9dea:	f200 80c4 	bhi.w	9f76 <__divdi3+0x29a>
    9dee:	4641      	mov	r1, r8
    9df0:	1abf      	subs	r7, r7, r2
    9df2:	fbb7 f2f0 	udiv	r2, r7, r0
    9df6:	fb00 7012 	mls	r0, r0, r2, r7
    9dfa:	fb0c fc02 	mul.w	ip, ip, r2
    9dfe:	b2b6      	uxth	r6, r6
    9e00:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    9e04:	4584      	cmp	ip, r0
    9e06:	d907      	bls.n	9e18 <__divdi3+0x13c>
    9e08:	1940      	adds	r0, r0, r5
    9e0a:	f102 37ff 	add.w	r7, r2, #4294967295
    9e0e:	d202      	bcs.n	9e16 <__divdi3+0x13a>
    9e10:	4584      	cmp	ip, r0
    9e12:	f200 80ae 	bhi.w	9f72 <__divdi3+0x296>
    9e16:	463a      	mov	r2, r7
    9e18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    9e1c:	e7b0      	b.n	9d80 <__divdi3+0xa4>
    9e1e:	43e4      	mvns	r4, r4
    9e20:	4252      	negs	r2, r2
    9e22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9e26:	e762      	b.n	9cee <__divdi3+0x12>
    9e28:	4240      	negs	r0, r0
    9e2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9e2e:	f04f 34ff 	mov.w	r4, #4294967295
    9e32:	e759      	b.n	9ce8 <__divdi3+0xc>
    9e34:	4095      	lsls	r5, r2
    9e36:	f1c2 0920 	rsb	r9, r2, #32
    9e3a:	fa27 f109 	lsr.w	r1, r7, r9
    9e3e:	fa26 f909 	lsr.w	r9, r6, r9
    9e42:	4097      	lsls	r7, r2
    9e44:	0c28      	lsrs	r0, r5, #16
    9e46:	fbb1 f8f0 	udiv	r8, r1, r0
    9e4a:	fb00 1118 	mls	r1, r0, r8, r1
    9e4e:	fa1f fc85 	uxth.w	ip, r5
    9e52:	fb0c f308 	mul.w	r3, ip, r8
    9e56:	ea49 0907 	orr.w	r9, r9, r7
    9e5a:	ea4f 4719 	mov.w	r7, r9, lsr #16
    9e5e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
    9e62:	428b      	cmp	r3, r1
    9e64:	fa06 f602 	lsl.w	r6, r6, r2
    9e68:	d908      	bls.n	9e7c <__divdi3+0x1a0>
    9e6a:	1949      	adds	r1, r1, r5
    9e6c:	f108 32ff 	add.w	r2, r8, #4294967295
    9e70:	d27a      	bcs.n	9f68 <__divdi3+0x28c>
    9e72:	428b      	cmp	r3, r1
    9e74:	d978      	bls.n	9f68 <__divdi3+0x28c>
    9e76:	f1a8 0802 	sub.w	r8, r8, #2
    9e7a:	4429      	add	r1, r5
    9e7c:	1ac9      	subs	r1, r1, r3
    9e7e:	fbb1 f3f0 	udiv	r3, r1, r0
    9e82:	fb00 1713 	mls	r7, r0, r3, r1
    9e86:	fb0c f203 	mul.w	r2, ip, r3
    9e8a:	fa1f f989 	uxth.w	r9, r9
    9e8e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
    9e92:	42ba      	cmp	r2, r7
    9e94:	d907      	bls.n	9ea6 <__divdi3+0x1ca>
    9e96:	197f      	adds	r7, r7, r5
    9e98:	f103 31ff 	add.w	r1, r3, #4294967295
    9e9c:	d260      	bcs.n	9f60 <__divdi3+0x284>
    9e9e:	42ba      	cmp	r2, r7
    9ea0:	d95e      	bls.n	9f60 <__divdi3+0x284>
    9ea2:	3b02      	subs	r3, #2
    9ea4:	442f      	add	r7, r5
    9ea6:	1abf      	subs	r7, r7, r2
    9ea8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9eac:	e78c      	b.n	9dc8 <__divdi3+0xec>
    9eae:	f1c8 0220 	rsb	r2, r8, #32
    9eb2:	fa25 f102 	lsr.w	r1, r5, r2
    9eb6:	fa03 fc08 	lsl.w	ip, r3, r8
    9eba:	fa27 f302 	lsr.w	r3, r7, r2
    9ebe:	fa20 f202 	lsr.w	r2, r0, r2
    9ec2:	fa07 f708 	lsl.w	r7, r7, r8
    9ec6:	ea41 0c0c 	orr.w	ip, r1, ip
    9eca:	ea4f 491c 	mov.w	r9, ip, lsr #16
    9ece:	fbb3 f1f9 	udiv	r1, r3, r9
    9ed2:	fb09 3311 	mls	r3, r9, r1, r3
    9ed6:	fa1f fa8c 	uxth.w	sl, ip
    9eda:	fb0a fb01 	mul.w	fp, sl, r1
    9ede:	4317      	orrs	r7, r2
    9ee0:	0c3a      	lsrs	r2, r7, #16
    9ee2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    9ee6:	459b      	cmp	fp, r3
    9ee8:	fa05 f008 	lsl.w	r0, r5, r8
    9eec:	d908      	bls.n	9f00 <__divdi3+0x224>
    9eee:	eb13 030c 	adds.w	r3, r3, ip
    9ef2:	f101 32ff 	add.w	r2, r1, #4294967295
    9ef6:	d235      	bcs.n	9f64 <__divdi3+0x288>
    9ef8:	459b      	cmp	fp, r3
    9efa:	d933      	bls.n	9f64 <__divdi3+0x288>
    9efc:	3902      	subs	r1, #2
    9efe:	4463      	add	r3, ip
    9f00:	ebcb 0303 	rsb	r3, fp, r3
    9f04:	fbb3 f2f9 	udiv	r2, r3, r9
    9f08:	fb09 3312 	mls	r3, r9, r2, r3
    9f0c:	fb0a fa02 	mul.w	sl, sl, r2
    9f10:	b2bf      	uxth	r7, r7
    9f12:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    9f16:	45ba      	cmp	sl, r7
    9f18:	d908      	bls.n	9f2c <__divdi3+0x250>
    9f1a:	eb17 070c 	adds.w	r7, r7, ip
    9f1e:	f102 33ff 	add.w	r3, r2, #4294967295
    9f22:	d21b      	bcs.n	9f5c <__divdi3+0x280>
    9f24:	45ba      	cmp	sl, r7
    9f26:	d919      	bls.n	9f5c <__divdi3+0x280>
    9f28:	3a02      	subs	r2, #2
    9f2a:	4467      	add	r7, ip
    9f2c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    9f30:	fba5 0100 	umull	r0, r1, r5, r0
    9f34:	ebca 0707 	rsb	r7, sl, r7
    9f38:	428f      	cmp	r7, r1
    9f3a:	f04f 0300 	mov.w	r3, #0
    9f3e:	d30a      	bcc.n	9f56 <__divdi3+0x27a>
    9f40:	d005      	beq.n	9f4e <__divdi3+0x272>
    9f42:	462a      	mov	r2, r5
    9f44:	e71c      	b.n	9d80 <__divdi3+0xa4>
    9f46:	4662      	mov	r2, ip
    9f48:	e6fd      	b.n	9d46 <__divdi3+0x6a>
    9f4a:	463b      	mov	r3, r7
    9f4c:	e710      	b.n	9d70 <__divdi3+0x94>
    9f4e:	fa06 f608 	lsl.w	r6, r6, r8
    9f52:	4286      	cmp	r6, r0
    9f54:	d2f5      	bcs.n	9f42 <__divdi3+0x266>
    9f56:	1e6a      	subs	r2, r5, #1
    9f58:	2300      	movs	r3, #0
    9f5a:	e711      	b.n	9d80 <__divdi3+0xa4>
    9f5c:	461a      	mov	r2, r3
    9f5e:	e7e5      	b.n	9f2c <__divdi3+0x250>
    9f60:	460b      	mov	r3, r1
    9f62:	e7a0      	b.n	9ea6 <__divdi3+0x1ca>
    9f64:	4611      	mov	r1, r2
    9f66:	e7cb      	b.n	9f00 <__divdi3+0x224>
    9f68:	4690      	mov	r8, r2
    9f6a:	e787      	b.n	9e7c <__divdi3+0x1a0>
    9f6c:	4643      	mov	r3, r8
    9f6e:	4642      	mov	r2, r8
    9f70:	e706      	b.n	9d80 <__divdi3+0xa4>
    9f72:	3a02      	subs	r2, #2
    9f74:	e750      	b.n	9e18 <__divdi3+0x13c>
    9f76:	3902      	subs	r1, #2
    9f78:	442f      	add	r7, r5
    9f7a:	e739      	b.n	9df0 <__divdi3+0x114>

00009f7c <__udivdi3>:
    9f7c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    9f80:	4614      	mov	r4, r2
    9f82:	4605      	mov	r5, r0
    9f84:	460e      	mov	r6, r1
    9f86:	2b00      	cmp	r3, #0
    9f88:	d143      	bne.n	a012 <__udivdi3+0x96>
    9f8a:	428a      	cmp	r2, r1
    9f8c:	d953      	bls.n	a036 <__udivdi3+0xba>
    9f8e:	fab2 f782 	clz	r7, r2
    9f92:	b157      	cbz	r7, 9faa <__udivdi3+0x2e>
    9f94:	f1c7 0620 	rsb	r6, r7, #32
    9f98:	fa20 f606 	lsr.w	r6, r0, r6
    9f9c:	fa01 f307 	lsl.w	r3, r1, r7
    9fa0:	fa02 f407 	lsl.w	r4, r2, r7
    9fa4:	fa00 f507 	lsl.w	r5, r0, r7
    9fa8:	431e      	orrs	r6, r3
    9faa:	0c21      	lsrs	r1, r4, #16
    9fac:	fbb6 f2f1 	udiv	r2, r6, r1
    9fb0:	fb01 6612 	mls	r6, r1, r2, r6
    9fb4:	b2a0      	uxth	r0, r4
    9fb6:	fb00 f302 	mul.w	r3, r0, r2
    9fba:	0c2f      	lsrs	r7, r5, #16
    9fbc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    9fc0:	42b3      	cmp	r3, r6
    9fc2:	d909      	bls.n	9fd8 <__udivdi3+0x5c>
    9fc4:	1936      	adds	r6, r6, r4
    9fc6:	f102 37ff 	add.w	r7, r2, #4294967295
    9fca:	f080 80fd 	bcs.w	a1c8 <__udivdi3+0x24c>
    9fce:	42b3      	cmp	r3, r6
    9fd0:	f240 80fa 	bls.w	a1c8 <__udivdi3+0x24c>
    9fd4:	3a02      	subs	r2, #2
    9fd6:	4426      	add	r6, r4
    9fd8:	1af6      	subs	r6, r6, r3
    9fda:	fbb6 f3f1 	udiv	r3, r6, r1
    9fde:	fb01 6113 	mls	r1, r1, r3, r6
    9fe2:	fb00 f003 	mul.w	r0, r0, r3
    9fe6:	b2ad      	uxth	r5, r5
    9fe8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    9fec:	4288      	cmp	r0, r1
    9fee:	d908      	bls.n	a002 <__udivdi3+0x86>
    9ff0:	1909      	adds	r1, r1, r4
    9ff2:	f103 36ff 	add.w	r6, r3, #4294967295
    9ff6:	f080 80e9 	bcs.w	a1cc <__udivdi3+0x250>
    9ffa:	4288      	cmp	r0, r1
    9ffc:	f240 80e6 	bls.w	a1cc <__udivdi3+0x250>
    a000:	3b02      	subs	r3, #2
    a002:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    a006:	2300      	movs	r3, #0
    a008:	4610      	mov	r0, r2
    a00a:	4619      	mov	r1, r3
    a00c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a010:	4770      	bx	lr
    a012:	428b      	cmp	r3, r1
    a014:	d84c      	bhi.n	a0b0 <__udivdi3+0x134>
    a016:	fab3 f683 	clz	r6, r3
    a01a:	2e00      	cmp	r6, #0
    a01c:	d14f      	bne.n	a0be <__udivdi3+0x142>
    a01e:	428b      	cmp	r3, r1
    a020:	d302      	bcc.n	a028 <__udivdi3+0xac>
    a022:	4282      	cmp	r2, r0
    a024:	f200 80dd 	bhi.w	a1e2 <__udivdi3+0x266>
    a028:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a02c:	2300      	movs	r3, #0
    a02e:	2201      	movs	r2, #1
    a030:	4610      	mov	r0, r2
    a032:	4619      	mov	r1, r3
    a034:	4770      	bx	lr
    a036:	b912      	cbnz	r2, a03e <__udivdi3+0xc2>
    a038:	2401      	movs	r4, #1
    a03a:	fbb4 f4f2 	udiv	r4, r4, r2
    a03e:	fab4 f284 	clz	r2, r4
    a042:	2a00      	cmp	r2, #0
    a044:	f040 8082 	bne.w	a14c <__udivdi3+0x1d0>
    a048:	1b09      	subs	r1, r1, r4
    a04a:	0c26      	lsrs	r6, r4, #16
    a04c:	b2a7      	uxth	r7, r4
    a04e:	2301      	movs	r3, #1
    a050:	fbb1 f0f6 	udiv	r0, r1, r6
    a054:	fb06 1110 	mls	r1, r6, r0, r1
    a058:	fb07 f200 	mul.w	r2, r7, r0
    a05c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    a060:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
    a064:	428a      	cmp	r2, r1
    a066:	d907      	bls.n	a078 <__udivdi3+0xfc>
    a068:	1909      	adds	r1, r1, r4
    a06a:	f100 3cff 	add.w	ip, r0, #4294967295
    a06e:	d202      	bcs.n	a076 <__udivdi3+0xfa>
    a070:	428a      	cmp	r2, r1
    a072:	f200 80c8 	bhi.w	a206 <__udivdi3+0x28a>
    a076:	4660      	mov	r0, ip
    a078:	1a89      	subs	r1, r1, r2
    a07a:	fbb1 f2f6 	udiv	r2, r1, r6
    a07e:	fb06 1112 	mls	r1, r6, r2, r1
    a082:	fb07 f702 	mul.w	r7, r7, r2
    a086:	b2ad      	uxth	r5, r5
    a088:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    a08c:	42af      	cmp	r7, r5
    a08e:	d908      	bls.n	a0a2 <__udivdi3+0x126>
    a090:	192c      	adds	r4, r5, r4
    a092:	f102 31ff 	add.w	r1, r2, #4294967295
    a096:	f080 809b 	bcs.w	a1d0 <__udivdi3+0x254>
    a09a:	42a7      	cmp	r7, r4
    a09c:	f240 8098 	bls.w	a1d0 <__udivdi3+0x254>
    a0a0:	3a02      	subs	r2, #2
    a0a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    a0a6:	4610      	mov	r0, r2
    a0a8:	4619      	mov	r1, r3
    a0aa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a0ae:	4770      	bx	lr
    a0b0:	2300      	movs	r3, #0
    a0b2:	461a      	mov	r2, r3
    a0b4:	4610      	mov	r0, r2
    a0b6:	4619      	mov	r1, r3
    a0b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    a0bc:	4770      	bx	lr
    a0be:	f1c6 0520 	rsb	r5, r6, #32
    a0c2:	fa22 f705 	lsr.w	r7, r2, r5
    a0c6:	fa03 f406 	lsl.w	r4, r3, r6
    a0ca:	fa21 f305 	lsr.w	r3, r1, r5
    a0ce:	fa01 fb06 	lsl.w	fp, r1, r6
    a0d2:	fa20 f505 	lsr.w	r5, r0, r5
    a0d6:	433c      	orrs	r4, r7
    a0d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
    a0dc:	fbb3 fcf8 	udiv	ip, r3, r8
    a0e0:	fb08 331c 	mls	r3, r8, ip, r3
    a0e4:	fa1f f984 	uxth.w	r9, r4
    a0e8:	fb09 fa0c 	mul.w	sl, r9, ip
    a0ec:	ea45 0b0b 	orr.w	fp, r5, fp
    a0f0:	ea4f 451b 	mov.w	r5, fp, lsr #16
    a0f4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    a0f8:	459a      	cmp	sl, r3
    a0fa:	fa02 f206 	lsl.w	r2, r2, r6
    a0fe:	d904      	bls.n	a10a <__udivdi3+0x18e>
    a100:	191b      	adds	r3, r3, r4
    a102:	f10c 35ff 	add.w	r5, ip, #4294967295
    a106:	d36f      	bcc.n	a1e8 <__udivdi3+0x26c>
    a108:	46ac      	mov	ip, r5
    a10a:	ebca 0303 	rsb	r3, sl, r3
    a10e:	fbb3 f5f8 	udiv	r5, r3, r8
    a112:	fb08 3315 	mls	r3, r8, r5, r3
    a116:	fb09 f905 	mul.w	r9, r9, r5
    a11a:	fa1f fb8b 	uxth.w	fp, fp
    a11e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
    a122:	45b9      	cmp	r9, r7
    a124:	d904      	bls.n	a130 <__udivdi3+0x1b4>
    a126:	193f      	adds	r7, r7, r4
    a128:	f105 33ff 	add.w	r3, r5, #4294967295
    a12c:	d362      	bcc.n	a1f4 <__udivdi3+0x278>
    a12e:	461d      	mov	r5, r3
    a130:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    a134:	fbac 2302 	umull	r2, r3, ip, r2
    a138:	ebc9 0707 	rsb	r7, r9, r7
    a13c:	429f      	cmp	r7, r3
    a13e:	f04f 0500 	mov.w	r5, #0
    a142:	d34a      	bcc.n	a1da <__udivdi3+0x25e>
    a144:	d046      	beq.n	a1d4 <__udivdi3+0x258>
    a146:	4662      	mov	r2, ip
    a148:	462b      	mov	r3, r5
    a14a:	e75d      	b.n	a008 <__udivdi3+0x8c>
    a14c:	4094      	lsls	r4, r2
    a14e:	f1c2 0920 	rsb	r9, r2, #32
    a152:	fa21 fc09 	lsr.w	ip, r1, r9
    a156:	4091      	lsls	r1, r2
    a158:	fa20 f909 	lsr.w	r9, r0, r9
    a15c:	0c26      	lsrs	r6, r4, #16
    a15e:	fbbc f8f6 	udiv	r8, ip, r6
    a162:	fb06 cc18 	mls	ip, r6, r8, ip
    a166:	b2a7      	uxth	r7, r4
    a168:	fb07 f308 	mul.w	r3, r7, r8
    a16c:	ea49 0901 	orr.w	r9, r9, r1
    a170:	ea4f 4119 	mov.w	r1, r9, lsr #16
    a174:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    a178:	4563      	cmp	r3, ip
    a17a:	fa00 f502 	lsl.w	r5, r0, r2
    a17e:	d909      	bls.n	a194 <__udivdi3+0x218>
    a180:	eb1c 0c04 	adds.w	ip, ip, r4
    a184:	f108 32ff 	add.w	r2, r8, #4294967295
    a188:	d23b      	bcs.n	a202 <__udivdi3+0x286>
    a18a:	4563      	cmp	r3, ip
    a18c:	d939      	bls.n	a202 <__udivdi3+0x286>
    a18e:	f1a8 0802 	sub.w	r8, r8, #2
    a192:	44a4      	add	ip, r4
    a194:	ebc3 0c0c 	rsb	ip, r3, ip
    a198:	fbbc f3f6 	udiv	r3, ip, r6
    a19c:	fb06 c113 	mls	r1, r6, r3, ip
    a1a0:	fb07 f203 	mul.w	r2, r7, r3
    a1a4:	fa1f f989 	uxth.w	r9, r9
    a1a8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
    a1ac:	428a      	cmp	r2, r1
    a1ae:	d907      	bls.n	a1c0 <__udivdi3+0x244>
    a1b0:	1909      	adds	r1, r1, r4
    a1b2:	f103 30ff 	add.w	r0, r3, #4294967295
    a1b6:	d222      	bcs.n	a1fe <__udivdi3+0x282>
    a1b8:	428a      	cmp	r2, r1
    a1ba:	d920      	bls.n	a1fe <__udivdi3+0x282>
    a1bc:	3b02      	subs	r3, #2
    a1be:	4421      	add	r1, r4
    a1c0:	1a89      	subs	r1, r1, r2
    a1c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    a1c6:	e743      	b.n	a050 <__udivdi3+0xd4>
    a1c8:	463a      	mov	r2, r7
    a1ca:	e705      	b.n	9fd8 <__udivdi3+0x5c>
    a1cc:	4633      	mov	r3, r6
    a1ce:	e718      	b.n	a002 <__udivdi3+0x86>
    a1d0:	460a      	mov	r2, r1
    a1d2:	e766      	b.n	a0a2 <__udivdi3+0x126>
    a1d4:	40b0      	lsls	r0, r6
    a1d6:	4290      	cmp	r0, r2
    a1d8:	d2b5      	bcs.n	a146 <__udivdi3+0x1ca>
    a1da:	f10c 32ff 	add.w	r2, ip, #4294967295
    a1de:	2300      	movs	r3, #0
    a1e0:	e712      	b.n	a008 <__udivdi3+0x8c>
    a1e2:	4633      	mov	r3, r6
    a1e4:	4632      	mov	r2, r6
    a1e6:	e70f      	b.n	a008 <__udivdi3+0x8c>
    a1e8:	459a      	cmp	sl, r3
    a1ea:	d98d      	bls.n	a108 <__udivdi3+0x18c>
    a1ec:	f1ac 0c02 	sub.w	ip, ip, #2
    a1f0:	4423      	add	r3, r4
    a1f2:	e78a      	b.n	a10a <__udivdi3+0x18e>
    a1f4:	45b9      	cmp	r9, r7
    a1f6:	d99a      	bls.n	a12e <__udivdi3+0x1b2>
    a1f8:	3d02      	subs	r5, #2
    a1fa:	4427      	add	r7, r4
    a1fc:	e798      	b.n	a130 <__udivdi3+0x1b4>
    a1fe:	4603      	mov	r3, r0
    a200:	e7de      	b.n	a1c0 <__udivdi3+0x244>
    a202:	4690      	mov	r8, r2
    a204:	e7c6      	b.n	a194 <__udivdi3+0x218>
    a206:	3802      	subs	r0, #2
    a208:	4421      	add	r1, r4
    a20a:	e735      	b.n	a078 <__udivdi3+0xfc>

0000a20c <_init>:
    a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a20e:	bf00      	nop
    a210:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a212:	bc08      	pop	{r3}
    a214:	469e      	mov	lr, r3
    a216:	4770      	bx	lr

0000a218 <_fini>:
    a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a21a:	bf00      	nop
    a21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a21e:	bc08      	pop	{r3}
    a220:	469e      	mov	lr, r3
    a222:	4770      	bx	lr
    a224:	652f2e2e 	.word	0x652f2e2e
    a228:	62696c6d 	.word	0x62696c6d
    a22c:	6372732f 	.word	0x6372732f
    a230:	5f6d652f 	.word	0x5f6d652f
    a234:	2e756d63 	.word	0x2e756d63
    a238:	00000063 	.word	0x00000063
    a23c:	652f2e2e 	.word	0x652f2e2e
    a240:	62696c6d 	.word	0x62696c6d
    a244:	6372732f 	.word	0x6372732f
    a248:	5f6d652f 	.word	0x5f6d652f
    a24c:	2e616d64 	.word	0x2e616d64
    a250:	00000063 	.word	0x00000063
    a254:	652f2e2e 	.word	0x652f2e2e
    a258:	62696c6d 	.word	0x62696c6d
    a25c:	6372732f 	.word	0x6372732f
    a260:	5f6d652f 	.word	0x5f6d652f
    a264:	2e756d65 	.word	0x2e756d65
    a268:	00000063 	.word	0x00000063
    a26c:	652f2e2e 	.word	0x652f2e2e
    a270:	62696c6d 	.word	0x62696c6d
    a274:	6372732f 	.word	0x6372732f
    a278:	5f6d652f 	.word	0x5f6d652f
    a27c:	6f697067 	.word	0x6f697067
    a280:	0000632e 	.word	0x0000632e
    a284:	652f2e2e 	.word	0x652f2e2e
    a288:	62696c6d 	.word	0x62696c6d
    a28c:	6372732f 	.word	0x6372732f
    a290:	5f6d652f 	.word	0x5f6d652f
    a294:	6175656c 	.word	0x6175656c
    a298:	632e7472 	.word	0x632e7472
    a29c:	00000000 	.word	0x00000000

0000a2a0 <i2cNSum>:
    a2a0:	08110908 652f2e2e 62696c6d 6372732f     ....../emlib/src
    a2b0:	5f6d652f 2e633269 00000063 652f2e2e     /em_i2c.c...../e
    a2c0:	62696c6d 6372732f 5f6d652f 2e637472     mlib/src/em_rtc.
    a2d0:	00000063 652f2e2e 62696c6d 6372732f     c...../emlib/src
    a2e0:	5f6d652f 2e636461 00000063 652f2e2e     /em_adc.c...../e
    a2f0:	62696c6d 6372732f 5f6d652f 74737973     mlib/src/em_syst
    a300:	632e6d65 00000000                       em.c....

0000a308 <l_ExtIntCfg>:
    a308:	00000038 0000391d 00000000 00000000     8....9..........

0000a318 <l_KeyInit>:
    a318:	00fa02ee 00003b05                       .....;..

0000a320 <l_LCD_Field>:
    a320:	00100000 00001001 10010010 00100000     ................
    a330:	01051001 1000000b 203e3e3e 65445248     ........>>> HRDe
    a340:	65636976 3c3c3c20 00000000 70707553     vice <<<....Supp
    a350:	4220796c 65747461 00007972 756e614d     ly Battery..Manu
    a360:	74636166 72657275 00000000 69766544     facturer....Devi
    a370:	4e206563 00656d61 69766544 54206563     ce Name.Device T
    a380:	00657079 69726553 4e206c61 65626d75     ype.Serial Numbe
    a390:	00000072 646f7250 69746375 44206e6f     r...Production D
    a3a0:	00657461 756e614d 74636166 6144202e     ate.Manufact. Da
    a3b0:	00006174 756e614d 74636166 6341202e     ta..Manufact. Ac
    a3c0:	73736563 00000000 63657053 63696669     cess....Specific
    a3d0:	202e7461 6f666e49 00000000 74746142     at. Info....Batt
    a3e0:	20797265 65646f4d 00000000 74746142     ery Mode....Batt
    a3f0:	20797265 74617453 00007375 65726f43     ery Status..Core
    a400:	6d655420 61726570 65727574 00000000      Temperature....
    a410:	75746341 56206c61 61746c6f 00006567     Actual Voltage..
    a420:	75746341 43206c61 65727275 0000746e     Actual Current..
    a430:	72657641 20656761 72727543 00746e65     Average Current.
    a440:	2e6c6552 72616843 53206567 65746174     Rel.Charge State
    a450:	00000000 2e736241 72616843 53206567     ....Abs.Charge S
    a460:	65746174 00000000 616d6552 202e6e69     tate....Remain. 
    a470:	61706143 79746963 00000000 616d6552     Capacity....Rema
    a480:	432e6e69 412e7061 6d72616c 00000000     in.Cap.Alarm....
    a490:	6c6c7546 61684320 20656772 2e706143     Full Charge Cap.
    a4a0:	00000000 746e7552 20656d69 45206f74     ....Runtime to E
    a4b0:	7974706d 00000000 616d6552 542e6e69     mpty....Remain.T
    a4c0:	41656d69 6d72616c 00000000 54727641     imeAlarm....AvrT
    a4d0:	20656d69 45206f74 7974706d 00000000     ime to Empty....
    a4e0:	2e727641 656d6954 206f7420 6c6c7546     Avr.Time to Full
    a4f0:	00000000 72616843 676e6967 72754320     ....Charging Cur
    a500:	746e6572 00000000 72616843 676e6967     rent....Charging
    a510:	6c6f5620 65676174 00000000 72616843      Voltage....Char
    a520:	43206567 656c6379 746e4320 00000000     ge Cycle Cnt....
    a530:	69736544 43206e67 63617061 00797469     Design Capacity.
    a540:	69736544 56206e67 61746c6f 00006567     Design Voltage..
    a550:	6e756853 65522074 74736973 65636e61     Shunt Resistance
    a560:	00000000 6c6c6543 6e692073 72657320     ....Cells in ser
    a570:	00736569 7265764f 72727563 6552202e     ies.Overcurr. Re
    a580:	2e746361 00000000 7265764f 72727563     act.....Overcurr
    a590:	6843202e 65677261 00000000 7265764f     . Charge....Over
    a5a0:	72727563 7369442e 72616863 00000000     curr.Dischar....
    a5b0:	68676948 72727563 6552202e 2e746361     Highcurr. React.
    a5c0:	00000000 68676948 72727563 6843202e     ....Highcurr. Ch
    a5d0:	65677261 00000000 68676948 72727563     arge....Highcurr
    a5e0:	7369442e 72616863 00000000 6c6c6543     .Dischar....Cell
    a5f0:	20312320 746c6f56 00656761 6c6c6543      #1 Voltage.Cell
    a600:	20322320 746c6f56 00656761 6c6c6543      #2 Voltage.Cell
    a610:	20332320 746c6f56 00656761 6c6c6543      #3 Voltage.Cell
    a620:	20342320 746c6f56 00656761 6c6c6543      #4 Voltage.Cell
    a630:	6e694d20 6c6f5620 65676174 00000000      Min Voltage....
    a640:	6c6c6543 78614d20 6c6f5620 65676174     Cell Max Voltage
    a650:	00000000 6c6c6543 72775020 2066664f     ....Cell PwrOff 
    a660:	746c6f56 00000000 2a2a2a0a 48202a2a     Volt.....***** H
    a670:	76654452 20656369 00000056 00000020     RDevice V... ...
    a680:	2a2a2a20 0a0a2a2a 00000000 20732556      *****......V%s 
    a690:	00007325                                %s..

0000a694 <l_Item>:
    a694:	0000a338 0000ffff 0000a34c 0001ffff     8.......L.......
    a6a4:	0000a35c 00021020 0000a36c 00021021     \... ...l...!...
    a6b4:	0000a378 00021022 0000a384 0005001c     x..."...........
    a6c4:	0000a394 000e001b 0000a3a4 00021023     ............#...
    a6d4:	0000a3b4 00030000 0000a3c8 0003001a     ................
    a6e4:	0000a3dc 00030003 0000a3ec 00030016     ................
    a6f4:	0000a3fc 000f0008 0000a410 000a0009     ................
    a704:	0000a420 000b000a 0000a430 000b000b      .......0.......
    a714:	0000a440 0006000d 0000a454 0006000e     @.......T.......
    a724:	0000a468 000c000f 0000a47c 000c0001     h.......|.......
    a734:	0000a490 000c0010 0000a4a4 00070011     ................
    a744:	0000a4b8 00070002 0000a4cc 00070012     ................
    a754:	0000a4e0 00070013 0000a4f4 000b0014     ................
    a764:	0000a508 000a0015 0000a51c 00040017     ................
    a774:	0000a530 000c0018 0000a540 000a0019     0.......@.......
    a784:	0000a550 000d002a 0000a564 0004003c     P...*...d...<...
    a794:	0000a574 0008003d 0000a588 000b003e     t...=.......>...
    a7a4:	0000a59c 000b003f 0000a5b0 00090040     ....?.......@...
    a7b4:	0000a5c4 000b0041 0000a5d8 000b0042     ....A.......B...
    a7c4:	0000a5ec 000a0047 0000a5fc 000a0046     ....G.......F...
    a7d4:	0000a60c 000a0045 0000a61c 000a0044     ....E.......D...
    a7e4:	0000a62c 000a0054 0000a640 000a0055     ,...T...@...U...
    a7f4:	0000a654 000a0056                       T...V...

0000a7fc <_pAES>:
    a7fc:	400e0000                                ...@

0000a800 <_pDMA>:
    a800:	400c2000                                . .@

0000a804 <_pMSC>:
    a804:	400c0000                                ...@

0000a808 <_pEMU>:
    a808:	400c6000                                .`.@

0000a80c <_pRMU>:
    a80c:	400ca000                                ...@

0000a810 <_pCMU>:
    a810:	400c8000                                ...@

0000a814 <_pTIMER0>:
    a814:	40010000                                ...@

0000a818 <_pTIMER1>:
    a818:	40010400                                ...@

0000a81c <_pTIMER2>:
    a81c:	40010800                                ...@

0000a820 <_pUSART0>:
    a820:	4000c000                                ...@

0000a824 <_pUSART1>:
    a824:	4000c400                                ...@

0000a828 <_pUSART2>:
    a828:	4000c800                                ...@

0000a82c <_pLEUART0>:
    a82c:	40084000                                .@.@

0000a830 <_pLEUART1>:
    a830:	40084400                                .D.@

0000a834 <_pRTC>:
    a834:	40080000                                ...@

0000a838 <_pLETIMER0>:
    a838:	40082000                                . .@

0000a83c <_pPCNT0>:
    a83c:	40086000                                .`.@

0000a840 <_pPCNT1>:
    a840:	40086400                                .d.@

0000a844 <_pPCNT2>:
    a844:	40086800                                .h.@

0000a848 <_pACMP0>:
    a848:	40001000                                ...@

0000a84c <_pACMP1>:
    a84c:	40001400                                ...@

0000a850 <_pPRS>:
    a850:	400cc000                                ...@

0000a854 <_pDAC0>:
    a854:	40004000                                .@.@

0000a858 <_pGPIO>:
    a858:	40006000                                .`.@

0000a85c <_pVCMP>:
    a85c:	40000000                                ...@

0000a860 <_pADC0>:
    a860:	40002000                                . .@

0000a864 <_pI2C0>:
    a864:	4000a000                                ...@

0000a868 <_pWDOG>:
    a868:	40088000                                ...@

0000a86c <_pCALIBRATE>:
    a86c:	0fe08000                                ....

0000a870 <_pDEVINFO>:
    a870:	0fe081b0                                ....

0000a874 <_pNVIC>:
    a874:	e000e100                                ....

0000a878 <_pROMTABLE>:
    a878:	e00fffd0 642f2e2e 65766972 4c2f7372     ....../drivers/L
    a888:	445f4443 314d474f 632e3236 00000000     CD_DOGM162.c....
    a898:	0000000a 00000000 00000000 0000000c     ................
    a8a8:	00000001 00000000 00000070 00000000     ........p.......
    a8b8:	00000000 ffffffff 00008000 642f2e2e     ............../d
    a8c8:	65766972 412f7372 6d72616c 636f6c43     rivers/AlarmCloc
    a8d8:	00632e6b 642f2e2e 65766972 452f7372     k.c.../drivers/E
    a8e8:	6e497478 00632e74 642f2e2e 65766972     xtInt.c.../drive
    a8f8:	4b2f7372 2e737965 00000063 642f2e2e     rs/Keys.c...../d
    a908:	65766972 442f7372 6c707369 632e7961     rivers/Display.c
	...
    a920:	00007325 3230255b 00005d58 44414552     %s..[%02X]..READ
    a930:	52524520 0000524f 64323025 64323025      ERROR..%02d%02d
    a940:	64323025 32302520 30253a64 253a6432     %02d %02d:%02d:%
    a950:	00643230 20732556 00007325 30325243     02d.V%s %s..CR20
    a960:	203a3233 252e6425 56643330 00000000     32: %d.%03dV....
    a970:	30257830 00005834 00643525 64353025     0x%04X..%5d.%05d
    a980:	00000000 25643525 00000025 6d643525     ....%5d%%...%5dm
    a990:	00006e69 6d643525 00000073 6d643525     in..%5dms...%5dm
    a9a0:	00000056 6d643525 00000041 6d643525     V...%5dmA...%5dm
    a9b0:	00006841 75643525 006d684f 64343025     Ah..%5duOhm.%04d
    a9c0:	3230252d 30252d64 00006432 252e6425     -%02d-%02d..%d.%
    a9d0:	00432064 642f2e2e 65766972 422f7372     d C.../drivers/B
    a9e0:	65747461 6f4d7972 00632e6e              atteryMon.c.

0000a9ec <prjVersion>:
    a9ec:	00322e31                                1.2.

0000a9f0 <prjDate>:
    a9f0:	20706553 32203931 00393130              Sep 19 2019.

0000a9fc <prjTime>:
    a9fc:	333a3231 39313a30 00000000              12:30:19....

0000aa08 <_ctype_>:
    aa08:	20202000 20202020 28282020 20282828     .         ((((( 
    aa18:	20202020 20202020 20202020 20202020                     
    aa28:	10108820 10101010 10101010 10101010      ...............
    aa38:	04040410 04040404 10040404 10101010     ................
    aa48:	41411010 41414141 01010101 01010101     ..AAAAAA........
    aa58:	01010101 01010101 01010101 10101010     ................
    aa68:	42421010 42424242 02020202 02020202     ..BBBBBB........
    aa78:	02020202 02020202 02020202 10101010     ................
    aa88:	00000020 00000000 00000000 00000000      ...............
	...
    ab0c:	00000043                                C...

0000ab10 <_global_impure_ptr>:
    ab10:	20000090                                ... 

0000ab14 <_DAYS_BEFORE_MONTH>:
    ab14:	00000000 0000001f 0000003b 0000005a     ........;...Z...
    ab24:	00000078 00000097 000000b5 000000d4     x...............
    ab34:	000000f3 00000111 00000130 0000014e     ........0...N...

0000ab44 <DAYS_IN_MONTH>:
    ab44:	0000001f 0000001c 0000001f 0000001e     ................
    ab54:	0000001f 0000001e 0000001f 0000001f     ................
    ab64:	0000001e 0000001f 0000001e 0000001f     ................

0000ab74 <mon_lengths>:
    ab74:	0000001f 0000001c 0000001f 0000001e     ................
    ab84:	0000001f 0000001e 0000001f 0000001f     ................
    ab94:	0000001e 0000001f 0000001e 0000001f     ................
    aba4:	0000001f 0000001d 0000001f 0000001e     ................
    abb4:	0000001f 0000001e 0000001f 0000001f     ................
    abc4:	0000001e 0000001f 0000001e 0000001f     ................

0000abd4 <year_lengths>:
    abd4:	0000016d 0000016e                       m...n...

0000abdc <zeroes.6763>:
    abdc:	30303030 30303030 30303030 30303030     0000000000000000
    abec:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    abfc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    ac0c:	00000000 33323130 37363534 62613938     ....0123456789ab
    ac1c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
    ac2c:	00000030                                0...

0000ac30 <blanks.6762>:
    ac30:	20202020 20202020 20202020 20202020                     
    ac40:	00544d47 69666e49 7974696e 00000000     GMT.Infinity....
    ac50:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

0000ac60 <__mprec_tens>:
    ac60:	00000000 3ff00000 00000000 40240000     .......?......$@
    ac70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    ac80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    ac90:	00000000 412e8480 00000000 416312d0     .......A......cA
    aca0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    acb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    acc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    acd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    ace0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    acf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    ad00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ad10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    ad20:	79d99db4 44ea7843                       ...yCx.D

0000ad28 <__mprec_bigtens>:
    ad28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ad38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    ad48:	7f73bf3c 75154fdd                       <.s..O.u

0000ad50 <__mprec_tinytens>:
    ad50:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    ad60:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    ad70:	64ac6f43 0ac80628                       Co.d(...

0000ad78 <p05.5269>:
    ad78:	00000005 00000019 0000007d              ........}...

0000ad84 <zeroes.6707>:
    ad84:	30303030 30303030 30303030 30303030     0000000000000000

0000ad94 <blanks.6706>:
    ad94:	20202020 20202020 20202020 20202020                     

0000ada4 <__EH_FRAME_BEGIN__>:
    ada4:	00000000                                ....
