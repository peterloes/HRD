ARM GAS  /tmp/ccO0aQHC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"LEUART.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              		.file 1 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/ccO0aQHC.s 			page 2


  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
ARM GAS  /tmp/ccO0aQHC.s 			page 3


  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
ARM GAS  /tmp/ccO0aQHC.s 			page 4


 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
ARM GAS  /tmp/ccO0aQHC.s 			page 5


 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
ARM GAS  /tmp/ccO0aQHC.s 			page 6


 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 7


 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 8


 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccO0aQHC.s 			page 9


 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
ARM GAS  /tmp/ccO0aQHC.s 			page 10


 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
ARM GAS  /tmp/ccO0aQHC.s 			page 11


 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /tmp/ccO0aQHC.s 			page 12


 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
ARM GAS  /tmp/ccO0aQHC.s 			page 13


 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
ARM GAS  /tmp/ccO0aQHC.s 			page 14


 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 15


 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
ARM GAS  /tmp/ccO0aQHC.s 			page 16


 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
ARM GAS  /tmp/ccO0aQHC.s 			page 17


 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 18


 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
ARM GAS  /tmp/ccO0aQHC.s 			page 19


1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
ARM GAS  /tmp/ccO0aQHC.s 			page 20


1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 21


1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 22


1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/ccO0aQHC.s 			page 23


1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
ARM GAS  /tmp/ccO0aQHC.s 			page 24


1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
  26              		.loc 1 1324 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              		.cfi_def_cfa_offset 8
  33 0002 0346     		mov	r3, r0
  34 0004 8DF80730 		strb	r3, [sp, #7]
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  35              		.loc 1 1325 0
  36 0008 074B     		ldr	r3, .L2
  37 000a 9DF90720 		ldrsb	r2, [sp, #7]
  38 000e 5209     		lsrs	r2, r2, #5
  39 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  40 0014 01F01F01 		and	r1, r1, #31
  41 0018 0120     		movs	r0, #1
  42 001a 00FA01F1 		lsl	r1, r0, r1
  43 001e 43F82210 		str	r1, [r3, r2, lsl #2]
1326:../CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/ccO0aQHC.s 			page 25


  44              		.loc 1 1326 0
  45 0022 02B0     		add	sp, sp, #8
  46              		@ sp needed
  47 0024 7047     		bx	lr
  48              	.L3:
  49 0026 00BF     		.align	2
  50              	.L2:
  51 0028 00E100E0 		.word	-536813312
  52              		.cfi_endproc
  53              	.LFE41:
  55              		.section	.text.INT_Disable,"ax",%progbits
  56              		.align	2
  57              		.thumb
  58              		.thumb_func
  60              	INT_Disable:
  61              	.LFB84:
  62              		.file 2 "../emlib/inc/em_int.h"
   1:../emlib/inc/em_int.h **** /***************************************************************************//**
   2:../emlib/inc/em_int.h ****  * @file
   3:../emlib/inc/em_int.h ****  * @brief Interrupt enable/disable unit API
   4:../emlib/inc/em_int.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_int.h ****  * @version 3.20.2
   6:../emlib/inc/em_int.h ****  *******************************************************************************
   7:../emlib/inc/em_int.h ****  * @section License
   8:../emlib/inc/em_int.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_int.h ****  *******************************************************************************
  10:../emlib/inc/em_int.h ****  *
  11:../emlib/inc/em_int.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_int.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_int.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_int.h ****  *
  15:../emlib/inc/em_int.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_int.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_int.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_int.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_int.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_int.h ****  *
  21:../emlib/inc/em_int.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_int.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_int.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_int.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_int.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_int.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_int.h ****  *
  28:../emlib/inc/em_int.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_int.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_int.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_int.h ****  *
  32:../emlib/inc/em_int.h ****  ******************************************************************************/
  33:../emlib/inc/em_int.h **** #ifndef __EM_INT_H
  34:../emlib/inc/em_int.h **** #define __EM_INT_H
  35:../emlib/inc/em_int.h **** 
  36:../emlib/inc/em_int.h **** #include "em_device.h"
  37:../emlib/inc/em_int.h **** 
  38:../emlib/inc/em_int.h **** extern uint32_t INT_LockCnt;
  39:../emlib/inc/em_int.h **** 
  40:../emlib/inc/em_int.h **** #ifdef __cplusplus
ARM GAS  /tmp/ccO0aQHC.s 			page 26


  41:../emlib/inc/em_int.h **** extern "C" {
  42:../emlib/inc/em_int.h **** #endif
  43:../emlib/inc/em_int.h **** 
  44:../emlib/inc/em_int.h **** /***************************************************************************//**
  45:../emlib/inc/em_int.h ****  * @addtogroup EM_Library
  46:../emlib/inc/em_int.h ****  * @{
  47:../emlib/inc/em_int.h ****  ******************************************************************************/
  48:../emlib/inc/em_int.h **** 
  49:../emlib/inc/em_int.h **** /***************************************************************************//**
  50:../emlib/inc/em_int.h ****  * @addtogroup INT
  51:../emlib/inc/em_int.h ****  * @{
  52:../emlib/inc/em_int.h ****  ******************************************************************************/
  53:../emlib/inc/em_int.h **** 
  54:../emlib/inc/em_int.h **** /***************************************************************************//**
  55:../emlib/inc/em_int.h ****  * @brief
  56:../emlib/inc/em_int.h ****  *   Disable interrupts.
  57:../emlib/inc/em_int.h ****  *
  58:../emlib/inc/em_int.h ****  * @return
  59:../emlib/inc/em_int.h ****  *   The resulting interrupt nesting level.
  60:../emlib/inc/em_int.h ****  *
  61:../emlib/inc/em_int.h ****  * @details
  62:../emlib/inc/em_int.h ****  *   Disable interrupts and increment lock level counter.
  63:../emlib/inc/em_int.h ****  *
  64:../emlib/inc/em_int.h ****  ******************************************************************************/
  65:../emlib/inc/em_int.h **** __STATIC_INLINE uint32_t INT_Disable(void)
  66:../emlib/inc/em_int.h **** {
  63              		.loc 2 66 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LBB6:
  69              	.LBB7:
  70              		.file 3 "../CMSIS/Include/core_cmFunc.h"
   1:../CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../CMSIS/Include/core_cmFunc.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cmFunc.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cmFunc.h ****  *
   7:../CMSIS/Include/core_cmFunc.h ****  * @note
   8:../CMSIS/Include/core_cmFunc.h ****  *
   9:../CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cmFunc.h **** 
  12:../CMSIS/Include/core_cmFunc.h ****    All rights reserved.
  13:../CMSIS/Include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cmFunc.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cmFunc.h ****    *
ARM GAS  /tmp/ccO0aQHC.s 			page 27


  24:../CMSIS/Include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cmFunc.h **** 
  37:../CMSIS/Include/core_cmFunc.h **** 
  38:../CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:../CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:../CMSIS/Include/core_cmFunc.h **** 
  41:../CMSIS/Include/core_cmFunc.h **** 
  42:../CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:../CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:../CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:../CMSIS/Include/core_cmFunc.h ****   @{
  46:../CMSIS/Include/core_cmFunc.h ****  */
  47:../CMSIS/Include/core_cmFunc.h **** 
  48:../CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:../CMSIS/Include/core_cmFunc.h **** 
  51:../CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:../CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../CMSIS/Include/core_cmFunc.h **** #endif
  54:../CMSIS/Include/core_cmFunc.h **** 
  55:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:../CMSIS/Include/core_cmFunc.h **** 
  58:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  59:../CMSIS/Include/core_cmFunc.h **** 
  60:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:../CMSIS/Include/core_cmFunc.h **** 
  62:../CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  63:../CMSIS/Include/core_cmFunc.h ****  */
  64:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:../CMSIS/Include/core_cmFunc.h **** {
  66:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:../CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  68:../CMSIS/Include/core_cmFunc.h **** }
  69:../CMSIS/Include/core_cmFunc.h **** 
  70:../CMSIS/Include/core_cmFunc.h **** 
  71:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  72:../CMSIS/Include/core_cmFunc.h **** 
  73:../CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:../CMSIS/Include/core_cmFunc.h **** 
  75:../CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:../CMSIS/Include/core_cmFunc.h ****  */
  77:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:../CMSIS/Include/core_cmFunc.h **** {
  79:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:../CMSIS/Include/core_cmFunc.h ****   __regControl = control;
ARM GAS  /tmp/ccO0aQHC.s 			page 28


  81:../CMSIS/Include/core_cmFunc.h **** }
  82:../CMSIS/Include/core_cmFunc.h **** 
  83:../CMSIS/Include/core_cmFunc.h **** 
  84:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:../CMSIS/Include/core_cmFunc.h **** 
  86:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:../CMSIS/Include/core_cmFunc.h **** 
  88:../CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
  89:../CMSIS/Include/core_cmFunc.h ****  */
  90:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:../CMSIS/Include/core_cmFunc.h **** {
  92:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:../CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  94:../CMSIS/Include/core_cmFunc.h **** }
  95:../CMSIS/Include/core_cmFunc.h **** 
  96:../CMSIS/Include/core_cmFunc.h **** 
  97:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:../CMSIS/Include/core_cmFunc.h **** 
  99:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:../CMSIS/Include/core_cmFunc.h **** 
 101:../CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 102:../CMSIS/Include/core_cmFunc.h ****  */
 103:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:../CMSIS/Include/core_cmFunc.h **** {
 105:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:../CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
 107:../CMSIS/Include/core_cmFunc.h **** }
 108:../CMSIS/Include/core_cmFunc.h **** 
 109:../CMSIS/Include/core_cmFunc.h **** 
 110:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:../CMSIS/Include/core_cmFunc.h **** 
 112:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:../CMSIS/Include/core_cmFunc.h **** 
 114:../CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 115:../CMSIS/Include/core_cmFunc.h ****  */
 116:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:../CMSIS/Include/core_cmFunc.h **** {
 118:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:../CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 120:../CMSIS/Include/core_cmFunc.h **** }
 121:../CMSIS/Include/core_cmFunc.h **** 
 122:../CMSIS/Include/core_cmFunc.h **** 
 123:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:../CMSIS/Include/core_cmFunc.h **** 
 125:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:../CMSIS/Include/core_cmFunc.h **** 
 127:../CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 128:../CMSIS/Include/core_cmFunc.h ****  */
 129:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:../CMSIS/Include/core_cmFunc.h **** {
 131:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:../CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:../CMSIS/Include/core_cmFunc.h **** }
 134:../CMSIS/Include/core_cmFunc.h **** 
 135:../CMSIS/Include/core_cmFunc.h **** 
 136:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 29


 138:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:../CMSIS/Include/core_cmFunc.h **** 
 140:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:../CMSIS/Include/core_cmFunc.h ****  */
 142:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:../CMSIS/Include/core_cmFunc.h **** {
 144:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:../CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:../CMSIS/Include/core_cmFunc.h **** }
 147:../CMSIS/Include/core_cmFunc.h **** 
 148:../CMSIS/Include/core_cmFunc.h **** 
 149:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:../CMSIS/Include/core_cmFunc.h **** 
 151:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:../CMSIS/Include/core_cmFunc.h **** 
 153:../CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 154:../CMSIS/Include/core_cmFunc.h ****  */
 155:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:../CMSIS/Include/core_cmFunc.h **** {
 157:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:../CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:../CMSIS/Include/core_cmFunc.h **** }
 160:../CMSIS/Include/core_cmFunc.h **** 
 161:../CMSIS/Include/core_cmFunc.h **** 
 162:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:../CMSIS/Include/core_cmFunc.h **** 
 164:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:../CMSIS/Include/core_cmFunc.h **** 
 166:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:../CMSIS/Include/core_cmFunc.h ****  */
 168:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:../CMSIS/Include/core_cmFunc.h **** {
 170:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:../CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:../CMSIS/Include/core_cmFunc.h **** }
 173:../CMSIS/Include/core_cmFunc.h **** 
 174:../CMSIS/Include/core_cmFunc.h **** 
 175:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:../CMSIS/Include/core_cmFunc.h **** 
 177:../CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:../CMSIS/Include/core_cmFunc.h **** 
 179:../CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 180:../CMSIS/Include/core_cmFunc.h ****  */
 181:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:../CMSIS/Include/core_cmFunc.h **** {
 183:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:../CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 185:../CMSIS/Include/core_cmFunc.h **** }
 186:../CMSIS/Include/core_cmFunc.h **** 
 187:../CMSIS/Include/core_cmFunc.h **** 
 188:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:../CMSIS/Include/core_cmFunc.h **** 
 190:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:../CMSIS/Include/core_cmFunc.h **** 
 192:../CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:../CMSIS/Include/core_cmFunc.h ****  */
 194:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
ARM GAS  /tmp/ccO0aQHC.s 			page 30


 195:../CMSIS/Include/core_cmFunc.h **** {
 196:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:../CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:../CMSIS/Include/core_cmFunc.h **** }
 199:../CMSIS/Include/core_cmFunc.h **** 
 200:../CMSIS/Include/core_cmFunc.h **** 
 201:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:../CMSIS/Include/core_cmFunc.h **** 
 203:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:../CMSIS/Include/core_cmFunc.h **** 
 205:../CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:../CMSIS/Include/core_cmFunc.h ****  */
 208:../CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:../CMSIS/Include/core_cmFunc.h **** 
 210:../CMSIS/Include/core_cmFunc.h **** 
 211:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:../CMSIS/Include/core_cmFunc.h **** 
 213:../CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:../CMSIS/Include/core_cmFunc.h ****  */
 216:../CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:../CMSIS/Include/core_cmFunc.h **** 
 218:../CMSIS/Include/core_cmFunc.h **** 
 219:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:../CMSIS/Include/core_cmFunc.h **** 
 221:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:../CMSIS/Include/core_cmFunc.h **** 
 223:../CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 224:../CMSIS/Include/core_cmFunc.h ****  */
 225:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:../CMSIS/Include/core_cmFunc.h **** {
 227:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:../CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 229:../CMSIS/Include/core_cmFunc.h **** }
 230:../CMSIS/Include/core_cmFunc.h **** 
 231:../CMSIS/Include/core_cmFunc.h **** 
 232:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:../CMSIS/Include/core_cmFunc.h **** 
 234:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:../CMSIS/Include/core_cmFunc.h **** 
 236:../CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:../CMSIS/Include/core_cmFunc.h ****  */
 238:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:../CMSIS/Include/core_cmFunc.h **** {
 240:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:../CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:../CMSIS/Include/core_cmFunc.h **** }
 243:../CMSIS/Include/core_cmFunc.h **** 
 244:../CMSIS/Include/core_cmFunc.h **** 
 245:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:../CMSIS/Include/core_cmFunc.h **** 
 247:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:../CMSIS/Include/core_cmFunc.h **** 
 249:../CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 250:../CMSIS/Include/core_cmFunc.h ****  */
 251:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  /tmp/ccO0aQHC.s 			page 31


 252:../CMSIS/Include/core_cmFunc.h **** {
 253:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:../CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 255:../CMSIS/Include/core_cmFunc.h **** }
 256:../CMSIS/Include/core_cmFunc.h **** 
 257:../CMSIS/Include/core_cmFunc.h **** 
 258:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:../CMSIS/Include/core_cmFunc.h **** 
 260:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:../CMSIS/Include/core_cmFunc.h **** 
 262:../CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:../CMSIS/Include/core_cmFunc.h ****  */
 264:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:../CMSIS/Include/core_cmFunc.h **** {
 266:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:../CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:../CMSIS/Include/core_cmFunc.h **** }
 269:../CMSIS/Include/core_cmFunc.h **** 
 270:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:../CMSIS/Include/core_cmFunc.h **** 
 272:../CMSIS/Include/core_cmFunc.h **** 
 273:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:../CMSIS/Include/core_cmFunc.h **** 
 275:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:../CMSIS/Include/core_cmFunc.h **** 
 277:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:../CMSIS/Include/core_cmFunc.h **** 
 279:../CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:../CMSIS/Include/core_cmFunc.h ****  */
 281:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:../CMSIS/Include/core_cmFunc.h **** {
 283:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:../CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 286:../CMSIS/Include/core_cmFunc.h **** #else
 287:../CMSIS/Include/core_cmFunc.h ****    return(0);
 288:../CMSIS/Include/core_cmFunc.h **** #endif
 289:../CMSIS/Include/core_cmFunc.h **** }
 290:../CMSIS/Include/core_cmFunc.h **** 
 291:../CMSIS/Include/core_cmFunc.h **** 
 292:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:../CMSIS/Include/core_cmFunc.h **** 
 294:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:../CMSIS/Include/core_cmFunc.h **** 
 296:../CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:../CMSIS/Include/core_cmFunc.h ****  */
 298:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:../CMSIS/Include/core_cmFunc.h **** {
 300:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:../CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:../CMSIS/Include/core_cmFunc.h **** #else
 304:../CMSIS/Include/core_cmFunc.h ****   (void)fpscr;
 305:../CMSIS/Include/core_cmFunc.h **** #endif
 306:../CMSIS/Include/core_cmFunc.h **** }
 307:../CMSIS/Include/core_cmFunc.h **** 
 308:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
ARM GAS  /tmp/ccO0aQHC.s 			page 32


 309:../CMSIS/Include/core_cmFunc.h **** 
 310:../CMSIS/Include/core_cmFunc.h **** 
 311:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 312:../CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 313:../CMSIS/Include/core_cmFunc.h **** 
 314:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 315:../CMSIS/Include/core_cmFunc.h **** 
 316:../CMSIS/Include/core_cmFunc.h **** 
 317:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 318:../CMSIS/Include/core_cmFunc.h **** /* TI CCS specific functions */
 319:../CMSIS/Include/core_cmFunc.h **** 
 320:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_ccs.h>
 321:../CMSIS/Include/core_cmFunc.h **** 
 322:../CMSIS/Include/core_cmFunc.h **** 
 323:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:../CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 325:../CMSIS/Include/core_cmFunc.h **** 
 326:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:../CMSIS/Include/core_cmFunc.h **** 
 328:../CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:../CMSIS/Include/core_cmFunc.h ****  */
 331:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:../CMSIS/Include/core_cmFunc.h **** {
 333:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 334:../CMSIS/Include/core_cmFunc.h **** }
 335:../CMSIS/Include/core_cmFunc.h **** 
 336:../CMSIS/Include/core_cmFunc.h **** 
 337:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:../CMSIS/Include/core_cmFunc.h **** 
 339:../CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:../CMSIS/Include/core_cmFunc.h ****  */
 342:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:../CMSIS/Include/core_cmFunc.h **** {
 344:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  71              		.loc 3 344 0
  72              	@ 344 "../CMSIS/Include/core_cmFunc.h" 1
  73 0000 72B6     		cpsid i
  74              	@ 0 "" 2
  75              		.thumb
  76              	.LBE7:
  77              	.LBE6:
  67:../emlib/inc/em_int.h ****   __disable_irq();
  68:../emlib/inc/em_int.h ****   if (INT_LockCnt < UINT32_MAX)
  78              		.loc 2 68 0
  79 0002 074B     		ldr	r3, .L7
  80 0004 1B68     		ldr	r3, [r3]
  81 0006 B3F1FF3F 		cmp	r3, #-1
  82 000a 04D0     		beq	.L5
  69:../emlib/inc/em_int.h ****   {
  70:../emlib/inc/em_int.h ****     INT_LockCnt++;
  83              		.loc 2 70 0
  84 000c 044B     		ldr	r3, .L7
  85 000e 1B68     		ldr	r3, [r3]
  86 0010 5A1C     		adds	r2, r3, #1
  87 0012 034B     		ldr	r3, .L7
ARM GAS  /tmp/ccO0aQHC.s 			page 33


  88 0014 1A60     		str	r2, [r3]
  89              	.L5:
  71:../emlib/inc/em_int.h ****   }
  72:../emlib/inc/em_int.h **** 
  73:../emlib/inc/em_int.h ****   return INT_LockCnt;
  90              		.loc 2 73 0
  91 0016 024B     		ldr	r3, .L7
  92 0018 1B68     		ldr	r3, [r3]
  74:../emlib/inc/em_int.h **** }
  93              		.loc 2 74 0
  94 001a 1846     		mov	r0, r3
  95 001c 7047     		bx	lr
  96              	.L8:
  97 001e 00BF     		.align	2
  98              	.L7:
  99 0020 00000000 		.word	INT_LockCnt
 100              		.cfi_endproc
 101              	.LFE84:
 103              		.section	.text.INT_Enable,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 108              	INT_Enable:
 109              	.LFB85:
  75:../emlib/inc/em_int.h **** 
  76:../emlib/inc/em_int.h **** /***************************************************************************//**
  77:../emlib/inc/em_int.h ****  * @brief
  78:../emlib/inc/em_int.h ****  *   Enable interrupts.
  79:../emlib/inc/em_int.h ****  *
  80:../emlib/inc/em_int.h ****  * @return
  81:../emlib/inc/em_int.h ****  *   The resulting interrupt nesting level.
  82:../emlib/inc/em_int.h ****  *
  83:../emlib/inc/em_int.h ****  * @details
  84:../emlib/inc/em_int.h ****  *   Decrement interrupt lock level counter and enable interrupts if counter
  85:../emlib/inc/em_int.h ****  *   reached zero.
  86:../emlib/inc/em_int.h ****  *
  87:../emlib/inc/em_int.h ****  ******************************************************************************/
  88:../emlib/inc/em_int.h **** __STATIC_INLINE uint32_t INT_Enable(void)
  89:../emlib/inc/em_int.h **** {
 110              		.loc 2 89 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 82B0     		sub	sp, sp, #8
 116              		.cfi_def_cfa_offset 8
  90:../emlib/inc/em_int.h ****   uint32_t retVal;
  91:../emlib/inc/em_int.h **** 
  92:../emlib/inc/em_int.h ****   if (INT_LockCnt > 0)
 117              		.loc 2 92 0
 118 0002 0B4B     		ldr	r3, .L13
 119 0004 1B68     		ldr	r3, [r3]
 120 0006 002B     		cmp	r3, #0
 121 0008 0DD0     		beq	.L10
  93:../emlib/inc/em_int.h ****   {
  94:../emlib/inc/em_int.h ****     INT_LockCnt--;
 122              		.loc 2 94 0
ARM GAS  /tmp/ccO0aQHC.s 			page 34


 123 000a 094B     		ldr	r3, .L13
 124 000c 1B68     		ldr	r3, [r3]
 125 000e 5A1E     		subs	r2, r3, #1
 126 0010 074B     		ldr	r3, .L13
 127 0012 1A60     		str	r2, [r3]
  95:../emlib/inc/em_int.h ****     retVal = INT_LockCnt;
 128              		.loc 2 95 0
 129 0014 064B     		ldr	r3, .L13
 130 0016 1B68     		ldr	r3, [r3]
 131 0018 0193     		str	r3, [sp, #4]
  96:../emlib/inc/em_int.h ****     if (retVal == 0)
 132              		.loc 2 96 0
 133 001a 019B     		ldr	r3, [sp, #4]
 134 001c 002B     		cmp	r3, #0
 135 001e 00D1     		bne	.L11
 136              	.LBB8:
 137              	.LBB9:
 333:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 138              		.loc 3 333 0
 139              	@ 333 "../CMSIS/Include/core_cmFunc.h" 1
 140 0020 62B6     		cpsie i
 141              	@ 0 "" 2
 142              		.thumb
 143              	.L11:
 144              	.LBE9:
 145              	.LBE8:
  97:../emlib/inc/em_int.h ****     {
  98:../emlib/inc/em_int.h ****       __enable_irq();
  99:../emlib/inc/em_int.h ****     }
 100:../emlib/inc/em_int.h ****     return retVal;
 146              		.loc 2 100 0
 147 0022 019B     		ldr	r3, [sp, #4]
 148 0024 00E0     		b	.L12
 149              	.L10:
 101:../emlib/inc/em_int.h ****   }
 102:../emlib/inc/em_int.h ****   else
 103:../emlib/inc/em_int.h ****   {
 104:../emlib/inc/em_int.h ****     return 0;
 150              		.loc 2 104 0
 151 0026 0023     		movs	r3, #0
 152              	.L12:
 105:../emlib/inc/em_int.h ****   }
 106:../emlib/inc/em_int.h **** }
 153              		.loc 2 106 0
 154 0028 1846     		mov	r0, r3
 155 002a 02B0     		add	sp, sp, #8
 156              		@ sp needed
 157 002c 7047     		bx	lr
 158              	.L14:
 159 002e 00BF     		.align	2
 160              	.L13:
 161 0030 00000000 		.word	INT_LockCnt
 162              		.cfi_endproc
 163              	.LFE85:
 165              		.global	g_flgLEUART_LF2CRLF
 166              		.section	.data.g_flgLEUART_LF2CRLF,"aw",%progbits
 169              	g_flgLEUART_LF2CRLF:
ARM GAS  /tmp/ccO0aQHC.s 			page 35


 170 0000 01       		.byte	1
 171              		.section	.data.leuartInit,"aw",%progbits
 172              		.align	2
 175              	leuartInit:
 176 0000 04       		.byte	4
 177 0001 000000   		.space	3
 178 0004 00000000 		.word	0
 179 0008 80250000 		.word	9600
 180 000c 00       		.byte	0
 181 000d 00       		.byte	0
 182 000e 10       		.byte	16
 183 000f 00       		.space	1
 184              		.section	.data.dmaInit,"aw",%progbits
 185              		.align	2
 188              	dmaInit:
 189 0000 00       		.byte	0
 190 0001 000000   		.space	3
 191 0004 00000000 		.word	g_DMA_ControlBlock
 192              		.section	.data.chnlCfgTx,"aw",%progbits
 193              		.align	2
 196              	chnlCfgTx:
 197 0000 00       		.byte	0
 198 0001 00       		.byte	0
 199 0002 0000     		.space	2
 200 0004 01001000 		.word	1048577
 201 0008 0C000000 		.word	g_DMA_Callback+12
 202              		.global	descrCfgTx
 203              		.section	.data.descrCfgTx,"aw",%progbits
 204              		.align	2
 207              	descrCfgTx:
 208 0000 03       		.byte	3
 209 0001 00       		.byte	0
 210 0002 00       		.byte	0
 211 0003 00       		.byte	0
 212 0004 00       		.byte	0
 213 0005 000000   		.section	.bss.txFIFO,"aw",%nobits
 214              		.align	2
 217              	txFIFO:
 218 0000 00000000 		.space	1024
 218      00000000 
 218      00000000 
 218      00000000 
 218      00000000 
 219              		.section	.bss.txIdxPut,"aw",%nobits
 220              		.align	1
 223              	txIdxPut:
 224 0000 0000     		.space	2
 225              		.section	.bss.txIdxGet,"aw",%nobits
 226              		.align	1
 229              	txIdxGet:
 230 0000 0000     		.space	2
 231              		.section	.bss.txIdxGetNext,"aw",%nobits
 232              		.align	1
 235              	txIdxGetNext:
 236 0000 0000     		.space	2
 237              		.section	.bss.flgDMArun,"aw",%nobits
 240              	flgDMArun:
ARM GAS  /tmp/ccO0aQHC.s 			page 36


 241 0000 00       		.space	1
 242              		.section	.text.dmaTransferStart,"ax",%progbits
 243              		.align	2
 244              		.global	dmaTransferStart
 245              		.thumb
 246              		.thumb_func
 248              	dmaTransferStart:
 249              	.LFB114:
 250              		.file 4 "../drivers/LEUART.c"
   1:../drivers/LEUART.c **** /**************************************************************************//**
   2:../drivers/LEUART.c ****  * @file
   3:../drivers/LEUART.c ****  * @brief	LEUART Driver
   4:../drivers/LEUART.c ****  * @author	Energy Micro AS
   5:../drivers/LEUART.c ****  * @author	Ralf Gerhauser
   6:../drivers/LEUART.c ****  * @version	2015-01-15
   7:../drivers/LEUART.c ****  *
   8:../drivers/LEUART.c ****  * This is the driver for the Low Energy UART.  It is used to write log and
   9:../drivers/LEUART.c ****  * debug information to a connected host system.  The LEUART device to use
  10:../drivers/LEUART.c ****  * can be set via the @ref LEUART define, for an assignment of the DMA channel,
  11:../drivers/LEUART.c ****  * see @ref DMA_CHAN_LEUART_RX and @ref DMA_CHAN_LEUART_TX.
  12:../drivers/LEUART.c ****  *
  13:../drivers/LEUART.c ****  * @note This driver only supports data transmission.
  14:../drivers/LEUART.c ****  *
  15:../drivers/LEUART.c ****  ******************************************************************************
  16:../drivers/LEUART.c ****  * @section License
  17:../drivers/LEUART.c ****  * <b>(C) Copyright 2013 Energy Micro AS, http://www.energymicro.com</b>
  18:../drivers/LEUART.c ****  *******************************************************************************
  19:../drivers/LEUART.c ****  *
  20:../drivers/LEUART.c ****  * Permission is granted to anyone to use this software for any purpose,
  21:../drivers/LEUART.c ****  * including commercial applications, and to alter it and redistribute it
  22:../drivers/LEUART.c ****  * freely, subject to the following restrictions:
  23:../drivers/LEUART.c ****  *
  24:../drivers/LEUART.c ****  * 1. The origin of this software must not be misrepresented; you must not
  25:../drivers/LEUART.c ****  *    claim that you wrote the original software.
  26:../drivers/LEUART.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  27:../drivers/LEUART.c ****  *    misrepresented as being the original software.
  28:../drivers/LEUART.c ****  * 3. This notice may not be removed or altered from any source distribution.
  29:../drivers/LEUART.c ****  * 4. The source and compiled code may only be used on Energy Micro "EFM32"
  30:../drivers/LEUART.c ****  *    microcontrollers and "EFR4" radios.
  31:../drivers/LEUART.c ****  *
  32:../drivers/LEUART.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  33:../drivers/LEUART.c ****  * obligation to support this Software. Energy Micro AS is providing the
  34:../drivers/LEUART.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  35:../drivers/LEUART.c ****  * including, but not limited to, any implied warranties of merchantability
  36:../drivers/LEUART.c ****  * or fitness for any particular purpose or warranties against infringement
  37:../drivers/LEUART.c ****  * of any proprietary rights of a third party.
  38:../drivers/LEUART.c ****  *
  39:../drivers/LEUART.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  40:../drivers/LEUART.c ****  * special damages, or any other relief, or for any claim by any third party,
  41:../drivers/LEUART.c ****  * arising from your use of this Software.
  42:../drivers/LEUART.c ****  *
  43:../drivers/LEUART.c ****  ****************************************************************************//*
  44:../drivers/LEUART.c **** Revision History:
  45:../drivers/LEUART.c **** 2016-09-27,rage	Use INT_En/Disable() instead of __en/disable_irq().
  46:../drivers/LEUART.c **** */
  47:../drivers/LEUART.c **** 
  48:../drivers/LEUART.c **** /*=============================== Header Files ===============================*/
ARM GAS  /tmp/ccO0aQHC.s 			page 37


  49:../drivers/LEUART.c **** 
  50:../drivers/LEUART.c **** #include "em_chip.h"
  51:../drivers/LEUART.c **** #include "em_device.h"
  52:../drivers/LEUART.c **** #include "em_cmu.h"
  53:../drivers/LEUART.c **** #include "em_emu.h"
  54:../drivers/LEUART.c **** #include "em_int.h"
  55:../drivers/LEUART.c **** #include "em_leuart.h"
  56:../drivers/LEUART.c **** #include "LEUART.h"
  57:../drivers/LEUART.c **** 
  58:../drivers/LEUART.c **** /*=============================== Definitions ================================*/
  59:../drivers/LEUART.c **** 
  60:../drivers/LEUART.c ****     /*!@name Hardware Configuration: Serial Communication via LEUART. */
  61:../drivers/LEUART.c **** //@{
  62:../drivers/LEUART.c **** #define LEUART			LEUART0		//!< Device to use
  63:../drivers/LEUART.c **** #define cmuClock_LEUART		cmuClock_LEUART0    //!< CMU Clock for LEUART
  64:../drivers/LEUART.c **** #define LEUART_IRQn		LEUART0_IRQn	    //!< Interrupt for Rx
  65:../drivers/LEUART.c **** #define DMAREQ_LEUART_TXBL	DMAREQ_LEUART0_TXBL //!< DMA Request for Tx
  66:../drivers/LEUART.c **** #define DMAREQ_LEUART_RXDATAV	DMAREQ_LEUART0_RXDATAV //!< DMA Request for Rx
  67:../drivers/LEUART.c **** #define LEUART_IRQHandler	LEUART0_IRQHandler  //!< Interrupt Handler
  68:../drivers/LEUART.c **** #define LEUART_PORT		gpioPortD	//!< Port for TX pin
  69:../drivers/LEUART.c **** #define LEUART_PIN_TX		4		//!< Tx pin
  70:../drivers/LEUART.c **** #define LEUART_PIN_RX		5		//!< Rx pin
  71:../drivers/LEUART.c **** //@}
  72:../drivers/LEUART.c **** 
  73:../drivers/LEUART.c ****     /*! Size of the transmit FIFO in bytes */
  74:../drivers/LEUART.c **** #define TX_FIFO_SIZE		1024
  75:../drivers/LEUART.c **** 
  76:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
  77:../drivers/LEUART.c ****     /*! Size of the command line buffer in bytes */
  78:../drivers/LEUART.c **** #define CMD_LINE_SIZE		40
  79:../drivers/LEUART.c **** #endif
  80:../drivers/LEUART.c **** 
  81:../drivers/LEUART.c **** /*======================== External Data and Routines ========================*/
  82:../drivers/LEUART.c **** 
  83:../drivers/LEUART.c **** extern DMA_DESCRIPTOR_TypeDef g_DMA_ControlBlock[];
  84:../drivers/LEUART.c **** extern DMA_CB_TypeDef g_DMA_Callback[];
  85:../drivers/LEUART.c **** 
  86:../drivers/LEUART.c **** /*========================= Global Data and Routines =========================*/
  87:../drivers/LEUART.c **** 
  88:../drivers/LEUART.c **** /*!@brief Global flag to convert \<LF> to \<CR>\<LF> */
  89:../drivers/LEUART.c **** volatile bool	g_flgLEUART_LF2CRLF = true;
  90:../drivers/LEUART.c **** 
  91:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
  92:../drivers/LEUART.c **** /*!@brief Global flag to notify new command in g_CmdLine */
  93:../drivers/LEUART.c **** volatile bool	g_flgCmdLine;
  94:../drivers/LEUART.c **** 
  95:../drivers/LEUART.c **** /*!@brief Command line buffer */
  96:../drivers/LEUART.c **** uint8_t	 g_CmdLine[CMD_LINE_SIZE];
  97:../drivers/LEUART.c **** #endif
  98:../drivers/LEUART.c **** 
  99:../drivers/LEUART.c **** /*================================ Local Data ================================*/
 100:../drivers/LEUART.c **** 
 101:../drivers/LEUART.c **** /* Defining the LEUART initialization data */
 102:../drivers/LEUART.c **** static LEUART_Init_TypeDef leuartInit =
 103:../drivers/LEUART.c **** {
 104:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 105:../drivers/LEUART.c ****   .enable   = leuartEnable,	// Activate Tx and Rx Pin
ARM GAS  /tmp/ccO0aQHC.s 			page 38


 106:../drivers/LEUART.c **** #else
 107:../drivers/LEUART.c ****   .enable   = leuartEnableTx,	// Activate LEUn_TX pin only
 108:../drivers/LEUART.c **** #endif
 109:../drivers/LEUART.c ****   .refFreq  = 0,		// Get clock frequency from LEUART clock source
 110:../drivers/LEUART.c ****   .baudrate = 9600,		// Baudrate - overwritten by LEUART_Init()
 111:../drivers/LEUART.c ****   .databits = leuartDatabits8,	// Each LEUART frame containes 8 databits
 112:../drivers/LEUART.c ****   .parity   = leuartNoParity,	// No parity bits in use
 113:../drivers/LEUART.c ****   .stopbits = leuartStopbits2,	// Number of stop bits in a frame
 114:../drivers/LEUART.c **** };
 115:../drivers/LEUART.c **** 
 116:../drivers/LEUART.c **** /* DMA init structure */
 117:../drivers/LEUART.c **** static DMA_Init_TypeDef dmaInit =
 118:../drivers/LEUART.c **** {
 119:../drivers/LEUART.c ****     .hprot        = 0,			// No descriptor protection
 120:../drivers/LEUART.c ****     .controlBlock = g_DMA_ControlBlock,	// DMA control block alligned to 256
 121:../drivers/LEUART.c **** };
 122:../drivers/LEUART.c **** 
 123:../drivers/LEUART.c **** /* Setting up DMA channel for Tx */
 124:../drivers/LEUART.c **** static DMA_CfgChannel_TypeDef chnlCfgTx =
 125:../drivers/LEUART.c **** {
 126:../drivers/LEUART.c ****     .highPri   = false,			// Normal priority
 127:../drivers/LEUART.c ****     .enableInt = false,			// No interupt for callback function
 128:../drivers/LEUART.c ****     .select    = DMAREQ_LEUART_TXBL,	// DMA Req. is LEUARTx TX buffer empty
 129:../drivers/LEUART.c ****     .cb = &(g_DMA_Callback[DMA_CHAN_LEUART_TX]), // Callback for DMA TX done
 130:../drivers/LEUART.c **** };
 131:../drivers/LEUART.c **** 
 132:../drivers/LEUART.c **** /* Setting up channel descriptor for Tx  */
 133:../drivers/LEUART.c **** DMA_CfgDescr_TypeDef descrCfgTx =
 134:../drivers/LEUART.c **** {
 135:../drivers/LEUART.c ****     .dstInc  = dmaDataIncNone,		// Do not increment destination address
 136:../drivers/LEUART.c ****     .srcInc  = dmaDataInc1,		// Increment source address by one byte
 137:../drivers/LEUART.c ****     .size    = dmaDataSize1,		// Data size is one byte
 138:../drivers/LEUART.c ****     .arbRate = dmaArbitrate1,		// Rearbitrate for each byte recieved
 139:../drivers/LEUART.c ****     .hprot   = 0,			// No read/write source protection
 140:../drivers/LEUART.c **** };
 141:../drivers/LEUART.c **** 
 142:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 143:../drivers/LEUART.c **** /* Setting up DMA channel */
 144:../drivers/LEUART.c **** static DMA_CfgChannel_TypeDef chnlCfgRx =
 145:../drivers/LEUART.c **** {
 146:../drivers/LEUART.c ****     .highPri   = false,			// Normal priority
 147:../drivers/LEUART.c ****     .enableInt = false,			// No interupt for callback function
 148:../drivers/LEUART.c ****     .select    = DMAREQ_LEUART_RXDATAV,	// DMA Req. is LEUARTx RX data available
 149:../drivers/LEUART.c ****     .cb        = NULL,			// No callback function
 150:../drivers/LEUART.c **** };
 151:../drivers/LEUART.c **** 
 152:../drivers/LEUART.c **** /* Setting up channel descriptor */
 153:../drivers/LEUART.c **** DMA_CfgDescr_TypeDef descrCfgRx =
 154:../drivers/LEUART.c **** {
 155:../drivers/LEUART.c ****     .dstInc  = dmaDataInc1,		// Increment destination address by one
 156:../drivers/LEUART.c ****     .srcInc  = dmaDataIncNone,		// o not increment source address
 157:../drivers/LEUART.c ****     .size    = dmaDataSize1,		// Data size is one byte
 158:../drivers/LEUART.c ****     .arbRate = dmaArbitrate1,		// Rearbitrate for each byte recieved
 159:../drivers/LEUART.c ****     .hprot   = 0,			// No read/write source protection
 160:../drivers/LEUART.c **** };
 161:../drivers/LEUART.c **** #endif
 162:../drivers/LEUART.c **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 39


 163:../drivers/LEUART.c **** /* Transmit FIFO and index variables */
 164:../drivers/LEUART.c **** static uint8_t	 txFIFO[TX_FIFO_SIZE];
 165:../drivers/LEUART.c **** static volatile uint16_t txIdxPut, txIdxGet, txIdxGetNext;
 166:../drivers/LEUART.c **** 
 167:../drivers/LEUART.c **** /* Flag if DMA transfer is in progress */
 168:../drivers/LEUART.c **** static volatile bool	flgDMArun;
 169:../drivers/LEUART.c **** 
 170:../drivers/LEUART.c **** 
 171:../drivers/LEUART.c **** /**************************************************************************//**
 172:../drivers/LEUART.c ****  * @brief  DMA Callback function
 173:../drivers/LEUART.c ****  *
 174:../drivers/LEUART.c ****  * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 175:../drivers/LEUART.c ****  * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 176:../drivers/LEUART.c ****  *
 177:../drivers/LEUART.c ****  ******************************************************************************/
 178:../drivers/LEUART.c **** void dmaTransferStart (void)
 179:../drivers/LEUART.c **** {
 251              		.loc 4 179 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 8
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 00B5     		push	{lr}
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 14, -4
 258 0002 85B0     		sub	sp, sp, #20
 259              		.cfi_def_cfa_offset 24
 180:../drivers/LEUART.c **** uint16_t	idxPut;		// local index variable
 181:../drivers/LEUART.c **** int16_t		cnt;		// number of bytes to send
 182:../drivers/LEUART.c **** 
 183:../drivers/LEUART.c **** 
 184:../drivers/LEUART.c ****     INT_Disable();
 260              		.loc 4 184 0
 261 0004 FFF7FEFF 		bl	INT_Disable
 185:../drivers/LEUART.c **** 
 186:../drivers/LEUART.c ****     if (flgDMArun)
 262              		.loc 4 186 0
 263 0008 314B     		ldr	r3, .L21
 264 000a 1B78     		ldrb	r3, [r3]
 265 000c DBB2     		uxtb	r3, r3
 266 000e 002B     		cmp	r3, #0
 267 0010 02D0     		beq	.L16
 187:../drivers/LEUART.c ****     {
 188:../drivers/LEUART.c **** 	INT_Enable();
 268              		.loc 4 188 0
 269 0012 FFF7FEFF 		bl	INT_Enable
 189:../drivers/LEUART.c **** 	return;			// do not disturb a running DMA transfer
 270              		.loc 4 189 0
 271 0016 57E0     		b	.L15
 272              	.L16:
 190:../drivers/LEUART.c ****     }
 191:../drivers/LEUART.c **** 
 192:../drivers/LEUART.c ****     flgDMArun = true;		// set flag for DMA activity
 273              		.loc 4 192 0
 274 0018 2D4B     		ldr	r3, .L21
 275 001a 0122     		movs	r2, #1
 276 001c 1A70     		strb	r2, [r3]
 193:../drivers/LEUART.c ****     INT_Enable();
ARM GAS  /tmp/ccO0aQHC.s 			page 40


 277              		.loc 4 193 0
 278 001e FFF7FEFF 		bl	INT_Enable
 194:../drivers/LEUART.c **** 
 195:../drivers/LEUART.c ****     /* Use local index that will not change */
 196:../drivers/LEUART.c ****     idxPut = txIdxPut;
 279              		.loc 4 196 0
 280 0022 2C4B     		ldr	r3, .L21+4
 281 0024 1B88     		ldrh	r3, [r3]	@ movhi
 282 0026 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 197:../drivers/LEUART.c **** 
 198:../drivers/LEUART.c ****     /* Calculate how many bytes to transfer */
 199:../drivers/LEUART.c ****     cnt = idxPut - txIdxGet;
 283              		.loc 4 199 0
 284 002a 2B4B     		ldr	r3, .L21+8
 285 002c 1B88     		ldrh	r3, [r3]	@ movhi
 286 002e 9BB2     		uxth	r3, r3
 287 0030 BDF80E20 		ldrh	r2, [sp, #14]	@ movhi
 288 0034 D31A     		subs	r3, r2, r3
 289 0036 9BB2     		uxth	r3, r3
 290 0038 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 200:../drivers/LEUART.c **** 
 201:../drivers/LEUART.c ****     if (cnt == 0)
 291              		.loc 4 201 0
 292 003c BDF90C30 		ldrsh	r3, [sp, #12]
 293 0040 002B     		cmp	r3, #0
 294 0042 03D1     		bne	.L18
 202:../drivers/LEUART.c ****     {
 203:../drivers/LEUART.c **** 	flgDMArun = false;	// clear flag again
 295              		.loc 4 203 0
 296 0044 224B     		ldr	r3, .L21
 297 0046 0022     		movs	r2, #0
 298 0048 1A70     		strb	r2, [r3]
 204:../drivers/LEUART.c **** 	return;
 299              		.loc 4 204 0
 300 004a 3DE0     		b	.L15
 301              	.L18:
 205:../drivers/LEUART.c ****     }
 206:../drivers/LEUART.c **** 
 207:../drivers/LEUART.c ****     if (cnt < 0)
 302              		.loc 4 207 0
 303 004c BDF90C30 		ldrsh	r3, [sp, #12]
 304 0050 002B     		cmp	r3, #0
 305 0052 0CDA     		bge	.L19
 208:../drivers/LEUART.c ****     {
 209:../drivers/LEUART.c **** 	/* Limit DMA transfer to end of FIFO buffer */
 210:../drivers/LEUART.c **** 	idxPut = sizeof(txFIFO);
 306              		.loc 4 210 0
 307 0054 4FF48063 		mov	r3, #1024
 308 0058 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 211:../drivers/LEUART.c **** 	cnt = idxPut - txIdxGet;
 309              		.loc 4 211 0
 310 005c 1E4B     		ldr	r3, .L21+8
 311 005e 1B88     		ldrh	r3, [r3]	@ movhi
 312 0060 9BB2     		uxth	r3, r3
 313 0062 BDF80E20 		ldrh	r2, [sp, #14]	@ movhi
 314 0066 D31A     		subs	r3, r2, r3
 315 0068 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccO0aQHC.s 			page 41


 316 006a ADF80C30 		strh	r3, [sp, #12]	@ movhi
 317              	.L19:
 212:../drivers/LEUART.c ****     }
 213:../drivers/LEUART.c **** 
 214:../drivers/LEUART.c ****     /* Calculate next value of the Get Index */
 215:../drivers/LEUART.c ****     txIdxGetNext = txIdxGet + cnt;
 318              		.loc 4 215 0
 319 006e 1A4B     		ldr	r3, .L21+8
 320 0070 1B88     		ldrh	r3, [r3]	@ movhi
 321 0072 9AB2     		uxth	r2, r3
 322 0074 BDF80C30 		ldrh	r3, [sp, #12]
 323 0078 1344     		add	r3, r3, r2
 324 007a 9AB2     		uxth	r2, r3
 325 007c 174B     		ldr	r3, .L21+12
 326 007e 1A80     		strh	r2, [r3]	@ movhi
 216:../drivers/LEUART.c ****     if (txIdxGetNext >= sizeof(txFIFO))
 327              		.loc 4 216 0
 328 0080 164B     		ldr	r3, .L21+12
 329 0082 1B88     		ldrh	r3, [r3]	@ movhi
 330 0084 9BB2     		uxth	r3, r3
 331 0086 B3F5806F 		cmp	r3, #1024
 332 008a 07D3     		bcc	.L20
 217:../drivers/LEUART.c **** 	txIdxGetNext -= sizeof(txFIFO);
 333              		.loc 4 217 0
 334 008c 134B     		ldr	r3, .L21+12
 335 008e 1B88     		ldrh	r3, [r3]	@ movhi
 336 0090 9BB2     		uxth	r3, r3
 337 0092 A3F58063 		sub	r3, r3, #1024
 338 0096 9AB2     		uxth	r2, r3
 339 0098 104B     		ldr	r3, .L21+12
 340 009a 1A80     		strh	r2, [r3]	@ movhi
 341              	.L20:
 218:../drivers/LEUART.c **** 
 219:../drivers/LEUART.c ****     /* Set new DMA source end address directly in the DMA descriptor */
 220:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
 342              		.loc 4 220 0
 343 009c BDF80E30 		ldrh	r3, [sp, #14]
 344 00a0 5A1E     		subs	r2, r3, #1
 345 00a2 0F4B     		ldr	r3, .L21+16
 346 00a4 1A44     		add	r2, r2, r3
 347 00a6 0F4B     		ldr	r3, .L21+20
 348 00a8 1A61     		str	r2, [r3, #16]
 221:../drivers/LEUART.c **** 
 222:../drivers/LEUART.c ****     /* Enable DMA wake-up from LEUART TX */
 223:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
 349              		.loc 4 223 0
 350 00aa 0F4B     		ldr	r3, .L21+24
 351 00ac 0122     		movs	r2, #1
 352 00ae 1A60     		str	r2, [r3]
 224:../drivers/LEUART.c **** 
 225:../drivers/LEUART.c ****     /* (Re)starting the transfer. Using Basic Mode */
 226:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
 227:../drivers/LEUART.c **** 		      true,		// Use primary descriptor
 228:../drivers/LEUART.c **** 		      false,		// No DMA burst
 229:../drivers/LEUART.c **** 		      NULL,		// Keep destination address
 230:../drivers/LEUART.c **** 		      NULL,		// Keep source address
 231:../drivers/LEUART.c **** 		      cnt - 1);		// Size of buffer - 1
ARM GAS  /tmp/ccO0aQHC.s 			page 42


 353              		.loc 4 231 0
 354 00b0 BDF90C30 		ldrsh	r3, [sp, #12]
 355 00b4 013B     		subs	r3, r3, #1
 226:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
 356              		.loc 4 226 0
 357 00b6 0022     		movs	r2, #0
 358 00b8 0092     		str	r2, [sp]
 359 00ba 0193     		str	r3, [sp, #4]
 360 00bc 0120     		movs	r0, #1
 361 00be 0121     		movs	r1, #1
 362 00c0 0022     		movs	r2, #0
 363 00c2 0023     		movs	r3, #0
 364 00c4 FFF7FEFF 		bl	DMA_ActivateBasic
 365              	.L15:
 232:../drivers/LEUART.c **** }
 366              		.loc 4 232 0
 367 00c8 05B0     		add	sp, sp, #20
 368              		@ sp needed
 369 00ca 5DF804FB 		ldr	pc, [sp], #4
 370              	.L22:
 371 00ce 00BF     		.align	2
 372              	.L21:
 373 00d0 00000000 		.word	flgDMArun
 374 00d4 00000000 		.word	txIdxPut
 375 00d8 00000000 		.word	txIdxGet
 376 00dc 00000000 		.word	txIdxGetNext
 377 00e0 00000000 		.word	txFIFO
 378 00e4 00000000 		.word	g_DMA_ControlBlock
 379 00e8 34000843 		.word	1124597812
 380              		.cfi_endproc
 381              	.LFE114:
 383              		.section	.text.dmaTransferDone,"ax",%progbits
 384              		.align	2
 385              		.global	dmaTransferDone
 386              		.thumb
 387              		.thumb_func
 389              	dmaTransferDone:
 390              	.LFB115:
 233:../drivers/LEUART.c **** 
 234:../drivers/LEUART.c **** 
 235:../drivers/LEUART.c **** /**************************************************************************//**
 236:../drivers/LEUART.c ****  * @brief  DMA Callback function
 237:../drivers/LEUART.c ****  *
 238:../drivers/LEUART.c ****  * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 239:../drivers/LEUART.c ****  * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 240:../drivers/LEUART.c ****  *
 241:../drivers/LEUART.c ****  ******************************************************************************/
 242:../drivers/LEUART.c **** void dmaTransferDone(unsigned int channel, bool primary, void *user)
 243:../drivers/LEUART.c **** {
 391              		.loc 4 243 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 16
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395 0000 00B5     		push	{lr}
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 14, -4
 398 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccO0aQHC.s 			page 43


 399              		.cfi_def_cfa_offset 24
 400 0004 0390     		str	r0, [sp, #12]
 401 0006 0B46     		mov	r3, r1
 402 0008 0192     		str	r2, [sp, #4]
 403 000a 8DF80B30 		strb	r3, [sp, #11]
 244:../drivers/LEUART.c ****     (void) channel;
 245:../drivers/LEUART.c ****     (void) primary;
 246:../drivers/LEUART.c ****     (void) user;
 247:../drivers/LEUART.c **** 
 248:../drivers/LEUART.c ****     /* Disable DMA wake-up from LEUART TX */
 249:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 0;
 404              		.loc 4 249 0
 405 000e 084B     		ldr	r3, .L24
 406 0010 0022     		movs	r2, #0
 407 0012 1A60     		str	r2, [r3]
 250:../drivers/LEUART.c **** 
 251:../drivers/LEUART.c ****     /* Update Get Index */
 252:../drivers/LEUART.c ****     txIdxGet = txIdxGetNext;
 408              		.loc 4 252 0
 409 0014 074B     		ldr	r3, .L24+4
 410 0016 1B88     		ldrh	r3, [r3]	@ movhi
 411 0018 9AB2     		uxth	r2, r3
 412 001a 074B     		ldr	r3, .L24+8
 413 001c 1A80     		strh	r2, [r3]	@ movhi
 253:../drivers/LEUART.c **** 
 254:../drivers/LEUART.c ****     /* Clear DMA running flag */
 255:../drivers/LEUART.c ****     flgDMArun = false;
 414              		.loc 4 255 0
 415 001e 074B     		ldr	r3, .L24+12
 416 0020 0022     		movs	r2, #0
 417 0022 1A70     		strb	r2, [r3]
 256:../drivers/LEUART.c **** 
 257:../drivers/LEUART.c ****     /* Check if still data to send */
 258:../drivers/LEUART.c ****     dmaTransferStart();
 418              		.loc 4 258 0
 419 0024 FFF7FEFF 		bl	dmaTransferStart
 259:../drivers/LEUART.c **** }
 420              		.loc 4 259 0
 421 0028 05B0     		add	sp, sp, #20
 422              		@ sp needed
 423 002a 5DF804FB 		ldr	pc, [sp], #4
 424              	.L25:
 425 002e 00BF     		.align	2
 426              	.L24:
 427 0030 34000843 		.word	1124597812
 428 0034 00000000 		.word	txIdxGetNext
 429 0038 00000000 		.word	txIdxGet
 430 003c 00000000 		.word	flgDMArun
 431              		.cfi_endproc
 432              	.LFE115:
 434              		.section	.text.setupLeuartDma,"ax",%progbits
 435              		.align	2
 436              		.thumb
 437              		.thumb_func
 439              	setupLeuartDma:
 440              	.LFB116:
 260:../drivers/LEUART.c **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 44


 261:../drivers/LEUART.c **** 
 262:../drivers/LEUART.c **** /**************************************************************************//**
 263:../drivers/LEUART.c ****  * @brief  Setup Low Energy UART with DMA operation
 264:../drivers/LEUART.c ****  *
 265:../drivers/LEUART.c ****  * The LEUART/DMA interaction is defined, and the DMA, channel and descriptor
 266:../drivers/LEUART.c ****  * is initialized. The destination for all the DMA transfers through this
 267:../drivers/LEUART.c ****  * channel is set to be the LEUART TXDATA register, and transfer complete
 268:../drivers/LEUART.c ****  * interrupt is enabled.
 269:../drivers/LEUART.c ****  *
 270:../drivers/LEUART.c ****  *****************************************************************************/
 271:../drivers/LEUART.c **** static void setupLeuartDma(void)
 272:../drivers/LEUART.c **** {
 441              		.loc 4 272 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 3, -8
 448              		.cfi_offset 14, -4
 273:../drivers/LEUART.c ****     /* Setting call-back function */
 274:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
 449              		.loc 4 274 0
 450 0002 0F4B     		ldr	r3, .L27
 451 0004 0F4A     		ldr	r2, .L27+4
 452 0006 DA60     		str	r2, [r3, #12]
 275:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
 453              		.loc 4 275 0
 454 0008 0D4B     		ldr	r3, .L27
 455 000a 0022     		movs	r2, #0
 456 000c 1A61     		str	r2, [r3, #16]
 276:../drivers/LEUART.c **** 
 277:../drivers/LEUART.c ****     /* Initializing DMA, channel and descriptor for Tx */
 278:../drivers/LEUART.c ****     DMA_Init(&dmaInit);
 457              		.loc 4 278 0
 458 000e 0E48     		ldr	r0, .L27+8
 459 0010 FFF7FEFF 		bl	DMA_Init
 279:../drivers/LEUART.c ****     DMA_CfgChannel(DMA_CHAN_LEUART_TX, &chnlCfgTx);
 460              		.loc 4 279 0
 461 0014 0120     		movs	r0, #1
 462 0016 0D49     		ldr	r1, .L27+12
 463 0018 FFF7FEFF 		bl	DMA_CfgChannel
 280:../drivers/LEUART.c ****     DMA_CfgDescr(DMA_CHAN_LEUART_TX, true, &descrCfgTx);
 464              		.loc 4 280 0
 465 001c 0120     		movs	r0, #1
 466 001e 0121     		movs	r1, #1
 467 0020 0B4A     		ldr	r2, .L27+16
 468 0022 FFF7FEFF 		bl	DMA_CfgDescr
 281:../drivers/LEUART.c **** 
 282:../drivers/LEUART.c ****     /* Set new DMA destination end address directly in the DMA descriptor */
 283:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].DSTEND = &LEUART->TXDATA;
 469              		.loc 4 283 0
 470 0026 0B4B     		ldr	r3, .L27+20
 471 0028 0B4A     		ldr	r2, .L27+24
 472 002a 5A61     		str	r2, [r3, #20]
 284:../drivers/LEUART.c **** 
 285:../drivers/LEUART.c ****     /* Enable DMA Transfer Complete Interrupt */
ARM GAS  /tmp/ccO0aQHC.s 			page 45


 286:../drivers/LEUART.c ****     DMA->IEN = (DMA_IEN_CH0DONE << DMA_CHAN_LEUART_TX);
 473              		.loc 4 286 0
 474 002c 0B4B     		ldr	r3, .L27+28
 475 002e 03F58053 		add	r3, r3, #4096
 476 0032 0C33     		adds	r3, r3, #12
 477 0034 0222     		movs	r2, #2
 478 0036 1A60     		str	r2, [r3]
 287:../drivers/LEUART.c **** 
 288:../drivers/LEUART.c ****     /* Enable DMA interrupt vector */
 289:../drivers/LEUART.c ****     NVIC_EnableIRQ(DMA_IRQn);
 479              		.loc 4 289 0
 480 0038 0020     		movs	r0, #0
 481 003a FFF7FEFF 		bl	NVIC_EnableIRQ
 290:../drivers/LEUART.c **** 
 291:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 292:../drivers/LEUART.c ****     /* Initializing DMA, channel and desriptor */
 293:../drivers/LEUART.c ****     DMA_CfgChannel(DMA_CHAN_LEUART_RX, &chnlCfgRx);
 294:../drivers/LEUART.c ****     DMA_CfgDescr(DMA_CHAN_LEUART_RX, true, &descrCfgRx);
 295:../drivers/LEUART.c **** 
 296:../drivers/LEUART.c ****     /* Starting the transfer. Using Basic Mode */
 297:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_RX, // Activate channel selected
 298:../drivers/LEUART.c **** 		      true,		// Use primary descriptor
 299:../drivers/LEUART.c **** 		      false,		// No DMA burst
 300:../drivers/LEUART.c **** 		      (void *) g_CmdLine,	// Destination address
 301:../drivers/LEUART.c **** 		      (void *) &LEUART->RXDATA,	// Source address is register
 302:../drivers/LEUART.c **** 		      CMD_LINE_SIZE - 1);	// Size of buffer - 1
 303:../drivers/LEUART.c **** 
 304:../drivers/LEUART.c ****     /* Set LEUART signal frame to <NL> (or <CR>) */
 305:../drivers/LEUART.c ****     LEUART->SIGFRAME = '\n';
 306:../drivers/LEUART.c **** 
 307:../drivers/LEUART.c ****     /* Enable LEUART Signal Frame Interrupt */
 308:../drivers/LEUART.c ****     LEUART_IntEnable(LEUART, LEUART_IEN_SIGF);
 309:../drivers/LEUART.c **** 
 310:../drivers/LEUART.c ****     /* Enable LEUART interrupt vector */
 311:../drivers/LEUART.c ****     NVIC_EnableIRQ(LEUART_IRQn);
 312:../drivers/LEUART.c **** 
 313:../drivers/LEUART.c ****     /* Make sure the LEUART wakes up the DMA on RX data */
 314:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_RXDMAWU_SHIFT) = 1;
 315:../drivers/LEUART.c **** #endif
 316:../drivers/LEUART.c **** }
 482              		.loc 4 316 0
 483 003e 08BD     		pop	{r3, pc}
 484              	.L28:
 485              		.align	2
 486              	.L27:
 487 0040 00000000 		.word	g_DMA_Callback
 488 0044 00000000 		.word	dmaTransferDone
 489 0048 00000000 		.word	dmaInit
 490 004c 00000000 		.word	chnlCfgTx
 491 0050 00000000 		.word	descrCfgTx
 492 0054 00000000 		.word	g_DMA_ControlBlock
 493 0058 28400840 		.word	1074282536
 494 005c 00200C40 		.word	1074536448
 495              		.cfi_endproc
 496              	.LFE116:
 498              		.section	.text.drvLEUART_Init,"ax",%progbits
 499              		.align	2
ARM GAS  /tmp/ccO0aQHC.s 			page 46


 500              		.global	drvLEUART_Init
 501              		.thumb
 502              		.thumb_func
 504              	drvLEUART_Init:
 505              	.LFB117:
 317:../drivers/LEUART.c **** 
 318:../drivers/LEUART.c **** 
 319:../drivers/LEUART.c **** /**************************************************************************//**
 320:../drivers/LEUART.c ****  * @brief  Initialize Low Energy UART
 321:../drivers/LEUART.c ****  *
 322:../drivers/LEUART.c ****  * Here the LEUART is initialized with the chosen settings. It is then routed
 323:../drivers/LEUART.c ****  * to location 0 to avoid conflict with the LCD pinout. Finally the GPIO mode
 324:../drivers/LEUART.c ****  * is set to push pull.
 325:../drivers/LEUART.c ****  *
 326:../drivers/LEUART.c ****  * @param[in] baud
 327:../drivers/LEUART.c ****  *	Baudrate to use (maximum 9600bd).
 328:../drivers/LEUART.c ****  *
 329:../drivers/LEUART.c ****  *****************************************************************************/
 330:../drivers/LEUART.c **** void	drvLEUART_Init (uint32_t baud)
 331:../drivers/LEUART.c **** {
 506              		.loc 4 331 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 8
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510 0000 00B5     		push	{lr}
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 14, -4
 513 0002 83B0     		sub	sp, sp, #12
 514              		.cfi_def_cfa_offset 16
 515 0004 0190     		str	r0, [sp, #4]
 332:../drivers/LEUART.c ****     /* Enabling clocks, all other remain disabled */
 333:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
 516              		.loc 4 333 0
 517 0006 1548     		ldr	r0, .L30
 518 0008 0121     		movs	r1, #1
 519 000a FFF7FEFF 		bl	CMU_ClockEnable
 334:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
 520              		.loc 4 334 0
 521 000e 1448     		ldr	r0, .L30+4
 522 0010 0121     		movs	r1, #1
 523 0012 FFF7FEFF 		bl	CMU_ClockEnable
 335:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock
 524              		.loc 4 335 0
 525 0016 1348     		ldr	r0, .L30+8
 526 0018 0121     		movs	r1, #1
 527 001a FFF7FEFF 		bl	CMU_ClockEnable
 336:../drivers/LEUART.c **** 
 337:../drivers/LEUART.c ****     /* Reseting and initializing LEUART */
 338:../drivers/LEUART.c ****     LEUART_Reset(LEUART);
 528              		.loc 4 338 0
 529 001e 1248     		ldr	r0, .L30+12
 530 0020 FFF7FEFF 		bl	LEUART_Reset
 339:../drivers/LEUART.c ****     leuartInit.baudrate = baud;
 531              		.loc 4 339 0
 532 0024 114B     		ldr	r3, .L30+16
 533 0026 019A     		ldr	r2, [sp, #4]
 534 0028 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccO0aQHC.s 			page 47


 340:../drivers/LEUART.c ****     LEUART_Init(LEUART, &leuartInit);
 535              		.loc 4 340 0
 536 002a 0F48     		ldr	r0, .L30+12
 537 002c 0F49     		ldr	r1, .L30+16
 538 002e FFF7FEFF 		bl	LEUART_Init
 341:../drivers/LEUART.c **** 
 342:../drivers/LEUART.c ****     /* Route LEUART Tx (and Rx) Pin to location 0 (PD4/PD5) */
 343:../drivers/LEUART.c ****     LEUART->ROUTE = LEUART_ROUTE_TXPEN
 539              		.loc 4 343 0
 540 0032 0D4B     		ldr	r3, .L30+12
 541 0034 0222     		movs	r2, #2
 542 0036 5A65     		str	r2, [r3, #84]
 344:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 345:../drivers/LEUART.c **** 		  | LEUART_ROUTE_RXPEN
 346:../drivers/LEUART.c **** #endif
 347:../drivers/LEUART.c **** 		  | LEUART_ROUTE_LOCATION_LOC0;
 348:../drivers/LEUART.c **** 
 349:../drivers/LEUART.c ****     /* Enable GPIO for LEUART. Tx is on D4, Rx on D5 */
 350:../drivers/LEUART.c ****     GPIO_PinModeSet(LEUART_PORT,		// GPIO port
 543              		.loc 4 350 0
 544 0038 0320     		movs	r0, #3
 545 003a 0421     		movs	r1, #4
 546 003c 0422     		movs	r2, #4
 547 003e 0123     		movs	r3, #1
 548 0040 FFF7FEFF 		bl	GPIO_PinModeSet
 351:../drivers/LEUART.c **** 		    LEUART_PIN_TX,		// GPIO port number
 352:../drivers/LEUART.c **** 		    gpioModePushPull,		// Pin mode is set to push pull
 353:../drivers/LEUART.c **** 		    1);				// High idle state
 354:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 355:../drivers/LEUART.c ****     GPIO_PinModeSet(LEUART_PORT,		// GPIO port
 356:../drivers/LEUART.c **** 		    LEUART_PIN_RX,		// GPIO port number
 357:../drivers/LEUART.c **** 		    gpioModeInputPull,		// Pin mode is set to input with
 358:../drivers/LEUART.c **** 		    1);				// Pull-Up
 359:../drivers/LEUART.c **** #endif
 360:../drivers/LEUART.c **** 
 361:../drivers/LEUART.c ****     /* Setup LEUART with DMA */
 362:../drivers/LEUART.c ****     setupLeuartDma();
 549              		.loc 4 362 0
 550 0044 FFF7FEFF 		bl	setupLeuartDma
 363:../drivers/LEUART.c **** 
 364:../drivers/LEUART.c ****     /* Set index variables to the beginning of the FIFO */
 365:../drivers/LEUART.c ****     txIdxPut = txIdxGet = 0;
 551              		.loc 4 365 0
 552 0048 0023     		movs	r3, #0
 553 004a 094A     		ldr	r2, .L30+20
 554 004c 1946     		mov	r1, r3	@ movhi
 555 004e 1180     		strh	r1, [r2]	@ movhi
 556 0050 084A     		ldr	r2, .L30+24
 557 0052 1380     		strh	r3, [r2]	@ movhi
 366:../drivers/LEUART.c **** }
 558              		.loc 4 366 0
 559 0054 03B0     		add	sp, sp, #12
 560              		@ sp needed
 561 0056 5DF804FB 		ldr	pc, [sp], #4
 562              	.L31:
 563 005a 00BF     		.align	2
 564              	.L30:
ARM GAS  /tmp/ccO0aQHC.s 			page 48


 565 005c 00130400 		.word	267008
 566 0060 00C20200 		.word	180736
 567 0064 40051400 		.word	1312064
 568 0068 00400840 		.word	1074282496
 569 006c 00000000 		.word	leuartInit
 570 0070 00000000 		.word	txIdxGet
 571 0074 00000000 		.word	txIdxPut
 572              		.cfi_endproc
 573              	.LFE117:
 575              		.section	.text.drvLEUART_puts,"ax",%progbits
 576              		.align	2
 577              		.global	drvLEUART_puts
 578              		.thumb
 579              		.thumb_func
 581              	drvLEUART_puts:
 582              	.LFB118:
 367:../drivers/LEUART.c **** 
 368:../drivers/LEUART.c **** 
 369:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 370:../drivers/LEUART.c **** /**************************************************************************//**
 371:../drivers/LEUART.c ****  * @brief LEUART IRQ handler
 372:../drivers/LEUART.c ****  *
 373:../drivers/LEUART.c ****  * When a character has been received by the LEUART, this interrupt routine will
 374:../drivers/LEUART.c ****  * store the character into the rxFIFO.
 375:../drivers/LEUART.c ****  *
 376:../drivers/LEUART.c ****  *****************************************************************************/
 377:../drivers/LEUART.c **** void LEUART_IRQHandler(void)
 378:../drivers/LEUART.c **** {
 379:../drivers/LEUART.c **** uint32_t leuartif, len;
 380:../drivers/LEUART.c **** 
 381:../drivers/LEUART.c ****     /* Store and reset pending interupts */
 382:../drivers/LEUART.c ****     leuartif = LEUART_IntGet(LEUART);
 383:../drivers/LEUART.c ****     LEUART_IntClear(LEUART, leuartif);
 384:../drivers/LEUART.c **** 
 385:../drivers/LEUART.c ****     /* Check for frame found */
 386:../drivers/LEUART.c ****     if (leuartif & LEUART_IF_SIGF)
 387:../drivers/LEUART.c ****     {
 388:../drivers/LEUART.c **** 	/* Zero-terminate RX command line buffer */
 389:../drivers/LEUART.c **** 	len = CMD_LINE_SIZE - 2
 390:../drivers/LEUART.c **** 	    - ((g_DMA_ControlBlock[DMA_CHAN_LEUART_RX].CTRL >> 4) & 0x3FF);
 391:../drivers/LEUART.c **** 
 392:../drivers/LEUART.c **** 	g_CmdLine[len] = EOS;
 393:../drivers/LEUART.c **** 
 394:../drivers/LEUART.c **** 	/* set flag to notify new command is available */
 395:../drivers/LEUART.c **** 	g_flgCmdLine = true;
 396:../drivers/LEUART.c **** 
 397:../drivers/LEUART.c **** 	/* Re-start DMA */
 398:../drivers/LEUART.c **** 	DMA_ActivateBasic(DMA_CHAN_LEUART_RX, // Activate channel selected
 399:../drivers/LEUART.c **** 			  true,		// Use primary descriptor
 400:../drivers/LEUART.c **** 			  false,	// No DMA burst
 401:../drivers/LEUART.c **** 			  NULL,		// keep destination address
 402:../drivers/LEUART.c **** 			  NULL,		// keep source address
 403:../drivers/LEUART.c **** 			  CMD_LINE_SIZE - 1);	// Size of buffer - 1
 404:../drivers/LEUART.c ****     }
 405:../drivers/LEUART.c **** }
 406:../drivers/LEUART.c **** #endif
 407:../drivers/LEUART.c **** 
ARM GAS  /tmp/ccO0aQHC.s 			page 49


 408:../drivers/LEUART.c **** 
 409:../drivers/LEUART.c **** /***************************************************************************//**
 410:../drivers/LEUART.c ****  *
 411:../drivers/LEUART.c ****  * @brief  Put string into transmit FIFO
 412:../drivers/LEUART.c ****  *
 413:../drivers/LEUART.c ****  * This routine writes the specified string into the transmit FIFO, where it
 414:../drivers/LEUART.c ****  * is transferred to the LEUART via DMA.  If there is no more space in the
 415:../drivers/LEUART.c ****  * FIFO, characters will be discarded.
 416:../drivers/LEUART.c ****  *
 417:../drivers/LEUART.c ****  * @param[in] pStr
 418:../drivers/LEUART.c ****  *	Adress pointer of the string to write into the FIFO.
 419:../drivers/LEUART.c ****  *
 420:../drivers/LEUART.c ****  ******************************************************************************/
 421:../drivers/LEUART.c **** void	 drvLEUART_puts (const char *pStr)
 422:../drivers/LEUART.c **** {
 583              		.loc 4 422 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 16
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587 0000 00B5     		push	{lr}
 588              		.cfi_def_cfa_offset 4
 589              		.cfi_offset 14, -4
 590 0002 85B0     		sub	sp, sp, #20
 591              		.cfi_def_cfa_offset 24
 592 0004 0190     		str	r0, [sp, #4]
 423:../drivers/LEUART.c **** int16_t	cnt;			// free buffer space in number of bytes
 424:../drivers/LEUART.c **** bool	sendCR = false;		// set true to write <CR> to buffer
 593              		.loc 4 424 0
 594 0006 0023     		movs	r3, #0
 595 0008 8DF80D30 		strb	r3, [sp, #13]
 425:../drivers/LEUART.c **** 
 426:../drivers/LEUART.c **** 
 427:../drivers/LEUART.c ****     while (*pStr != EOS)
 596              		.loc 4 427 0
 597 000c 54E0     		b	.L33
 598              	.L39:
 428:../drivers/LEUART.c ****     {
 429:../drivers/LEUART.c **** 	/* Non-blocking: discard string if FIFO is full */
 430:../drivers/LEUART.c **** 	cnt  = txIdxPut;
 599              		.loc 4 430 0
 600 000e 2F4B     		ldr	r3, .L40
 601 0010 1B88     		ldrh	r3, [r3]	@ movhi
 602 0012 9BB2     		uxth	r3, r3
 603 0014 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 431:../drivers/LEUART.c **** 	cnt -= txIdxGet;
 604              		.loc 4 431 0
 605 0018 BDF80E20 		ldrh	r2, [sp, #14]
 606 001c 2C4B     		ldr	r3, .L40+4
 607 001e 1B88     		ldrh	r3, [r3]	@ movhi
 608 0020 9BB2     		uxth	r3, r3
 609 0022 D31A     		subs	r3, r2, r3
 610 0024 9BB2     		uxth	r3, r3
 611 0026 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 432:../drivers/LEUART.c **** 	if (cnt < 0)
 612              		.loc 4 432 0
 613 002a BDF90E30 		ldrsh	r3, [sp, #14]
 614 002e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccO0aQHC.s 			page 50


 615 0030 06DA     		bge	.L34
 433:../drivers/LEUART.c **** 	    cnt += sizeof(txFIFO);
 616              		.loc 4 433 0
 617 0032 BDF80E30 		ldrh	r3, [sp, #14]
 618 0036 03F58063 		add	r3, r3, #1024
 619 003a 9BB2     		uxth	r3, r3
 620 003c ADF80E30 		strh	r3, [sp, #14]	@ movhi
 621              	.L34:
 434:../drivers/LEUART.c **** 
 435:../drivers/LEUART.c **** 	if (cnt > (int16_t)(sizeof(txFIFO) - 2))
 622              		.loc 4 435 0
 623 0040 BDF90E20 		ldrsh	r2, [sp, #14]
 624 0044 40F2FE33 		movw	r3, #1022
 625 0048 9A42     		cmp	r2, r3
 626 004a 00DD     		ble	.L35
 436:../drivers/LEUART.c **** 	    break;
 627              		.loc 4 436 0
 628 004c 38E0     		b	.L36
 629              	.L35:
 437:../drivers/LEUART.c **** 
 438:../drivers/LEUART.c **** 	/* Check if to translate <LF> to <CR><LF> */
 439:../drivers/LEUART.c **** 	if (g_flgLEUART_LF2CRLF  &&  (*pStr == '\n')  &&  ! sendCR)
 630              		.loc 4 439 0
 631 004e 214B     		ldr	r3, .L40+8
 632 0050 1B78     		ldrb	r3, [r3]
 633 0052 DBB2     		uxtb	r3, r3
 634 0054 002B     		cmp	r3, #0
 635 0056 14D0     		beq	.L37
 636              		.loc 4 439 0 is_stmt 0 discriminator 1
 637 0058 019B     		ldr	r3, [sp, #4]
 638 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 005c 0A2B     		cmp	r3, #10
 640 005e 10D1     		bne	.L37
 641 0060 9DF80D30 		ldrb	r3, [sp, #13]
 642 0064 83F00103 		eor	r3, r3, #1
 643 0068 DBB2     		uxtb	r3, r3
 644 006a 002B     		cmp	r3, #0
 645 006c 09D0     		beq	.L37
 440:../drivers/LEUART.c **** 	{
 441:../drivers/LEUART.c **** 	    /* Write <CR> to FIFO */
 442:../drivers/LEUART.c **** 	    txFIFO[txIdxPut] = '\r';
 646              		.loc 4 442 0 is_stmt 1
 647 006e 174B     		ldr	r3, .L40
 648 0070 1B88     		ldrh	r3, [r3]	@ movhi
 649 0072 9BB2     		uxth	r3, r3
 650 0074 184A     		ldr	r2, .L40+12
 651 0076 0D21     		movs	r1, #13
 652 0078 D154     		strb	r1, [r2, r3]
 443:../drivers/LEUART.c **** 	    sendCR = true;	// special character <CR>, set flag
 653              		.loc 4 443 0
 654 007a 0123     		movs	r3, #1
 655 007c 8DF80D30 		strb	r3, [sp, #13]
 656 0080 0CE0     		b	.L38
 657              	.L37:
 444:../drivers/LEUART.c **** 	}
 445:../drivers/LEUART.c **** 	else
 446:../drivers/LEUART.c **** 	{
ARM GAS  /tmp/ccO0aQHC.s 			page 51


 447:../drivers/LEUART.c **** 	    /* Write Byte to FIFO */
 448:../drivers/LEUART.c **** 	    txFIFO[txIdxPut] = *pStr++;
 658              		.loc 4 448 0
 659 0082 124B     		ldr	r3, .L40
 660 0084 1B88     		ldrh	r3, [r3]	@ movhi
 661 0086 9BB2     		uxth	r3, r3
 662 0088 1A46     		mov	r2, r3
 663 008a 019B     		ldr	r3, [sp, #4]
 664 008c 591C     		adds	r1, r3, #1
 665 008e 0191     		str	r1, [sp, #4]
 666 0090 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 667 0092 114B     		ldr	r3, .L40+12
 668 0094 9954     		strb	r1, [r3, r2]
 449:../drivers/LEUART.c **** 	    sendCR = false;	// regular character, be sure to clear flag
 669              		.loc 4 449 0
 670 0096 0023     		movs	r3, #0
 671 0098 8DF80D30 		strb	r3, [sp, #13]
 672              	.L38:
 450:../drivers/LEUART.c **** 	}
 451:../drivers/LEUART.c **** 
 452:../drivers/LEUART.c **** 	/* Increment FIFO index */
 453:../drivers/LEUART.c **** 	if (++txIdxPut >= sizeof(txFIFO))
 673              		.loc 4 453 0
 674 009c 0B4B     		ldr	r3, .L40
 675 009e 1B88     		ldrh	r3, [r3]	@ movhi
 676 00a0 9BB2     		uxth	r3, r3
 677 00a2 0133     		adds	r3, r3, #1
 678 00a4 9BB2     		uxth	r3, r3
 679 00a6 094A     		ldr	r2, .L40
 680 00a8 1946     		mov	r1, r3	@ movhi
 681 00aa 1180     		strh	r1, [r2]	@ movhi
 682 00ac B3F5806F 		cmp	r3, #1024
 683 00b0 02D3     		bcc	.L33
 454:../drivers/LEUART.c **** 	    txIdxPut = 0;	// wrap around
 684              		.loc 4 454 0
 685 00b2 064B     		ldr	r3, .L40
 686 00b4 0022     		movs	r2, #0
 687 00b6 1A80     		strh	r2, [r3]	@ movhi
 688              	.L33:
 427:../drivers/LEUART.c ****     while (*pStr != EOS)
 689              		.loc 4 427 0 discriminator 1
 690 00b8 019B     		ldr	r3, [sp, #4]
 691 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 692 00bc 002B     		cmp	r3, #0
 693 00be A6D1     		bne	.L39
 694              	.L36:
 455:../drivers/LEUART.c ****     }
 456:../drivers/LEUART.c **** 
 457:../drivers/LEUART.c ****     /* Be sure to enable DMA for data transfer */
 458:../drivers/LEUART.c ****     dmaTransferStart();
 695              		.loc 4 458 0
 696 00c0 FFF7FEFF 		bl	dmaTransferStart
 459:../drivers/LEUART.c **** }
 697              		.loc 4 459 0
 698 00c4 05B0     		add	sp, sp, #20
 699              		@ sp needed
 700 00c6 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccO0aQHC.s 			page 52


 701              	.L41:
 702 00ca 00BF     		.align	2
 703              	.L40:
 704 00cc 00000000 		.word	txIdxPut
 705 00d0 00000000 		.word	txIdxGet
 706 00d4 00000000 		.word	g_flgLEUART_LF2CRLF
 707 00d8 00000000 		.word	txFIFO
 708              		.cfi_endproc
 709              	.LFE118:
 711              		.section	.text.drvLEUART_putc,"ax",%progbits
 712              		.align	2
 713              		.global	drvLEUART_putc
 714              		.thumb
 715              		.thumb_func
 717              	drvLEUART_putc:
 718              	.LFB119:
 460:../drivers/LEUART.c **** 
 461:../drivers/LEUART.c **** 
 462:../drivers/LEUART.c **** /***************************************************************************//**
 463:../drivers/LEUART.c ****  *
 464:../drivers/LEUART.c ****  * @brief  Put character into the transmit FIFO
 465:../drivers/LEUART.c ****  *
 466:../drivers/LEUART.c ****  * This routine writes the specified character into the transmit FIFO, where
 467:../drivers/LEUART.c ****  * it will be transferred to the LEUART via DMA.  If there is no more space in
 468:../drivers/LEUART.c ****  * the FIFO, the character will be discarded.
 469:../drivers/LEUART.c ****   *
 470:../drivers/LEUART.c ****  * @param[in] c
 471:../drivers/LEUART.c ****  *	Character to write into the FIFO.
 472:../drivers/LEUART.c ****  *
 473:../drivers/LEUART.c ****  ******************************************************************************/
 474:../drivers/LEUART.c **** void	 drvLEUART_putc (char c)
 475:../drivers/LEUART.c **** {
 719              		.loc 4 475 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 16
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 00B5     		push	{lr}
 724              		.cfi_def_cfa_offset 4
 725              		.cfi_offset 14, -4
 726 0002 85B0     		sub	sp, sp, #20
 727              		.cfi_def_cfa_offset 24
 728 0004 0346     		mov	r3, r0
 729 0006 8DF80730 		strb	r3, [sp, #7]
 476:../drivers/LEUART.c **** char	 buffer[2];	// temporary character buffer
 477:../drivers/LEUART.c **** 
 478:../drivers/LEUART.c **** 
 479:../drivers/LEUART.c ****     /* Build local string with just one character */
 480:../drivers/LEUART.c ****     buffer[0] = c;
 730              		.loc 4 480 0
 731 000a 9DF80730 		ldrb	r3, [sp, #7]
 732 000e 8DF80C30 		strb	r3, [sp, #12]
 481:../drivers/LEUART.c ****     buffer[1] = EOS;
 733              		.loc 4 481 0
 734 0012 0023     		movs	r3, #0
 735 0014 8DF80D30 		strb	r3, [sp, #13]
 482:../drivers/LEUART.c **** 
 483:../drivers/LEUART.c ****     /* call puts() */
ARM GAS  /tmp/ccO0aQHC.s 			page 53


 484:../drivers/LEUART.c ****     drvLEUART_puts (buffer);
 736              		.loc 4 484 0
 737 0018 03AB     		add	r3, sp, #12
 738 001a 1846     		mov	r0, r3
 739 001c FFF7FEFF 		bl	drvLEUART_puts
 485:../drivers/LEUART.c **** }
 740              		.loc 4 485 0
 741 0020 05B0     		add	sp, sp, #20
 742              		@ sp needed
 743 0022 5DF804FB 		ldr	pc, [sp], #4
 744              		.cfi_endproc
 745              	.LFE119:
 747 0026 00BF     		.text
 748              	.Letext0:
 749              		.file 5 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 750              		.file 6 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 751              		.file 7 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 752              		.file 8 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_ch.h"
 753              		.file 9 "../Device/EnergyMicro/EFM32G/Include/efm32g_leuart.h"
 754              		.file 10 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_descriptor.h"
 755              		.file 11 "../emlib/inc/em_cmu.h"
 756              		.file 12 "../emlib/inc/em_leuart.h"
 757              		.file 13 "../emlib/inc/em_gpio.h"
 758              		.file 14 "../emlib/inc/em_dma.h"
