ARM GAS  /tmp/ccpirqce.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"BatteryMon.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              		.file 1 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/ccpirqce.s 			page 2


  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
ARM GAS  /tmp/ccpirqce.s 			page 3


  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
ARM GAS  /tmp/ccpirqce.s 			page 4


 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
ARM GAS  /tmp/ccpirqce.s 			page 5


 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
ARM GAS  /tmp/ccpirqce.s 			page 6


 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 7


 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 8


 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccpirqce.s 			page 9


 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
ARM GAS  /tmp/ccpirqce.s 			page 10


 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
ARM GAS  /tmp/ccpirqce.s 			page 11


 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
ARM GAS  /tmp/ccpirqce.s 			page 12


 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
ARM GAS  /tmp/ccpirqce.s 			page 13


 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
ARM GAS  /tmp/ccpirqce.s 			page 14


 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 15


 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
ARM GAS  /tmp/ccpirqce.s 			page 16


 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
ARM GAS  /tmp/ccpirqce.s 			page 17


 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 18


 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
ARM GAS  /tmp/ccpirqce.s 			page 19


1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
ARM GAS  /tmp/ccpirqce.s 			page 20


1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 21


1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 22


1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/ccpirqce.s 			page 23


1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
ARM GAS  /tmp/ccpirqce.s 			page 24


1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
  26              		.loc 1 1324 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              		.cfi_def_cfa_offset 8
  33 0002 0346     		mov	r3, r0
  34 0004 8DF80730 		strb	r3, [sp, #7]
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  35              		.loc 1 1325 0
  36 0008 074B     		ldr	r3, .L2
  37 000a 9DF90720 		ldrsb	r2, [sp, #7]
  38 000e 5209     		lsrs	r2, r2, #5
  39 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  40 0014 01F01F01 		and	r1, r1, #31
  41 0018 0120     		movs	r0, #1
  42 001a 00FA01F1 		lsl	r1, r0, r1
  43 001e 43F82210 		str	r1, [r3, r2, lsl #2]
1326:../CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/ccpirqce.s 			page 25


  44              		.loc 1 1326 0
  45 0022 02B0     		add	sp, sp, #8
  46              		@ sp needed
  47 0024 7047     		bx	lr
  48              	.L3:
  49 0026 00BF     		.align	2
  50              	.L2:
  51 0028 00E100E0 		.word	-536813312
  52              		.cfi_endproc
  53              	.LFE41:
  55              		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  56              		.align	2
  57              		.thumb
  58              		.thumb_func
  60              	NVIC_DisableIRQ:
  61              	.LFB42:
1327:../CMSIS/Include/core_cm3.h **** 
1328:../CMSIS/Include/core_cm3.h **** 
1329:../CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1330:../CMSIS/Include/core_cm3.h **** 
1331:../CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:../CMSIS/Include/core_cm3.h **** 
1333:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:../CMSIS/Include/core_cm3.h ****  */
1335:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:../CMSIS/Include/core_cm3.h **** {
  62              		.loc 1 1336 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 82B0     		sub	sp, sp, #8
  68              		.cfi_def_cfa_offset 8
  69 0002 0346     		mov	r3, r0
  70 0004 8DF80730 		strb	r3, [sp, #7]
1337:../CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  71              		.loc 1 1337 0
  72 0008 074B     		ldr	r3, .L5
  73 000a 9DF90720 		ldrsb	r2, [sp, #7]
  74 000e 5209     		lsrs	r2, r2, #5
  75 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
  76 0014 01F01F01 		and	r1, r1, #31
  77 0018 0120     		movs	r0, #1
  78 001a 00FA01F1 		lsl	r1, r0, r1
  79 001e 2032     		adds	r2, r2, #32
  80 0020 43F82210 		str	r1, [r3, r2, lsl #2]
1338:../CMSIS/Include/core_cm3.h **** }
  81              		.loc 1 1338 0
  82 0024 02B0     		add	sp, sp, #8
  83              		@ sp needed
  84 0026 7047     		bx	lr
  85              	.L6:
  86              		.align	2
  87              	.L5:
  88 0028 00E100E0 		.word	-536813312
  89              		.cfi_endproc
  90              	.LFE42:
ARM GAS  /tmp/ccpirqce.s 			page 26


  92              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  97              	NVIC_ClearPendingIRQ:
  98              	.LFB45:
1339:../CMSIS/Include/core_cm3.h **** 
1340:../CMSIS/Include/core_cm3.h **** 
1341:../CMSIS/Include/core_cm3.h **** /** \brief  Get Pending Interrupt
1342:../CMSIS/Include/core_cm3.h **** 
1343:../CMSIS/Include/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1344:../CMSIS/Include/core_cm3.h ****     for the specified interrupt.
1345:../CMSIS/Include/core_cm3.h **** 
1346:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1347:../CMSIS/Include/core_cm3.h **** 
1348:../CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not pending.
1349:../CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is pending.
1350:../CMSIS/Include/core_cm3.h ****  */
1351:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1352:../CMSIS/Include/core_cm3.h **** {
1353:../CMSIS/Include/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1354:../CMSIS/Include/core_cm3.h **** }
1355:../CMSIS/Include/core_cm3.h **** 
1356:../CMSIS/Include/core_cm3.h **** 
1357:../CMSIS/Include/core_cm3.h **** /** \brief  Set Pending Interrupt
1358:../CMSIS/Include/core_cm3.h **** 
1359:../CMSIS/Include/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1360:../CMSIS/Include/core_cm3.h **** 
1361:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1362:../CMSIS/Include/core_cm3.h ****  */
1363:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1364:../CMSIS/Include/core_cm3.h **** {
1365:../CMSIS/Include/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1366:../CMSIS/Include/core_cm3.h **** }
1367:../CMSIS/Include/core_cm3.h **** 
1368:../CMSIS/Include/core_cm3.h **** 
1369:../CMSIS/Include/core_cm3.h **** /** \brief  Clear Pending Interrupt
1370:../CMSIS/Include/core_cm3.h **** 
1371:../CMSIS/Include/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1372:../CMSIS/Include/core_cm3.h **** 
1373:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1374:../CMSIS/Include/core_cm3.h ****  */
1375:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1376:../CMSIS/Include/core_cm3.h **** {
  99              		.loc 1 1376 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 8
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104 0000 82B0     		sub	sp, sp, #8
 105              		.cfi_def_cfa_offset 8
 106 0002 0346     		mov	r3, r0
 107 0004 8DF80730 		strb	r3, [sp, #7]
1377:../CMSIS/Include/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 108              		.loc 1 1377 0
 109 0008 074B     		ldr	r3, .L8
 110 000a 9DF90720 		ldrsb	r2, [sp, #7]
ARM GAS  /tmp/ccpirqce.s 			page 27


 111 000e 5209     		lsrs	r2, r2, #5
 112 0010 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 113 0014 01F01F01 		and	r1, r1, #31
 114 0018 0120     		movs	r0, #1
 115 001a 00FA01F1 		lsl	r1, r0, r1
 116 001e 6032     		adds	r2, r2, #96
 117 0020 43F82210 		str	r1, [r3, r2, lsl #2]
1378:../CMSIS/Include/core_cm3.h **** }
 118              		.loc 1 1378 0
 119 0024 02B0     		add	sp, sp, #8
 120              		@ sp needed
 121 0026 7047     		bx	lr
 122              	.L9:
 123              		.align	2
 124              	.L8:
 125 0028 00E100E0 		.word	-536813312
 126              		.cfi_endproc
 127              	.LFE45:
 129              		.section	.text.EMU_EnterEM1,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
 134              	EMU_EnterEM1:
 135              	.LFB80:
 136              		.file 2 "../emlib/inc/em_emu.h"
   1:../emlib/inc/em_emu.h **** /***************************************************************************//**
   2:../emlib/inc/em_emu.h ****  * @file
   3:../emlib/inc/em_emu.h ****  * @brief Energy management unit (EMU) peripheral API
   4:../emlib/inc/em_emu.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_emu.h ****  * @version 3.20.2
   6:../emlib/inc/em_emu.h ****  *******************************************************************************
   7:../emlib/inc/em_emu.h ****  * @section License
   8:../emlib/inc/em_emu.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_emu.h ****  *******************************************************************************
  10:../emlib/inc/em_emu.h ****  *
  11:../emlib/inc/em_emu.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_emu.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_emu.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_emu.h ****  *
  15:../emlib/inc/em_emu.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_emu.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_emu.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_emu.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_emu.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_emu.h ****  *
  21:../emlib/inc/em_emu.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_emu.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_emu.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_emu.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_emu.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_emu.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_emu.h ****  *
  28:../emlib/inc/em_emu.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_emu.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_emu.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_emu.h ****  *
  32:../emlib/inc/em_emu.h ****  ******************************************************************************/
ARM GAS  /tmp/ccpirqce.s 			page 28


  33:../emlib/inc/em_emu.h **** #ifndef __EM_EMU_H
  34:../emlib/inc/em_emu.h **** #define __EM_EMU_H
  35:../emlib/inc/em_emu.h **** 
  36:../emlib/inc/em_emu.h **** #include "em_device.h"
  37:../emlib/inc/em_emu.h **** #if defined( EMU_PRESENT )
  38:../emlib/inc/em_emu.h **** 
  39:../emlib/inc/em_emu.h **** #include <stdbool.h>
  40:../emlib/inc/em_emu.h **** #include "em_bitband.h"
  41:../emlib/inc/em_emu.h **** 
  42:../emlib/inc/em_emu.h **** #ifdef __cplusplus
  43:../emlib/inc/em_emu.h **** extern "C" {
  44:../emlib/inc/em_emu.h **** #endif
  45:../emlib/inc/em_emu.h **** 
  46:../emlib/inc/em_emu.h **** /***************************************************************************//**
  47:../emlib/inc/em_emu.h ****  * @addtogroup EM_Library
  48:../emlib/inc/em_emu.h ****  * @{
  49:../emlib/inc/em_emu.h ****  ******************************************************************************/
  50:../emlib/inc/em_emu.h **** 
  51:../emlib/inc/em_emu.h **** /***************************************************************************//**
  52:../emlib/inc/em_emu.h ****  * @addtogroup EMU
  53:../emlib/inc/em_emu.h ****  * @{
  54:../emlib/inc/em_emu.h ****  ******************************************************************************/
  55:../emlib/inc/em_emu.h **** 
  56:../emlib/inc/em_emu.h **** /*******************************************************************************
  57:../emlib/inc/em_emu.h ****  ********************************   ENUMS   ************************************
  58:../emlib/inc/em_emu.h ****  ******************************************************************************/
  59:../emlib/inc/em_emu.h **** 
  60:../emlib/inc/em_emu.h **** #if defined( _EMU_EM4CONF_MASK )
  61:../emlib/inc/em_emu.h **** /** EM4 duty oscillator */
  62:../emlib/inc/em_emu.h **** typedef enum
  63:../emlib/inc/em_emu.h **** {
  64:../emlib/inc/em_emu.h ****   /** Select ULFRCO as duty oscillator in EM4 */
  65:../emlib/inc/em_emu.h ****   emuEM4Osc_ULFRCO = EMU_EM4CONF_OSC_ULFRCO,
  66:../emlib/inc/em_emu.h ****   /** Select LFXO as duty oscillator in EM4 */
  67:../emlib/inc/em_emu.h ****   emuEM4Osc_LFXO = EMU_EM4CONF_OSC_LFXO,
  68:../emlib/inc/em_emu.h ****   /** Select LFRCO as duty oscillator in EM4 */
  69:../emlib/inc/em_emu.h ****   emuEM4Osc_LFRCO = EMU_EM4CONF_OSC_LFRCO
  70:../emlib/inc/em_emu.h **** } EMU_EM4Osc_TypeDef;
  71:../emlib/inc/em_emu.h **** 
  72:../emlib/inc/em_emu.h **** /** Backup Power Voltage Probe types */
  73:../emlib/inc/em_emu.h **** typedef enum
  74:../emlib/inc/em_emu.h **** {
  75:../emlib/inc/em_emu.h ****   /** Disable voltage probe */
  76:../emlib/inc/em_emu.h ****   emuProbe_Disable = EMU_BUCTRL_PROBE_DISABLE,
  77:../emlib/inc/em_emu.h ****   /** Connect probe to VDD_DREG */
  78:../emlib/inc/em_emu.h ****   emuProbe_VDDDReg = EMU_BUCTRL_PROBE_VDDDREG,
  79:../emlib/inc/em_emu.h ****   /** Connect probe to BU_IN */
  80:../emlib/inc/em_emu.h ****   emuProbe_BUIN    = EMU_BUCTRL_PROBE_BUIN,
  81:../emlib/inc/em_emu.h ****   /** Connect probe to BU_OUT */
  82:../emlib/inc/em_emu.h ****   emuProbe_BUOUT   = EMU_BUCTRL_PROBE_BUOUT
  83:../emlib/inc/em_emu.h **** } EMU_Probe_TypeDef;
  84:../emlib/inc/em_emu.h **** 
  85:../emlib/inc/em_emu.h **** /** Backup Power Domain resistor selection */
  86:../emlib/inc/em_emu.h **** typedef enum
  87:../emlib/inc/em_emu.h **** {
  88:../emlib/inc/em_emu.h ****   /** Main power and backup power connected with RES0 series resistance */
  89:../emlib/inc/em_emu.h ****   emuRes_Res0 = EMU_PWRCONF_PWRRES_RES0,
ARM GAS  /tmp/ccpirqce.s 			page 29


  90:../emlib/inc/em_emu.h ****   /** Main power and backup power connected with RES1 series resistance */
  91:../emlib/inc/em_emu.h ****   emuRes_Res1 = EMU_PWRCONF_PWRRES_RES1,
  92:../emlib/inc/em_emu.h ****   /** Main power and backup power connected with RES2 series resistance */
  93:../emlib/inc/em_emu.h ****   emuRes_Res2 = EMU_PWRCONF_PWRRES_RES2,
  94:../emlib/inc/em_emu.h ****   /** Main power and backup power connected with RES3 series resistance */
  95:../emlib/inc/em_emu.h ****   emuRes_Res3 = EMU_PWRCONF_PWRRES_RES3,
  96:../emlib/inc/em_emu.h **** } EMU_Resistor_TypeDef;
  97:../emlib/inc/em_emu.h **** 
  98:../emlib/inc/em_emu.h **** /** Backup Power Domain power connection */
  99:../emlib/inc/em_emu.h **** typedef enum
 100:../emlib/inc/em_emu.h **** {
 101:../emlib/inc/em_emu.h ****   /** No connection between main and backup power */
 102:../emlib/inc/em_emu.h ****   emuPower_None = EMU_BUINACT_PWRCON_NONE,
 103:../emlib/inc/em_emu.h ****   /** Main power and backup power connected through diode,
 104:../emlib/inc/em_emu.h ****       allowing current from backup to main only */
 105:../emlib/inc/em_emu.h ****   emuPower_BUMain = EMU_BUINACT_PWRCON_BUMAIN,
 106:../emlib/inc/em_emu.h ****   /** Main power and backup power connected through diode,
 107:../emlib/inc/em_emu.h ****       allowing current from main to backup only */
 108:../emlib/inc/em_emu.h ****   emuPower_MainBU = EMU_BUINACT_PWRCON_MAINBU,
 109:../emlib/inc/em_emu.h ****   /** Main power and backup power connected without diode */
 110:../emlib/inc/em_emu.h ****   emuPower_NoDiode = EMU_BUINACT_PWRCON_NODIODE,
 111:../emlib/inc/em_emu.h **** } EMU_Power_TypeDef;
 112:../emlib/inc/em_emu.h **** 
 113:../emlib/inc/em_emu.h **** /** BOD threshold setting selector, active or inactive mode */
 114:../emlib/inc/em_emu.h **** typedef enum
 115:../emlib/inc/em_emu.h **** {
 116:../emlib/inc/em_emu.h ****   /** Configure BOD threshold for active mode */
 117:../emlib/inc/em_emu.h ****   emuBODMode_Active,
 118:../emlib/inc/em_emu.h ****   /** Configure BOD threshold for inactive mode */
 119:../emlib/inc/em_emu.h ****   emuBODMode_Inactive,
 120:../emlib/inc/em_emu.h **** } EMU_BODMode_TypeDef;
 121:../emlib/inc/em_emu.h **** 
 122:../emlib/inc/em_emu.h **** /*******************************************************************************
 123:../emlib/inc/em_emu.h ****  *******************************   STRUCTS   ***********************************
 124:../emlib/inc/em_emu.h ****  ******************************************************************************/
 125:../emlib/inc/em_emu.h **** 
 126:../emlib/inc/em_emu.h **** /** Energy Mode 4 initialization structure  */
 127:../emlib/inc/em_emu.h **** typedef struct
 128:../emlib/inc/em_emu.h **** {
 129:../emlib/inc/em_emu.h ****   /** Lock configuration of regulator, BOD and oscillator */
 130:../emlib/inc/em_emu.h ****   bool               lockConfig;
 131:../emlib/inc/em_emu.h ****   /** EM4 duty oscillator */
 132:../emlib/inc/em_emu.h ****   EMU_EM4Osc_TypeDef osc;
 133:../emlib/inc/em_emu.h ****   /** Wake up on EM4 BURTC interrupt */
 134:../emlib/inc/em_emu.h ****   bool               buRtcWakeup;
 135:../emlib/inc/em_emu.h ****   /** Enable EM4 voltage regulator */
 136:../emlib/inc/em_emu.h ****   bool               vreg;
 137:../emlib/inc/em_emu.h **** } EMU_EM4Init_TypeDef;
 138:../emlib/inc/em_emu.h **** 
 139:../emlib/inc/em_emu.h **** /** Default initialization of EM4 configuration */
 140:../emlib/inc/em_emu.h **** #define EMU_EM4INIT_DEFAULT    \
 141:../emlib/inc/em_emu.h ****   {   false,             /* Dont't lock configuration after it's been set */ \
 142:../emlib/inc/em_emu.h ****       emuEM4Osc_ULFRCO,  /* Use default ULFRCO oscillator  */ \
 143:../emlib/inc/em_emu.h ****       true,              /* Wake up on EM4 BURTC interrupt */ \
 144:../emlib/inc/em_emu.h ****       true,              /* Enable VREG */ \
 145:../emlib/inc/em_emu.h ****   }
 146:../emlib/inc/em_emu.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 30


 147:../emlib/inc/em_emu.h **** /** Backup Power Domain Initialization structure */
 148:../emlib/inc/em_emu.h **** typedef struct
 149:../emlib/inc/em_emu.h **** {
 150:../emlib/inc/em_emu.h ****   /* Backup Power Domain power configuration */
 151:../emlib/inc/em_emu.h **** 
 152:../emlib/inc/em_emu.h ****   /** Voltage probe select, selects ADC voltage */
 153:../emlib/inc/em_emu.h ****   EMU_Probe_TypeDef probe;
 154:../emlib/inc/em_emu.h ****   /** Enable BOD calibration mode */
 155:../emlib/inc/em_emu.h ****   bool              bodCal;
 156:../emlib/inc/em_emu.h ****   /** Enable BU_STAT status pin for active BU mode */
 157:../emlib/inc/em_emu.h ****   bool              statusPinEnable;
 158:../emlib/inc/em_emu.h **** 
 159:../emlib/inc/em_emu.h ****   /* Backup Power Domain connection configuration */
 160:../emlib/inc/em_emu.h ****   /** Power domain resistor */
 161:../emlib/inc/em_emu.h ****   EMU_Resistor_TypeDef resistor;
 162:../emlib/inc/em_emu.h ****   /** BU_VOUT strong enable */
 163:../emlib/inc/em_emu.h ****   bool                 voutStrong;
 164:../emlib/inc/em_emu.h ****   /** BU_VOUT medium enable */
 165:../emlib/inc/em_emu.h ****   bool                 voutMed;
 166:../emlib/inc/em_emu.h ****   /** BU_VOUT weak enable */
 167:../emlib/inc/em_emu.h ****   bool                 voutWeak;
 168:../emlib/inc/em_emu.h ****   /** Power connection, when not in Backup Mode */
 169:../emlib/inc/em_emu.h ****   EMU_Power_TypeDef  inactivePower;
 170:../emlib/inc/em_emu.h ****   /** Power connection, when in Backup Mode */
 171:../emlib/inc/em_emu.h ****   EMU_Power_TypeDef  activePower;
 172:../emlib/inc/em_emu.h ****   /** Enable backup power domain, and release reset, enable BU_VIN pin  */
 173:../emlib/inc/em_emu.h ****   bool               enable;
 174:../emlib/inc/em_emu.h **** } EMU_BUPDInit_TypeDef;
 175:../emlib/inc/em_emu.h **** 
 176:../emlib/inc/em_emu.h **** /** Default */
 177:../emlib/inc/em_emu.h **** #define EMU_BUPDINIT_DEFAULT                                                \
 178:../emlib/inc/em_emu.h ****   { emuProbe_Disable, /* Do not enable voltage probe */                     \
 179:../emlib/inc/em_emu.h ****     false,            /* Disable BOD calibration mode */                    \
 180:../emlib/inc/em_emu.h ****     false,            /* Disable BU_STAT pin for backup mode indication */  \
 181:../emlib/inc/em_emu.h ****                                                                             \
 182:../emlib/inc/em_emu.h ****     emuRes_Res0,      /* RES0 series resistance between main and backup power */ \
 183:../emlib/inc/em_emu.h ****     false,            /* Don't enable strong switch */                           \
 184:../emlib/inc/em_emu.h ****     false,            /* Don't enable medium switch */                           \
 185:../emlib/inc/em_emu.h ****     false,            /* Don't enable weak switch */                             \
 186:../emlib/inc/em_emu.h ****                                                                                  \
 187:../emlib/inc/em_emu.h ****     emuPower_None,    /* No connection between main and backup power (inactive mode) */  \
 188:../emlib/inc/em_emu.h ****     emuPower_None,    /* No connection between main and backup power (active mode) */    \
 189:../emlib/inc/em_emu.h ****     true              /* Enable BUPD enter on BOD, enable BU_VIN pin, release BU reset  */  \
 190:../emlib/inc/em_emu.h ****   }
 191:../emlib/inc/em_emu.h **** #endif
 192:../emlib/inc/em_emu.h **** 
 193:../emlib/inc/em_emu.h **** /*******************************************************************************
 194:../emlib/inc/em_emu.h ****  *****************************   PROTOTYPES   **********************************
 195:../emlib/inc/em_emu.h ****  ******************************************************************************/
 196:../emlib/inc/em_emu.h **** 
 197:../emlib/inc/em_emu.h **** /***************************************************************************//**
 198:../emlib/inc/em_emu.h ****  * @brief
 199:../emlib/inc/em_emu.h ****  *   Enter energy mode 1 (EM1).
 200:../emlib/inc/em_emu.h ****  ******************************************************************************/
 201:../emlib/inc/em_emu.h **** __STATIC_INLINE void EMU_EnterEM1(void)
 202:../emlib/inc/em_emu.h **** {
 137              		.loc 2 202 0
ARM GAS  /tmp/ccpirqce.s 			page 31


 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 203:../emlib/inc/em_emu.h ****   /* Just enter Cortex-M3 sleep mode */
 204:../emlib/inc/em_emu.h ****   SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
 142              		.loc 2 204 0
 143 0000 034B     		ldr	r3, .L11
 144 0002 034A     		ldr	r2, .L11
 145 0004 1269     		ldr	r2, [r2, #16]
 146 0006 22F00402 		bic	r2, r2, #4
 147 000a 1A61     		str	r2, [r3, #16]
 148              	.LBB4:
 149              	.LBB5:
 150              		.file 3 "../CMSIS/Include/core_cmInstr.h"
   1:../CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:../CMSIS/Include/core_cmInstr.h ****  *
   7:../CMSIS/Include/core_cmInstr.h ****  * @note
   8:../CMSIS/Include/core_cmInstr.h ****  *
   9:../CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cmInstr.h **** 
  12:../CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:../CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cmInstr.h ****    *
  24:../CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cmInstr.h **** 
  37:../CMSIS/Include/core_cmInstr.h **** 
  38:../CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:../CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:../CMSIS/Include/core_cmInstr.h **** 
  41:../CMSIS/Include/core_cmInstr.h **** 
  42:../CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  /tmp/ccpirqce.s 			page 32


  43:../CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:../CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:../CMSIS/Include/core_cmInstr.h ****   @{
  46:../CMSIS/Include/core_cmInstr.h **** */
  47:../CMSIS/Include/core_cmInstr.h **** 
  48:../CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:../CMSIS/Include/core_cmInstr.h **** 
  51:../CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:../CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../CMSIS/Include/core_cmInstr.h **** #endif
  54:../CMSIS/Include/core_cmInstr.h **** 
  55:../CMSIS/Include/core_cmInstr.h **** 
  56:../CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:../CMSIS/Include/core_cmInstr.h **** 
  58:../CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:../CMSIS/Include/core_cmInstr.h ****  */
  60:../CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:../CMSIS/Include/core_cmInstr.h **** 
  62:../CMSIS/Include/core_cmInstr.h **** 
  63:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:../CMSIS/Include/core_cmInstr.h **** 
  65:../CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:../CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:../CMSIS/Include/core_cmInstr.h ****  */
  68:../CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:../CMSIS/Include/core_cmInstr.h **** 
  70:../CMSIS/Include/core_cmInstr.h **** 
  71:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:../CMSIS/Include/core_cmInstr.h **** 
  73:../CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:../CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:../CMSIS/Include/core_cmInstr.h ****  */
  76:../CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:../CMSIS/Include/core_cmInstr.h **** 
  78:../CMSIS/Include/core_cmInstr.h **** 
  79:../CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:../CMSIS/Include/core_cmInstr.h **** 
  81:../CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:../CMSIS/Include/core_cmInstr.h ****  */
  83:../CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:../CMSIS/Include/core_cmInstr.h **** 
  85:../CMSIS/Include/core_cmInstr.h **** 
  86:../CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:../CMSIS/Include/core_cmInstr.h **** 
  88:../CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:../CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:../CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:../CMSIS/Include/core_cmInstr.h ****  */
  92:../CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:../CMSIS/Include/core_cmInstr.h **** 
  94:../CMSIS/Include/core_cmInstr.h **** 
  95:../CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:../CMSIS/Include/core_cmInstr.h **** 
  97:../CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:../CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:../CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccpirqce.s 			page 33


 100:../CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:../CMSIS/Include/core_cmInstr.h **** 
 102:../CMSIS/Include/core_cmInstr.h **** 
 103:../CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:../CMSIS/Include/core_cmInstr.h **** 
 105:../CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:../CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:../CMSIS/Include/core_cmInstr.h ****  */
 108:../CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:../CMSIS/Include/core_cmInstr.h **** 
 110:../CMSIS/Include/core_cmInstr.h **** 
 111:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:../CMSIS/Include/core_cmInstr.h **** 
 113:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:../CMSIS/Include/core_cmInstr.h **** 
 115:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:../CMSIS/Include/core_cmInstr.h ****  */
 118:../CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:../CMSIS/Include/core_cmInstr.h **** 
 120:../CMSIS/Include/core_cmInstr.h **** 
 121:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:../CMSIS/Include/core_cmInstr.h **** 
 123:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:../CMSIS/Include/core_cmInstr.h **** 
 125:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../CMSIS/Include/core_cmInstr.h ****  */
 128:../CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:../CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:../CMSIS/Include/core_cmInstr.h **** {
 131:../CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:../CMSIS/Include/core_cmInstr.h ****   bx lr
 133:../CMSIS/Include/core_cmInstr.h **** }
 134:../CMSIS/Include/core_cmInstr.h **** #endif
 135:../CMSIS/Include/core_cmInstr.h **** 
 136:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:../CMSIS/Include/core_cmInstr.h **** 
 138:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:../CMSIS/Include/core_cmInstr.h **** 
 140:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:../CMSIS/Include/core_cmInstr.h ****  */
 143:../CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:../CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:../CMSIS/Include/core_cmInstr.h **** {
 146:../CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:../CMSIS/Include/core_cmInstr.h ****   bx lr
 148:../CMSIS/Include/core_cmInstr.h **** }
 149:../CMSIS/Include/core_cmInstr.h **** #endif
 150:../CMSIS/Include/core_cmInstr.h **** 
 151:../CMSIS/Include/core_cmInstr.h **** 
 152:../CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:../CMSIS/Include/core_cmInstr.h **** 
 154:../CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:../CMSIS/Include/core_cmInstr.h **** 
 156:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
ARM GAS  /tmp/ccpirqce.s 			page 34


 157:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:../CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:../CMSIS/Include/core_cmInstr.h ****  */
 160:../CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:../CMSIS/Include/core_cmInstr.h **** 
 162:../CMSIS/Include/core_cmInstr.h **** 
 163:../CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:../CMSIS/Include/core_cmInstr.h **** 
 165:../CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:../CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:../CMSIS/Include/core_cmInstr.h **** 
 168:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:../CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:../CMSIS/Include/core_cmInstr.h ****  */
 171:../CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:../CMSIS/Include/core_cmInstr.h **** 
 173:../CMSIS/Include/core_cmInstr.h **** 
 174:../CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:../CMSIS/Include/core_cmInstr.h **** 
 176:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:../CMSIS/Include/core_cmInstr.h **** 
 178:../CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:../CMSIS/Include/core_cmInstr.h **** 
 180:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:../CMSIS/Include/core_cmInstr.h ****  */
 183:../CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:../CMSIS/Include/core_cmInstr.h **** 
 185:../CMSIS/Include/core_cmInstr.h **** 
 186:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:../CMSIS/Include/core_cmInstr.h **** 
 188:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:../CMSIS/Include/core_cmInstr.h **** 
 190:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:../CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:../CMSIS/Include/core_cmInstr.h ****  */
 193:../CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:../CMSIS/Include/core_cmInstr.h **** 
 195:../CMSIS/Include/core_cmInstr.h **** 
 196:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:../CMSIS/Include/core_cmInstr.h **** 
 198:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:../CMSIS/Include/core_cmInstr.h **** 
 200:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:../CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:../CMSIS/Include/core_cmInstr.h ****  */
 203:../CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:../CMSIS/Include/core_cmInstr.h **** 
 205:../CMSIS/Include/core_cmInstr.h **** 
 206:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:../CMSIS/Include/core_cmInstr.h **** 
 208:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:../CMSIS/Include/core_cmInstr.h **** 
 210:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:../CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:../CMSIS/Include/core_cmInstr.h ****  */
 213:../CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
ARM GAS  /tmp/ccpirqce.s 			page 35


 214:../CMSIS/Include/core_cmInstr.h **** 
 215:../CMSIS/Include/core_cmInstr.h **** 
 216:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:../CMSIS/Include/core_cmInstr.h **** 
 218:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:../CMSIS/Include/core_cmInstr.h **** 
 220:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:../CMSIS/Include/core_cmInstr.h ****  */
 225:../CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:../CMSIS/Include/core_cmInstr.h **** 
 227:../CMSIS/Include/core_cmInstr.h **** 
 228:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:../CMSIS/Include/core_cmInstr.h **** 
 230:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:../CMSIS/Include/core_cmInstr.h **** 
 232:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:../CMSIS/Include/core_cmInstr.h ****  */
 237:../CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:../CMSIS/Include/core_cmInstr.h **** 
 239:../CMSIS/Include/core_cmInstr.h **** 
 240:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:../CMSIS/Include/core_cmInstr.h **** 
 242:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:../CMSIS/Include/core_cmInstr.h **** 
 244:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:../CMSIS/Include/core_cmInstr.h ****  */
 249:../CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:../CMSIS/Include/core_cmInstr.h **** 
 251:../CMSIS/Include/core_cmInstr.h **** 
 252:../CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:../CMSIS/Include/core_cmInstr.h **** 
 254:../CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:../CMSIS/Include/core_cmInstr.h **** 
 256:../CMSIS/Include/core_cmInstr.h ****  */
 257:../CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:../CMSIS/Include/core_cmInstr.h **** 
 259:../CMSIS/Include/core_cmInstr.h **** 
 260:../CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:../CMSIS/Include/core_cmInstr.h **** 
 262:../CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:../CMSIS/Include/core_cmInstr.h **** 
 264:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:../CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:../CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:../CMSIS/Include/core_cmInstr.h ****  */
 268:../CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:../CMSIS/Include/core_cmInstr.h **** 
 270:../CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 36


 271:../CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:../CMSIS/Include/core_cmInstr.h **** 
 273:../CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:../CMSIS/Include/core_cmInstr.h **** 
 275:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:../CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:../CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:../CMSIS/Include/core_cmInstr.h ****  */
 279:../CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:../CMSIS/Include/core_cmInstr.h **** 
 281:../CMSIS/Include/core_cmInstr.h **** 
 282:../CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:../CMSIS/Include/core_cmInstr.h **** 
 284:../CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:../CMSIS/Include/core_cmInstr.h **** 
 286:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:../CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:../CMSIS/Include/core_cmInstr.h ****  */
 289:../CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:../CMSIS/Include/core_cmInstr.h **** 
 291:../CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:../CMSIS/Include/core_cmInstr.h **** 
 293:../CMSIS/Include/core_cmInstr.h **** 
 294:../CMSIS/Include/core_cmInstr.h **** 
 295:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:../CMSIS/Include/core_cmInstr.h **** 
 298:../CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:../CMSIS/Include/core_cmInstr.h **** 
 300:../CMSIS/Include/core_cmInstr.h **** 
 301:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:../CMSIS/Include/core_cmInstr.h **** 
 304:../CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:../CMSIS/Include/core_cmInstr.h **** 
 306:../CMSIS/Include/core_cmInstr.h **** 
 307:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:../CMSIS/Include/core_cmInstr.h **** 
 310:../CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:../CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:../CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:../CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:../CMSIS/Include/core_cmInstr.h **** #else
 317:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:../CMSIS/Include/core_cmInstr.h **** #endif
 320:../CMSIS/Include/core_cmInstr.h **** 
 321:../CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:../CMSIS/Include/core_cmInstr.h **** 
 323:../CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:../CMSIS/Include/core_cmInstr.h ****  */
 325:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:../CMSIS/Include/core_cmInstr.h **** {
 327:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
ARM GAS  /tmp/ccpirqce.s 			page 37


 328:../CMSIS/Include/core_cmInstr.h **** }
 329:../CMSIS/Include/core_cmInstr.h **** 
 330:../CMSIS/Include/core_cmInstr.h **** 
 331:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:../CMSIS/Include/core_cmInstr.h **** 
 333:../CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:../CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:../CMSIS/Include/core_cmInstr.h ****  */
 336:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:../CMSIS/Include/core_cmInstr.h **** {
 338:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 151              		.loc 3 338 0
 152              	@ 338 "../CMSIS/Include/core_cmInstr.h" 1
 153 000c 30BF     		wfi
 154              	@ 0 "" 2
 155              		.thumb
 156              	.LBE5:
 157              	.LBE4:
 205:../emlib/inc/em_emu.h ****   __WFI();
 206:../emlib/inc/em_emu.h **** }
 158              		.loc 2 206 0
 159 000e 7047     		bx	lr
 160              	.L12:
 161              		.align	2
 162              	.L11:
 163 0010 00ED00E0 		.word	-536810240
 164              		.cfi_endproc
 165              	.LFE80:
 167              		.section	.text.ADC_DataSingleGet,"ax",%progbits
 168              		.align	2
 169              		.thumb
 170              		.thumb_func
 172              	ADC_DataSingleGet:
 173              	.LFB108:
 174              		.file 4 "../emlib/inc/em_adc.h"
   1:../emlib/inc/em_adc.h **** /***************************************************************************//**
   2:../emlib/inc/em_adc.h ****  * @file
   3:../emlib/inc/em_adc.h ****  * @brief Analog to Digital Converter (ADC) peripheral API
   4:../emlib/inc/em_adc.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_adc.h ****  * @version 3.20.2
   6:../emlib/inc/em_adc.h ****  *******************************************************************************
   7:../emlib/inc/em_adc.h ****  * @section License
   8:../emlib/inc/em_adc.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_adc.h ****  *******************************************************************************
  10:../emlib/inc/em_adc.h ****  *
  11:../emlib/inc/em_adc.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_adc.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_adc.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_adc.h ****  *
  15:../emlib/inc/em_adc.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_adc.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_adc.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_adc.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_adc.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_adc.h ****  *
  21:../emlib/inc/em_adc.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_adc.h ****  * obligation to support this Software. Energy Micro AS is providing the
ARM GAS  /tmp/ccpirqce.s 			page 38


  23:../emlib/inc/em_adc.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_adc.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_adc.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_adc.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_adc.h ****  *
  28:../emlib/inc/em_adc.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_adc.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_adc.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_adc.h ****  *
  32:../emlib/inc/em_adc.h ****  ******************************************************************************/
  33:../emlib/inc/em_adc.h **** #ifndef __EM_ADC_H
  34:../emlib/inc/em_adc.h **** #define __EM_ADC_H
  35:../emlib/inc/em_adc.h **** 
  36:../emlib/inc/em_adc.h **** #include "em_device.h"
  37:../emlib/inc/em_adc.h **** #if defined(ADC_COUNT) && (ADC_COUNT > 0)
  38:../emlib/inc/em_adc.h **** 
  39:../emlib/inc/em_adc.h **** #include <stdbool.h>
  40:../emlib/inc/em_adc.h **** 
  41:../emlib/inc/em_adc.h **** #ifdef __cplusplus
  42:../emlib/inc/em_adc.h **** extern "C" {
  43:../emlib/inc/em_adc.h **** #endif
  44:../emlib/inc/em_adc.h **** 
  45:../emlib/inc/em_adc.h **** /***************************************************************************//**
  46:../emlib/inc/em_adc.h ****  * @addtogroup EM_Library
  47:../emlib/inc/em_adc.h ****  * @{
  48:../emlib/inc/em_adc.h ****  ******************************************************************************/
  49:../emlib/inc/em_adc.h **** 
  50:../emlib/inc/em_adc.h **** /***************************************************************************//**
  51:../emlib/inc/em_adc.h ****  * @addtogroup ADC
  52:../emlib/inc/em_adc.h ****  * @{
  53:../emlib/inc/em_adc.h ****  ******************************************************************************/
  54:../emlib/inc/em_adc.h **** 
  55:../emlib/inc/em_adc.h **** /*******************************************************************************
  56:../emlib/inc/em_adc.h ****  ********************************   ENUMS   ************************************
  57:../emlib/inc/em_adc.h ****  ******************************************************************************/
  58:../emlib/inc/em_adc.h **** 
  59:../emlib/inc/em_adc.h **** /** Acquisition time (in ADC clock cycles). */
  60:../emlib/inc/em_adc.h **** typedef enum
  61:../emlib/inc/em_adc.h **** {
  62:../emlib/inc/em_adc.h ****   adcAcqTime1   = _ADC_SINGLECTRL_AT_1CYCLE,    /**< 1 clock cycle. */
  63:../emlib/inc/em_adc.h ****   adcAcqTime2   = _ADC_SINGLECTRL_AT_2CYCLES,   /**< 2 clock cycles. */
  64:../emlib/inc/em_adc.h ****   adcAcqTime4   = _ADC_SINGLECTRL_AT_4CYCLES,   /**< 4 clock cycles. */
  65:../emlib/inc/em_adc.h ****   adcAcqTime8   = _ADC_SINGLECTRL_AT_8CYCLES,   /**< 8 clock cycles. */
  66:../emlib/inc/em_adc.h ****   adcAcqTime16  = _ADC_SINGLECTRL_AT_16CYCLES,  /**< 16 clock cycles. */
  67:../emlib/inc/em_adc.h ****   adcAcqTime32  = _ADC_SINGLECTRL_AT_32CYCLES,  /**< 32 clock cycles. */
  68:../emlib/inc/em_adc.h ****   adcAcqTime64  = _ADC_SINGLECTRL_AT_64CYCLES,  /**< 64 clock cycles. */
  69:../emlib/inc/em_adc.h ****   adcAcqTime128 = _ADC_SINGLECTRL_AT_128CYCLES, /**< 128 clock cycles. */
  70:../emlib/inc/em_adc.h ****   adcAcqTime256 = _ADC_SINGLECTRL_AT_256CYCLES  /**< 256 clock cycles. */
  71:../emlib/inc/em_adc.h **** } ADC_AcqTime_TypeDef;
  72:../emlib/inc/em_adc.h **** 
  73:../emlib/inc/em_adc.h **** 
  74:../emlib/inc/em_adc.h **** /** Lowpass filter mode. */
  75:../emlib/inc/em_adc.h **** typedef enum
  76:../emlib/inc/em_adc.h **** {
  77:../emlib/inc/em_adc.h ****   /** No filter or decoupling capacitor. */
  78:../emlib/inc/em_adc.h ****   adcLPFilterBypass = _ADC_CTRL_LPFMODE_BYPASS,
  79:../emlib/inc/em_adc.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 39


  80:../emlib/inc/em_adc.h ****   /** On-chip RC filter. */
  81:../emlib/inc/em_adc.h ****   adcLPFilterRC     = _ADC_CTRL_LPFMODE_RCFILT,
  82:../emlib/inc/em_adc.h **** 
  83:../emlib/inc/em_adc.h ****   /** On-chip decoupling capacitor. */
  84:../emlib/inc/em_adc.h ****   adcLPFilterDeCap  = _ADC_CTRL_LPFMODE_DECAP
  85:../emlib/inc/em_adc.h **** } ADC_LPFilter_TypeDef;
  86:../emlib/inc/em_adc.h **** 
  87:../emlib/inc/em_adc.h **** 
  88:../emlib/inc/em_adc.h **** /** Oversample rate select. */
  89:../emlib/inc/em_adc.h **** typedef enum
  90:../emlib/inc/em_adc.h **** {
  91:../emlib/inc/em_adc.h ****   /** 2 samples per conversion result. */
  92:../emlib/inc/em_adc.h ****   adcOvsRateSel2    = _ADC_CTRL_OVSRSEL_X2,
  93:../emlib/inc/em_adc.h **** 
  94:../emlib/inc/em_adc.h ****   /** 4 samples per conversion result. */
  95:../emlib/inc/em_adc.h ****   adcOvsRateSel4    = _ADC_CTRL_OVSRSEL_X4,
  96:../emlib/inc/em_adc.h **** 
  97:../emlib/inc/em_adc.h ****   /** 8 samples per conversion result. */
  98:../emlib/inc/em_adc.h ****   adcOvsRateSel8    = _ADC_CTRL_OVSRSEL_X8,
  99:../emlib/inc/em_adc.h **** 
 100:../emlib/inc/em_adc.h ****   /** 16 samples per conversion result. */
 101:../emlib/inc/em_adc.h ****   adcOvsRateSel16   = _ADC_CTRL_OVSRSEL_X16,
 102:../emlib/inc/em_adc.h **** 
 103:../emlib/inc/em_adc.h ****   /** 32 samples per conversion result. */
 104:../emlib/inc/em_adc.h ****   adcOvsRateSel32   = _ADC_CTRL_OVSRSEL_X32,
 105:../emlib/inc/em_adc.h **** 
 106:../emlib/inc/em_adc.h ****   /** 64 samples per conversion result. */
 107:../emlib/inc/em_adc.h ****   adcOvsRateSel64   = _ADC_CTRL_OVSRSEL_X64,
 108:../emlib/inc/em_adc.h **** 
 109:../emlib/inc/em_adc.h ****   /** 128 samples per conversion result. */
 110:../emlib/inc/em_adc.h ****   adcOvsRateSel128  = _ADC_CTRL_OVSRSEL_X128,
 111:../emlib/inc/em_adc.h **** 
 112:../emlib/inc/em_adc.h ****   /** 256 samples per conversion result. */
 113:../emlib/inc/em_adc.h ****   adcOvsRateSel256  = _ADC_CTRL_OVSRSEL_X256,
 114:../emlib/inc/em_adc.h **** 
 115:../emlib/inc/em_adc.h ****   /** 512 samples per conversion result. */
 116:../emlib/inc/em_adc.h ****   adcOvsRateSel512  = _ADC_CTRL_OVSRSEL_X512,
 117:../emlib/inc/em_adc.h **** 
 118:../emlib/inc/em_adc.h ****   /** 1024 samples per conversion result. */
 119:../emlib/inc/em_adc.h ****   adcOvsRateSel1024 = _ADC_CTRL_OVSRSEL_X1024,
 120:../emlib/inc/em_adc.h **** 
 121:../emlib/inc/em_adc.h ****   /** 2048 samples per conversion result. */
 122:../emlib/inc/em_adc.h ****   adcOvsRateSel2048 = _ADC_CTRL_OVSRSEL_X2048,
 123:../emlib/inc/em_adc.h **** 
 124:../emlib/inc/em_adc.h ****   /** 4096 samples per conversion result. */
 125:../emlib/inc/em_adc.h ****   adcOvsRateSel4096 = _ADC_CTRL_OVSRSEL_X4096
 126:../emlib/inc/em_adc.h **** } ADC_OvsRateSel_TypeDef;
 127:../emlib/inc/em_adc.h **** 
 128:../emlib/inc/em_adc.h **** 
 129:../emlib/inc/em_adc.h **** /** Peripheral Reflex System signal used to trigger single sample. */
 130:../emlib/inc/em_adc.h **** typedef enum
 131:../emlib/inc/em_adc.h **** {
 132:../emlib/inc/em_adc.h ****   adcPRSSELCh0 = _ADC_SINGLECTRL_PRSSEL_PRSCH0, /**< PRS channel 0. */
 133:../emlib/inc/em_adc.h ****   adcPRSSELCh1 = _ADC_SINGLECTRL_PRSSEL_PRSCH1, /**< PRS channel 1. */
 134:../emlib/inc/em_adc.h ****   adcPRSSELCh2 = _ADC_SINGLECTRL_PRSSEL_PRSCH2, /**< PRS channel 2. */
 135:../emlib/inc/em_adc.h ****   adcPRSSELCh3 = _ADC_SINGLECTRL_PRSSEL_PRSCH3, /**< PRS channel 3. */
 136:../emlib/inc/em_adc.h **** 
ARM GAS  /tmp/ccpirqce.s 			page 40


 137:../emlib/inc/em_adc.h **** #if defined( _ADC_SINGLECTRL_PRSSEL_PRSCH7 )
 138:../emlib/inc/em_adc.h ****   adcPRSSELCh4 = _ADC_SINGLECTRL_PRSSEL_PRSCH4, /**< PRS channel 4. */
 139:../emlib/inc/em_adc.h ****   adcPRSSELCh5 = _ADC_SINGLECTRL_PRSSEL_PRSCH5, /**< PRS channel 5. */
 140:../emlib/inc/em_adc.h ****   adcPRSSELCh6 = _ADC_SINGLECTRL_PRSSEL_PRSCH6, /**< PRS channel 6. */
 141:../emlib/inc/em_adc.h ****   adcPRSSELCh7 = _ADC_SINGLECTRL_PRSSEL_PRSCH7  /**< PRS channel 7. */
 142:../emlib/inc/em_adc.h **** #endif
 143:../emlib/inc/em_adc.h **** } ADC_PRSSEL_TypeDef;
 144:../emlib/inc/em_adc.h **** 
 145:../emlib/inc/em_adc.h **** 
 146:../emlib/inc/em_adc.h **** /** Reference to ADC sample. */
 147:../emlib/inc/em_adc.h **** typedef enum
 148:../emlib/inc/em_adc.h **** {
 149:../emlib/inc/em_adc.h ****   /** Internal 1.25V reference. */
 150:../emlib/inc/em_adc.h ****   adcRef1V25      = _ADC_SINGLECTRL_REF_1V25,
 151:../emlib/inc/em_adc.h **** 
 152:../emlib/inc/em_adc.h ****   /** Internal 2.5V reference. */
 153:../emlib/inc/em_adc.h ****   adcRef2V5       = _ADC_SINGLECTRL_REF_2V5,
 154:../emlib/inc/em_adc.h **** 
 155:../emlib/inc/em_adc.h ****   /** Buffered VDD. */
 156:../emlib/inc/em_adc.h ****   adcRefVDD       = _ADC_SINGLECTRL_REF_VDD,
 157:../emlib/inc/em_adc.h **** 
 158:../emlib/inc/em_adc.h ****   /** Internal differential 5V reference. */
 159:../emlib/inc/em_adc.h ****   adcRef5VDIFF    = _ADC_SINGLECTRL_REF_5VDIFF,
 160:../emlib/inc/em_adc.h **** 
 161:../emlib/inc/em_adc.h ****   /** Single ended ext. ref. from pin 6. */
 162:../emlib/inc/em_adc.h ****   adcRefExtSingle = _ADC_SINGLECTRL_REF_EXTSINGLE,
 163:../emlib/inc/em_adc.h **** 
 164:../emlib/inc/em_adc.h ****   /** Differential ext. ref. from pin 6 and 7. */
 165:../emlib/inc/em_adc.h ****   adcRef2xExtDiff = _ADC_SINGLECTRL_REF_2XEXTDIFF,
 166:../emlib/inc/em_adc.h **** 
 167:../emlib/inc/em_adc.h ****   /** Unbuffered 2xVDD. */
 168:../emlib/inc/em_adc.h ****   adcRef2xVDD     = _ADC_SINGLECTRL_REF_2XVDD
 169:../emlib/inc/em_adc.h **** } ADC_Ref_TypeDef;
 170:../emlib/inc/em_adc.h **** 
 171:../emlib/inc/em_adc.h **** 
 172:../emlib/inc/em_adc.h **** /** Sample resolution. */
 173:../emlib/inc/em_adc.h **** typedef enum
 174:../emlib/inc/em_adc.h **** {
 175:../emlib/inc/em_adc.h ****   adcRes12Bit = _ADC_SINGLECTRL_RES_12BIT, /**< 12 bit sampling. */
 176:../emlib/inc/em_adc.h ****   adcRes8Bit  = _ADC_SINGLECTRL_RES_8BIT,  /**< 8 bit sampling. */
 177:../emlib/inc/em_adc.h ****   adcRes6Bit  = _ADC_SINGLECTRL_RES_6BIT,  /**< 6 bit sampling. */
 178:../emlib/inc/em_adc.h ****   adcResOVS   = _ADC_SINGLECTRL_RES_OVS    /**< Oversampling. */
 179:../emlib/inc/em_adc.h **** } ADC_Res_TypeDef;
 180:../emlib/inc/em_adc.h **** 
 181:../emlib/inc/em_adc.h **** 
 182:../emlib/inc/em_adc.h **** /** Single sample input selection. */
 183:../emlib/inc/em_adc.h **** typedef enum
 184:../emlib/inc/em_adc.h **** {
 185:../emlib/inc/em_adc.h ****   /* Differential mode disabled */
 186:../emlib/inc/em_adc.h ****   adcSingleInpCh0      = _ADC_SINGLECTRL_INPUTSEL_CH0,      /**< Channel 0. */
 187:../emlib/inc/em_adc.h ****   adcSingleInpCh1      = _ADC_SINGLECTRL_INPUTSEL_CH1,      /**< Channel 1. */
 188:../emlib/inc/em_adc.h ****   adcSingleInpCh2      = _ADC_SINGLECTRL_INPUTSEL_CH2,      /**< Channel 2. */
 189:../emlib/inc/em_adc.h ****   adcSingleInpCh3      = _ADC_SINGLECTRL_INPUTSEL_CH3,      /**< Channel 3. */
 190:../emlib/inc/em_adc.h ****   adcSingleInpCh4      = _ADC_SINGLECTRL_INPUTSEL_CH4,      /**< Channel 4. */
 191:../emlib/inc/em_adc.h ****   adcSingleInpCh5      = _ADC_SINGLECTRL_INPUTSEL_CH5,      /**< Channel 5. */
 192:../emlib/inc/em_adc.h ****   adcSingleInpCh6      = _ADC_SINGLECTRL_INPUTSEL_CH6,      /**< Channel 6. */
 193:../emlib/inc/em_adc.h ****   adcSingleInpCh7      = _ADC_SINGLECTRL_INPUTSEL_CH7,      /**< Channel 7. */
ARM GAS  /tmp/ccpirqce.s 			page 41


 194:../emlib/inc/em_adc.h ****   adcSingleInpTemp     = _ADC_SINGLECTRL_INPUTSEL_TEMP,     /**< Temperature reference. */
 195:../emlib/inc/em_adc.h ****   adcSingleInpVDDDiv3  = _ADC_SINGLECTRL_INPUTSEL_VDDDIV3,  /**< VDD divided by 3. */
 196:../emlib/inc/em_adc.h ****   adcSingleInpVDD      = _ADC_SINGLECTRL_INPUTSEL_VDD,      /**< VDD. */
 197:../emlib/inc/em_adc.h ****   adcSingleInpVSS      = _ADC_SINGLECTRL_INPUTSEL_VSS,      /**< VSS. */
 198:../emlib/inc/em_adc.h ****   adcSingleInpVrefDiv2 = _ADC_SINGLECTRL_INPUTSEL_VREFDIV2, /**< Vref divided by 2. */
 199:../emlib/inc/em_adc.h ****   adcSingleInpDACOut0  = _ADC_SINGLECTRL_INPUTSEL_DAC0OUT0, /**< DAC output 0. */
 200:../emlib/inc/em_adc.h ****   adcSingleInpDACOut1  = _ADC_SINGLECTRL_INPUTSEL_DAC0OUT1, /**< DAC output 1. */
 201:../emlib/inc/em_adc.h ****   /* TBD: Use define when available */
 202:../emlib/inc/em_adc.h ****   adcSingleInpATEST    = 15,                                /**< ATEST. */
 203:../emlib/inc/em_adc.h **** 
 204:../emlib/inc/em_adc.h ****   /* Differential mode enabled */
 205:../emlib/inc/em_adc.h ****   adcSingleInpCh0Ch1   = _ADC_SINGLECTRL_INPUTSEL_CH0CH1,   /**< Positive Ch0, negative Ch1. */
 206:../emlib/inc/em_adc.h ****   adcSingleInpCh2Ch3   = _ADC_SINGLECTRL_INPUTSEL_CH2CH3,   /**< Positive Ch2, negative Ch3. */
 207:../emlib/inc/em_adc.h ****   adcSingleInpCh4Ch5   = _ADC_SINGLECTRL_INPUTSEL_CH4CH5,   /**< Positive Ch4, negative Ch5. */
 208:../emlib/inc/em_adc.h ****   adcSingleInpCh6Ch7   = _ADC_SINGLECTRL_INPUTSEL_CH6CH7,   /**< Positive Ch6, negative Ch7. */
 209:../emlib/inc/em_adc.h ****   /* TBD: Use define when available */
 210:../emlib/inc/em_adc.h ****   adcSingleInpDiff0    = 4                                  /**< Differential 0. */
 211:../emlib/inc/em_adc.h **** } ADC_SingleInput_TypeDef;
 212:../emlib/inc/em_adc.h **** 
 213:../emlib/inc/em_adc.h **** 
 214:../emlib/inc/em_adc.h **** /** ADC Start command. */
 215:../emlib/inc/em_adc.h **** typedef enum
 216:../emlib/inc/em_adc.h **** {
 217:../emlib/inc/em_adc.h ****   /** Start single conversion. */
 218:../emlib/inc/em_adc.h ****   adcStartSingle        = ADC_CMD_SINGLESTART,
 219:../emlib/inc/em_adc.h **** 
 220:../emlib/inc/em_adc.h ****   /** Start scan sequence. */
 221:../emlib/inc/em_adc.h ****   adcStartScan          = ADC_CMD_SCANSTART,
 222:../emlib/inc/em_adc.h **** 
 223:../emlib/inc/em_adc.h ****   /**
 224:../emlib/inc/em_adc.h ****    * Start scan sequence and single conversion, typically used when tailgating
 225:../emlib/inc/em_adc.h ****    * single conversion after scan sequence.
 226:../emlib/inc/em_adc.h ****    */
 227:../emlib/inc/em_adc.h ****   adcStartScanAndSingle = ADC_CMD_SCANSTART | ADC_CMD_SINGLESTART
 228:../emlib/inc/em_adc.h **** } ADC_Start_TypeDef;
 229:../emlib/inc/em_adc.h **** 
 230:../emlib/inc/em_adc.h **** 
 231:../emlib/inc/em_adc.h **** /** Warm-up mode. */
 232:../emlib/inc/em_adc.h **** typedef enum
 233:../emlib/inc/em_adc.h **** {
 234:../emlib/inc/em_adc.h ****   /** ADC shutdown after each conversion. */
 235:../emlib/inc/em_adc.h ****   adcWarmupNormal          = _ADC_CTRL_WARMUPMODE_NORMAL,
 236:../emlib/inc/em_adc.h **** 
 237:../emlib/inc/em_adc.h ****   /** Do not warm-up bandgap references. */
 238:../emlib/inc/em_adc.h ****   adcWarmupFastBG          = _ADC_CTRL_WARMUPMODE_FASTBG,
 239:../emlib/inc/em_adc.h **** 
 240:../emlib/inc/em_adc.h ****   /** Reference selected for scan mode kept warm.*/
 241:../emlib/inc/em_adc.h ****   adcWarmupKeepScanRefWarm = _ADC_CTRL_WARMUPMODE_KEEPSCANREFWARM,
 242:../emlib/inc/em_adc.h **** 
 243:../emlib/inc/em_adc.h ****   /** ADC and reference selected for scan mode kept warm.*/
 244:../emlib/inc/em_adc.h ****   adcWarmupKeepADCWarm     = _ADC_CTRL_WARMUPMODE_KEEPADCWARM
 245:../emlib/inc/em_adc.h **** } ADC_Warmup_TypeDef;
 246:../emlib/inc/em_adc.h **** 
 247:../emlib/inc/em_adc.h **** 
 248:../emlib/inc/em_adc.h **** /*******************************************************************************
 249:../emlib/inc/em_adc.h ****  *******************************   STRUCTS   ***********************************
 250:../emlib/inc/em_adc.h ****  ******************************************************************************/
ARM GAS  /tmp/ccpirqce.s 			page 42


 251:../emlib/inc/em_adc.h **** 
 252:../emlib/inc/em_adc.h **** /** ADC init structure, common for single conversion and scan sequence. */
 253:../emlib/inc/em_adc.h **** typedef struct
 254:../emlib/inc/em_adc.h **** {
 255:../emlib/inc/em_adc.h ****   /**
 256:../emlib/inc/em_adc.h ****    * Oversampling rate select. In order to have any effect, oversampling must
 257:../emlib/inc/em_adc.h ****    * be enabled for single/scan mode.
 258:../emlib/inc/em_adc.h ****    */
 259:../emlib/inc/em_adc.h ****   ADC_OvsRateSel_TypeDef ovsRateSel;
 260:../emlib/inc/em_adc.h **** 
 261:../emlib/inc/em_adc.h ****   /** Lowpass or decoupling capacitor filter to use. */
 262:../emlib/inc/em_adc.h ****   ADC_LPFilter_TypeDef   lpfMode;
 263:../emlib/inc/em_adc.h **** 
 264:../emlib/inc/em_adc.h ****   /** Warm-up mode to use for ADC. */
 265:../emlib/inc/em_adc.h ****   ADC_Warmup_TypeDef     warmUpMode;
 266:../emlib/inc/em_adc.h **** 
 267:../emlib/inc/em_adc.h ****   /**
 268:../emlib/inc/em_adc.h ****    * Timebase used for ADC warm up. Select N to give (N+1)HFPERCLK cycles.
 269:../emlib/inc/em_adc.h ****    * (Additional delay is added for bandgap references, please refer to the
 270:../emlib/inc/em_adc.h ****    * reference manual.) Normally, N should be selected so that the timebase
 271:../emlib/inc/em_adc.h ****    * is at least 1 us. See ADC_TimebaseCalc() for a way to obtain
 272:../emlib/inc/em_adc.h ****    * a suggested timebase of at least 1 us.
 273:../emlib/inc/em_adc.h ****    */
 274:../emlib/inc/em_adc.h ****   uint8_t                timebase;
 275:../emlib/inc/em_adc.h **** 
 276:../emlib/inc/em_adc.h ****   /** Clock division factor N, ADC clock =  HFPERCLK / (N + 1). */
 277:../emlib/inc/em_adc.h ****   uint8_t                prescale;
 278:../emlib/inc/em_adc.h **** 
 279:../emlib/inc/em_adc.h ****   /** Enable/disable conversion tailgating. */
 280:../emlib/inc/em_adc.h ****   bool                   tailgate;
 281:../emlib/inc/em_adc.h **** } ADC_Init_TypeDef;
 282:../emlib/inc/em_adc.h **** 
 283:../emlib/inc/em_adc.h **** /** Default config for ADC init structure. */
 284:../emlib/inc/em_adc.h **** #define ADC_INIT_DEFAULT                                                     \
 285:../emlib/inc/em_adc.h ****   { adcOvsRateSel2,                /* 2x oversampling (if enabled). */       \
 286:../emlib/inc/em_adc.h ****     adcLPFilterBypass,             /* No input filter selected. */           \
 287:../emlib/inc/em_adc.h ****     adcWarmupNormal,               /* ADC shutdown after each conversion. */ \
 288:../emlib/inc/em_adc.h ****     _ADC_CTRL_TIMEBASE_DEFAULT,    /* Use HW default value. */               \
 289:../emlib/inc/em_adc.h ****     _ADC_CTRL_PRESC_DEFAULT,       /* Use HW default value. */               \
 290:../emlib/inc/em_adc.h ****     false                          /* Do not use tailgate. */                \
 291:../emlib/inc/em_adc.h ****   }
 292:../emlib/inc/em_adc.h **** 
 293:../emlib/inc/em_adc.h **** 
 294:../emlib/inc/em_adc.h **** /** Scan sequence init structure. */
 295:../emlib/inc/em_adc.h **** typedef struct
 296:../emlib/inc/em_adc.h **** {
 297:../emlib/inc/em_adc.h ****   /**
 298:../emlib/inc/em_adc.h ****    * Peripheral reflex system trigger selection. Only applicable if @p prsEnable
 299:../emlib/inc/em_adc.h ****    * is enabled.
 300:../emlib/inc/em_adc.h ****    */
 301:../emlib/inc/em_adc.h ****   ADC_PRSSEL_TypeDef  prsSel;
 302:../emlib/inc/em_adc.h **** 
 303:../emlib/inc/em_adc.h ****   /** Acquisition time (in ADC clock cycles). */
 304:../emlib/inc/em_adc.h ****   ADC_AcqTime_TypeDef acqTime;
 305:../emlib/inc/em_adc.h **** 
 306:../emlib/inc/em_adc.h ****   /**
 307:../emlib/inc/em_adc.h ****    * Sample reference selection. Notice that for external references, the
ARM GAS  /tmp/ccpirqce.s 			page 43


 308:../emlib/inc/em_adc.h ****    * ADC calibration register must be set explicitly.
 309:../emlib/inc/em_adc.h ****    */
 310:../emlib/inc/em_adc.h ****   ADC_Ref_TypeDef     reference;
 311:../emlib/inc/em_adc.h **** 
 312:../emlib/inc/em_adc.h ****   /** Sample resolution. */
 313:../emlib/inc/em_adc.h ****   ADC_Res_TypeDef     resolution;
 314:../emlib/inc/em_adc.h **** 
 315:../emlib/inc/em_adc.h ****   /**
 316:../emlib/inc/em_adc.h ****    * Input scan selection. If single ended (@p diff is false), use logical
 317:../emlib/inc/em_adc.h ****    * combination of ADC_SCANCTRL_INPUTMASK_CHx defines. If differential input
 318:../emlib/inc/em_adc.h ****    * (@p diff is true), use logical combination of ADC_SCANCTRL_INPUTMASK_CHxCHy
 319:../emlib/inc/em_adc.h ****    * defines. (Notice underscore prefix for defines used.)
 320:../emlib/inc/em_adc.h ****    */
 321:../emlib/inc/em_adc.h ****   uint32_t            input;
 322:../emlib/inc/em_adc.h **** 
 323:../emlib/inc/em_adc.h ****   /** Select if single ended or differential input. */
 324:../emlib/inc/em_adc.h ****   bool                diff;
 325:../emlib/inc/em_adc.h **** 
 326:../emlib/inc/em_adc.h ****   /** Peripheral reflex system trigger enable. */
 327:../emlib/inc/em_adc.h ****   bool                prsEnable;
 328:../emlib/inc/em_adc.h **** 
 329:../emlib/inc/em_adc.h ****   /** Select if left adjustment should be done. */
 330:../emlib/inc/em_adc.h ****   bool                leftAdjust;
 331:../emlib/inc/em_adc.h **** 
 332:../emlib/inc/em_adc.h ****   /** Select if continuous conversion until explicit stop. */
 333:../emlib/inc/em_adc.h ****   bool                rep;
 334:../emlib/inc/em_adc.h **** } ADC_InitScan_TypeDef;
 335:../emlib/inc/em_adc.h **** 
 336:../emlib/inc/em_adc.h **** /** Default config for ADC scan init structure. */
 337:../emlib/inc/em_adc.h **** #define ADC_INITSCAN_DEFAULT                                                        \
 338:../emlib/inc/em_adc.h ****   { adcPRSSELCh0,              /* PRS ch0 (if enabled). */                          \
 339:../emlib/inc/em_adc.h ****     adcAcqTime1,               /* 1 ADC_CLK cycle acquisition time. */              \
 340:../emlib/inc/em_adc.h ****     adcRef1V25,                /* 1.25V internal reference. */                      \
 341:../emlib/inc/em_adc.h ****     adcRes12Bit,               /* 12 bit resolution. */                             \
 342:../emlib/inc/em_adc.h ****     0,                         /* No input selected. */                             \
 343:../emlib/inc/em_adc.h ****     false,                     /* Single ended input. */                            \
 344:../emlib/inc/em_adc.h ****     false,                     /* PRS disabled. */                                  \
 345:../emlib/inc/em_adc.h ****     false,                     /* Right adjust. */                                  \
 346:../emlib/inc/em_adc.h ****     false                      /* Deactivate conversion after one scan sequence. */ \
 347:../emlib/inc/em_adc.h ****   }
 348:../emlib/inc/em_adc.h **** 
 349:../emlib/inc/em_adc.h **** 
 350:../emlib/inc/em_adc.h **** /** Single conversion init structure. */
 351:../emlib/inc/em_adc.h **** typedef struct
 352:../emlib/inc/em_adc.h **** {
 353:../emlib/inc/em_adc.h ****   /**
 354:../emlib/inc/em_adc.h ****    * Peripheral reflex system trigger selection. Only applicable if @p prsEnable
 355:../emlib/inc/em_adc.h ****    * is enabled.
 356:../emlib/inc/em_adc.h ****    */
 357:../emlib/inc/em_adc.h ****   ADC_PRSSEL_TypeDef      prsSel;
 358:../emlib/inc/em_adc.h **** 
 359:../emlib/inc/em_adc.h ****   /** Acquisition time (in ADC clock cycles). */
 360:../emlib/inc/em_adc.h ****   ADC_AcqTime_TypeDef     acqTime;
 361:../emlib/inc/em_adc.h **** 
 362:../emlib/inc/em_adc.h ****   /**
 363:../emlib/inc/em_adc.h ****    * Sample reference selection. Notice that for external references, the
 364:../emlib/inc/em_adc.h ****    * ADC calibration register must be set explicitly.
ARM GAS  /tmp/ccpirqce.s 			page 44


 365:../emlib/inc/em_adc.h ****    */
 366:../emlib/inc/em_adc.h ****   ADC_Ref_TypeDef         reference;
 367:../emlib/inc/em_adc.h **** 
 368:../emlib/inc/em_adc.h ****   /** Sample resolution. */
 369:../emlib/inc/em_adc.h ****   ADC_Res_TypeDef         resolution;
 370:../emlib/inc/em_adc.h **** 
 371:../emlib/inc/em_adc.h ****   /**
 372:../emlib/inc/em_adc.h ****    * Sample input selection, use single ended or differential input according
 373:../emlib/inc/em_adc.h ****    * to setting of @p diff.
 374:../emlib/inc/em_adc.h ****    */
 375:../emlib/inc/em_adc.h ****   ADC_SingleInput_TypeDef input;
 376:../emlib/inc/em_adc.h **** 
 377:../emlib/inc/em_adc.h ****   /** Select if single ended or differential input. */
 378:../emlib/inc/em_adc.h ****   bool                    diff;
 379:../emlib/inc/em_adc.h **** 
 380:../emlib/inc/em_adc.h ****   /** Peripheral reflex system trigger enable. */
 381:../emlib/inc/em_adc.h ****   bool                    prsEnable;
 382:../emlib/inc/em_adc.h **** 
 383:../emlib/inc/em_adc.h ****   /** Select if left adjustment should be done. */
 384:../emlib/inc/em_adc.h ****   bool                    leftAdjust;
 385:../emlib/inc/em_adc.h **** 
 386:../emlib/inc/em_adc.h ****   /** Select if continuous conversion until explicit stop. */
 387:../emlib/inc/em_adc.h ****   bool                    rep;
 388:../emlib/inc/em_adc.h **** } ADC_InitSingle_TypeDef;
 389:../emlib/inc/em_adc.h **** 
 390:../emlib/inc/em_adc.h **** /** Default config for ADC single conversion init structure. */
 391:../emlib/inc/em_adc.h **** #define ADC_INITSINGLE_DEFAULT                                                      \
 392:../emlib/inc/em_adc.h ****   { adcPRSSELCh0,              /* PRS ch0 (if enabled). */                          \
 393:../emlib/inc/em_adc.h ****     adcAcqTime1,               /* 1 ADC_CLK cycle acquisition time. */              \
 394:../emlib/inc/em_adc.h ****     adcRef1V25,                /* 1.25V internal reference. */                      \
 395:../emlib/inc/em_adc.h ****     adcRes12Bit,               /* 12 bit resolution. */                             \
 396:../emlib/inc/em_adc.h ****     adcSingleInpCh0,           /* CH0 input selected. */                            \
 397:../emlib/inc/em_adc.h ****     false,                     /* Single ended input. */                            \
 398:../emlib/inc/em_adc.h ****     false,                     /* PRS disabled. */                                  \
 399:../emlib/inc/em_adc.h ****     false,                     /* Right adjust. */                                  \
 400:../emlib/inc/em_adc.h ****     false                      /* Deactivate conversion after one scan sequence. */ \
 401:../emlib/inc/em_adc.h ****   }
 402:../emlib/inc/em_adc.h **** 
 403:../emlib/inc/em_adc.h **** 
 404:../emlib/inc/em_adc.h **** /*******************************************************************************
 405:../emlib/inc/em_adc.h ****  *****************************   PROTOTYPES   **********************************
 406:../emlib/inc/em_adc.h ****  ******************************************************************************/
 407:../emlib/inc/em_adc.h **** 
 408:../emlib/inc/em_adc.h **** /***************************************************************************//**
 409:../emlib/inc/em_adc.h ****  * @brief
 410:../emlib/inc/em_adc.h ****  *   Get single conversion result.
 411:../emlib/inc/em_adc.h ****  *
 412:../emlib/inc/em_adc.h ****  * @note
 413:../emlib/inc/em_adc.h ****  *   Do only use if single conversion data valid.
 414:../emlib/inc/em_adc.h ****  *
 415:../emlib/inc/em_adc.h ****  * @param[in] adc
 416:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 417:../emlib/inc/em_adc.h ****  *
 418:../emlib/inc/em_adc.h ****  * @return
 419:../emlib/inc/em_adc.h ****  *
 420:../emlib/inc/em_adc.h ****  ******************************************************************************/
 421:../emlib/inc/em_adc.h **** __STATIC_INLINE uint32_t ADC_DataSingleGet(ADC_TypeDef *adc)
ARM GAS  /tmp/ccpirqce.s 			page 45


 422:../emlib/inc/em_adc.h **** {
 175              		.loc 4 422 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 8
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180 0000 82B0     		sub	sp, sp, #8
 181              		.cfi_def_cfa_offset 8
 182 0002 0190     		str	r0, [sp, #4]
 423:../emlib/inc/em_adc.h ****   return(adc->SINGLEDATA);
 183              		.loc 4 423 0
 184 0004 019B     		ldr	r3, [sp, #4]
 185 0006 5B6A     		ldr	r3, [r3, #36]
 424:../emlib/inc/em_adc.h **** }
 186              		.loc 4 424 0
 187 0008 1846     		mov	r0, r3
 188 000a 02B0     		add	sp, sp, #8
 189              		@ sp needed
 190 000c 7047     		bx	lr
 191              		.cfi_endproc
 192              	.LFE108:
 194 000e 00BF     		.section	.text.ADC_Start,"ax",%progbits
 195              		.align	2
 196              		.thumb
 197              		.thumb_func
 199              	ADC_Start:
 200              	.LFB115:
 425:../emlib/inc/em_adc.h **** 
 426:../emlib/inc/em_adc.h **** 
 427:../emlib/inc/em_adc.h **** /***************************************************************************//**
 428:../emlib/inc/em_adc.h ****  * @brief
 429:../emlib/inc/em_adc.h ****  *   Get scan result.
 430:../emlib/inc/em_adc.h ****  *
 431:../emlib/inc/em_adc.h ****  * @note
 432:../emlib/inc/em_adc.h ****  *   Do only use if scan data valid.
 433:../emlib/inc/em_adc.h ****  *
 434:../emlib/inc/em_adc.h ****  * @param[in] adc
 435:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 436:../emlib/inc/em_adc.h ****  ******************************************************************************/
 437:../emlib/inc/em_adc.h **** __STATIC_INLINE uint32_t ADC_DataScanGet(ADC_TypeDef *adc)
 438:../emlib/inc/em_adc.h **** {
 439:../emlib/inc/em_adc.h ****   return(adc->SCANDATA);
 440:../emlib/inc/em_adc.h **** }
 441:../emlib/inc/em_adc.h **** 
 442:../emlib/inc/em_adc.h **** 
 443:../emlib/inc/em_adc.h **** void ADC_Init(ADC_TypeDef *adc, const ADC_Init_TypeDef *init);
 444:../emlib/inc/em_adc.h **** void ADC_InitScan(ADC_TypeDef *adc, const ADC_InitScan_TypeDef *init);
 445:../emlib/inc/em_adc.h **** void ADC_InitSingle(ADC_TypeDef *adc, const ADC_InitSingle_TypeDef *init);
 446:../emlib/inc/em_adc.h **** 
 447:../emlib/inc/em_adc.h **** /***************************************************************************//**
 448:../emlib/inc/em_adc.h ****  * @brief
 449:../emlib/inc/em_adc.h ****  *   Clear one or more pending ADC interrupts.
 450:../emlib/inc/em_adc.h ****  *
 451:../emlib/inc/em_adc.h ****  * @param[in] adc
 452:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 453:../emlib/inc/em_adc.h ****  *
 454:../emlib/inc/em_adc.h ****  * @param[in] flags
ARM GAS  /tmp/ccpirqce.s 			page 46


 455:../emlib/inc/em_adc.h ****  *   Pending ADC interrupt source to clear. Use a bitwise logic OR combination
 456:../emlib/inc/em_adc.h ****  *   of valid interrupt flags for the ADC module (ADC_IF_nnn).
 457:../emlib/inc/em_adc.h ****  ******************************************************************************/
 458:../emlib/inc/em_adc.h **** __STATIC_INLINE void ADC_IntClear(ADC_TypeDef *adc, uint32_t flags)
 459:../emlib/inc/em_adc.h **** {
 460:../emlib/inc/em_adc.h ****   adc->IFC = flags;
 461:../emlib/inc/em_adc.h **** }
 462:../emlib/inc/em_adc.h **** 
 463:../emlib/inc/em_adc.h **** 
 464:../emlib/inc/em_adc.h **** /***************************************************************************//**
 465:../emlib/inc/em_adc.h ****  * @brief
 466:../emlib/inc/em_adc.h ****  *   Disable one or more ADC interrupts.
 467:../emlib/inc/em_adc.h ****  *
 468:../emlib/inc/em_adc.h ****  * @param[in] adc
 469:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 470:../emlib/inc/em_adc.h ****  *
 471:../emlib/inc/em_adc.h ****  * @param[in] flags
 472:../emlib/inc/em_adc.h ****  *   ADC interrupt sources to disable. Use a bitwise logic OR combination of
 473:../emlib/inc/em_adc.h ****  *   valid interrupt flags for the ADC module (ADC_IF_nnn).
 474:../emlib/inc/em_adc.h ****  ******************************************************************************/
 475:../emlib/inc/em_adc.h **** __STATIC_INLINE void ADC_IntDisable(ADC_TypeDef *adc, uint32_t flags)
 476:../emlib/inc/em_adc.h **** {
 477:../emlib/inc/em_adc.h ****   adc->IEN &= ~(flags);
 478:../emlib/inc/em_adc.h **** }
 479:../emlib/inc/em_adc.h **** 
 480:../emlib/inc/em_adc.h **** 
 481:../emlib/inc/em_adc.h **** /***************************************************************************//**
 482:../emlib/inc/em_adc.h ****  * @brief
 483:../emlib/inc/em_adc.h ****  *   Enable one or more ADC interrupts.
 484:../emlib/inc/em_adc.h ****  *
 485:../emlib/inc/em_adc.h ****  * @note
 486:../emlib/inc/em_adc.h ****  *   Depending on the use, a pending interrupt may already be set prior to
 487:../emlib/inc/em_adc.h ****  *   enabling the interrupt. Consider using ADC_IntClear() prior to enabling
 488:../emlib/inc/em_adc.h ****  *   if such a pending interrupt should be ignored.
 489:../emlib/inc/em_adc.h ****  *
 490:../emlib/inc/em_adc.h ****  * @param[in] adc
 491:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 492:../emlib/inc/em_adc.h ****  *
 493:../emlib/inc/em_adc.h ****  * @param[in] flags
 494:../emlib/inc/em_adc.h ****  *   ADC interrupt sources to enable. Use a bitwise logic OR combination of
 495:../emlib/inc/em_adc.h ****  *   valid interrupt flags for the ADC module (ADC_IF_nnn).
 496:../emlib/inc/em_adc.h ****  ******************************************************************************/
 497:../emlib/inc/em_adc.h **** __STATIC_INLINE void ADC_IntEnable(ADC_TypeDef *adc, uint32_t flags)
 498:../emlib/inc/em_adc.h **** {
 499:../emlib/inc/em_adc.h ****   adc->IEN |= flags;
 500:../emlib/inc/em_adc.h **** }
 501:../emlib/inc/em_adc.h **** 
 502:../emlib/inc/em_adc.h **** 
 503:../emlib/inc/em_adc.h **** /***************************************************************************//**
 504:../emlib/inc/em_adc.h ****  * @brief
 505:../emlib/inc/em_adc.h ****  *   Get pending ADC interrupt flags.
 506:../emlib/inc/em_adc.h ****  *
 507:../emlib/inc/em_adc.h ****  * @note
 508:../emlib/inc/em_adc.h ****  *   The event bits are not cleared by the use of this function.
 509:../emlib/inc/em_adc.h ****  *
 510:../emlib/inc/em_adc.h ****  * @param[in] adc
 511:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
ARM GAS  /tmp/ccpirqce.s 			page 47


 512:../emlib/inc/em_adc.h ****  *
 513:../emlib/inc/em_adc.h ****  * @return
 514:../emlib/inc/em_adc.h ****  *   ADC interrupt sources pending. A bitwise logic OR combination of valid
 515:../emlib/inc/em_adc.h ****  *   interrupt flags for the ADC module (ADC_IF_nnn).
 516:../emlib/inc/em_adc.h ****  ******************************************************************************/
 517:../emlib/inc/em_adc.h **** __STATIC_INLINE uint32_t ADC_IntGet(ADC_TypeDef *adc)
 518:../emlib/inc/em_adc.h **** {
 519:../emlib/inc/em_adc.h ****   return(adc->IF);
 520:../emlib/inc/em_adc.h **** }
 521:../emlib/inc/em_adc.h **** 
 522:../emlib/inc/em_adc.h **** 
 523:../emlib/inc/em_adc.h **** /***************************************************************************//**
 524:../emlib/inc/em_adc.h ****  * @brief
 525:../emlib/inc/em_adc.h ****  *   Set one or more pending ADC interrupts from SW.
 526:../emlib/inc/em_adc.h ****  *
 527:../emlib/inc/em_adc.h ****  * @param[in] adc
 528:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 529:../emlib/inc/em_adc.h ****  *
 530:../emlib/inc/em_adc.h ****  * @param[in] flags
 531:../emlib/inc/em_adc.h ****  *   ADC interrupt sources to set to pending. Use a bitwise logic OR combination
 532:../emlib/inc/em_adc.h ****  *   of valid interrupt flags for the ADC module (ADC_IF_nnn).
 533:../emlib/inc/em_adc.h ****  ******************************************************************************/
 534:../emlib/inc/em_adc.h **** __STATIC_INLINE void ADC_IntSet(ADC_TypeDef *adc, uint32_t flags)
 535:../emlib/inc/em_adc.h **** {
 536:../emlib/inc/em_adc.h ****   adc->IFS = flags;
 537:../emlib/inc/em_adc.h **** }
 538:../emlib/inc/em_adc.h **** 
 539:../emlib/inc/em_adc.h **** uint8_t ADC_PrescaleCalc(uint32_t adcFreq, uint32_t hfperFreq);
 540:../emlib/inc/em_adc.h **** 
 541:../emlib/inc/em_adc.h **** 
 542:../emlib/inc/em_adc.h **** /***************************************************************************//**
 543:../emlib/inc/em_adc.h ****  * @brief
 544:../emlib/inc/em_adc.h ****  *   Start scan sequence and/or single conversion.
 545:../emlib/inc/em_adc.h ****  *
 546:../emlib/inc/em_adc.h ****  * @param[in] adc
 547:../emlib/inc/em_adc.h ****  *   Pointer to ADC peripheral register block.
 548:../emlib/inc/em_adc.h ****  *
 549:../emlib/inc/em_adc.h ****  * @param[in] cmd
 550:../emlib/inc/em_adc.h ****  *   Command indicating which type of sampling to start.
 551:../emlib/inc/em_adc.h ****  ******************************************************************************/
 552:../emlib/inc/em_adc.h **** __STATIC_INLINE void ADC_Start(ADC_TypeDef *adc, ADC_Start_TypeDef cmd)
 553:../emlib/inc/em_adc.h **** {
 201              		.loc 4 553 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 82B0     		sub	sp, sp, #8
 207              		.cfi_def_cfa_offset 8
 208 0002 0190     		str	r0, [sp, #4]
 209 0004 0B46     		mov	r3, r1
 210 0006 8DF80330 		strb	r3, [sp, #3]
 554:../emlib/inc/em_adc.h ****   adc->CMD = (uint32_t)cmd;
 211              		.loc 4 554 0
 212 000a 9DF80320 		ldrb	r2, [sp, #3]	@ zero_extendqisi2
 213 000e 019B     		ldr	r3, [sp, #4]
 214 0010 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccpirqce.s 			page 48


 555:../emlib/inc/em_adc.h **** }
 215              		.loc 4 555 0
 216 0012 02B0     		add	sp, sp, #8
 217              		@ sp needed
 218 0014 7047     		bx	lr
 219              		.cfi_endproc
 220              	.LFE115:
 222 0016 00BF     		.section	.data.smbInit,"aw",%progbits
 223              		.align	2
 226              	smbInit:
 227 0000 01       		.byte	1
 228 0001 01       		.byte	1
 229 0002 0000     		.space	2
 230 0004 00000000 		.word	0
 231 0008 10270000 		.word	10000
 232 000c 00       		.byte	0
 233 000d 000000   		.space	3
 234              		.section	.bss.SMB_Status,"aw",%nobits
 237              	SMB_Status:
 238 0000 00       		.space	1
 239              		.section	.text.BatteryMonInit,"ax",%progbits
 240              		.align	2
 241              		.global	BatteryMonInit
 242              		.thumb
 243              		.thumb_func
 245              	BatteryMonInit:
 246              	.LFB122:
 247              		.file 5 "../drivers/BatteryMon.c"
   1:../drivers/BatteryMon.c **** /***************************************************************************//**
   2:../drivers/BatteryMon.c ****  * @file
   3:../drivers/BatteryMon.c ****  * @brief	Battery Monitoring
   4:../drivers/BatteryMon.c ****  * @author	Ralf Gerhauser
   5:../drivers/BatteryMon.c ****  * @version	2015-10-13
   6:../drivers/BatteryMon.c ****  *
   7:../drivers/BatteryMon.c ****  * This module can be used to read status information from the battery pack
   8:../drivers/BatteryMon.c ****  * via its SMBus interface.  It also provides function ReadVdd() to read the
   9:../drivers/BatteryMon.c ****  * voltage of the local supply battery.
  10:../drivers/BatteryMon.c ****  *
  11:../drivers/BatteryMon.c ****  * @warning
  12:../drivers/BatteryMon.c ****  * The firmware on the battery controller (ATmega32HVB) is quite buggy!
  13:../drivers/BatteryMon.c ****  * When accessing a non-implemented register (e.g. 0x1D), the correct
  14:../drivers/BatteryMon.c ****  * response of the controller should be a Not-Acknowledge (NAK).  Instead
  15:../drivers/BatteryMon.c ****  * it enters clock-stretching mode (SCL is permanently driven low) and
  16:../drivers/BatteryMon.c ****  * also seems to hang-up internally (the LEDs reporting the capacity of the
  17:../drivers/BatteryMon.c ****  * battery are no more flashing).  The bus stalls with SCL low and SDA high
  18:../drivers/BatteryMon.c ****  * at this stage.  The EFM32 I2C-controller waits for SCL returning to high,
  19:../drivers/BatteryMon.c ****  * but this never happens.  Sometimes the bus is released after about 4 seconds,
  20:../drivers/BatteryMon.c ****  * but not always. The only work-around found for this situation is to pull
  21:../drivers/BatteryMon.c ****  * SDA low for approximately 3 seconds.  This is detected by the firmware and
  22:../drivers/BatteryMon.c ****  * SCL is released again.
  23:../drivers/BatteryMon.c ****  *
  24:../drivers/BatteryMon.c ****  * Parts of the code are based on the example code of AN0021
  25:../drivers/BatteryMon.c ****  * "Analog to Digital Converter" from Energy Micro AS / Silicon Labs.
  26:../drivers/BatteryMon.c ****  *
  27:../drivers/BatteryMon.c ****  ***************************************************************************//**
  28:../drivers/BatteryMon.c ****  *
  29:../drivers/BatteryMon.c ****  * Parts are Copyright 2013 Energy Micro AS, http://www.energymicro.com
ARM GAS  /tmp/ccpirqce.s 			page 49


  30:../drivers/BatteryMon.c ****  *
  31:../drivers/BatteryMon.c ****  *******************************************************************************
  32:../drivers/BatteryMon.c ****  *
  33:../drivers/BatteryMon.c ****  * Permission is granted to anyone to use this software for any purpose,
  34:../drivers/BatteryMon.c ****  * including commercial applications, and to alter it and redistribute it
  35:../drivers/BatteryMon.c ****  * freely, subject to the following restrictions:
  36:../drivers/BatteryMon.c ****  *
  37:../drivers/BatteryMon.c ****  * 1. The origin of this software must not be misrepresented; you must not
  38:../drivers/BatteryMon.c ****  *    claim that you wrote the original software.
  39:../drivers/BatteryMon.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  40:../drivers/BatteryMon.c ****  *    misrepresented as being the original software.
  41:../drivers/BatteryMon.c ****  * 3. This notice may not be removed or altered from any source distribution.
  42:../drivers/BatteryMon.c ****  * 4. The source and compiled code may only be used on Energy Micro "EFM32"
  43:../drivers/BatteryMon.c ****  *    microcontrollers and "EFR4" radios.
  44:../drivers/BatteryMon.c ****  *
  45:../drivers/BatteryMon.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  46:../drivers/BatteryMon.c ****  * obligation to support this Software. Energy Micro AS is providing the
  47:../drivers/BatteryMon.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  48:../drivers/BatteryMon.c ****  * including, but not limited to, any implied warranties of merchantability
  49:../drivers/BatteryMon.c ****  * or fitness for any particular purpose or warranties against infringement
  50:../drivers/BatteryMon.c ****  * of any proprietary rights of a third party.
  51:../drivers/BatteryMon.c ****  *
  52:../drivers/BatteryMon.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  53:../drivers/BatteryMon.c ****  * special damages, or any other relief, or for any claim by any third party,
  54:../drivers/BatteryMon.c ****  * arising from your use of this Software.
  55:../drivers/BatteryMon.c ****  *
  56:../drivers/BatteryMon.c ****  ****************************************************************************//*
  57:../drivers/BatteryMon.c **** Revision History:
  58:../drivers/BatteryMon.c **** 2015-10-13,rage	BugFix: <SMB_Status> must be declared "volatile".
  59:../drivers/BatteryMon.c **** 2015-06-24,rage	Added support for local battery voltage measurement (CR3032).
  60:../drivers/BatteryMon.c **** 2015-06-22,rage	Initial version, derived from SNB_Heaven.
  61:../drivers/BatteryMon.c **** */
  62:../drivers/BatteryMon.c **** 
  63:../drivers/BatteryMon.c **** /*=============================== Header Files ===============================*/
  64:../drivers/BatteryMon.c **** 
  65:../drivers/BatteryMon.c **** #include "em_cmu.h"
  66:../drivers/BatteryMon.c **** #include "em_i2c.h"
  67:../drivers/BatteryMon.c **** #include "em_emu.h"
  68:../drivers/BatteryMon.c **** #include "em_gpio.h"
  69:../drivers/BatteryMon.c **** #include "em_adc.h"
  70:../drivers/BatteryMon.c **** #include "AlarmClock.h"		// msDelay()
  71:../drivers/BatteryMon.c **** #include "BatteryMon.h"
  72:../drivers/BatteryMon.c **** #include "Display.h"
  73:../drivers/BatteryMon.c **** 
  74:../drivers/BatteryMon.c **** /*=============================== Definitions ================================*/
  75:../drivers/BatteryMon.c **** 
  76:../drivers/BatteryMon.c ****     /*!@name Hardware Configuration: SMBus controller and pins. */
  77:../drivers/BatteryMon.c **** //@{
  78:../drivers/BatteryMon.c **** #define SMB_GPIOPORT		gpioPortA	//!< Port SMBus interface
  79:../drivers/BatteryMon.c **** #define SMB_SDA_PIN		0		//!< Pin for SDA signal
  80:../drivers/BatteryMon.c **** #define SMB_SCL_PIN		1		//!< Pin for SCL signal
  81:../drivers/BatteryMon.c **** #define SMB_I2C_CTRL		I2C0		//!< I2C controller to use
  82:../drivers/BatteryMon.c **** #define SMB_I2C_CMUCLOCK	cmuClock_I2C0	//!< Enable clock for I2C
  83:../drivers/BatteryMon.c **** #define SMB_LOC		I2C_ROUTE_LOCATION_LOC0 //!< Use location 0
  84:../drivers/BatteryMon.c **** #define SMB_IRQn		I2C0_IRQn	//!< I2C controller interrupt
  85:../drivers/BatteryMon.c **** #define SMB_IRQHandler		I2C0_IRQHandler	//!< SMBus interrupt handler
  86:../drivers/BatteryMon.c **** #define MEASURE_VD_PORT		gpioPortD	//!< Port to enable voltage divider
ARM GAS  /tmp/ccpirqce.s 			page 50


  87:../drivers/BatteryMon.c **** #define MEASURE_VD_PIN		1		//!< Pin for voltage divider
  88:../drivers/BatteryMon.c **** #define MEASURE_ADC_PORT	gpioPortD	//!< Port to enable voltage divider
  89:../drivers/BatteryMon.c **** #define MEASURE_ADC_PIN		1		//!< Pin for voltage divider
  90:../drivers/BatteryMon.c **** //@}
  91:../drivers/BatteryMon.c **** 
  92:../drivers/BatteryMon.c ****     /*!@brief I2C Transfer Timeout (500ms) in RTC ticks */
  93:../drivers/BatteryMon.c **** #define I2C_XFER_TIMEOUT	(RTC_COUNTS_PER_SEC / 2)
  94:../drivers/BatteryMon.c **** 
  95:../drivers/BatteryMon.c ****     /*!@brief I2C Recovery Timeout (5s) in RTC ticks */
  96:../drivers/BatteryMon.c **** #define I2C_RECOVERY_TIMEOUT	(RTC_COUNTS_PER_SEC * 5)
  97:../drivers/BatteryMon.c **** 
  98:../drivers/BatteryMon.c **** /*================================== Macros ==================================*/
  99:../drivers/BatteryMon.c **** 
 100:../drivers/BatteryMon.c **** #ifndef LOGGING		// define as empty, if logging is not enabled
 101:../drivers/BatteryMon.c ****     #define LogError(str)
 102:../drivers/BatteryMon.c **** #endif
 103:../drivers/BatteryMon.c **** 
 104:../drivers/BatteryMon.c **** /*================================ Local Data ================================*/
 105:../drivers/BatteryMon.c **** 
 106:../drivers/BatteryMon.c ****     /* Defining the SMBus initialization data */
 107:../drivers/BatteryMon.c **** static I2C_Init_TypeDef smbInit =
 108:../drivers/BatteryMon.c **** {
 109:../drivers/BatteryMon.c ****   .enable   = true,		// Enable controller after initialization
 110:../drivers/BatteryMon.c ****   .master   = true,		// Configure for MASTER mode
 111:../drivers/BatteryMon.c ****   .refFreq  = 0,		// Get clock frequency from clock source
 112:../drivers/BatteryMon.c ****   .freq     = 10000,		// Low frequency because of long SMBus wires
 113:../drivers/BatteryMon.c ****   .clhr     = i2cClockHLRStandard,	// Set to use 4:4 low/high duty cycle
 114:../drivers/BatteryMon.c **** };
 115:../drivers/BatteryMon.c **** 
 116:../drivers/BatteryMon.c ****     /* Status of the last SMBus transaction */
 117:../drivers/BatteryMon.c **** static volatile I2C_TransferReturn_TypeDef SMB_Status;
 118:../drivers/BatteryMon.c **** 
 119:../drivers/BatteryMon.c **** /*=========================== Forward Declarations ===========================*/
 120:../drivers/BatteryMon.c **** 
 121:../drivers/BatteryMon.c **** static void	ADC_Config(void);
 122:../drivers/BatteryMon.c **** 
 123:../drivers/BatteryMon.c **** 
 124:../drivers/BatteryMon.c **** /***************************************************************************//**
 125:../drivers/BatteryMon.c ****  *
 126:../drivers/BatteryMon.c ****  * @brief	Initialize the battery monitoring module
 127:../drivers/BatteryMon.c ****  *
 128:../drivers/BatteryMon.c ****  * This routine initializes the board-specific SMBus (I2C) interface, which
 129:../drivers/BatteryMon.c ****  * is connected to the battery pack.
 130:../drivers/BatteryMon.c ****  *
 131:../drivers/BatteryMon.c ****  ******************************************************************************/
 132:../drivers/BatteryMon.c **** void	 BatteryMonInit (void)
 133:../drivers/BatteryMon.c **** {
 248              		.loc 5 133 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 08B5     		push	{r3, lr}
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 3, -8
 255              		.cfi_offset 14, -4
 134:../drivers/BatteryMon.c ****     /* Be sure to enable clock to GPIO (should already be done) */
 135:../drivers/BatteryMon.c ****     CMU_ClockEnable (cmuClock_GPIO, true);
ARM GAS  /tmp/ccpirqce.s 			page 51


 256              		.loc 5 135 0
 257 0002 1448     		ldr	r0, .L17
 258 0004 0121     		movs	r1, #1
 259 0006 FFF7FEFF 		bl	CMU_ClockEnable
 136:../drivers/BatteryMon.c **** 
 137:../drivers/BatteryMon.c ****     /* Enable clock for I2C controller and ADC */
 138:../drivers/BatteryMon.c ****     CMU_ClockEnable(SMB_I2C_CMUCLOCK, true);
 260              		.loc 5 138 0
 261 000a 1348     		ldr	r0, .L17+4
 262 000c 0121     		movs	r1, #1
 263 000e FFF7FEFF 		bl	CMU_ClockEnable
 139:../drivers/BatteryMon.c ****     CMU_ClockEnable(cmuClock_ADC0, true);
 264              		.loc 5 139 0
 265 0012 1248     		ldr	r0, .L17+8
 266 0014 0121     		movs	r1, #1
 267 0016 FFF7FEFF 		bl	CMU_ClockEnable
 140:../drivers/BatteryMon.c **** 
 141:../drivers/BatteryMon.c **** #if 0	//RAGE: We currently use the internal Vdd/3 channel, see ReadVdd()
 142:../drivers/BatteryMon.c ****     /* Configure GPIO to enable voltage divider for local 3V measurements */
 143:../drivers/BatteryMon.c ****     GPIO_PinModeSet (MEASURE_VD_PORT, MEASURE_VD_PIN, gpioModePushPull, 0);
 144:../drivers/BatteryMon.c **** 
 145:../drivers/BatteryMon.c ****     /* Configure GPIO as analog input for local 3V measurements */
 146:../drivers/BatteryMon.c ****     GPIO_PinModeSet (MEASURE_ADC_PORT, MEASURE_ADC_PIN, gpioModePushPull, 0);
 147:../drivers/BatteryMon.c **** #endif
 148:../drivers/BatteryMon.c **** 
 149:../drivers/BatteryMon.c ****     /* Configure GPIOs for SMBus (I2C) functionality with Pull-Ups */
 150:../drivers/BatteryMon.c ****     GPIO_PinModeSet (SMB_GPIOPORT, SMB_SCL_PIN, gpioModeWiredAndPullUp, 1);
 268              		.loc 5 150 0
 269 001a 0020     		movs	r0, #0
 270 001c 0121     		movs	r1, #1
 271 001e 0A22     		movs	r2, #10
 272 0020 0123     		movs	r3, #1
 273 0022 FFF7FEFF 		bl	GPIO_PinModeSet
 151:../drivers/BatteryMon.c ****     GPIO_PinModeSet (SMB_GPIOPORT, SMB_SDA_PIN, gpioModeWiredAndPullUp, 1);
 274              		.loc 5 151 0
 275 0026 0020     		movs	r0, #0
 276 0028 0021     		movs	r1, #0
 277 002a 0A22     		movs	r2, #10
 278 002c 0123     		movs	r3, #1
 279 002e FFF7FEFF 		bl	GPIO_PinModeSet
 152:../drivers/BatteryMon.c **** 
 153:../drivers/BatteryMon.c ****     /* Route SMB signals to the respective pins */
 154:../drivers/BatteryMon.c ****     SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | I2C_ROUTE_SDAPEN | SMB_LOC;
 280              		.loc 5 154 0
 281 0032 0B4B     		ldr	r3, .L17+12
 282 0034 0322     		movs	r2, #3
 283 0036 9A63     		str	r2, [r3, #56]
 155:../drivers/BatteryMon.c **** 
 156:../drivers/BatteryMon.c ****     /* Initialize SMBus (I2C) controller */
 157:../drivers/BatteryMon.c ****     I2C_Init (SMB_I2C_CTRL, &smbInit);
 284              		.loc 5 157 0
 285 0038 0948     		ldr	r0, .L17+12
 286 003a 0A49     		ldr	r1, .L17+16
 287 003c FFF7FEFF 		bl	I2C_Init
 158:../drivers/BatteryMon.c **** 
 159:../drivers/BatteryMon.c ****     /* Clear and enable SMBus interrupt */
 160:../drivers/BatteryMon.c ****     NVIC_ClearPendingIRQ (SMB_IRQn);
ARM GAS  /tmp/ccpirqce.s 			page 52


 288              		.loc 5 160 0
 289 0040 0820     		movs	r0, #8
 290 0042 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 161:../drivers/BatteryMon.c ****     NVIC_EnableIRQ (SMB_IRQn);
 291              		.loc 5 161 0
 292 0046 0820     		movs	r0, #8
 293 0048 FFF7FEFF 		bl	NVIC_EnableIRQ
 162:../drivers/BatteryMon.c **** 
 163:../drivers/BatteryMon.c ****     /* Initialize ADC to measure local voltage VDD/3 */
 164:../drivers/BatteryMon.c ****     ADC_Config();
 294              		.loc 5 164 0
 295 004c FFF7FEFF 		bl	ADC_Config
 165:../drivers/BatteryMon.c **** }
 296              		.loc 5 165 0
 297 0050 08BD     		pop	{r3, pc}
 298              	.L18:
 299 0052 00BF     		.align	2
 300              	.L17:
 301 0054 00C20200 		.word	180736
 302 0058 00F20200 		.word	193024
 303 005c 00E20200 		.word	188928
 304 0060 00A00040 		.word	1073782784
 305 0064 00000000 		.word	smbInit
 306              		.cfi_endproc
 307              	.LFE122:
 309              		.section	.text.BatteryMonDeinit,"ax",%progbits
 310              		.align	2
 311              		.global	BatteryMonDeinit
 312              		.thumb
 313              		.thumb_func
 315              	BatteryMonDeinit:
 316              	.LFB123:
 166:../drivers/BatteryMon.c **** 
 167:../drivers/BatteryMon.c **** 
 168:../drivers/BatteryMon.c **** /***************************************************************************//**
 169:../drivers/BatteryMon.c ****  *
 170:../drivers/BatteryMon.c ****  * @brief	De-Initialize the battery monitoring module
 171:../drivers/BatteryMon.c ****  *
 172:../drivers/BatteryMon.c ****  * This routine brings the SMBus (I2C) interface, which is connected to the
 173:../drivers/BatteryMon.c ****  * battery pack, into a quiescent state.
 174:../drivers/BatteryMon.c ****  *
 175:../drivers/BatteryMon.c ****  ******************************************************************************/
 176:../drivers/BatteryMon.c **** void	 BatteryMonDeinit (void)
 177:../drivers/BatteryMon.c **** {
 317              		.loc 5 177 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 08B5     		push	{r3, lr}
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 3, -8
 324              		.cfi_offset 14, -4
 178:../drivers/BatteryMon.c ****     /* Make sure conversion is not in progress */
 179:../drivers/BatteryMon.c ****     ADC0->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;
 325              		.loc 5 179 0
 326 0002 0A4B     		ldr	r3, .L20
 327 0004 0A22     		movs	r2, #10
ARM GAS  /tmp/ccpirqce.s 			page 53


 328 0006 5A60     		str	r2, [r3, #4]
 180:../drivers/BatteryMon.c **** 
 181:../drivers/BatteryMon.c ****     /* Disable SMBus interrupt */
 182:../drivers/BatteryMon.c ****     NVIC_DisableIRQ (SMB_IRQn);
 329              		.loc 5 182 0
 330 0008 0820     		movs	r0, #8
 331 000a FFF7FEFF 		bl	NVIC_DisableIRQ
 183:../drivers/BatteryMon.c **** 
 184:../drivers/BatteryMon.c ****     /* Reset SMBus controller */
 185:../drivers/BatteryMon.c ****     I2C_Reset (SMB_I2C_CTRL);
 332              		.loc 5 185 0
 333 000e 0848     		ldr	r0, .L20+4
 334 0010 FFF7FEFF 		bl	I2C_Reset
 186:../drivers/BatteryMon.c **** 
 187:../drivers/BatteryMon.c ****     /* Reset ADC */
 188:../drivers/BatteryMon.c ****     I2C_Reset (SMB_I2C_CTRL);
 335              		.loc 5 188 0
 336 0014 0648     		ldr	r0, .L20+4
 337 0016 FFF7FEFF 		bl	I2C_Reset
 189:../drivers/BatteryMon.c **** 
 190:../drivers/BatteryMon.c ****     /* Disable clock for I2C controller and ADC */
 191:../drivers/BatteryMon.c ****     CMU_ClockEnable(SMB_I2C_CMUCLOCK, false);
 338              		.loc 5 191 0
 339 001a 0648     		ldr	r0, .L20+8
 340 001c 0021     		movs	r1, #0
 341 001e FFF7FEFF 		bl	CMU_ClockEnable
 192:../drivers/BatteryMon.c ****     CMU_ClockEnable(cmuClock_ADC0, false);
 342              		.loc 5 192 0
 343 0022 0548     		ldr	r0, .L20+12
 344 0024 0021     		movs	r1, #0
 345 0026 FFF7FEFF 		bl	CMU_ClockEnable
 193:../drivers/BatteryMon.c **** }
 346              		.loc 5 193 0
 347 002a 08BD     		pop	{r3, pc}
 348              	.L21:
 349              		.align	2
 350              	.L20:
 351 002c 00200040 		.word	1073750016
 352 0030 00A00040 		.word	1073782784
 353 0034 00F20200 		.word	193024
 354 0038 00E20200 		.word	188928
 355              		.cfi_endproc
 356              	.LFE123:
 358              		.section	.text.I2C0_IRQHandler,"ax",%progbits
 359              		.align	2
 360              		.global	I2C0_IRQHandler
 361              		.thumb
 362              		.thumb_func
 364              	I2C0_IRQHandler:
 365              	.LFB124:
 194:../drivers/BatteryMon.c **** 
 195:../drivers/BatteryMon.c **** 
 196:../drivers/BatteryMon.c **** /***************************************************************************//**
 197:../drivers/BatteryMon.c ****  *
 198:../drivers/BatteryMon.c ****  * @brief	SMBus Interrupt Handler
 199:../drivers/BatteryMon.c ****  *
 200:../drivers/BatteryMon.c ****  * This handler is executed for each byte transferred via the SMBus interface.
ARM GAS  /tmp/ccpirqce.s 			page 54


 201:../drivers/BatteryMon.c ****  * It calls the driver function I2C_Transfer() to prepare the next data byte,
 202:../drivers/BatteryMon.c ****  * or generate a STOP condition at the end of a transfer.
 203:../drivers/BatteryMon.c ****  *
 204:../drivers/BatteryMon.c ****  ******************************************************************************/
 205:../drivers/BatteryMon.c **** void	 SMB_IRQHandler (void)
 206:../drivers/BatteryMon.c **** {
 366              		.loc 5 206 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370 0000 08B5     		push	{r3, lr}
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 3, -8
 373              		.cfi_offset 14, -4
 207:../drivers/BatteryMon.c ****     /* Update <SMB_Status> */
 208:../drivers/BatteryMon.c ****     SMB_Status = I2C_Transfer (SMB_I2C_CTRL);
 374              		.loc 5 208 0
 375 0002 0448     		ldr	r0, .L23
 376 0004 FFF7FEFF 		bl	I2C_Transfer
 377 0008 0346     		mov	r3, r0
 378 000a 1A46     		mov	r2, r3
 379 000c 024B     		ldr	r3, .L23+4
 380 000e 1A70     		strb	r2, [r3]
 209:../drivers/BatteryMon.c **** }
 381              		.loc 5 209 0
 382 0010 08BD     		pop	{r3, pc}
 383              	.L24:
 384 0012 00BF     		.align	2
 385              	.L23:
 386 0014 00A00040 		.word	1073782784
 387 0018 00000000 		.word	SMB_Status
 388              		.cfi_endproc
 389              	.LFE124:
 391              		.section	.text.SMB_Reset,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 396              	SMB_Reset:
 397              	.LFB125:
 210:../drivers/BatteryMon.c **** 
 211:../drivers/BatteryMon.c **** 
 212:../drivers/BatteryMon.c **** /***************************************************************************//**
 213:../drivers/BatteryMon.c ****  *
 214:../drivers/BatteryMon.c ****  * @brief	SMBus Reset
 215:../drivers/BatteryMon.c ****  *
 216:../drivers/BatteryMon.c ****  * This internal routine aborts the current I2C-bus transfer and tries to
 217:../drivers/BatteryMon.c ****  * recover from a state where SCL is driven low by the battery controller.
 218:../drivers/BatteryMon.c ****  * It should be called if there occurs a timeout of a transfer.
 219:../drivers/BatteryMon.c ****  *
 220:../drivers/BatteryMon.c ****  ******************************************************************************/
 221:../drivers/BatteryMon.c **** static void  SMB_Reset (void)
 222:../drivers/BatteryMon.c **** {
 398              		.loc 5 222 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccpirqce.s 			page 55


 403              		.cfi_def_cfa_offset 4
 404              		.cfi_offset 14, -4
 405 0002 83B0     		sub	sp, sp, #12
 406              		.cfi_def_cfa_offset 16
 223:../drivers/BatteryMon.c ****     LogError("SMB_Reset: Try to recover from invalid state");
 224:../drivers/BatteryMon.c **** 
 225:../drivers/BatteryMon.c ****     /* abort the current transfer */
 226:../drivers/BatteryMon.c ****     SMB_I2C_CTRL->CMD = I2C_CMD_ABORT;
 407              		.loc 5 226 0
 408 0004 154B     		ldr	r3, .L30
 409 0006 2022     		movs	r2, #32
 410 0008 5A60     		str	r2, [r3, #4]
 227:../drivers/BatteryMon.c ****     msDelay(100);
 411              		.loc 5 227 0
 412 000a 6420     		movs	r0, #100
 413 000c FFF7FEFF 		bl	msDelay
 228:../drivers/BatteryMon.c **** 
 229:../drivers/BatteryMon.c ****     /* check if SCL is still low */
 230:../drivers/BatteryMon.c ****     if ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
 414              		.loc 5 230 0
 415 0010 134B     		ldr	r3, .L30+4
 416 0012 DB69     		ldr	r3, [r3, #28]
 417 0014 03F00203 		and	r3, r3, #2
 418 0018 002B     		cmp	r3, #0
 419 001a 1CD1     		bne	.L25
 420              	.LBB6:
 231:../drivers/BatteryMon.c ****     {
 232:../drivers/BatteryMon.c **** 	/* drive SDA low */
 233:../drivers/BatteryMon.c **** 	GPIO->P[SMB_GPIOPORT].DOUTCLR = (1 << SMB_SDA_PIN);
 421              		.loc 5 233 0
 422 001c 104B     		ldr	r3, .L30+4
 423 001e 0122     		movs	r2, #1
 424 0020 5A61     		str	r2, [r3, #20]
 234:../drivers/BatteryMon.c **** 	SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | SMB_LOC;
 425              		.loc 5 234 0
 426 0022 0E4B     		ldr	r3, .L30
 427 0024 0222     		movs	r2, #2
 428 0026 9A63     		str	r2, [r3, #56]
 235:../drivers/BatteryMon.c **** 
 236:../drivers/BatteryMon.c **** 	/* wait until SCL returns to high */
 237:../drivers/BatteryMon.c **** 	uint32_t start = RTC->CNT;
 429              		.loc 5 237 0
 430 0028 0E4B     		ldr	r3, .L30+8
 431 002a 5B68     		ldr	r3, [r3, #4]
 432 002c 0193     		str	r3, [sp, #4]
 238:../drivers/BatteryMon.c **** 	while ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
 433              		.loc 5 238 0
 434 002e 09E0     		b	.L27
 435              	.L29:
 239:../drivers/BatteryMon.c **** 	{
 240:../drivers/BatteryMon.c **** 	    /* check for timeout */
 241:../drivers/BatteryMon.c **** 	    if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_RECOVERY_TIMEOUT)
 436              		.loc 5 241 0
 437 0030 0C4B     		ldr	r3, .L30+8
 438 0032 5A68     		ldr	r2, [r3, #4]
 439 0034 019B     		ldr	r3, [sp, #4]
 440 0036 D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccpirqce.s 			page 56


 441 0038 23F07F43 		bic	r3, r3, #-16777216
 442 003c B3F5203F 		cmp	r3, #163840
 443 0040 00D9     		bls	.L27
 242:../drivers/BatteryMon.c **** 	    {
 243:../drivers/BatteryMon.c **** 		LogError("SMB_Reset: Recovery failed, giving up");
 244:../drivers/BatteryMon.c **** 		break;
 444              		.loc 5 244 0
 445 0042 05E0     		b	.L28
 446              	.L27:
 238:../drivers/BatteryMon.c **** 	while ((GPIO->P[SMB_GPIOPORT].DIN & (1 << SMB_SCL_PIN)) == 0)
 447              		.loc 5 238 0 discriminator 1
 448 0044 064B     		ldr	r3, .L30+4
 449 0046 DB69     		ldr	r3, [r3, #28]
 450 0048 03F00203 		and	r3, r3, #2
 451 004c 002B     		cmp	r3, #0
 452 004e EFD0     		beq	.L29
 453              	.L28:
 245:../drivers/BatteryMon.c **** 	    }
 246:../drivers/BatteryMon.c **** 	}
 247:../drivers/BatteryMon.c **** 
 248:../drivers/BatteryMon.c **** 	/* re-configure GPIO as SDA signal */
 249:../drivers/BatteryMon.c **** 	SMB_I2C_CTRL->ROUTE = I2C_ROUTE_SCLPEN | I2C_ROUTE_SDAPEN | SMB_LOC;
 454              		.loc 5 249 0
 455 0050 024B     		ldr	r3, .L30
 456 0052 0322     		movs	r2, #3
 457 0054 9A63     		str	r2, [r3, #56]
 458              	.L25:
 459              	.LBE6:
 250:../drivers/BatteryMon.c ****     }
 251:../drivers/BatteryMon.c **** }
 460              		.loc 5 251 0
 461 0056 03B0     		add	sp, sp, #12
 462              		@ sp needed
 463 0058 5DF804FB 		ldr	pc, [sp], #4
 464              	.L31:
 465              		.align	2
 466              	.L30:
 467 005c 00A00040 		.word	1073782784
 468 0060 00600040 		.word	1073766400
 469 0064 00000840 		.word	1074266112
 470              		.cfi_endproc
 471              	.LFE125:
 473              		.section	.rodata
 474              		.align	2
 475              	.LC0:
 476 0000 2E2E2F64 		.ascii	"../drivers/BatteryMon.c\000"
 476      72697665 
 476      72732F42 
 476      61747465 
 476      72794D6F 
 477              		.section	.text.BatteryRegReadWord,"ax",%progbits
 478              		.align	2
 479              		.global	BatteryRegReadWord
 480              		.thumb
 481              		.thumb_func
 483              	BatteryRegReadWord:
 484              	.LFB126:
ARM GAS  /tmp/ccpirqce.s 			page 57


 252:../drivers/BatteryMon.c **** 
 253:../drivers/BatteryMon.c **** 
 254:../drivers/BatteryMon.c **** /***************************************************************************//**
 255:../drivers/BatteryMon.c ****  *
 256:../drivers/BatteryMon.c ****  * @brief	Read Word Register from the Battery Controller
 257:../drivers/BatteryMon.c ****  *
 258:../drivers/BatteryMon.c ****  * This routine reads two bytes from the register address specified by @p cmd,
 259:../drivers/BatteryMon.c ****  * assembles them to a 16bit value, and returns this.  If an error occured,
 260:../drivers/BatteryMon.c ****  * a negative status code is returned instead.
 261:../drivers/BatteryMon.c ****  *
 262:../drivers/BatteryMon.c ****  * @param[in] cmd
 263:../drivers/BatteryMon.c ****  *	SBS command, i.e. the register address to be read.
 264:../drivers/BatteryMon.c ****  *
 265:../drivers/BatteryMon.c ****  * @return
 266:../drivers/BatteryMon.c ****  *	Value of the 16bit register, or a negative error code of type @ref
 267:../drivers/BatteryMon.c ****  *	I2C_TransferReturn_TypeDef.  Additionally to those codes, there is
 268:../drivers/BatteryMon.c ****  *	another error code defined, named @ref i2cTransferTimeout.
 269:../drivers/BatteryMon.c ****  *
 270:../drivers/BatteryMon.c ****  * @see
 271:../drivers/BatteryMon.c ****  *	BatteryRegReadBlock()
 272:../drivers/BatteryMon.c ****  *
 273:../drivers/BatteryMon.c ****  ******************************************************************************/
 274:../drivers/BatteryMon.c **** int	 BatteryRegReadWord (SBS_CMD cmd)
 275:../drivers/BatteryMon.c **** {
 485              		.loc 5 275 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 40
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 00B5     		push	{lr}
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 14, -4
 492 0002 8BB0     		sub	sp, sp, #44
 493              		.cfi_def_cfa_offset 48
 494 0004 0346     		mov	r3, r0
 495 0006 ADF80630 		strh	r3, [sp, #6]	@ movhi
 276:../drivers/BatteryMon.c **** I2C_TransferSeq_TypeDef smbXfer;	// SMBus transfer data
 277:../drivers/BatteryMon.c **** uint8_t addrBuf[1];			// buffer for device address (0x0A)
 278:../drivers/BatteryMon.c **** uint8_t dataBuf[2];			// buffer for data read from the device
 279:../drivers/BatteryMon.c **** 
 280:../drivers/BatteryMon.c **** 
 281:../drivers/BatteryMon.c ****     /* Check parameter */
 282:../drivers/BatteryMon.c ****     EFM_ASSERT ((cmd & ~0xFF) == 0);	// size field must be 0
 496              		.loc 5 282 0
 497 000a BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 498 000e 23F0FF03 		bic	r3, r3, #255
 499 0012 9BB2     		uxth	r3, r3
 500 0014 002B     		cmp	r3, #0
 501 0016 04D0     		beq	.L33
 502              		.loc 5 282 0 is_stmt 0 discriminator 1
 503 0018 2D48     		ldr	r0, .L40
 504 001a 4FF48D71 		mov	r1, #282
 505 001e FFF7FEFF 		bl	assertEFM
 506              	.L33:
 283:../drivers/BatteryMon.c **** 
 284:../drivers/BatteryMon.c ****     /* Set up SMBus transfer */
 285:../drivers/BatteryMon.c ****     smbXfer.addr  = 0x0A;		// I2C address of the Battery Controller
 507              		.loc 5 285 0 is_stmt 1
ARM GAS  /tmp/ccpirqce.s 			page 58


 508 0022 0A23     		movs	r3, #10
 509 0024 ADF81030 		strh	r3, [sp, #16]	@ movhi
 286:../drivers/BatteryMon.c ****     smbXfer.flags = I2C_FLAG_WRITE_READ; // need write and read
 510              		.loc 5 286 0
 511 0028 0423     		movs	r3, #4
 512 002a ADF81230 		strh	r3, [sp, #18]	@ movhi
 287:../drivers/BatteryMon.c ****     smbXfer.buf[0].data = addrBuf;	// first write device I2C address
 513              		.loc 5 287 0
 514 002e 03AB     		add	r3, sp, #12
 515 0030 0593     		str	r3, [sp, #20]
 288:../drivers/BatteryMon.c ****     addrBuf[0] = cmd;
 516              		.loc 5 288 0
 517 0032 BDF80630 		ldrh	r3, [sp, #6]	@ movhi
 518 0036 DBB2     		uxtb	r3, r3
 519 0038 8DF80C30 		strb	r3, [sp, #12]
 289:../drivers/BatteryMon.c ****     smbXfer.buf[0].len  = 1;		// 1 byte for I2C address
 520              		.loc 5 289 0
 521 003c 0123     		movs	r3, #1
 522 003e ADF81830 		strh	r3, [sp, #24]	@ movhi
 290:../drivers/BatteryMon.c ****     smbXfer.buf[1].data = dataBuf;	// where to store read data
 523              		.loc 5 290 0
 524 0042 02AB     		add	r3, sp, #8
 525 0044 0793     		str	r3, [sp, #28]
 291:../drivers/BatteryMon.c ****     smbXfer.buf[1].len  = 2;		// read 2 bytes from register
 526              		.loc 5 291 0
 527 0046 0223     		movs	r3, #2
 528 0048 ADF82030 		strh	r3, [sp, #32]	@ movhi
 292:../drivers/BatteryMon.c **** 
 293:../drivers/BatteryMon.c ****     /* Start I2C Transfer */
 294:../drivers/BatteryMon.c ****     SMB_Status = I2C_TransferInit (SMB_I2C_CTRL, &smbXfer);
 529              		.loc 5 294 0
 530 004c 04AB     		add	r3, sp, #16
 531 004e 2148     		ldr	r0, .L40+4
 532 0050 1946     		mov	r1, r3
 533 0052 FFF7FEFF 		bl	I2C_TransferInit
 534 0056 0346     		mov	r3, r0
 535 0058 1A46     		mov	r2, r3
 536 005a 1F4B     		ldr	r3, .L40+8
 537 005c 1A70     		strb	r2, [r3]
 295:../drivers/BatteryMon.c **** 
 296:../drivers/BatteryMon.c ****     /* Check early status */
 297:../drivers/BatteryMon.c ****     if (SMB_Status < 0)
 538              		.loc 5 297 0
 539 005e 1E4B     		ldr	r3, .L40+8
 540 0060 1B78     		ldrb	r3, [r3]
 541 0062 DBB2     		uxtb	r3, r3
 542 0064 5BB2     		sxtb	r3, r3
 543 0066 002B     		cmp	r3, #0
 544 0068 04DA     		bge	.L34
 298:../drivers/BatteryMon.c **** 	return SMB_Status;		// return error code
 545              		.loc 5 298 0
 546 006a 1B4B     		ldr	r3, .L40+8
 547 006c 1B78     		ldrb	r3, [r3]
 548 006e DBB2     		uxtb	r3, r3
 549 0070 5BB2     		sxtb	r3, r3
 550 0072 29E0     		b	.L39
 551              	.L34:
ARM GAS  /tmp/ccpirqce.s 			page 59


 299:../drivers/BatteryMon.c **** 
 300:../drivers/BatteryMon.c ****     /* Wait until data is complete or time out */
 301:../drivers/BatteryMon.c ****     uint32_t start = RTC->CNT;
 552              		.loc 5 301 0
 553 0074 194B     		ldr	r3, .L40+12
 554 0076 5B68     		ldr	r3, [r3, #4]
 555 0078 0993     		str	r3, [sp, #36]
 302:../drivers/BatteryMon.c ****     while (SMB_Status == i2cTransferInProgress)
 556              		.loc 5 302 0
 557 007a 0FE0     		b	.L36
 558              	.L37:
 303:../drivers/BatteryMon.c ****     {
 304:../drivers/BatteryMon.c **** 	/* Enter EM1 while waiting for I2C interrupt */
 305:../drivers/BatteryMon.c **** 	EMU_EnterEM1();
 559              		.loc 5 305 0
 560 007c FFF7FEFF 		bl	EMU_EnterEM1
 306:../drivers/BatteryMon.c **** 
 307:../drivers/BatteryMon.c **** 	/* check for timeout */
 308:../drivers/BatteryMon.c **** 	if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_XFER_TIMEOUT)
 561              		.loc 5 308 0
 562 0080 164B     		ldr	r3, .L40+12
 563 0082 5A68     		ldr	r2, [r3, #4]
 564 0084 099B     		ldr	r3, [sp, #36]
 565 0086 D31A     		subs	r3, r2, r3
 566 0088 23F07F43 		bic	r3, r3, #-16777216
 567 008c B3F5804F 		cmp	r3, #16384
 568 0090 04D9     		bls	.L36
 309:../drivers/BatteryMon.c **** 	{
 310:../drivers/BatteryMon.c **** 	    SMB_Reset();
 569              		.loc 5 310 0
 570 0092 FFF7FEFF 		bl	SMB_Reset
 311:../drivers/BatteryMon.c **** 	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
 571              		.loc 5 311 0
 572 0096 104B     		ldr	r3, .L40+8
 573 0098 F622     		movs	r2, #246
 574 009a 1A70     		strb	r2, [r3]
 575              	.L36:
 302:../drivers/BatteryMon.c ****     while (SMB_Status == i2cTransferInProgress)
 576              		.loc 5 302 0 discriminator 1
 577 009c 0E4B     		ldr	r3, .L40+8
 578 009e 1B78     		ldrb	r3, [r3]
 579 00a0 DBB2     		uxtb	r3, r3
 580 00a2 5BB2     		sxtb	r3, r3
 581 00a4 012B     		cmp	r3, #1
 582 00a6 E9D0     		beq	.L37
 312:../drivers/BatteryMon.c **** 	}
 313:../drivers/BatteryMon.c ****     }
 314:../drivers/BatteryMon.c **** 
 315:../drivers/BatteryMon.c ****     /* Check final status */
 316:../drivers/BatteryMon.c ****     if (SMB_Status != i2cTransferDone)
 583              		.loc 5 316 0
 584 00a8 0B4B     		ldr	r3, .L40+8
 585 00aa 1B78     		ldrb	r3, [r3]
 586 00ac DBB2     		uxtb	r3, r3
 587 00ae 002B     		cmp	r3, #0
 588 00b0 04D0     		beq	.L38
 317:../drivers/BatteryMon.c ****     {
ARM GAS  /tmp/ccpirqce.s 			page 60


 318:../drivers/BatteryMon.c **** 	return SMB_Status;
 589              		.loc 5 318 0
 590 00b2 094B     		ldr	r3, .L40+8
 591 00b4 1B78     		ldrb	r3, [r3]
 592 00b6 DBB2     		uxtb	r3, r3
 593 00b8 5BB2     		sxtb	r3, r3
 594 00ba 05E0     		b	.L39
 595              	.L38:
 319:../drivers/BatteryMon.c ****     }
 320:../drivers/BatteryMon.c **** 
 321:../drivers/BatteryMon.c ****     /* Assign data for return value in LSB/MSB manner */
 322:../drivers/BatteryMon.c ****     return (dataBuf[1] << 8) | dataBuf[0];	// return 16 bit data
 596              		.loc 5 322 0
 597 00bc 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 598 00c0 1A02     		lsls	r2, r3, #8
 599 00c2 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 600 00c6 1343     		orrs	r3, r3, r2
 601              	.L39:
 323:../drivers/BatteryMon.c **** }
 602              		.loc 5 323 0
 603 00c8 1846     		mov	r0, r3
 604 00ca 0BB0     		add	sp, sp, #44
 605              		@ sp needed
 606 00cc 5DF804FB 		ldr	pc, [sp], #4
 607              	.L41:
 608              		.align	2
 609              	.L40:
 610 00d0 00000000 		.word	.LC0
 611 00d4 00A00040 		.word	1073782784
 612 00d8 00000000 		.word	SMB_Status
 613 00dc 00000840 		.word	1074266112
 614              		.cfi_endproc
 615              	.LFE126:
 617              		.section	.text.BatteryRegReadBlock,"ax",%progbits
 618              		.align	2
 619              		.global	BatteryRegReadBlock
 620              		.thumb
 621              		.thumb_func
 623              	BatteryRegReadBlock:
 624              	.LFB127:
 324:../drivers/BatteryMon.c **** 
 325:../drivers/BatteryMon.c **** 
 326:../drivers/BatteryMon.c **** /***************************************************************************//**
 327:../drivers/BatteryMon.c ****  *
 328:../drivers/BatteryMon.c ****  * @brief	Read Data Block from the Battery Controller
 329:../drivers/BatteryMon.c ****  *
 330:../drivers/BatteryMon.c ****  * This routine reads an amount of bytes from the battery controller, as
 331:../drivers/BatteryMon.c ****  * specified by parameter cmd.  This contains the register address and number
 332:../drivers/BatteryMon.c ****  * of bytes to read.
 333:../drivers/BatteryMon.c ****  *
 334:../drivers/BatteryMon.c ****  * @param[in] cmd
 335:../drivers/BatteryMon.c ****  *	SBS command, i.e. the register address and number of bytes to read.
 336:../drivers/BatteryMon.c ****  *
 337:../drivers/BatteryMon.c ****  * @param[out] pBuf
 338:../drivers/BatteryMon.c ****  *	Address of a buffer where to store the data.
 339:../drivers/BatteryMon.c ****  *
 340:../drivers/BatteryMon.c ****  * @param[in] bufSize
ARM GAS  /tmp/ccpirqce.s 			page 61


 341:../drivers/BatteryMon.c ****  *	Buffer size in number of bytes.
 342:../drivers/BatteryMon.c ****  *
 343:../drivers/BatteryMon.c ****  * @return
 344:../drivers/BatteryMon.c ****  *	Status code @ref i2cTransferDone (0), or a negative error code of type
 345:../drivers/BatteryMon.c ****  *	@ref I2C_TransferReturn_TypeDef.  Additionally to those codes, there is
 346:../drivers/BatteryMon.c ****  *	another error code defined, named @ref i2cTransferTimeout.
 347:../drivers/BatteryMon.c ****  *
 348:../drivers/BatteryMon.c ****  * @see
 349:../drivers/BatteryMon.c ****  *	BatteryRegReadWord()
 350:../drivers/BatteryMon.c ****  *
 351:../drivers/BatteryMon.c ****  ******************************************************************************/
 352:../drivers/BatteryMon.c **** int	BatteryRegReadBlock (SBS_CMD cmd, uint8_t *pBuf, size_t bufSize)
 353:../drivers/BatteryMon.c **** {
 625              		.loc 5 353 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 48
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629 0000 00B5     		push	{lr}
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 14, -4
 632 0002 8DB0     		sub	sp, sp, #52
 633              		.cfi_def_cfa_offset 56
 634 0004 0346     		mov	r3, r0
 635 0006 0291     		str	r1, [sp, #8]
 636 0008 0192     		str	r2, [sp, #4]
 637 000a ADF80E30 		strh	r3, [sp, #14]	@ movhi
 354:../drivers/BatteryMon.c **** I2C_TransferSeq_TypeDef smbXfer;	// SMBus transfer data
 355:../drivers/BatteryMon.c **** uint8_t addrBuf[1];			// buffer for device address (0x0A)
 356:../drivers/BatteryMon.c **** 
 357:../drivers/BatteryMon.c **** 
 358:../drivers/BatteryMon.c ****     /* Check parameters */
 359:../drivers/BatteryMon.c ****     EFM_ASSERT ((cmd & ~0xFF) != 0);	// size field must not be 0
 638              		.loc 5 359 0
 639 000e BDF80E30 		ldrh	r3, [sp, #14]	@ movhi
 640 0012 23F0FF03 		bic	r3, r3, #255
 641 0016 9BB2     		uxth	r3, r3
 642 0018 002B     		cmp	r3, #0
 643 001a 04D1     		bne	.L43
 644              		.loc 5 359 0 is_stmt 0 discriminator 1
 645 001c 3A48     		ldr	r0, .L52
 646 001e 40F26711 		movw	r1, #359
 647 0022 FFF7FEFF 		bl	assertEFM
 648              	.L43:
 360:../drivers/BatteryMon.c ****     EFM_ASSERT (pBuf != NULL);		// buffer address
 649              		.loc 5 360 0 is_stmt 1
 650 0026 029B     		ldr	r3, [sp, #8]
 651 0028 002B     		cmp	r3, #0
 652 002a 04D1     		bne	.L44
 653              		.loc 5 360 0 is_stmt 0 discriminator 1
 654 002c 3648     		ldr	r0, .L52
 655 002e 4FF4B471 		mov	r1, #360
 656 0032 FFF7FEFF 		bl	assertEFM
 657              	.L44:
 361:../drivers/BatteryMon.c ****     EFM_ASSERT (bufSize >= SBS_CMD_SIZE(cmd));	// buffer size
 658              		.loc 5 361 0 is_stmt 1
 659 0036 BDF90E30 		ldrsh	r3, [sp, #14]
 660 003a 1B12     		asrs	r3, r3, #8
ARM GAS  /tmp/ccpirqce.s 			page 62


 661 003c 9BB2     		uxth	r3, r3
 662 003e 9BB2     		uxth	r3, r3
 663 0040 DAB2     		uxtb	r2, r3
 664 0042 019B     		ldr	r3, [sp, #4]
 665 0044 9A42     		cmp	r2, r3
 666 0046 04D9     		bls	.L45
 667              		.loc 5 361 0 is_stmt 0 discriminator 1
 668 0048 2F48     		ldr	r0, .L52
 669 004a 40F26911 		movw	r1, #361
 670 004e FFF7FEFF 		bl	assertEFM
 671              	.L45:
 362:../drivers/BatteryMon.c **** 
 363:../drivers/BatteryMon.c ****     if (bufSize < SBS_CMD_SIZE(cmd))	// if EFM_ASSERT() is empty
 672              		.loc 5 363 0 is_stmt 1
 673 0052 BDF90E30 		ldrsh	r3, [sp, #14]
 674 0056 1B12     		asrs	r3, r3, #8
 675 0058 9BB2     		uxth	r3, r3
 676 005a 9BB2     		uxth	r3, r3
 677 005c DAB2     		uxtb	r2, r3
 678 005e 019B     		ldr	r3, [sp, #4]
 679 0060 9A42     		cmp	r2, r3
 680 0062 02D9     		bls	.L46
 364:../drivers/BatteryMon.c **** 	return i2cInvalidParameter;
 681              		.loc 5 364 0
 682 0064 6FF00A03 		mvn	r3, #10
 683 0068 49E0     		b	.L51
 684              	.L46:
 365:../drivers/BatteryMon.c **** 
 366:../drivers/BatteryMon.c ****     /* Set up SMBus transfer */
 367:../drivers/BatteryMon.c ****     smbXfer.addr  = 0x0A;		// I2C address of the Battery Controller
 685              		.loc 5 367 0
 686 006a 0A23     		movs	r3, #10
 687 006c ADF81830 		strh	r3, [sp, #24]	@ movhi
 368:../drivers/BatteryMon.c ****     smbXfer.flags = I2C_FLAG_WRITE_READ; // need write and read
 688              		.loc 5 368 0
 689 0070 0423     		movs	r3, #4
 690 0072 ADF81A30 		strh	r3, [sp, #26]	@ movhi
 369:../drivers/BatteryMon.c ****     smbXfer.buf[0].data = addrBuf;	// first write device I2C address
 691              		.loc 5 369 0
 692 0076 05AB     		add	r3, sp, #20
 693 0078 0793     		str	r3, [sp, #28]
 370:../drivers/BatteryMon.c ****     addrBuf[0] = cmd;
 694              		.loc 5 370 0
 695 007a BDF80E30 		ldrh	r3, [sp, #14]	@ movhi
 696 007e DBB2     		uxtb	r3, r3
 697 0080 8DF81430 		strb	r3, [sp, #20]
 371:../drivers/BatteryMon.c ****     smbXfer.buf[0].len  = 1;		// 1 byte for I2C address
 698              		.loc 5 371 0
 699 0084 0123     		movs	r3, #1
 700 0086 ADF82030 		strh	r3, [sp, #32]	@ movhi
 372:../drivers/BatteryMon.c ****     smbXfer.buf[1].data = pBuf;		// where to store read data
 701              		.loc 5 372 0
 702 008a 029B     		ldr	r3, [sp, #8]
 703 008c 0993     		str	r3, [sp, #36]
 373:../drivers/BatteryMon.c ****     smbXfer.buf[1].len  = SBS_CMD_SIZE(cmd);	// number of bytes to read
 704              		.loc 5 373 0
 705 008e BDF80E30 		ldrh	r3, [sp, #14]
ARM GAS  /tmp/ccpirqce.s 			page 63


 706 0092 1B0A     		lsrs	r3, r3, #8
 707 0094 9BB2     		uxth	r3, r3
 708 0096 ADF82830 		strh	r3, [sp, #40]	@ movhi
 374:../drivers/BatteryMon.c **** 
 375:../drivers/BatteryMon.c ****     /* Start I2C Transfer */
 376:../drivers/BatteryMon.c ****     SMB_Status = I2C_TransferInit (SMB_I2C_CTRL, &smbXfer);
 709              		.loc 5 376 0
 710 009a 06AB     		add	r3, sp, #24
 711 009c 1B48     		ldr	r0, .L52+4
 712 009e 1946     		mov	r1, r3
 713 00a0 FFF7FEFF 		bl	I2C_TransferInit
 714 00a4 0346     		mov	r3, r0
 715 00a6 1A46     		mov	r2, r3
 716 00a8 194B     		ldr	r3, .L52+8
 717 00aa 1A70     		strb	r2, [r3]
 377:../drivers/BatteryMon.c **** 
 378:../drivers/BatteryMon.c ****     /* Check early status */
 379:../drivers/BatteryMon.c ****     if (SMB_Status < 0)
 718              		.loc 5 379 0
 719 00ac 184B     		ldr	r3, .L52+8
 720 00ae 1B78     		ldrb	r3, [r3]
 721 00b0 DBB2     		uxtb	r3, r3
 722 00b2 5BB2     		sxtb	r3, r3
 723 00b4 002B     		cmp	r3, #0
 724 00b6 04DA     		bge	.L48
 380:../drivers/BatteryMon.c **** 	return SMB_Status;		// return error code
 725              		.loc 5 380 0
 726 00b8 154B     		ldr	r3, .L52+8
 727 00ba 1B78     		ldrb	r3, [r3]
 728 00bc DBB2     		uxtb	r3, r3
 729 00be 5BB2     		sxtb	r3, r3
 730 00c0 1DE0     		b	.L51
 731              	.L48:
 381:../drivers/BatteryMon.c **** 
 382:../drivers/BatteryMon.c ****     /* Wait until data is complete or time out */
 383:../drivers/BatteryMon.c ****     uint32_t start = RTC->CNT;
 732              		.loc 5 383 0
 733 00c2 144B     		ldr	r3, .L52+12
 734 00c4 5B68     		ldr	r3, [r3, #4]
 735 00c6 0B93     		str	r3, [sp, #44]
 384:../drivers/BatteryMon.c ****     while (SMB_Status == i2cTransferInProgress)
 736              		.loc 5 384 0
 737 00c8 0FE0     		b	.L49
 738              	.L50:
 385:../drivers/BatteryMon.c ****     {
 386:../drivers/BatteryMon.c **** 	/* Enter EM1 while waiting for I2C interrupt */
 387:../drivers/BatteryMon.c **** 	EMU_EnterEM1();
 739              		.loc 5 387 0
 740 00ca FFF7FEFF 		bl	EMU_EnterEM1
 388:../drivers/BatteryMon.c **** 
 389:../drivers/BatteryMon.c **** 	/* check for timeout */
 390:../drivers/BatteryMon.c **** 	if (((RTC->CNT - start) & 0x00FFFFFF) > I2C_XFER_TIMEOUT)
 741              		.loc 5 390 0
 742 00ce 114B     		ldr	r3, .L52+12
 743 00d0 5A68     		ldr	r2, [r3, #4]
 744 00d2 0B9B     		ldr	r3, [sp, #44]
 745 00d4 D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccpirqce.s 			page 64


 746 00d6 23F07F43 		bic	r3, r3, #-16777216
 747 00da B3F5804F 		cmp	r3, #16384
 748 00de 04D9     		bls	.L49
 391:../drivers/BatteryMon.c **** 	{
 392:../drivers/BatteryMon.c **** 	    SMB_Reset();
 749              		.loc 5 392 0
 750 00e0 FFF7FEFF 		bl	SMB_Reset
 393:../drivers/BatteryMon.c **** 	    SMB_Status = (I2C_TransferReturn_TypeDef)i2cTransferTimeout;
 751              		.loc 5 393 0
 752 00e4 0A4B     		ldr	r3, .L52+8
 753 00e6 F622     		movs	r2, #246
 754 00e8 1A70     		strb	r2, [r3]
 755              	.L49:
 384:../drivers/BatteryMon.c ****     while (SMB_Status == i2cTransferInProgress)
 756              		.loc 5 384 0 discriminator 1
 757 00ea 094B     		ldr	r3, .L52+8
 758 00ec 1B78     		ldrb	r3, [r3]
 759 00ee DBB2     		uxtb	r3, r3
 760 00f0 5BB2     		sxtb	r3, r3
 761 00f2 012B     		cmp	r3, #1
 762 00f4 E9D0     		beq	.L50
 394:../drivers/BatteryMon.c **** 	}
 395:../drivers/BatteryMon.c ****     }
 396:../drivers/BatteryMon.c **** 
 397:../drivers/BatteryMon.c ****     /* Return final status */
 398:../drivers/BatteryMon.c ****     return SMB_Status;
 763              		.loc 5 398 0
 764 00f6 064B     		ldr	r3, .L52+8
 765 00f8 1B78     		ldrb	r3, [r3]
 766 00fa DBB2     		uxtb	r3, r3
 767 00fc 5BB2     		sxtb	r3, r3
 768              	.L51:
 399:../drivers/BatteryMon.c **** }
 769              		.loc 5 399 0
 770 00fe 1846     		mov	r0, r3
 771 0100 0DB0     		add	sp, sp, #52
 772              		@ sp needed
 773 0102 5DF804FB 		ldr	pc, [sp], #4
 774              	.L53:
 775 0106 00BF     		.align	2
 776              	.L52:
 777 0108 00000000 		.word	.LC0
 778 010c 00A00040 		.word	1073782784
 779 0110 00000000 		.word	SMB_Status
 780 0114 00000840 		.word	1074266112
 781              		.cfi_endproc
 782              	.LFE127:
 784              		.section	.text.ADC_Config,"ax",%progbits
 785              		.align	2
 786              		.thumb
 787              		.thumb_func
 789              	ADC_Config:
 790              	.LFB128:
 400:../drivers/BatteryMon.c **** 
 401:../drivers/BatteryMon.c **** 
 402:../drivers/BatteryMon.c **** /***************************************************************************//**
 403:../drivers/BatteryMon.c ****  *
ARM GAS  /tmp/ccpirqce.s 			page 65


 404:../drivers/BatteryMon.c ****  * @brief	ADC Configuration
 405:../drivers/BatteryMon.c ****  *
 406:../drivers/BatteryMon.c ****  * This routine configures the ADC to measure the internal VDD/3 voltage,
 407:../drivers/BatteryMon.c ****  * see AN0021 for more information.
 408:../drivers/BatteryMon.c ****  *
 409:../drivers/BatteryMon.c ****  ******************************************************************************/
 410:../drivers/BatteryMon.c **** static void ADC_Config(void)
 411:../drivers/BatteryMon.c **** {
 791              		.loc 5 411 0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 24
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 795 0000 00B5     		push	{lr}
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 14, -4
 798 0002 87B0     		sub	sp, sp, #28
 799              		.cfi_def_cfa_offset 32
 412:../drivers/BatteryMon.c **** ADC_Init_TypeDef       init       = ADC_INIT_DEFAULT;
 800              		.loc 5 412 0
 801 0004 0023     		movs	r3, #0
 802 0006 8DF81030 		strb	r3, [sp, #16]
 803 000a 0023     		movs	r3, #0
 804 000c 8DF81130 		strb	r3, [sp, #17]
 805 0010 0023     		movs	r3, #0
 806 0012 8DF81230 		strb	r3, [sp, #18]
 807 0016 1F23     		movs	r3, #31
 808 0018 8DF81330 		strb	r3, [sp, #19]
 809 001c 0023     		movs	r3, #0
 810 001e 8DF81430 		strb	r3, [sp, #20]
 811 0022 0023     		movs	r3, #0
 812 0024 8DF81530 		strb	r3, [sp, #21]
 413:../drivers/BatteryMon.c **** ADC_InitSingle_TypeDef singleInit = ADC_INITSINGLE_DEFAULT;
 813              		.loc 5 413 0
 814 0028 0023     		movs	r3, #0
 815 002a 8DF80430 		strb	r3, [sp, #4]
 816 002e 0023     		movs	r3, #0
 817 0030 8DF80530 		strb	r3, [sp, #5]
 818 0034 0023     		movs	r3, #0
 819 0036 8DF80630 		strb	r3, [sp, #6]
 820 003a 0023     		movs	r3, #0
 821 003c 8DF80730 		strb	r3, [sp, #7]
 822 0040 0023     		movs	r3, #0
 823 0042 8DF80830 		strb	r3, [sp, #8]
 824 0046 0023     		movs	r3, #0
 825 0048 8DF80930 		strb	r3, [sp, #9]
 826 004c 0023     		movs	r3, #0
 827 004e 8DF80A30 		strb	r3, [sp, #10]
 828 0052 0023     		movs	r3, #0
 829 0054 8DF80B30 		strb	r3, [sp, #11]
 830 0058 0023     		movs	r3, #0
 831 005a 8DF80C30 		strb	r3, [sp, #12]
 414:../drivers/BatteryMon.c **** 
 415:../drivers/BatteryMon.c **** 
 416:../drivers/BatteryMon.c ****     /* Init common settings for both single conversion and scan mode */
 417:../drivers/BatteryMon.c ****     init.timebase = ADC_TimebaseCalc(0);
 832              		.loc 5 417 0
 833 005e 0020     		movs	r0, #0
ARM GAS  /tmp/ccpirqce.s 			page 66


 834 0060 FFF7FEFF 		bl	ADC_TimebaseCalc
 835 0064 0346     		mov	r3, r0
 836 0066 8DF81330 		strb	r3, [sp, #19]
 418:../drivers/BatteryMon.c ****     /* Might as well finish conversion as quickly as possibly since polling */
 419:../drivers/BatteryMon.c ****     /* for completion. */
 420:../drivers/BatteryMon.c ****     /* Set ADC clock to 7 MHz, use default HFPERCLK */
 421:../drivers/BatteryMon.c ****     init.prescale = ADC_PrescaleCalc(7000000, 0);
 837              		.loc 5 421 0
 838 006a 1048     		ldr	r0, .L55
 839 006c 0021     		movs	r1, #0
 840 006e FFF7FEFF 		bl	ADC_PrescaleCalc
 841 0072 0346     		mov	r3, r0
 842 0074 8DF81430 		strb	r3, [sp, #20]
 422:../drivers/BatteryMon.c **** 
 423:../drivers/BatteryMon.c ****     /* WARMUPMODE must be set to Normal according to ref manual before */
 424:../drivers/BatteryMon.c ****     /* entering EM2. In this example, the warmup time is not a big problem */
 425:../drivers/BatteryMon.c ****     /* due to relatively infrequent polling. Leave at default NORMAL, */
 426:../drivers/BatteryMon.c **** 
 427:../drivers/BatteryMon.c ****     ADC_Init(ADC0, &init);
 843              		.loc 5 427 0
 844 0078 04AB     		add	r3, sp, #16
 845 007a 0D48     		ldr	r0, .L55+4
 846 007c 1946     		mov	r1, r3
 847 007e FFF7FEFF 		bl	ADC_Init
 428:../drivers/BatteryMon.c **** 
 429:../drivers/BatteryMon.c ****     /* Init for single conversion use, measure VDD/3 with 1.25 reference. */
 430:../drivers/BatteryMon.c ****     singleInit.reference  = adcRef1V25;
 848              		.loc 5 430 0
 849 0082 0023     		movs	r3, #0
 850 0084 8DF80630 		strb	r3, [sp, #6]
 431:../drivers/BatteryMon.c ****     singleInit.input      = adcSingleInpVDDDiv3;
 851              		.loc 5 431 0
 852 0088 0923     		movs	r3, #9
 853 008a 8DF80830 		strb	r3, [sp, #8]
 432:../drivers/BatteryMon.c ****     singleInit.resolution = adcRes12Bit;
 854              		.loc 5 432 0
 855 008e 0023     		movs	r3, #0
 856 0090 8DF80730 		strb	r3, [sp, #7]
 433:../drivers/BatteryMon.c **** 
 434:../drivers/BatteryMon.c ****     /* The datasheet specifies a minimum aquisition time when sampling vdd/3 */
 435:../drivers/BatteryMon.c ****     /* 32 cycles should be safe for all ADC clock frequencies */
 436:../drivers/BatteryMon.c ****     singleInit.acqTime = adcAcqTime32;
 857              		.loc 5 436 0
 858 0094 0523     		movs	r3, #5
 859 0096 8DF80530 		strb	r3, [sp, #5]
 437:../drivers/BatteryMon.c **** 
 438:../drivers/BatteryMon.c ****     ADC_InitSingle(ADC0, &singleInit);
 860              		.loc 5 438 0
 861 009a 01AB     		add	r3, sp, #4
 862 009c 0448     		ldr	r0, .L55+4
 863 009e 1946     		mov	r1, r3
 864 00a0 FFF7FEFF 		bl	ADC_InitSingle
 439:../drivers/BatteryMon.c **** }
 865              		.loc 5 439 0
 866 00a4 07B0     		add	sp, sp, #28
 867              		@ sp needed
 868 00a6 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccpirqce.s 			page 67


 869              	.L56:
 870 00aa 00BF     		.align	2
 871              	.L55:
 872 00ac C0CF6A00 		.word	7000000
 873 00b0 00200040 		.word	1073750016
 874              		.cfi_endproc
 875              	.LFE128:
 877              		.section	.text.ReadVdd,"ax",%progbits
 878              		.align	2
 879              		.global	ReadVdd
 880              		.thumb
 881              		.thumb_func
 883              	ReadVdd:
 884              	.LFB129:
 440:../drivers/BatteryMon.c **** 
 441:../drivers/BatteryMon.c **** 
 442:../drivers/BatteryMon.c **** /***************************************************************************//**
 443:../drivers/BatteryMon.c ****  *
 444:../drivers/BatteryMon.c ****  * @brief	Read VDD
 445:../drivers/BatteryMon.c ****  *
 446:../drivers/BatteryMon.c ****  * This routine measures the internal VDD/3 channel via ADC0, to obtain the
 447:../drivers/BatteryMon.c ****  * voltage of the local CR3032 supply battery.  The value is converted to
 448:../drivers/BatteryMon.c ****  * milli volts [mV].
 449:../drivers/BatteryMon.c ****  *
 450:../drivers/BatteryMon.c ****  * @return
 451:../drivers/BatteryMon.c ****  *	VDD value in [mV].
 452:../drivers/BatteryMon.c ****  *
 453:../drivers/BatteryMon.c ****  ******************************************************************************/
 454:../drivers/BatteryMon.c **** uint32_t ReadVdd (void)
 455:../drivers/BatteryMon.c **** {
 885              		.loc 5 455 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 8
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889 0000 00B5     		push	{lr}
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 14, -4
 892 0002 83B0     		sub	sp, sp, #12
 893              		.cfi_def_cfa_offset 16
 456:../drivers/BatteryMon.c **** uint32_t    value;
 457:../drivers/BatteryMon.c **** 
 458:../drivers/BatteryMon.c **** 
 459:../drivers/BatteryMon.c ****     ADC_Start(ADC0, adcStartSingle);
 894              		.loc 5 459 0
 895 0004 0D48     		ldr	r0, .L60
 896 0006 0121     		movs	r1, #1
 897 0008 FFF7FEFF 		bl	ADC_Start
 460:../drivers/BatteryMon.c **** 
 461:../drivers/BatteryMon.c ****     /* Wait while conversion is active */
 462:../drivers/BatteryMon.c ****     while (ADC0->STATUS & ADC_STATUS_SINGLEACT) ;
 898              		.loc 5 462 0
 899 000c 00BF     		nop
 900              	.L58:
 901              		.loc 5 462 0 is_stmt 0 discriminator 1
 902 000e 0B4B     		ldr	r3, .L60
 903 0010 9B68     		ldr	r3, [r3, #8]
 904 0012 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccpirqce.s 			page 68


 905 0016 002B     		cmp	r3, #0
 906 0018 F9D1     		bne	.L58
 463:../drivers/BatteryMon.c **** 
 464:../drivers/BatteryMon.c ****     /* Get ADC result */
 465:../drivers/BatteryMon.c ****     value = ADC_DataSingleGet(ADC0);
 907              		.loc 5 465 0 is_stmt 1
 908 001a 0848     		ldr	r0, .L60
 909 001c FFF7FEFF 		bl	ADC_DataSingleGet
 910 0020 0190     		str	r0, [sp, #4]
 466:../drivers/BatteryMon.c **** 
 467:../drivers/BatteryMon.c ****     /* Calculate supply voltage relative to 1.25V reference */
 468:../drivers/BatteryMon.c ****     value = (value * 1250 * 3) / 4096;
 911              		.loc 5 468 0
 912 0022 019B     		ldr	r3, [sp, #4]
 913 0024 40F6A662 		movw	r2, #3750
 914 0028 02FB03F3 		mul	r3, r2, r3
 915 002c 1B0B     		lsrs	r3, r3, #12
 916 002e 0193     		str	r3, [sp, #4]
 469:../drivers/BatteryMon.c **** 
 470:../drivers/BatteryMon.c ****     return value;
 917              		.loc 5 470 0
 918 0030 019B     		ldr	r3, [sp, #4]
 471:../drivers/BatteryMon.c **** }
 919              		.loc 5 471 0
 920 0032 1846     		mov	r0, r3
 921 0034 03B0     		add	sp, sp, #12
 922              		@ sp needed
 923 0036 5DF804FB 		ldr	pc, [sp], #4
 924              	.L61:
 925 003a 00BF     		.align	2
 926              	.L60:
 927 003c 00200040 		.word	1073750016
 928              		.cfi_endproc
 929              	.LFE129:
 931              		.text
 932              	.Letext0:
 933              		.file 6 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 934              		.file 7 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 935              		.file 8 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 936              		.file 9 "../Device/EnergyMicro/EFM32G/Include/efm32g_rtc.h"
 937              		.file 10 "../Device/EnergyMicro/EFM32G/Include/efm32g_gpio_p.h"
 938              		.file 11 "../Device/EnergyMicro/EFM32G/Include/efm32g_gpio.h"
 939              		.file 12 "../Device/EnergyMicro/EFM32G/Include/efm32g_adc.h"
 940              		.file 13 "../Device/EnergyMicro/EFM32G/Include/efm32g_i2c.h"
 941              		.file 14 "../emlib/inc/em_cmu.h"
 942              		.file 15 "../emlib/inc/em_i2c.h"
 943              		.file 16 "../emlib/inc/em_gpio.h"
 944              		.file 17 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/lib/gcc/arm-none-eabi/4.8.4/include/stddef.h"
 945              		.file 18 "../drivers/BatteryMon.h"
